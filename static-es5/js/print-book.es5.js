(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibliographyDB = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _common = require("../common");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FW_LOCALSTORAGE_VERSION = "1.0";

var BibliographyDB = exports.BibliographyDB = function () {
    function BibliographyDB(docOwnerId, useLocalStorage, oldDB, oldCats) {
        _classCallCheck(this, BibliographyDB);

        this.docOwnerId = docOwnerId;
        this.useLocalStorage = useLocalStorage; // Whether to use local storage to cache result

        if (oldDB) {
            this.db = oldDB;
        } else {
            this.db = {};
        }
        if (oldCats) {
            this.cats = oldCats;
        } else {
            this.cats = [];
        }
    }

    /** Get the bibliography from the server and create as this.db.
     * @function getDB
     */

    _createClass(BibliographyDB, [{
        key: "getDB",
        value: function getDB() {
            var _this = this;

            var lastModified = -1,
                numberOfEntries = -1;

            if (this.useLocalStorage) {
                var _lastModified = parseInt(window.localStorage.getItem('last_modified_biblist')),
                    _numberOfEntries = parseInt(window.localStorage.getItem('number_of_entries')),
                    localStorageVersion = window.localStorage.getItem('version'),
                    localStorageOwnerId = parseInt(window.localStorage.getItem('owner_id'));

                // A dictionary to look up bib fields by their fw type name.
                // Needed for translation to CSL and Biblatex.
                //Fill BibDB

                if (_.isNaN(_lastModified)) {
                    _lastModified = -1;
                }

                if (_.isNaN(_numberOfEntries)) {
                    _numberOfEntries = -1;
                }

                if (localStorageVersion != FW_LOCALSTORAGE_VERSION || localStorageOwnerId != this.docOwnerId) {
                    _lastModified = -1;
                    _numberOfEntries = -1;
                }
            }

            (0, _common.activateWait)();
            return new Promise(function (resolve, reject) {
                jQuery.ajax({
                    url: '/bibliography/biblist/',
                    data: {
                        'owner_id': _this.docOwnerId,
                        'last_modified': lastModified,
                        'number_of_entries': numberOfEntries
                    },
                    type: 'POST',
                    dataType: 'json',
                    crossDomain: false, // obviates need for sameOrigin test
                    beforeSend: function beforeSend(xhr, settings) {
                        return xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                    },
                    success: function success(response, textStatus, jqXHR) {
                        var bibCats = response.bibCategories;
                        bibCats.forEach(function (bibCat) {
                            _this.cats.push(bibCat);
                        });

                        var bibList = [];

                        if (_this.useLocalStorage) {
                            if (response.hasOwnProperty('bibList')) {
                                bibList = response.bibList;
                                try {
                                    window.localStorage.setItem('biblist', JSON.stringify(response.bibList));
                                    window.localStorage.setItem('last_modified_biblist', response.last_modified);
                                    window.localStorage.setItem('number_of_entries', response.number_of_entries);
                                    window.localStorage.setItem('owner_id', response.docOwnerId);
                                    window.localStorage.setItem('version', FW_LOCALSTORAGE_VERSION);
                                } catch (error) {
                                    // The local storage was likely too small
                                }
                            } else {
                                bibList = JSON.parse(window.localStorage.getItem('biblist'));
                            }
                        } else {
                            bibList = response.bibList;
                        }
                        var bibPKs = [];
                        for (var i = 0; i < bibList.length; i++) {
                            bibPKs.push(_this.serverBibItemToBibDB(bibList[i]));
                        }
                        resolve({ bibPKs: bibPKs, bibCats: bibCats });
                    },
                    error: function error(jqXHR, textStatus, errorThrown) {
                        (0, _common.addAlert)('error', jqXHR.responseText);
                        reject();
                    },
                    complete: function complete() {
                        return (0, _common.deactivateWait)();
                    }
                });
            });
        }

        /** Converts a bibliography item as it arrives from the server to a BibDB object.
         * @function serverBibItemToBibDB
         * @param item The bibliography item from the server.
         */

    }, {
        key: "serverBibItemToBibDB",
        value: function serverBibItemToBibDB(item) {
            var id = item['id'];
            var aBibDBEntry = {};
            aBibDBEntry['fields'] = JSON.parse(item['fields']);
            aBibDBEntry['bib_type'] = item['bib_type'];
            aBibDBEntry['entry_key'] = item['entry_key'];
            aBibDBEntry['entry_cat'] = JSON.parse(item['entry_cat']);
            this.db[id] = aBibDBEntry;
            return id;
        }

        /** Saves a bibliography entry to the database on the server.
         * @function saveBibEntries
         * @param tmpDB The bibliography DB with temporary IDs to be send to the server.
         */

    }, {
        key: "saveBibEntries",
        value: function saveBibEntries(tmpDB, isNew) {
            var _this2 = this;

            // Fields field need to be stringified for saving in database.
            // dbObject is a clone of tmpDB with a stringified fields-field, so
            // the original tmpDB isn't destroyed.
            var dbObject = {};
            Object.keys(tmpDB).forEach(function (bibKey) {
                dbObject[bibKey] = Object.assign({}, tmpDB[bibKey]);
                dbObject[bibKey].entry_cat = JSON.stringify(tmpDB[bibKey].entry_cat);
                dbObject[bibKey].fields = JSON.stringify(tmpDB[bibKey].fields);
            });
            var sendData = {
                is_new: isNew,
                bibs: JSON.stringify(dbObject)
            };
            if (this.docOwnerId !== 0) {
                sendData['owner_id'] = this.docOwnerId;
            }
            return new Promise(function (resolve, reject) {
                jQuery.ajax({
                    url: '/bibliography/save/',
                    data: sendData,
                    type: 'POST',
                    dataType: 'json',
                    crossDomain: false, // obviates need for sameOrigin test
                    beforeSend: function beforeSend(xhr, settings) {
                        return xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                    },
                    success: function success(response, textStatus, jqXHR) {
                        var ids = [];
                        response['id_translations'].forEach(function (bibTrans) {
                            _this2.db[bibTrans[1]] = tmpDB[bibTrans[0]];
                            ids.push(bibTrans[1]);
                        });
                        (0, _common.addAlert)('success', gettext('The bibliography has been updated.'));
                        resolve(ids);
                    },
                    error: function error(jqXHR, textStatus, errorThrown) {
                        (0, _common.addAlert)('error', errorThrown);
                        reject();
                    },
                    complete: function complete() {}
                });
            });
        }

        /** Update or create new category
         * @function createCategory
         * @param cats The category objects to add.
         */

    }, {
        key: "createCategory",
        value: function createCategory(cats) {
            var _this3 = this;

            var postData = {
                'ids[]': cats.ids,
                'titles[]': cats.titles
            };
            (0, _common.activateWait)();
            return new Promise(function (resolve, reject) {
                jQuery.ajax({
                    url: '/bibliography/save_category/',
                    data: postData,
                    type: 'POST',
                    dataType: 'json',
                    crossDomain: false, // obviates need for sameOrigin test
                    beforeSend: function beforeSend(xhr, settings) {
                        return xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                    },
                    success: function success(response, textStatus, jqXHR) {
                        if (jqXHR.status == 201) {
                            var bibCats = response.entries; // We receive both existing and new categories.
                            // Replace the old with the new categories, but don't lose the link to the array (so delete each, then add each).
                            while (_this3.cats.length > 0) {
                                _this3.cats.pop();
                            }
                            while (bibCats.length > 0) {
                                _this3.cats.push(bibCats.pop());
                            }
                            (0, _common.addAlert)('success', gettext('The categories have been updated'));
                            resolve(_this3.cats);
                        }
                    },
                    error: function error(jqXHR, textStatus, errorThrown) {
                        (0, _common.addAlert)('error', jqXHR.responseText);
                        reject();
                    },
                    complete: function complete() {
                        return (0, _common.deactivateWait)();
                    }
                });
            });
        }

        /** Delete a categories
         * @function deleteCategory
         * @param ids A list of ids to delete.
         */

    }, {
        key: "deleteCategory",
        value: function deleteCategory(ids) {
            var _this4 = this;

            var postData = {
                'ids[]': ids
            };
            return new Promise(function (resolve, reject) {
                jQuery.ajax({
                    url: '/bibliography/delete_category/',
                    data: postData,
                    type: 'POST',
                    dataType: 'json',
                    crossDomain: false, // obviates need for sameOrigin test
                    beforeSend: function beforeSend(xhr, settings) {
                        xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                    },
                    success: function success(response, textStatus, jqXHR) {
                        var deletedPks = ids.slice();
                        var deletedBibCats = [];
                        _this4.cats.forEach(function (bibCat) {
                            if (ids.indexOf(bibCat.id) !== -1) {
                                deletedBibCats.push(bibCat);
                            }
                        });
                        deletedBibCats.forEach(function (bibCat) {
                            var index = _this4.cats.indexOf(bibCat);
                            _this4.cats.splice(index, 1);
                        });
                        resolve(deletedPks);
                    }
                });
            });
        }

        /** Delete a list of bibliography items both locally and on the server.
         * @function deleteBibEntry
         * @param ids A list of bibliography item ids that are to be deleted.
         */

    }, {
        key: "deleteBibEntry",
        value: function deleteBibEntry(ids) {
            var _this5 = this;

            for (var i = 0; i < ids.length; i++) {
                ids[i] = parseInt(ids[i]);
            }
            var postData = {
                'ids[]': ids
            };
            (0, _common.activateWait)();
            return new Promise(function (resolve, reject) {
                jQuery.ajax({
                    url: '/bibliography/delete/',
                    data: postData,
                    type: 'POST',
                    crossDomain: false, // obviates need for sameOrigin test
                    beforeSend: function beforeSend(xhr, settings) {
                        return xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                    },
                    success: function success(response, textStatus, jqXHR) {
                        for (var _i = 0; _i < ids.length; _i++) {
                            delete _this5.db[ids[_i]];
                        }
                        (0, _common.addAlert)('success', gettext('The bibliography item(s) have been deleted'));
                        resolve(ids);
                    },
                    error: function error(jqXHR, textStatus, errorThrown) {
                        (0, _common.addAlert)('error', jqXHR.responseText);
                        reject();
                    },
                    complete: function complete() {
                        return (0, _common.deactivateWait)();
                    }
                });
            });
        }
    }]);

    return BibliographyDB;
}();

},{"../common":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.citeprocSys = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* Connects Fidus Writer citation system with citeproc */


var _citationDefinitions = require("../style/citation-definitions");

var _biblatexCslConverter = require("biblatex-csl-converter");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var citeprocSys = exports.citeprocSys = function () {
    function citeprocSys(bibDB) {
        _classCallCheck(this, citeprocSys);

        this.bibDB = bibDB;
        this.abbreviations = {
            "default": {}
        };
        this.abbrevsname = "default";
        // We cache values retrieved once.
        this.items = {};
        this.missingItems = [];
    }

    _createClass(citeprocSys, [{
        key: "retrieveItem",
        value: function retrieveItem(id) {
            if (!this.items[id]) {
                if (this.bibDB.db[id]) {
                    var cslGetter = new _biblatexCslConverter.CSLExporter(this.bibDB.db, [id]);
                    Object.assign(this.items, cslGetter.output);
                } else {
                    this.missingItems.push(id);
                    this.items[id] = { author: { literal: '' }, type: 'article', id: id };
                }
            }
            return this.items[id];
        }
    }, {
        key: "retrieveLocale",
        value: function retrieveLocale(lang) {
            if (_citationDefinitions.citationDefinitions.locals[lang]) {
                return _citationDefinitions.citationDefinitions.locals[lang];
            } else {
                return _citationDefinitions.citationDefinitions.locals['en-US'];
            }
        }
    }, {
        key: "getAbbreviation",
        value: function getAbbreviation(dummy, obj, jurisdiction, vartype, key) {
            try {
                if (this.abbreviations[this.abbrevsname][vartype][key]) {
                    obj["default"][vartype][key] = this.abbreviations[this.abbrevsname][vartype][key];
                } else {
                    obj["default"][vartype][key] = "";
                }
            } catch (error) {
                // There is breakage here that needs investigating.
            }
        }
    }]);

    return citeprocSys;
}();

},{"../style/citation-definitions":13,"biblatex-csl-converter":45}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FormatCitations = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _citeprocSys = require("./citeproc-sys");

var _citationDefinitions = require("../style/citation-definitions");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
* Use CSL and bibDB to format all citations for the given prosemirror json citation nodes
*/
var FormatCitations = exports.FormatCitations = function () {
    function FormatCitations(allCitationInfos, citationStyle, bibDB) {
        _classCallCheck(this, FormatCitations);

        this.allCitationInfos = allCitationInfos;
        this.citationStyle = citationStyle;
        this.bibDB = bibDB;
    }

    _createClass(FormatCitations, [{
        key: "init",
        value: function init() {
            this.bibliography = false;
            this.citations = [];
            this.bibFormats = [];
            this.citationTexts = [];
            this.citationType = '';
            this.formatAllCitations();
            return this.getFormattedCitations();
        }
    }, {
        key: "formatAllCitations",
        value: function formatAllCitations() {
            var that = this;
            this.allCitationInfos.forEach(function (cInfo) {
                that.bibFormats.push(cInfo.format);
                that.citations.push({
                    citationItems: cInfo.references,
                    properties: {
                        noteIndex: that.bibFormats.length
                    }
                });
            });
        }
    }, {
        key: "reloadCitations",
        value: function reloadCitations(missingItems) {
            var _this = this;

            // Not all citations could be found in the database.
            // Reload the database, but don't cycle if no new matches are found.
            return this.bibDB.getDB().then(function () {
                if (missingItems.some(function (item) {
                    return _this.bibDB.db.hasOwnProperty(item);
                })) {
                    return _this.init();
                } else {
                    return Promise.resolve();
                }
            });
        }
    }, {
        key: "getFormattedCitations",
        value: function getFormattedCitations() {
            if (_citationDefinitions.citationDefinitions.styles.hasOwnProperty(this.citationStyle)) {
                this.citationStyle = _citationDefinitions.citationDefinitions.styles[this.citationStyle];
            } else {
                for (var styleName in _citationDefinitions.citationDefinitions.styles) {
                    this.citationStyle = _citationDefinitions.citationDefinitions.styles[styleName];
                    break;
                }
            }
            var citeprocConnector = new _citeprocSys.citeprocSys(this.bibDB);
            var citeprocInstance = new CSL.Engine(citeprocConnector, this.citationStyle.definition);
            var allIds = [];
            this.citations.forEach(function (cit) {
                return cit.citationItems.forEach(function (item) {
                    return allIds.push('' + item.id);
                });
            });
            citeprocInstance.updateItems(allIds);

            var inText = citeprocInstance.cslXml.dataObj.attrs.class === 'in-text';
            var len = this.citations.length;
            for (var i = 0; i < len; i++) {
                var citation = this.citations[i],
                    citationText = citeprocInstance.appendCitationCluster(citation, true);
                if (inText && 'textcite' == this.bibFormats[i]) {
                    var newCiteText = '',
                        items = citation.citationItems,
                        len2 = items.length;

                    for (var j = 0; j < len2; j++) {
                        var onlyNameOption = [{
                            id: items[j].id,
                            "author-only": 1
                        }];

                        var onlyDateOption = [{
                            id: items[j].id,
                            "suppress-author": 1
                        }];

                        if (items[j].locator) {
                            onlyDateOption[0].locator = items[j].locator;
                        }

                        if (items[j].prefix) {
                            onlyDateOption[0].prefix = items[j].prefix;
                        }

                        if (0 < j) {
                            newCiteText += '; ';
                        }
                        newCiteText += citeprocInstance.makeCitationCluster(onlyNameOption);
                        newCiteText += ' ' + citeprocInstance.makeCitationCluster(onlyDateOption);
                    }
                    citationText[0].push(newCiteText);
                }
                this.citationTexts.push(citationText);
            }
            this.citationType = citeprocInstance.cslXml.dataObj.attrs.class;
            this.bibliography = citeprocInstance.makeBibliography();

            if (citeprocConnector.missingItems.length > 0) {
                return this.reloadCitations(citeprocConnector.missingItems);
            } else {
                return Promise.resolve();
            }
        }
    }, {
        key: "bibHTML",
        get: function get() {
            // HTML
            var html = '',
                bib = this.bibliography;
            html += '<h1 class="article-bibliography-header"></h1>';
            // Add entries to bibliography
            html += bib[0].bibstart + bib[1].join('') + bib[0].bibend;
            return html;
        }

        // CSS

    }, {
        key: "bibCSS",
        get: function get() {
            var css = '\n',
                bibInfo = this.bibliography[0];
            css += ".csl-entry {margin-bottom: " + (bibInfo.entryspacing + 1) + "em;}\n";
            css += ".csl-bib-body {line-height: " + bibInfo.linespacing + ";}\n";
            if (bibInfo.hangingindent) {
                css += "\n                    .csl-entry {\n                        text-indent: -0.5in;\n                        margin-left: 0.5in;\n                    }\n";
            } else if (bibInfo["second-field-align"] === 'margin') {
                css += "\n                    .csl-left-margin {\n                        text-indent: -" + bibInfo.maxoffset + "ch;\n                        width: " + bibInfo.maxoffset + "ch;\n                    }\n                ";
            } else if (bibInfo["second-field-align"] === 'flush') {
                css += "\n                    .csl-left-margin {\n                        width: " + bibInfo.maxoffset + "ch;\n                    }\n                ";
            }
            return css;
        }
    }]);

    return FormatCitations;
}();

},{"../style/citation-definitions":13,"./citeproc-sys":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RenderCitations = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _format = require('./format');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Render citations into the DOM.
 */

var RenderCitations = exports.RenderCitations = function () {
    function RenderCitations(contentElement, citationStyle, bibDB) {
        var renderNoteCitations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

        _classCallCheck(this, RenderCitations);

        this.contentElement = contentElement;
        this.citationStyle = citationStyle;
        this.bibDB = bibDB;
        this.renderNoteCitations = renderNoteCitations;
        this.allCitationNodes = [];
        this.allCitationInfos = [];
        this.fm = false;
    }

    _createClass(RenderCitations, [{
        key: 'init',
        value: function init() {
            var _this = this;

            this.allCitationNodes = [].slice.call(jQuery(this.contentElement).find('span.citation'));
            this.allCitationNodes.forEach(function (cElement) {
                var citeInfo = Object.assign({}, cElement.dataset);
                citeInfo.references = JSON.parse(citeInfo.references);
                _this.allCitationInfos.push(citeInfo);
            });
            this.fm = new _format.FormatCitations(this.allCitationInfos, this.citationStyle, this.bibDB);
            return this.fm.init().then(function () {
                if (_this.renderNoteCitations || 'note' !== _this.fm.citationType) {
                    _this.renderCitations();
                }
                return Promise.resolve();
            });
        }
    }, {
        key: 'renderCitations',
        value: function renderCitations() {
            var _this2 = this;

            this.fm.citationTexts.forEach(function (citText, index) {
                var citationText = citText[citText.length - 1][1];
                if ('note' === _this2.fm.citationType) {
                    citationText = '<span class="pagination-footnote"><span><span>' + citationText + '</span></span></span>';
                }
                _this2.allCitationNodes[index].innerHTML = citationText;
            });
        }
    }]);

    return RenderCitations;
}();

},{"./format":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/** Creates a dropdown box.
 * @param btn The button to open and close the dropdown box.
 * @param box The node containing the contents of the dropdown box.
 */

var addDropdownBox = exports.addDropdownBox = function addDropdownBox(btn, box) {
    btn.bind('mousedown', function (event) {
        event.preventDefault();
        if (btn.hasClass('disabled')) {
            return;
        }
        if ('none' == box.css('display')) {
            openDropdownBox(box);
        }
    });
};

/** Opens a dropdown box.
 * @param box The node containing the contents of the dropdown box.
 */

var openDropdownBox = function openDropdownBox(box) {
    // Show this box
    box.show();
    // Give that the dropdown menu was opened through a mousedown event, there
    // will be a first click event following it. We will wait for the second
    // click event.
    jQuery(document).one('click', function () {
        jQuery(document).one('click', function (event) {
            event.preventDefault();
            box.hide();
        });
    });
};

/** Checkes or uncheckes a checkable label. This is used for example for bibliography categories when editing bibliography items.
 * @param label The node who's parent has to be checked or unchecked.
 */
var setCheckableLabel = exports.setCheckableLabel = function setCheckableLabel(label) {
    var checkbox = label.parent().find('input[type=checkbox]');
    if (label.hasClass('checked')) {
        label.removeClass('checked');
    } else {
        label.addClass('checked');
    }
};

/** Cover the page signaling to the user to wait.
 */
var activateWait = exports.activateWait = function activateWait() {
    jQuery('#wait').addClass('active');
};

/** Remove the wait cover.
 */
var deactivateWait = exports.deactivateWait = function deactivateWait() {
    jQuery('#wait').removeClass('active');
};

/** Show a message to the user.
 * @param alertType The type of message that is shown (error, warning, info or success).
 * @param alertMsg The message text.
 */
var addAlert = exports.addAlert = function addAlert(alertType, alertMsg) {
    var fadeSpeed = 300;
    var iconNames = {
        'error': 'icon-attention-circle',
        'warning': 'icon-attention-circle',
        'info': 'icon-info-circle',
        'success': 'icon-ok'
    };
    var alertBox = jQuery('<li class="alerts-' + alertType + ' ' + iconNames[alertType] + '">' + alertMsg + '</li>');
    if (0 === jQuery('#alerts-outer-wrapper').length) jQuery('body').append('<div id="alerts-outer-wrapper"><ul id="alerts-wrapper"></ul></div>');
    jQuery('#alerts-wrapper').append(alertBox);
    alertBox.fadeTo(fadeSpeed, 1, function () {
        jQuery(this).delay('2000').fadeOut(fadeSpeed, function () {
            jQuery(this).remove();
        });
    });
};

/** Turn milliseconds since epoch (UTC) into a local date string.
 * @param {number} milliseconds Number of milliseconds since epoch (1/1/1970 midnight, UTC).
 * @param {boolean} sortable Whether the result should appear in a date only list.
 */
var localizeDate = exports.localizeDate = function localizeDate(milliseconds, sortable) {
    milliseconds = parseInt(milliseconds);
    if (milliseconds > 0) {
        var theDate = new Date(milliseconds);
        if (true === sortable) {
            var yyyy = theDate.getFullYear(),
                mm = theDate.getMonth() + 1,
                dd = theDate.getDate();

            if (10 > mm) {
                mm = '0' + mm;
            }

            return yyyy + '/' + mm + '/' + dd;
        } else {
            return theDate.toLocaleString();
        }
    } else {
        return '';
    }
};

/** Get cookie to set as part of the request header of all AJAX requests to the server.
 * @param name The name of the token to look for in the cookie.
 */
var getCookie = exports.getCookie = function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) == name + '=') {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
};

/**
 * The Cross Site Request Forgery (CSRF) token
 */
var csrfToken = exports.csrfToken = getCookie('csrftoken');

/**
 * Turn string literals into single line, removing spaces at start of line
 */

var noSpaceTmp = exports.noSpaceTmp = function noSpaceTmp(strings) {
    var values = [].slice.call(arguments);
    var tmpStrings = [].slice.call(values.shift());

    var combined = "";
    while (tmpStrings.length > 0 || values.length > 0) {
        if (tmpStrings.length > 0) {
            combined += tmpStrings.shift();
        }
        if (values.length > 0) {
            combined += values.shift();
        }
    }

    var out = "";
    combined.split('\n').forEach(function (line) {
        out += line.replace(/^\s*/g, '');
    });
    return out;
};

/**
 * Return a cancel promise if you need to cancel a promise chain. Import as
 * ES6 promises are not (yet) cancelable.
 */

var cancelPromise = exports.cancelPromise = function cancelPromise() {
    return new Promise(function () {});
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.katexRender = katexRender;

var _katex = require('katex');

function katexRender(formula, node, options) {
    try {
        (0, _katex.render)(formula, node, options);
    } catch (error) {
        if (error.name === 'ParseError') {
            node.innerHTML = gettext('Formula Error!');
        } else {
            throw error;
        }
    }
}

},{"katex":146}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PrintBook = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templates = require("./templates");

var _document = require("../schema/document");

var _render = require("../citations/render");

var _database = require("../bibliography/database");

var _common = require("../common");

var _paginateForPrint = require("paginate-for-print/dist/paginate-for-print");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Helper functions for the book print page.
*/

var PrintBook = exports.PrintBook = function () {
    // A class that contains everything that happens on the book print page.
    // It is currently not possible to initialize more thna one editor class, as it
    // contains bindings to menu items, etc. that are uniquely defined.
    function PrintBook() {
        _classCallCheck(this, PrintBook);

        this.pageSizes = {
            folio: {
                width: 12,
                height: 15
            },
            quarto: {
                width: 9.5,
                height: 12
            },
            octavo: {
                width: 6,
                height: 9
            },
            a5: {
                width: 5.83,
                height: 8.27
            },
            a4: {
                width: 8.27,
                height: 11.69
            }
        };
        this.documentOwners = [];
        this.printConfig = {
            flowFromElement: document.getElementById('flow'),
            enableFrontmatter: true,
            sectionStartSelector: 'div.part',
            sectionTitleSelector: 'h1',
            chapterStartSelector: 'div.chapter',
            chapterTitleSelector: 'h1',
            alwaysEven: true,
            autoStart: false,
            topfloatSelector: 'figure',
            contentsBottomMargin: 1
        };

        this.bindEvents();
    }

    _createClass(PrintBook, [{
        key: "setTheBook",
        value: function setTheBook(aBook) {
            var _this = this;

            aBook.settings = JSON.parse(aBook.settings);
            aBook.metadata = JSON.parse(aBook.metadata);
            for (var i = 0; i < aBook.chapters.length; i++) {
                aBook.chapters[i].metadata = JSON.parse(aBook.chapters[i].metadata);
                aBook.chapters[i].settings = JSON.parse(aBook.chapters[i].settings);
                aBook.chapters[i].contents = JSON.parse(aBook.chapters[i].contents);
                if (this.documentOwners.indexOf(aBook.chapters[i].owner) === -1) {
                    this.documentOwners.push(aBook.chapters[i].owner);
                }
            }
            this.theBook = aBook;
            this.setDocumentStyle(this.theBook.settings.documentstyle);

            this.printConfig['pageHeight'] = this.pageSizes[this.theBook.settings.papersize].height;
            this.printConfig['pageWidth'] = this.pageSizes[this.theBook.settings.papersize].width;

            this.bibDB = new _database.BibliographyDB(this.documentOwners.join(','), false, false, false);

            this.bibDB.getDB().then(function () {
                return _this.fillPrintPage();
            });
        }
    }, {
        key: "getBookData",
        value: function getBookData(id) {
            var _this2 = this;

            jQuery.ajax({
                url: '/book/book/',
                data: { id: id },
                type: 'POST',
                dataType: 'json',
                crossDomain: false, // obviates need for sameOrigin test
                beforeSend: function beforeSend(xhr, settings) {
                    return xhr.setRequestHeader("X-CSRFToken", _common.csrfToken);
                },
                success: function success(response, textStatus, jqXHR) {
                    return _this2.setTheBook(response.book);
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                    return (0, _common.addAlert)('error', jqXHR.responseText);
                },
                complete: function complete() {
                    return (0, _common.deactivateWait)();
                }
            });
        }
    }, {
        key: "fillPrintPage",
        value: function fillPrintPage() {
            var _this3 = this;

            jQuery(document.body).addClass(this.theBook.settings.documentstyle);
            jQuery('#book')[0].outerHTML = (0, _templates.bookPrintTemplate)({
                theBook: this.theBook,
                docSchema: _document.docSchema
            });

            this.citRenderer = new _render.RenderCitations(document.body, this.theBook.settings.citationstyle, this.bibDB, true);
            this.citRenderer.init().then(function () {
                return _this3.fillPrintPageTwo();
            });
        }
    }, {
        key: "fillPrintPageTwo",
        value: function fillPrintPageTwo() {
            var bibliography = jQuery('#bibliography');
            jQuery(bibliography).html(this.citRenderer.fm.bibHTML);

            if (jQuery(bibliography).text().trim().length === 0) {
                jQuery(bibliography).parent().remove();
            }

            // Move the bibliography header text into the HTML, to prevent it getting mangled by the pagination process.
            var bibliographyHeader = document.querySelector('.article-bibliography-header');
            if (bibliographyHeader) {
                var bibliographyHeaderText = window.getComputedStyle(bibliographyHeader, ':before').getPropertyValue('content').replace(/"/g, '');
                bibliographyHeader.innerHTML = bibliographyHeaderText;
                bibliographyHeader.classList.remove('article-bibliography-header');
            }

            this.printConfig['frontmatterContents'] = (0, _templates.bookPrintStartTemplate)({ theBook: this.theBook });

            var paginator = new _paginateForPrint.PaginateForPrint(this.printConfig);
            paginator.initiate();
            jQuery("#pagination-contents").addClass('user-contents');
            jQuery('head title').html(jQuery('.article-title').text());
        }
    }, {
        key: "setDocumentStyle",
        value: function setDocumentStyle() {
            var theValue = this.theBook.settings.documentstyle;
            var documentStyleLink = document.getElementById('document-style-link'),
                newDocumentStyleLink = document.createElement('link');
            newDocumentStyleLink.setAttribute("rel", "stylesheet");
            newDocumentStyleLink.setAttribute("type", "text/css");
            newDocumentStyleLink.setAttribute("id", "document-style-link");
            newDocumentStyleLink.setAttribute("href", window.staticUrl + 'css/document/' + theValue + '.css');

            documentStyleLink.parentElement.replaceChild(newDocumentStyleLink, documentStyleLink);
        }
    }, {
        key: "bindEvents",
        value: function bindEvents() {
            var _this4 = this;

            jQuery(document).ready(function () {
                var pathnameParts = window.location.pathname.split('/'),
                    bookId = parseInt(pathnameParts[pathnameParts.length - 2], 10);

                _this4.getBookData(bookId);
            });
        }
    }]);

    return PrintBook;
}();

},{"../bibliography/database":1,"../citations/render":4,"../common":5,"../schema/document":10,"./templates":8,"paginate-for-print/dist/paginate-for-print":177}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/** A template for the initial pages of a book before the contents begin. */
var bookPrintStartTemplate = exports.bookPrintStartTemplate = _.template('\
    <h1 id="document-title"><%= theBook.title %></h1>\
    <% if (theBook.metadata.subtitle && theBook.metadata.subtitle != "" ) { %>\
        <h2 id="metadata-subtitle"><%= theBook.metadata.subtitle %></h2>\
    <% } %>\
    <% if (theBook.metadata.author && theBook.metadata.author != "" ) { %>\
        <h3><%= theBook.metadata.author %></h3>\
    <% } %>\
<div class="pagination-pagebreak"></div>\
    <% if (theBook.metadata.publisher && theBook.metadata.publisher != "" ) { %>\
        <div class="publisher"><%= theBook.metadata.publisher %></div>\
    <% } %>\
    <% if (theBook.metadata.copyright && theBook.metadata.copyright != "" ) { %>\
        <div class="copyright"><%= theBook.metadata.copyright %></div>\
    <% } %>\
<div class="pagination-pagebreak">\
');

/** A template for the print view of a book. */
var bookPrintTemplate = exports.bookPrintTemplate = _.template('\
<% _.each(theBook.chapters, function (chapter) { %>\
    <% var tempNode; %>\
    <% if (chapter.part && chapter.part != "") { %>\
        <div class="part">\
            <h1><%= chapter.part %></h1>\
        </div>\
    <% } %>\
    <div class="chapter">\
        <h1 class="title"><%= chapter.title %></h1>\
        <% if (chapter.metadata.subtitle) { %>\
            <h2 class="metadata-subtitle"><%= chapter.metadata.subtitle %></h2>\
        <% } %>\
        <% if (chapter.metadata.abstract ) { %>\
            <div class="metadata-abstract"><%= chapter.metadata.abstract %></div>\
        <% } %>\
        <%= docSchema.nodeFromJSON(_.findWhere(chapter.contents.content,{type:"body"})).toDOM().innerHTML %>\
    </div>\
<% }); %>\
');

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Figure = exports.Equation = exports.Citation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _model = require("prosemirror-old/dist/model");

var _dom = require("prosemirror-old/dist/util/dom");

var _katex = require("../katex");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Citation = exports.Citation = function (_Inline) {
    _inherits(Citation, _Inline);

    function Citation() {
        _classCallCheck(this, Citation);

        return _possibleConstructorReturn(this, (Citation.__proto__ || Object.getPrototypeOf(Citation)).apply(this, arguments));
    }

    _createClass(Citation, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["span", {
                class: 'citation',
                'data-format': node.attrs.format,
                'data-references': JSON.stringify(node.attrs.references)
            }];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                format: new _model.Attribute({
                    default: "autocite" // "autocite" or "textcite"
                }),
                references: new _model.Attribute({
                    default: [] // array of {id[, locator][, prefix]}
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return {
                "span.citation": function spanCitation(dom) {
                    return {
                        format: dom.getAttribute('data-format') || '',
                        references: JSON.parse(dom.getAttribute('data-references') || '[]')
                    };
                }
            };
        }
    }]);

    return Citation;
}(_model.Inline);

var Equation = exports.Equation = function (_Inline2) {
    _inherits(Equation, _Inline2);

    function Equation() {
        _classCallCheck(this, Equation);

        return _possibleConstructorReturn(this, (Equation.__proto__ || Object.getPrototypeOf(Equation)).apply(this, arguments));
    }

    _createClass(Equation, [{
        key: "toDOM",
        value: function toDOM(node) {
            var dom = (0, _dom.elt)('span', {
                class: 'equation',
                'data-equation': node.attrs.equation
            });
            (0, _katex.katexRender)(node.attrs.equation, dom, { throwOnError: false });
            dom.setAttribute('contenteditable', 'false');
            return dom;
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                equation: new _model.Attribute({
                    default: ""
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "span.equation": function spanEquation(dom) {
                    return {
                        equation: dom.getAttribute('data-equation')
                    };
                } };
        }
    }]);

    return Equation;
}(_model.Inline);

var imageDBBroken = false;

var Figure = exports.Figure = function (_Block) {
    _inherits(Figure, _Block);

    function Figure() {
        _classCallCheck(this, Figure);

        return _possibleConstructorReturn(this, (Figure.__proto__ || Object.getPrototypeOf(Figure)).apply(this, arguments));
    }

    _createClass(Figure, [{
        key: "toDOM",
        value: function toDOM(node) {
            var dom = (0, _dom.elt)('figure', {
                'data-equation': node.attrs.equation,
                'data-image': node.attrs.image,
                'data-figure-category': node.attrs.figureCategory,
                'data-caption': node.attrs.caption
            });
            if (node.attrs.image !== false) {
                dom.appendChild((0, _dom.elt)("div"));
                if (node.type.schema.cached.imageDB) {
                    if (node.type.schema.cached.imageDB.db[node.attrs.image] && node.type.schema.cached.imageDB.db[node.attrs.image].image) {
                        var imgSrc = node.type.schema.cached.imageDB.db[node.attrs.image].image;
                        dom.firstChild.appendChild((0, _dom.elt)("img", {
                            "src": node.type.schema.cached.imageDB.db[node.attrs.image].image
                        }));
                        dom.setAttribute('data-image-src', node.type.schema.cached.imageDB.db[node.attrs.image].image);
                    } else {
                        /* The image was not present in the imageDB -- possibly because a collaborator just added ut.
                        Try to reload the imageDB, but only once. If the image cannot be found in the updated
                        imageDB, do not attempt at reloading the imageDB if an image cannot be
                        found. */
                        if (!imageDBBroken) {
                            node.type.schema.cached.imageDB.getDB().then(function () {
                                if (node.type.schema.cached.imageDB.db[node.attrs.image] && node.type.schema.cached.imageDB.db[node.attrs.image].image) {
                                    var _imgSrc = node.type.schema.cached.imageDB.db[node.attrs.image].image;
                                    dom.firstChild.appendChild((0, _dom.elt)("img", {
                                        "src": _imgSrc
                                    }));
                                    dom.setAttribute('data-image-src', node.type.schema.cached.imageDB.db[node.attrs.image].image);
                                } else {
                                    imageDBBroken = true;
                                }
                            });
                        }
                    }
                }
            } else {
                var domEquation = (0, _dom.elt)('div', {
                    class: 'figure-equation',
                    'data-equation': node.attrs.equation
                });

                (0, _katex.katexRender)(node.attrs.equation, domEquation, {
                    displayMode: true,
                    throwOnError: false
                });
                dom.appendChild(domEquation);
            }
            var captionNode = (0, _dom.elt)("figcaption");
            if (node.attrs.figureCategory !== 'none') {
                var figureCatNode = (0, _dom.elt)('span', {
                    class: 'figure-cat-' + node.attrs.figureCategory,
                    'data-figure-category': node.attrs.figureCategory
                });
                figureCatNode.innerHTML = node.attrs.figureCategory;
                captionNode.appendChild(figureCatNode);
            }
            if (node.attrs.caption !== '') {
                var captionTextNode = (0, _dom.elt)("span", {
                    'data-caption': node.attrs.caption
                });
                captionTextNode.innerHTML = node.attrs.caption;

                captionNode.appendChild(captionTextNode);
            }
            // Add table captions above the table, other captions below.
            if (node.attrs.figureCategory === 'table') {
                dom.insertBefore(captionNode, dom.lastChild);
            } else {
                dom.appendChild(captionNode);
            }

            return dom;
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                equation: new _model.Attribute({
                    default: ""
                }),
                image: new _model.Attribute({
                    default: ""
                }),
                figureCategory: new _model.Attribute({
                    default: ""
                }),
                caption: new _model.Attribute({
                    default: ""
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "figure": function figure(dom) {
                    var image = dom.getAttribute('data-image');
                    return {
                        equation: dom.getAttribute('data-equation'),
                        image: image === 'false' ? false : parseInt(image),
                        figureCategory: dom.getAttribute('data-figure-category'),
                        caption: dom.getAttribute('data-caption')
                    };
                } };
        }
    }]);

    return Figure;
}(_model.Block);

},{"../katex":6,"prosemirror-old/dist/model":200,"prosemirror-old/dist/util/dom":220}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.docSchema = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _schemaBasic = require("prosemirror-old/dist/schema-basic");

var _schemaTable = require("prosemirror-old/dist/schema-table");

var _model = require("prosemirror-old/dist/model");

var _dom = require("prosemirror-old/dist/util/dom");

var _footnotesConvert = require("./footnotes-convert");

var _common = require("./common");

var _documentstyleList = require("../style/documentstyle-list");

var _citationDefinitions = require("../style/citation-definitions");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Article = function (_Block) {
    _inherits(Article, _Block);

    function Article() {
        _classCallCheck(this, Article);

        return _possibleConstructorReturn(this, (Article.__proto__ || Object.getPrototypeOf(Article)).apply(this, arguments));
    }

    _createClass(Article, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article',
                'data-papersize': node.attrs.papersize,
                'data-citationstyle': node.attrs.citationstyle,
                'data-documentstyle': node.attrs.documentstyle
            }, 0];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                papersize: new _model.Attribute({
                    default: 'A4'
                }),
                citationstyle: new _model.Attribute({
                    default: _citationDefinitions.defaultCitationStyle
                }),
                documentstyle: new _model.Attribute({
                    default: _documentstyleList.defaultDocumentStyle
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article": function divArticle(dom) {
                    return {
                        papersize: dom.getAttribute('data-papersize'),
                        citationstyle: dom.getAttribute('data-citationstyle'),
                        documentstyle: dom.getAttribute('data-documentstyle')
                    };
                } };
        }
    }]);

    return Article;
}(_model.Block);

var Title = function (_Block2) {
    _inherits(Title, _Block2);

    function Title() {
        _classCallCheck(this, Title);

        return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
    }

    _createClass(Title, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part article-title'
            }, 0];
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-title": null };
        }
    }]);

    return Title;
}(_model.Block);

var Metadata = function (_Block3) {
    _inherits(Metadata, _Block3);

    function Metadata() {
        _classCallCheck(this, Metadata);

        return _possibleConstructorReturn(this, (Metadata.__proto__ || Object.getPrototypeOf(Metadata)).apply(this, arguments));
    }

    _createClass(Metadata, [{
        key: "isMetadata",
        get: function get() {
            return true;
        }
    }]);

    return Metadata;
}(_model.Block);

var Subtitle = function (_Metadata) {
    _inherits(Subtitle, _Metadata);

    function Subtitle() {
        _classCallCheck(this, Subtitle);

        return _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).apply(this, arguments));
    }

    _createClass(Subtitle, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part metadata article-subtitle',
                'data-hidden': node.attrs.hidden
            }, 0];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                hidden: new _model.Attribute({
                    default: true
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-subtitle": function divArticleSubtitle(dom) {
                    return {
                        hidden: dom.getAttribute('data-hidden') === "true" ? true : false
                    };
                } };
        }
    }]);

    return Subtitle;
}(Metadata);

var Authors = function (_Metadata2) {
    _inherits(Authors, _Metadata2);

    function Authors() {
        _classCallCheck(this, Authors);

        return _possibleConstructorReturn(this, (Authors.__proto__ || Object.getPrototypeOf(Authors)).apply(this, arguments));
    }

    _createClass(Authors, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part metadata article-authors',
                'data-hidden': node.attrs.hidden
            }, 0];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                hidden: new _model.Attribute({
                    default: true
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-authors": function divArticleAuthors(dom) {
                    return {
                        hidden: dom.getAttribute('data-hidden')
                    };
                } };
        }
    }]);

    return Authors;
}(Metadata);

var Abstract = function (_Metadata3) {
    _inherits(Abstract, _Metadata3);

    function Abstract() {
        _classCallCheck(this, Abstract);

        return _possibleConstructorReturn(this, (Abstract.__proto__ || Object.getPrototypeOf(Abstract)).apply(this, arguments));
    }

    _createClass(Abstract, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part metadata article-abstract',
                'data-hidden': node.attrs.hidden
            }, 0];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                hidden: new _model.Attribute({
                    default: true
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-abstract": function divArticleAbstract(dom) {
                    return {
                        hidden: dom.getAttribute('data-hidden')
                    };
                } };
        }
    }]);

    return Abstract;
}(Metadata);

var Keywords = function (_Metadata4) {
    _inherits(Keywords, _Metadata4);

    function Keywords() {
        _classCallCheck(this, Keywords);

        return _possibleConstructorReturn(this, (Keywords.__proto__ || Object.getPrototypeOf(Keywords)).apply(this, arguments));
    }

    _createClass(Keywords, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part metadata article-keywords',
                'data-hidden': node.attrs.hidden
            }, 0];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                hidden: new _model.Attribute({
                    default: true
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-keywords": function divArticleKeywords(dom) {
                    return {
                        hidden: dom.getAttribute('data-hidden')
                    };
                } };
        }
    }]);

    return Keywords;
}(Metadata);

var Body = function (_Block4) {
    _inherits(Body, _Block4);

    function Body() {
        _classCallCheck(this, Body);

        return _possibleConstructorReturn(this, (Body.__proto__ || Object.getPrototypeOf(Body)).apply(this, arguments));
    }

    _createClass(Body, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ["div", {
                class: 'article-part article-body'
            }, 0];
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "div.article-body": null };
        }
    }]);

    return Body;
}(_model.Block);

var Footnote = function (_Inline) {
    _inherits(Footnote, _Inline);

    function Footnote() {
        _classCallCheck(this, Footnote);

        return _possibleConstructorReturn(this, (Footnote.__proto__ || Object.getPrototypeOf(Footnote)).apply(this, arguments));
    }

    _createClass(Footnote, [{
        key: "toDOM",
        value: function toDOM(node) {
            var dom = (0, _dom.elt)("span", {
                class: 'footnote-marker',
                'data-footnote': (0, _footnotesConvert.fnNodeToHtml)(node.attrs.footnote)
            });
            dom.innerHTML = '&nbsp;';
            return dom;
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                footnote: new _model.Attribute({
                    default: [{ type: 'paragraph' }]
                })
            };
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return {
                "span.footnote-marker[data-footnote]": function spanFootnoteMarkerDataFootnote(dom) {
                    return {
                        footnote: (0, _footnotesConvert.htmlToFnNode)(dom.getAttribute('data-footnote'))
                    };
                }
            };
        }
    }]);

    return Footnote;
}(_model.Inline);

var CommentMark = function (_MarkType) {
    _inherits(CommentMark, _MarkType);

    function CommentMark() {
        _classCallCheck(this, CommentMark);

        return _possibleConstructorReturn(this, (CommentMark.__proto__ || Object.getPrototypeOf(CommentMark)).apply(this, arguments));
    }

    _createClass(CommentMark, [{
        key: "toDOM",
        value: function toDOM(node) {
            return ['span', { class: 'comment', 'data-id': node.attrs.id }];
        }
    }, {
        key: "attrs",
        get: function get() {
            return {
                id: new _model.Attribute()
            };
        }
    }, {
        key: "inclusiveRight",
        get: function get() {
            return false;
        }
    }, {
        key: "matchDOMTag",
        get: function get() {
            return { "span.comment[data-id]": function spanCommentDataId(dom) {
                    return {
                        id: dom.getAttribute("data-id")
                    };
                } };
        }
    }]);

    return CommentMark;
}(_model.MarkType);

var docSchema = exports.docSchema = new _model.Schema({
    nodes: {
        doc: { type: _schemaBasic.Doc, content: "article" }, // Transformations don't work well on the top most element
        article: { type: Article, content: "title subtitle authors abstract keywords body" },
        title: { type: Title, content: "text*", group: "part" },
        subtitle: { type: Subtitle, content: "text*", group: "part" },
        authors: { type: Authors, content: "text*", group: "part" },
        abstract: { type: Abstract, content: "(block | table_block)+", group: "part" },
        keywords: { type: Keywords, content: "text*", group: "part" },
        body: { type: Body, content: "(block | table_block)+", group: "part" },

        paragraph: { type: _schemaBasic.Paragraph, content: "inline<_>*", group: "block" },
        blockquote: { type: _schemaBasic.BlockQuote, content: "block+", group: "block" },
        ordered_list: { type: _schemaBasic.OrderedList, content: "list_item+", group: "block" },
        bullet_list: { type: _schemaBasic.BulletList, content: "list_item+", group: "block" },
        list_item: { type: _schemaBasic.ListItem, content: "block+", group: "block" },
        horizontal_rule: { type: _schemaBasic.HorizontalRule, group: "block" },
        figure: { type: _common.Figure, group: "block" },

        heading: { type: _schemaBasic.Heading, content: "inline<_>*", group: "block" },
        code_block: { type: _schemaBasic.CodeBlock, content: "text*", group: "block" },

        text: { type: _model.Text, group: "inline" },
        hard_break: { type: _schemaBasic.HardBreak, group: "inline" },
        citation: { type: _common.Citation, group: "inline" },
        equation: { type: _common.Equation, group: "inline" },
        footnote: { type: Footnote, group: "inline" },

        table: { type: _schemaTable.Table, content: "table_row[columns=.columns]+", group: "table_block" },
        table_row: { type: _schemaTable.TableRow, content: "table_cell{.columns}" },
        table_cell: { type: _schemaTable.TableCell, content: "block+" }

    },
    marks: {
        em: _schemaBasic.EmMark,
        strong: _schemaBasic.StrongMark,
        link: _schemaBasic.LinkMark,
        code: _schemaBasic.CodeMark,
        comment: CommentMark
    }
});

},{"../style/citation-definitions":13,"../style/documentstyle-list":14,"./common":9,"./footnotes-convert":11,"prosemirror-old/dist/model":200,"prosemirror-old/dist/schema-basic":207,"prosemirror-old/dist/schema-table":208,"prosemirror-old/dist/util/dom":220}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fnNodeToHtml = exports.fnNodeToPmNode = exports.htmlToFnNode = undefined;

var _footnotes = require("./footnotes");

var _dom = require("prosemirror-old/dist/util/dom");

var _node = require("prosemirror-old/dist/model/node");

// Convert the footnote HTML stored with the marker to a PM node representation of the footnote.
var htmlToFnNode = exports.htmlToFnNode = function htmlToFnNode(contents) {
    var footnoteDOM = (0, _dom.elt)('div', {
        class: 'footnote-container'
    });
    footnoteDOM.innerHTML = contents;
    var node = _footnotes.fnSchema.parseDOM(footnoteDOM, {
        preserveWhitespace: true,
        topNode: false
    });
    var json = node.firstChild.toJSON().content;

    return json;
};

var fnNodeToPmNode = exports.fnNodeToPmNode = function fnNodeToPmNode(fnContents) {
    var footnote = {
        type: 'footnotecontainer',
        content: fnContents
    };
    return _node.Node.fromJSON(_footnotes.fnSchema, footnote);
};

var fnNodeToHtml = exports.fnNodeToHtml = function fnNodeToHtml(jsonString) {
    var pmNode = fnNodeToPmNode(jsonString);
    return pmNode.toDOM().innerHTML;
};

},{"./footnotes":12,"prosemirror-old/dist/model/node":202,"prosemirror-old/dist/util/dom":220}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fnSchema = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _schemaBasic = require("prosemirror-old/dist/schema-basic");

var _schemaTable = require("prosemirror-old/dist/schema-table");

var _model = require("prosemirror-old/dist/model");

var _common = require("./common");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FootnoteContainer = function (_Block) {
  _inherits(FootnoteContainer, _Block);

  function FootnoteContainer() {
    _classCallCheck(this, FootnoteContainer);

    return _possibleConstructorReturn(this, (FootnoteContainer.__proto__ || Object.getPrototypeOf(FootnoteContainer)).apply(this, arguments));
  }

  _createClass(FootnoteContainer, [{
    key: "toDOM",
    value: function toDOM(node) {
      return ['div', { class: 'footnote-container' }, 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "div.footnote-container": null };
    }
  }]);

  return FootnoteContainer;
}(_model.Block);

var fnSchema = exports.fnSchema = new _model.Schema({
  nodes: {
    doc: { type: _schemaBasic.Doc, content: "part+" },

    footnote_end: { type: _schemaBasic.HorizontalRule, group: "part" },
    footnotecontainer: { type: FootnoteContainer, content: "(block|table_block)+", group: "part" },

    paragraph: { type: _schemaBasic.Paragraph, content: "inline<_>*", group: "block" },
    heading: { type: _schemaBasic.Heading, content: "inline<_>*", group: "block" },
    code_block: { type: _schemaBasic.CodeBlock, content: "text*", group: "block" },

    blockquote: { type: _schemaBasic.BlockQuote, content: "block+", group: "block" },
    ordered_list: { type: _schemaBasic.OrderedList, content: "list_item+", group: "block" },
    bullet_list: { type: _schemaBasic.BulletList, content: "list_item+", group: "block" },
    list_item: { type: _schemaBasic.ListItem, content: "block+", group: "block" },
    horizontal_rule: { type: _schemaBasic.HorizontalRule, group: "block" },
    figure: { type: _common.Figure, group: "block" },

    text: { type: _model.Text, group: "inline" },
    hard_break: { type: _schemaBasic.HardBreak, group: "inline" },
    citation: { type: _common.Citation, group: "inline" },
    equation: { type: _common.Equation, group: "inline" },

    table: { type: _schemaTable.Table, content: "table_row[columns=.columns]+", group: "table_block" },
    table_row: { type: _schemaTable.TableRow, content: "table_cell{.columns}" },
    table_cell: { type: _schemaTable.TableCell, content: "block+" }
  },

  marks: {
    em: _schemaBasic.EmMark,
    strong: _schemaBasic.StrongMark,
    link: _schemaBasic.LinkMark,
    code: _schemaBasic.CodeMark
  }
});

},{"./common":9,"prosemirror-old/dist/model":200,"prosemirror-old/dist/schema-basic":207,"prosemirror-old/dist/schema-table":208}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/** @file Makes a list of available styles and locals for the citation style menus. 
 This file is automatically created using ./manage.py create_citation_styles
*/
var citationDefinitions = exports.citationDefinitions = {
    locals: {
        "de-DE": "<?xml version=\"1.0\" encoding=\"utf-8\"?><locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"de-DE\">  <info>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>    <updated>2012-07-04T23:31:02+00:00</updated>  </info>  <style-options punctuation-in-quote=\"false\"/>  <date form=\"text\">    <date-part name=\"day\" form=\"ordinal\" suffix=\" \"/>    <date-part name=\"month\" suffix=\" \"/>    <date-part name=\"year\"/>  </date>  <date form=\"numeric\">    <date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\".\"/>    <date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\".\"/>    <date-part name=\"year\"/>  </date>  <terms>    <term name=\"accessed\">zugegriffen</term>    <term name=\"and\">und</term>    <term name=\"and others\">und andere</term>    <term name=\"anonymous\">ohne Autor</term>    <term name=\"anonymous\" form=\"short\">o.&#160;A.</term>    <term name=\"at\">auf</term>    <term name=\"available at\">verfügbar unter</term>    <term name=\"by\">von</term>    <term name=\"circa\">circa</term>    <term name=\"circa\" form=\"short\">ca.</term>    <term name=\"cited\">zitiert</term>    <term name=\"edition\">      <single>Auflage</single>      <multiple>Auflagen</multiple>    </term>    <term name=\"edition\" form=\"short\">Aufl.</term>    <term name=\"et-al\">u.&#160;a.</term>    <term name=\"forthcoming\">i.&#160;E.</term>    <term name=\"from\">von</term>    <term name=\"ibid\">ebd.</term>    <term name=\"in\">in</term>    <term name=\"in press\">im Druck</term>    <term name=\"internet\">Internet</term>    <term name=\"interview\">Interview</term>    <term name=\"letter\">Brief</term>    <term name=\"no date\">ohne Datum</term>    <term name=\"no date\" form=\"short\">o.&#160;J.</term>    <term name=\"online\">online</term>    <term name=\"presented at\">gehalten auf der</term>    <term name=\"reference\">      <single>Referenz</single>      <multiple>Referenzen</multiple>    </term>    <term name=\"reference\" form=\"short\">      <single>Ref.</single>      <multiple>Ref.</multiple>    </term>    <term name=\"retrieved\">abgerufen</term>    <term name=\"scale\">Maßstab</term>    <term name=\"version\">Version</term>    <!-- ANNO DOMINI; BEFORE CHRIST -->    <term name=\"ad\">n.&#160;Chr.</term>    <term name=\"bc\">v.&#160;Chr.</term>    <!-- PUNCTUATION -->    <term name=\"open-quote\">„</term>    <term name=\"close-quote\">“</term>    <term name=\"open-inner-quote\">‚</term>    <term name=\"close-inner-quote\">‘</term>    <term name=\"page-range-delimiter\">–</term>    <!-- ORDINALS -->    <term name=\"ordinal\">.</term>    <!-- LONG ORDINALS -->    <term name=\"long-ordinal-01\">erster</term>    <term name=\"long-ordinal-02\">zweiter</term>    <term name=\"long-ordinal-03\">dritter</term>    <term name=\"long-ordinal-04\">vierter</term>    <term name=\"long-ordinal-05\">fünfter</term>    <term name=\"long-ordinal-06\">sechster</term>    <term name=\"long-ordinal-07\">siebter</term>    <term name=\"long-ordinal-08\">achter</term>    <term name=\"long-ordinal-09\">neunter</term>    <term name=\"long-ordinal-10\">zehnter</term>    <!-- LONG LOCATOR FORMS -->    <term name=\"book\">      <single>Buch</single>      <multiple>Bücher</multiple>    </term>    <term name=\"chapter\">      <single>Kapitel</single>      <multiple>Kapitel</multiple>    </term>    <term name=\"column\">      <single>Spalte</single>      <multiple>Spalten</multiple>    </term>    <term name=\"figure\">      <single>Abbildung</single>      <multiple>Abbildungen</multiple>    </term>    <term name=\"folio\">      <single>Blatt</single>      <multiple>Blätter</multiple>    </term>    <term name=\"issue\">      <single>Nummer</single>      <multiple>Nummern</multiple>    </term>    <term name=\"line\">      <single>Zeile</single>      <multiple>Zeilen</multiple>    </term>    <term name=\"note\">      <single>Note</single>      <multiple>Noten</multiple>    </term>    <term name=\"opus\">      <single>Opus</single>      <multiple>Opera</multiple>    </term>    <term name=\"page\">      <single>Seite</single>      <multiple>Seiten</multiple>    </term>    <term name=\"number-of-pages\">      <single>Seite</single>      <multiple>Seiten</multiple>    </term>    <term name=\"paragraph\">      <single>Absatz</single>      <multiple>Absätze</multiple>    </term>    <term name=\"part\">      <single>Teil</single>      <multiple>Teile</multiple>    </term>    <term name=\"section\">      <single>Abschnitt</single>      <multiple>Abschnitte</multiple>    </term>    <term name=\"sub verbo\">      <single>sub verbo</single>      <multiple>sub verbis</multiple>    </term>    <term name=\"verse\">      <single>Vers</single>      <multiple>Verse</multiple>    </term>    <term name=\"volume\">      <single>Band</single>      <multiple>Bände</multiple>    </term>    <!-- SHORT LOCATOR FORMS -->    <term name=\"book\" form=\"short\">B.</term>    <term name=\"chapter\" form=\"short\">Kap.</term>    <term name=\"column\" form=\"short\">Sp.</term>    <term name=\"figure\" form=\"short\">Abb.</term>    <term name=\"folio\" form=\"short\">Fol.</term>    <term name=\"issue\" form=\"short\">Nr.</term>    <term name=\"line\" form=\"short\">Z.</term>    <term name=\"note\" form=\"short\">N.</term>    <term name=\"opus\" form=\"short\">op.</term>    <term name=\"page\" form=\"short\">      <single>S.</single>      <multiple>S.</multiple>    </term>    <term name=\"number-of-pages\" form=\"short\">      <single>S.</single>      <multiple>S.</multiple>    </term>    <term name=\"paragraph\" form=\"short\">Abs.</term>    <term name=\"part\" form=\"short\">Teil</term>    <term name=\"section\" form=\"short\">Abschn.</term>    <term name=\"sub verbo\" form=\"short\">      <single>s.&#160;v.</single>      <multiple>s.&#160;vv.</multiple>    </term>    <term name=\"verse\" form=\"short\">      <single>V.</single>      <multiple>V.</multiple>    </term>    <term name=\"volume\" form=\"short\">      <single>Bd.</single>      <multiple>Bde.</multiple>    </term>    <!-- SYMBOL LOCATOR FORMS -->    <term name=\"paragraph\" form=\"symbol\">      <single>¶</single>      <multiple>¶¶</multiple>    </term>    <term name=\"section\" form=\"symbol\">      <single>§</single>      <multiple>§§</multiple>    </term>    <!-- LONG ROLE FORMS -->    <term name=\"director\">      <single>Regisseur</single>      <multiple>Regisseure</multiple>    </term>    <term name=\"editor\">      <single>Herausgeber</single>      <multiple>Herausgeber</multiple>    </term>    <term name=\"collection-editor\">      <single>Reihenherausgeber</single>      <multiple>Reihenherausgeber</multiple>    </term>    <term name=\"editorial-director\">      <single>Herausgeber</single>      <multiple>Herausgeber</multiple>    </term>    <term name=\"illustrator\">      <single>Illustrator</single>      <multiple>Illustratoren</multiple>    </term>    <term name=\"translator\">      <single>Übersetzer</single>      <multiple>Übersetzer</multiple>    </term>    <term name=\"editortranslator\">      <single>Herausgeber&#160;&amp; Übersetzer</single>      <multiple>Herausgeber&#160;&amp; Übersetzer</multiple>    </term>    <!-- SHORT ROLE FORMS -->    <term name=\"director\" form=\"short\">      <single>Reg.</single>      <multiple>Reg.</multiple>    </term>    <term name=\"editor\" form=\"short\">      <single>Hrsg.</single>      <multiple>Hrsg.</multiple>    </term>    <term name=\"collection-editor\" form=\"short\">      <single>Hrsg.</single>      <multiple>Hrsg.</multiple>    </term>    <term name=\"editorial-director\" form=\"short\">      <single>Hrsg.</single>      <multiple>Hrsg.</multiple>    </term>    <term name=\"illustrator\" form=\"short\">      <single>Ill.</single>      <multiple>Ill.</multiple>    </term>    <term name=\"translator\" form=\"short\">      <single>Übers.</single>      <multiple>Übers.</multiple>    </term>    <term name=\"editortranslator\" form=\"short\">      <single>Hrsg.&#160;&amp; Übers.</single>      <multiple>Hrsg.&#160;&amp; Übers</multiple>    </term>    <!-- VERB ROLE FORMS -->    <term name=\"container-author\" form=\"verb\">von</term>    <term name=\"director\" form=\"verb\">Regie von</term>    <term name=\"editor\" form=\"verb\">herausgegeben von</term>    <term name=\"collection-editor\" form=\"verb\">herausgegeben von</term>    <term name=\"editorial-director\" form=\"verb\">herausgegeben von</term>    <term name=\"illustrator\" form=\"verb\">illustriert von</term>    <term name=\"interviewer\" form=\"verb\">interviewt von</term>    <term name=\"recipient\" form=\"verb\">an</term>    <term name=\"reviewed-author\" form=\"verb\">von</term>    <term name=\"translator\" form=\"verb\">übersetzt von</term>    <term name=\"editortranslator\" form=\"verb\">herausgegeben und übersetzt von</term>    <!-- SHORT VERB ROLE FORMS -->    <term name=\"director\" form=\"verb-short\">Reg.</term>    <term name=\"editor\" form=\"verb-short\">hg. von</term>    <term name=\"collection-editor\" form=\"verb-short\">hg. von</term>    <term name=\"editorial-director\" form=\"verb-short\">hg. von</term>    <term name=\"illustrator\" form=\"verb-short\">illus. von</term>    <term name=\"translator\" form=\"verb-short\">übers. von</term>    <term name=\"editortranslator\" form=\"verb-short\">hg.&#160;&amp; übers. von</term>    <!-- LONG MONTH FORMS -->    <term name=\"month-01\">Januar</term>    <term name=\"month-02\">Februar</term>    <term name=\"month-03\">März</term>    <term name=\"month-04\">April</term>    <term name=\"month-05\">Mai</term>    <term name=\"month-06\">Juni</term>    <term name=\"month-07\">Juli</term>    <term name=\"month-08\">August</term>    <term name=\"month-09\">September</term>    <term name=\"month-10\">Oktober</term>    <term name=\"month-11\">November</term>    <term name=\"month-12\">Dezember</term>    <!-- SHORT MONTH FORMS -->    <term name=\"month-01\" form=\"short\">Jan.</term>    <term name=\"month-02\" form=\"short\">Feb.</term>    <term name=\"month-03\" form=\"short\">März</term>    <term name=\"month-04\" form=\"short\">Apr.</term>    <term name=\"month-05\" form=\"short\">Mai</term>    <term name=\"month-06\" form=\"short\">Juni</term>    <term name=\"month-07\" form=\"short\">Juli</term>    <term name=\"month-08\" form=\"short\">Aug.</term>    <term name=\"month-09\" form=\"short\">Sep.</term>    <term name=\"month-10\" form=\"short\">Okt.</term>    <term name=\"month-11\" form=\"short\">Nov.</term>    <term name=\"month-12\" form=\"short\">Dez.</term>    <!-- SEASONS -->    <term name=\"season-01\">Frühjahr</term>    <term name=\"season-02\">Sommer</term>    <term name=\"season-03\">Herbst</term>    <term name=\"season-04\">Winter</term>  </terms></locale>",
        "en-US": "<?xml version=\"1.0\" encoding=\"utf-8\"?><locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"en-US\">  <info>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>    <updated>2015-10-10T23:31:02+00:00</updated>  </info>  <style-options punctuation-in-quote=\"true\"/>  <date form=\"text\">    <date-part name=\"month\" suffix=\" \"/>    <date-part name=\"day\" suffix=\", \"/>    <date-part name=\"year\"/>  </date>  <date form=\"numeric\">    <date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"year\"/>  </date>  <terms>    <term name=\"accessed\">accessed</term>    <term name=\"and\">and</term>    <term name=\"and others\">and others</term>    <term name=\"anonymous\">anonymous</term>    <term name=\"anonymous\" form=\"short\">anon.</term>    <term name=\"at\">at</term>    <term name=\"available at\">available at</term>    <term name=\"by\">by</term>    <term name=\"circa\">circa</term>    <term name=\"circa\" form=\"short\">c.</term>    <term name=\"cited\">cited</term>    <term name=\"edition\">      <single>edition</single>      <multiple>editions</multiple>    </term>    <term name=\"edition\" form=\"short\">ed.</term>    <term name=\"et-al\">et al.</term>    <term name=\"forthcoming\">forthcoming</term>    <term name=\"from\">from</term>    <term name=\"ibid\">ibid.</term>    <term name=\"in\">in</term>    <term name=\"in press\">in press</term>    <term name=\"internet\">internet</term>    <term name=\"interview\">interview</term>    <term name=\"letter\">letter</term>    <term name=\"no date\">no date</term>    <term name=\"no date\" form=\"short\">n.d.</term>    <term name=\"online\">online</term>    <term name=\"presented at\">presented at the</term>    <term name=\"reference\">      <single>reference</single>      <multiple>references</multiple>    </term>    <term name=\"reference\" form=\"short\">      <single>ref.</single>      <multiple>refs.</multiple>    </term>    <term name=\"retrieved\">retrieved</term>    <term name=\"scale\">scale</term>    <term name=\"version\">version</term>    <!-- ANNO DOMINI; BEFORE CHRIST -->    <term name=\"ad\">AD</term>    <term name=\"bc\">BC</term>    <!-- PUNCTUATION -->    <term name=\"open-quote\">“</term>    <term name=\"close-quote\">”</term>    <term name=\"open-inner-quote\">‘</term>    <term name=\"close-inner-quote\">’</term>    <term name=\"page-range-delimiter\">–</term>    <!-- ORDINALS -->    <term name=\"ordinal\">th</term>    <term name=\"ordinal-01\">st</term>    <term name=\"ordinal-02\">nd</term>    <term name=\"ordinal-03\">rd</term>    <term name=\"ordinal-11\">th</term>    <term name=\"ordinal-12\">th</term>    <term name=\"ordinal-13\">th</term>    <!-- LONG ORDINALS -->    <term name=\"long-ordinal-01\">first</term>    <term name=\"long-ordinal-02\">second</term>    <term name=\"long-ordinal-03\">third</term>    <term name=\"long-ordinal-04\">fourth</term>    <term name=\"long-ordinal-05\">fifth</term>    <term name=\"long-ordinal-06\">sixth</term>    <term name=\"long-ordinal-07\">seventh</term>    <term name=\"long-ordinal-08\">eighth</term>    <term name=\"long-ordinal-09\">ninth</term>    <term name=\"long-ordinal-10\">tenth</term>    <!-- LONG LOCATOR FORMS -->    <term name=\"book\">      <single>book</single>      <multiple>books</multiple>    </term>    <term name=\"chapter\">      <single>chapter</single>      <multiple>chapters</multiple>    </term>    <term name=\"column\">      <single>column</single>      <multiple>columns</multiple>    </term>    <term name=\"figure\">      <single>figure</single>      <multiple>figures</multiple>    </term>    <term name=\"folio\">      <single>folio</single>      <multiple>folios</multiple>    </term>    <term name=\"issue\">      <single>number</single>      <multiple>numbers</multiple>    </term>    <term name=\"line\">      <single>line</single>      <multiple>lines</multiple>    </term>    <term name=\"note\">      <single>note</single>      <multiple>notes</multiple>    </term>    <term name=\"opus\">      <single>opus</single>      <multiple>opera</multiple>    </term>    <term name=\"page\">      <single>page</single>      <multiple>pages</multiple>    </term>    <term name=\"number-of-pages\">      <single>page</single>      <multiple>pages</multiple>    </term>    <term name=\"paragraph\">      <single>paragraph</single>      <multiple>paragraphs</multiple>    </term>    <term name=\"part\">      <single>part</single>      <multiple>parts</multiple>    </term>    <term name=\"section\">      <single>section</single>      <multiple>sections</multiple>    </term>    <term name=\"sub verbo\">      <single>sub verbo</single>      <multiple>sub verbis</multiple>    </term>    <term name=\"verse\">      <single>verse</single>      <multiple>verses</multiple>    </term>    <term name=\"volume\">      <single>volume</single>      <multiple>volumes</multiple>    </term>    <!-- SHORT LOCATOR FORMS -->    <term name=\"book\" form=\"short\">      <single>bk.</single>      <multiple>bks.</multiple>    </term>    <term name=\"chapter\" form=\"short\">      <single>chap.</single>      <multiple>chaps.</multiple>    </term>    <term name=\"column\" form=\"short\">      <single>col.</single>      <multiple>cols.</multiple>    </term>    <term name=\"figure\" form=\"short\">      <single>fig.</single>      <multiple>figs.</multiple>    </term>    <term name=\"folio\" form=\"short\">      <single>fol.</single>      <multiple>fols.</multiple>    </term>    <term name=\"issue\" form=\"short\">      <single>no.</single>      <multiple>nos.</multiple>    </term>    <term name=\"line\" form=\"short\">      <single>l.</single>      <multiple>ll.</multiple>    </term>    <term name=\"note\" form=\"short\">      <single>n.</single>      <multiple>nn.</multiple>    </term>    <term name=\"opus\" form=\"short\">      <single>op.</single>      <multiple>opp.</multiple>    </term>    <term name=\"page\" form=\"short\">      <single>p.</single>      <multiple>pp.</multiple>    </term>    <term name=\"number-of-pages\" form=\"short\">      <single>p.</single>      <multiple>pp.</multiple>    </term>    <term name=\"paragraph\" form=\"short\">      <single>para.</single>      <multiple>paras.</multiple>    </term>    <term name=\"part\" form=\"short\">      <single>pt.</single>      <multiple>pts.</multiple>    </term>    <term name=\"section\" form=\"short\">      <single>sec.</single>      <multiple>secs.</multiple>    </term>    <term name=\"sub verbo\" form=\"short\">      <single>s.v.</single>      <multiple>s.vv.</multiple>    </term>    <term name=\"verse\" form=\"short\">      <single>v.</single>      <multiple>vv.</multiple>    </term>    <term name=\"volume\" form=\"short\">      <single>vol.</single>      <multiple>vols.</multiple>    </term>    <!-- SYMBOL LOCATOR FORMS -->    <term name=\"paragraph\" form=\"symbol\">      <single>¶</single>      <multiple>¶¶</multiple>    </term>    <term name=\"section\" form=\"symbol\">      <single>§</single>      <multiple>§§</multiple>    </term>    <!-- LONG ROLE FORMS -->    <term name=\"director\">      <single>director</single>      <multiple>directors</multiple>    </term>    <term name=\"editor\">      <single>editor</single>      <multiple>editors</multiple>    </term>    <term name=\"editorial-director\">      <single>editor</single>      <multiple>editors</multiple>    </term>    <term name=\"illustrator\">      <single>illustrator</single>      <multiple>illustrators</multiple>    </term>    <term name=\"translator\">      <single>translator</single>      <multiple>translators</multiple>    </term>    <term name=\"editortranslator\">      <single>editor &amp; translator</single>      <multiple>editors &amp; translators</multiple>    </term>    <!-- SHORT ROLE FORMS -->    <term name=\"director\" form=\"short\">      <single>dir.</single>      <multiple>dirs.</multiple>    </term>    <term name=\"editor\" form=\"short\">      <single>ed.</single>      <multiple>eds.</multiple>    </term>    <term name=\"editorial-director\" form=\"short\">      <single>ed.</single>      <multiple>eds.</multiple>    </term>    <term name=\"illustrator\" form=\"short\">      <single>ill.</single>      <multiple>ills.</multiple>    </term>    <term name=\"translator\" form=\"short\">      <single>tran.</single>      <multiple>trans.</multiple>    </term>    <term name=\"editortranslator\" form=\"short\">      <single>ed. &amp; tran.</single>      <multiple>eds. &amp; trans.</multiple>    </term>    <!-- VERB ROLE FORMS -->    <term name=\"container-author\" form=\"verb\">by</term>    <term name=\"director\" form=\"verb\">directed by</term>    <term name=\"editor\" form=\"verb\">edited by</term>    <term name=\"editorial-director\" form=\"verb\">edited by</term>    <term name=\"illustrator\" form=\"verb\">illustrated by</term>    <term name=\"interviewer\" form=\"verb\">interview by</term>    <term name=\"recipient\" form=\"verb\">to</term>    <term name=\"reviewed-author\" form=\"verb\">by</term>    <term name=\"translator\" form=\"verb\">translated by</term>    <term name=\"editortranslator\" form=\"verb\">edited &amp; translated by</term>    <!-- SHORT VERB ROLE FORMS -->    <term name=\"director\" form=\"verb-short\">dir. by</term>    <term name=\"editor\" form=\"verb-short\">ed. by</term>    <term name=\"editorial-director\" form=\"verb-short\">ed. by</term>    <term name=\"illustrator\" form=\"verb-short\">illus. by</term>    <term name=\"translator\" form=\"verb-short\">trans. by</term>    <term name=\"editortranslator\" form=\"verb-short\">ed. &amp; trans. by</term>    <!-- LONG MONTH FORMS -->    <term name=\"month-01\">January</term>    <term name=\"month-02\">February</term>    <term name=\"month-03\">March</term>    <term name=\"month-04\">April</term>    <term name=\"month-05\">May</term>    <term name=\"month-06\">June</term>    <term name=\"month-07\">July</term>    <term name=\"month-08\">August</term>    <term name=\"month-09\">September</term>    <term name=\"month-10\">October</term>    <term name=\"month-11\">November</term>    <term name=\"month-12\">December</term>    <!-- SHORT MONTH FORMS -->    <term name=\"month-01\" form=\"short\">Jan.</term>    <term name=\"month-02\" form=\"short\">Feb.</term>    <term name=\"month-03\" form=\"short\">Mar.</term>    <term name=\"month-04\" form=\"short\">Apr.</term>    <term name=\"month-05\" form=\"short\">May</term>    <term name=\"month-06\" form=\"short\">Jun.</term>    <term name=\"month-07\" form=\"short\">Jul.</term>    <term name=\"month-08\" form=\"short\">Aug.</term>    <term name=\"month-09\" form=\"short\">Sep.</term>    <term name=\"month-10\" form=\"short\">Oct.</term>    <term name=\"month-11\" form=\"short\">Nov.</term>    <term name=\"month-12\" form=\"short\">Dec.</term>    <!-- SEASONS -->    <term name=\"season-01\">Spring</term>    <term name=\"season-02\">Summer</term>    <term name=\"season-03\">Autumn</term>    <term name=\"season-04\">Winter</term>  </terms></locale>",
        "es-ES": "<?xml version=\"1.0\" encoding=\"utf-8\"?><locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"es-ES\">  <info>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>    <updated>2012-07-04T23:31:02+00:00</updated>  </info>  <style-options punctuation-in-quote=\"false\"/>  <date form=\"text\">    <date-part name=\"day\" suffix=\" de \"/>    <date-part name=\"month\" suffix=\" de \"/>    <date-part name=\"year\"/>  </date>  <date form=\"numeric\">    <date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"year\"/>  </date>  <terms>    <term name=\"accessed\">accedido</term>    <term name=\"and\">y</term>    <term name=\"and others\">y otros</term>    <term name=\"anonymous\">anónimo</term>    <term name=\"anonymous\" form=\"short\">anón.</term>    <term name=\"at\">en</term>    <term name=\"available at\">disponible en</term>    <term name=\"by\">de</term>    <term name=\"circa\">circa</term>    <term name=\"circa\" form=\"short\">c.</term>    <term name=\"cited\">citado</term>    <term name=\"edition\">      <single>edición</single>      <multiple>ediciones</multiple>    </term>    <term name=\"edition\" form=\"short\">ed.</term>    <term name=\"et-al\">et&#160;al.</term>    <term name=\"forthcoming\">previsto</term>    <term name=\"from\">a partir de</term>    <term name=\"ibid\">ibid.</term>    <term name=\"in\">en</term>    <term name=\"in press\">en imprenta</term>    <term name=\"internet\">internet</term>    <term name=\"interview\">entrevista</term>    <term name=\"letter\">carta</term>    <term name=\"no date\">sin fecha</term>    <term name=\"no date\" form=\"short\">s.&#160;f.</term>    <term name=\"online\">en línea</term>    <term name=\"presented at\">presentado en</term>    <term name=\"reference\">      <single>referencia</single>      <multiple>referencias</multiple>    </term>    <term name=\"reference\" form=\"short\">      <single>ref.</single>      <multiple>refs.</multiple>    </term>    <term name=\"retrieved\">recuperado</term>    <term name=\"scale\">escala</term>    <term name=\"version\">versión</term>    <!-- ANNO DOMINI; BEFORE CHRIST -->    <term name=\"ad\">d.&#160;C.</term>    <term name=\"bc\">a.&#160;C.</term>    <!-- PUNCTUATION -->    <term name=\"open-quote\">«</term>    <term name=\"close-quote\">»</term>    <term name=\"open-inner-quote\">“</term>    <term name=\"close-inner-quote\">”</term>    <term name=\"page-range-delimiter\">-</term>    <!-- ORDINALS -->    <term name=\"ordinal\">.ª</term>    <!-- LONG ORDINALS -->    <term name=\"long-ordinal-01\">primera</term>    <term name=\"long-ordinal-02\">segunda</term>    <term name=\"long-ordinal-03\">tercera</term>    <term name=\"long-ordinal-04\">cuarta</term>    <term name=\"long-ordinal-05\">quinta</term>    <term name=\"long-ordinal-06\">sexta</term>    <term name=\"long-ordinal-07\">séptima</term>    <term name=\"long-ordinal-08\">octava</term>    <term name=\"long-ordinal-09\">novena</term>    <term name=\"long-ordinal-10\">décima</term>    <!-- LONG LOCATOR FORMS -->    <term name=\"book\">      <single>libro</single>      <multiple>libros</multiple>    </term>    <term name=\"chapter\">      <single>capítulo</single>      <multiple>capítulos</multiple>    </term>    <term name=\"column\">      <single>columna</single>      <multiple>columnas</multiple>    </term>    <term name=\"figure\">      <single>figura</single>      <multiple>figuras</multiple>    </term>    <term name=\"folio\">      <single>folio</single>      <multiple>folios</multiple>    </term>    <term name=\"issue\">      <single>número</single>      <multiple>números</multiple>    </term>    <term name=\"line\">      <single>línea</single>      <multiple>líneas</multiple>    </term>    <term name=\"note\">      <single>nota</single>      <multiple>notas</multiple>    </term>    <term name=\"opus\">      <single>opus</single>      <multiple>opera</multiple>    </term>    <term name=\"page\">      <single>página</single>      <multiple>páginas</multiple>    </term>    <term name=\"number-of-pages\">      <single>página</single>      <multiple>páginas</multiple>    </term>    <term name=\"paragraph\">      <single>párrafo</single>      <multiple>párrafos</multiple>    </term>    <term name=\"part\">      <single>parte</single>      <multiple>partes</multiple>    </term>    <term name=\"section\">      <single>sección</single>      <multiple>secciones</multiple>    </term>    <term name=\"sub verbo\">      <single>sub voce</single>      <multiple>sub vocibus</multiple>    </term>    <term name=\"verse\">      <single>verso</single>      <multiple>versos</multiple>    </term>    <term name=\"volume\">      <single>volumen</single>      <multiple>volúmenes</multiple>    </term>    <!-- SHORT LOCATOR FORMS -->    <term name=\"book\" form=\"short\">lib.</term>    <term name=\"chapter\" form=\"short\">cap.</term>    <term name=\"column\" form=\"short\">col.</term>    <term name=\"figure\" form=\"short\">fig.</term>    <term name=\"folio\" form=\"short\">f.</term>    <term name=\"issue\" form=\"short\">n.º</term>    <term name=\"line\" form=\"short\">l.</term>    <term name=\"note\" form=\"short\">n.</term>    <term name=\"opus\" form=\"short\">op.</term>    <term name=\"page\" form=\"short\">      <single>p.</single>      <multiple>pp.</multiple>    </term>    <term name=\"number-of-pages\" form=\"short\">      <single>p.</single>      <multiple>pp.</multiple>    </term>    <term name=\"paragraph\" form=\"short\">párr.</term>    <term name=\"part\" form=\"short\">pt.</term>    <term name=\"section\" form=\"short\">sec.</term>    <term name=\"sub verbo\" form=\"short\">      <single>s.&#160;v.</single>      <multiple>s.&#160;vv.</multiple>    </term>    <term name=\"verse\" form=\"short\">      <single>v.</single>      <multiple>vv.</multiple>    </term>    <term name=\"volume\" form=\"short\">      <single>vol.</single>      <multiple>vols.</multiple>    </term>    <!-- SYMBOL LOCATOR FORMS -->    <term name=\"paragraph\" form=\"symbol\">      <single>§</single>      <multiple>§</multiple>    </term>    <term name=\"section\" form=\"symbol\">      <single>§</single>      <multiple>§</multiple>    </term>    <!-- LONG ROLE FORMS -->    <term name=\"director\">      <single>director</single>      <multiple>directores</multiple>    </term>    <term name=\"editor\">      <single>editor</single>      <multiple>editores</multiple>    </term>    <term name=\"editorial-director\">      <single>editor</single>      <multiple>editores</multiple>    </term>    <term name=\"illustrator\">      <single>ilustrador</single>      <multiple>ilustradores</multiple>    </term>    <term name=\"translator\">      <single>traductor</single>      <multiple>traductores</multiple>    </term>    <term name=\"editortranslator\">      <single>editor y traductor</single>      <multiple>editores y traductores</multiple>    </term>    <!-- SHORT ROLE FORMS -->    <term name=\"director\" form=\"short\">      <single>dir.</single>      <multiple>dirs.</multiple>    </term>    <term name=\"editor\" form=\"short\">      <single>ed.</single>      <multiple>eds.</multiple>    </term>    <term name=\"editorial-director\" form=\"short\">      <single>ed.</single>      <multiple>eds.</multiple>    </term>    <term name=\"illustrator\" form=\"short\">      <single>ilust.</single>      <multiple>ilusts.</multiple>    </term>    <term name=\"translator\" form=\"short\">      <single>trad.</single>      <multiple>trads.</multiple>    </term>    <term name=\"editortranslator\" form=\"short\">      <single>ed. y trad.</single>      <multiple>eds. y trads.</multiple>    </term>    <!-- VERB ROLE FORMS -->    <term name=\"container-author\" form=\"verb\">de</term>    <term name=\"director\" form=\"verb\">dirigido por</term>    <term name=\"editor\" form=\"verb\">editado por</term>    <term name=\"editorial-director\" form=\"verb\">editado por</term>    <term name=\"illustrator\" form=\"verb\">ilustrado por</term>    <term name=\"interviewer\" form=\"verb\">entrevistado por</term>    <term name=\"recipient\" form=\"verb\">a</term>    <term name=\"reviewed-author\" form=\"verb\">por</term>    <term name=\"translator\" form=\"verb\">traducido por</term>    <term name=\"editortranslator\" form=\"verb\">editado y traducido por</term>    <!-- SHORT VERB ROLE FORMS -->    <term name=\"director\" form=\"verb-short\">dir.</term>    <term name=\"editor\" form=\"verb-short\">ed.</term>    <term name=\"editorial-director\" form=\"verb-short\">ed.</term>    <term name=\"illustrator\" form=\"verb-short\">ilust.</term>    <term name=\"translator\" form=\"verb-short\">trad.</term>    <term name=\"editortranslator\" form=\"verb-short\">ed. y trad.</term>    <!-- LONG MONTH FORMS -->    <term name=\"month-01\">enero</term>    <term name=\"month-02\">febrero</term>    <term name=\"month-03\">marzo</term>    <term name=\"month-04\">abril</term>    <term name=\"month-05\">mayo</term>    <term name=\"month-06\">junio</term>    <term name=\"month-07\">julio</term>    <term name=\"month-08\">agosto</term>    <term name=\"month-09\">septiembre</term>    <term name=\"month-10\">octubre</term>    <term name=\"month-11\">noviembre</term>    <term name=\"month-12\">diciembre</term>    <!-- SHORT MONTH FORMS -->    <term name=\"month-01\" form=\"short\">ene.</term>    <term name=\"month-02\" form=\"short\">feb.</term>    <term name=\"month-03\" form=\"short\">mar.</term>    <term name=\"month-04\" form=\"short\">abr.</term>    <term name=\"month-05\" form=\"short\">may</term>    <term name=\"month-06\" form=\"short\">jun.</term>    <term name=\"month-07\" form=\"short\">jul.</term>    <term name=\"month-08\" form=\"short\">ago.</term>    <term name=\"month-09\" form=\"short\">sep.</term>    <term name=\"month-10\" form=\"short\">oct.</term>    <term name=\"month-11\" form=\"short\">nov.</term>    <term name=\"month-12\" form=\"short\">dic.</term>    <!-- SEASONS -->    <term name=\"season-01\">primavera</term>    <term name=\"season-02\">verano</term>    <term name=\"season-03\">otoño</term>    <term name=\"season-04\">invierno</term>  </terms></locale>",
        "fr-FR": "<?xml version=\"1.0\" encoding=\"utf-8\"?><locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"fr-FR\">  <info>    <translator>      <name>Grégoire Colly</name>    </translator>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>    <updated>2012-07-04T23:31:02+00:00</updated>  </info>  <style-options punctuation-in-quote=\"false\" limit-day-ordinals-to-day-1=\"true\"/>  <date form=\"text\">    <date-part name=\"day\" suffix=\" \"/>    <date-part name=\"month\" suffix=\" \"/>    <date-part name=\"year\"/>  </date>  <date form=\"numeric\">    <date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/>    <date-part name=\"year\"/>  </date>  <terms>    <term name=\"accessed\">consulté le</term>    <term name=\"and\">et</term>    <term name=\"and others\">et autres</term>    <term name=\"anonymous\">anonyme</term>    <term name=\"anonymous\" form=\"short\">anon.</term>    <term name=\"at\">sur</term>    <term name=\"available at\">disponible sur</term>    <term name=\"by\">par</term>    <term name=\"circa\">vers</term>    <term name=\"circa\" form=\"short\">v.</term>    <term name=\"cited\">cité</term>    <term name=\"edition\" gender=\"feminine\">      <single>édition</single>      <multiple>éditions</multiple>    </term>    <term name=\"edition\" form=\"short\">éd.</term>    <term name=\"et-al\">et al.</term>    <term name=\"forthcoming\">à paraître</term>    <term name=\"from\">à l'adresse</term>    <term name=\"ibid\">ibid.</term>    <term name=\"in\">in</term>    <term name=\"in press\">sous presse</term>    <term name=\"internet\">Internet</term>    <term name=\"interview\">entretien</term>    <term name=\"letter\">lettre</term>    <term name=\"no date\">sans date</term>    <term name=\"no date\" form=\"short\">s.&#160;d.</term>    <term name=\"online\">en ligne</term>    <term name=\"presented at\">présenté à</term>    <term name=\"reference\">      <single>référence</single>      <multiple>références</multiple>    </term>    <term name=\"reference\" form=\"short\">      <single>réf.</single>      <multiple>réf.</multiple>    </term>    <term name=\"retrieved\">consulté</term>    <term name=\"scale\">échelle</term>    <term name=\"version\">version</term>    <!-- ANNO DOMINI; BEFORE CHRIST -->    <term name=\"ad\">apr. J.-C.</term>    <term name=\"bc\">av. J.-C.</term>    <!-- PUNCTUATION -->    <term name=\"open-quote\">«&#160;</term>    <term name=\"close-quote\">&#160;»</term>    <term name=\"open-inner-quote\">“</term>    <term name=\"close-inner-quote\">”</term>    <term name=\"page-range-delimiter\">&#8209;</term> <!-- non-breaking hyphen -->    <!-- ORDINALS -->    <term name=\"ordinal\">ᵉ</term>    <term name=\"ordinal-01\" gender-form=\"feminine\" match=\"whole-number\">ʳᵉ</term>    <term name=\"ordinal-01\" gender-form=\"masculine\" match=\"whole-number\">ᵉʳ</term>        <!-- LONG ORDINALS -->    <term name=\"long-ordinal-01\">premier</term>    <term name=\"long-ordinal-02\">deuxième</term>    <term name=\"long-ordinal-03\">troisième</term>    <term name=\"long-ordinal-04\">quatrième</term>    <term name=\"long-ordinal-05\">cinquième</term>    <term name=\"long-ordinal-06\">sixième</term>    <term name=\"long-ordinal-07\">septième</term>    <term name=\"long-ordinal-08\">huitième</term>    <term name=\"long-ordinal-09\">neuvième</term>    <term name=\"long-ordinal-10\">dixième</term>    <!-- LONG LOCATOR FORMS -->    <term name=\"book\">      <single>livre</single>      <multiple>livres</multiple>    </term>    <term name=\"chapter\">      <single>chapitre</single>      <multiple>chapitres</multiple>    </term>    <term name=\"column\">      <single>colonne</single>      <multiple>colonnes</multiple>    </term>    <term name=\"figure\">      <single>figure</single>      <multiple>figures</multiple>    </term>    <term name=\"folio\">      <single>folio</single>      <multiple>folios</multiple>    </term>    <term name=\"issue\" gender=\"masculine\">      <single>numéro</single>      <multiple>numéros</multiple>    </term>    <term name=\"line\">      <single>ligne</single>      <multiple>lignes</multiple>    </term>    <term name=\"note\">      <single>note</single>      <multiple>notes</multiple>    </term>    <term name=\"opus\">      <single>opus</single>      <multiple>opus</multiple>    </term>    <term name=\"page\">      <single>page</single>      <multiple>pages</multiple>    </term>    <term name=\"number-of-pages\">      <single>page</single>      <multiple>pages</multiple>    </term>    <term name=\"paragraph\">      <single>paragraphe</single>      <multiple>paragraphes</multiple>    </term>    <term name=\"part\">      <single>partie</single>      <multiple>parties</multiple>    </term>    <term name=\"section\">      <single>section</single>      <multiple>sections</multiple>    </term>    <term name=\"sub verbo\">      <single>sub verbo</single>      <multiple>sub verbis</multiple>    </term>    <term name=\"verse\">      <single>verset</single>      <multiple>versets</multiple>    </term>    <term name=\"volume\" gender=\"masculine\">      <single>volume</single>      <multiple>volumes</multiple>    </term>    <!-- SHORT LOCATOR FORMS -->    <term name=\"book\" form=\"short\">liv.</term>    <term name=\"chapter\" form=\"short\">chap.</term>    <term name=\"column\" form=\"short\">col.</term>    <term name=\"figure\" form=\"short\">fig.</term>    <term name=\"folio\" form=\"short\">      <single>fᵒ</single>      <multiple>fᵒˢ</multiple>    </term>    <term name=\"issue\" form=\"short\">      <single>nᵒ</single>      <multiple>nᵒˢ</multiple>    </term>    <term name=\"line\" form=\"short\">l.</term>    <term name=\"note\" form=\"short\">n.</term>    <term name=\"opus\" form=\"short\">op.</term>    <term name=\"page\" form=\"short\">      <single>p.</single>      <multiple>p.</multiple>    </term>    <term name=\"number-of-pages\" form=\"short\">      <single>p.</single>      <multiple>p.</multiple>    </term>    <term name=\"paragraph\" form=\"short\">paragr.</term>    <term name=\"part\" form=\"short\">part.</term>    <term name=\"section\" form=\"short\">sect.</term>    <term name=\"sub verbo\" form=\"short\">      <single>s.&#160;v.</single>      <multiple>s.&#160;vv.</multiple>    </term>    <term name=\"verse\" form=\"short\">      <single>v.</single>      <multiple>v.</multiple>    </term>    <term name=\"volume\" form=\"short\">      <single>vol.</single>      <multiple>vol.</multiple>    </term>    <!-- SYMBOL LOCATOR FORMS -->    <term name=\"paragraph\" form=\"symbol\">      <single>§</single>      <multiple>§</multiple>    </term>    <term name=\"section\" form=\"symbol\">      <single>§</single>      <multiple>§</multiple>    </term>    <!-- LONG ROLE FORMS -->    <term name=\"director\">      <single>réalisateur</single>      <multiple>réalisateurs</multiple>    </term>    <term name=\"editor\">      <single>éditeur</single>      <multiple>éditeurs</multiple>    </term>    <term name=\"editorial-director\">      <single>directeur</single>      <multiple>directeurs</multiple>    </term>    <term name=\"illustrator\">      <single>illustrateur</single>      <multiple>illustrateurs</multiple>    </term>    <term name=\"translator\">      <single>traducteur</single>      <multiple>traducteurs</multiple>    </term>    <term name=\"editortranslator\">      <single>éditeur et traducteur</single>      <multiple>éditeurs et traducteurs</multiple>    </term>    <!-- SHORT ROLE FORMS -->    <term name=\"director\" form=\"short\">      <single>réal.</single>      <multiple>réal.</multiple>    </term>    <term name=\"editor\" form=\"short\">      <single>éd.</single>      <multiple>éd.</multiple>    </term>    <term name=\"editorial-director\" form=\"short\">      <single>dir.</single>      <multiple>dir.</multiple>    </term>    <term name=\"illustrator\" form=\"short\">      <single>ill.</single>      <multiple>ill.</multiple>    </term>    <term name=\"translator\" form=\"short\">      <single>trad.</single>      <multiple>trad.</multiple>    </term>    <term name=\"editortranslator\" form=\"short\">      <single>éd. et trad.</single>      <multiple>éd. et trad.</multiple>    </term>    <!-- VERB ROLE FORMS -->    <term name=\"container-author\" form=\"verb\">par</term>    <term name=\"director\" form=\"verb\">réalisé par</term>    <term name=\"editor\" form=\"verb\">édité par</term>    <term name=\"editorial-director\" form=\"verb\">sous la direction de</term>    <term name=\"illustrator\" form=\"verb\">illustré par</term>    <term name=\"interviewer\" form=\"verb\">entretien réalisé par</term>    <term name=\"recipient\" form=\"verb\">à</term>    <term name=\"reviewed-author\" form=\"verb\">par</term>    <term name=\"translator\" form=\"verb\">traduit par</term>    <term name=\"editortranslator\" form=\"verb\">édité et traduit par</term>    <!-- SHORT VERB ROLE FORMS -->    <term name=\"director\" form=\"verb-short\">réal. par</term>    <term name=\"editor\" form=\"verb-short\">éd. par</term>    <term name=\"editorial-director\" form=\"verb-short\">ss la dir. de</term>    <term name=\"illustrator\" form=\"verb-short\">ill. par</term>    <term name=\"translator\" form=\"verb-short\">trad. par</term>    <term name=\"editortranslator\" form=\"verb-short\">éd. et trad. par</term>    <!-- LONG MONTH FORMS -->    <term name=\"month-01\" gender=\"masculine\">janvier</term>    <term name=\"month-02\" gender=\"masculine\">février</term>    <term name=\"month-03\" gender=\"masculine\">mars</term>    <term name=\"month-04\" gender=\"masculine\">avril</term>    <term name=\"month-05\" gender=\"masculine\">mai</term>    <term name=\"month-06\" gender=\"masculine\">juin</term>    <term name=\"month-07\" gender=\"masculine\">juillet</term>    <term name=\"month-08\" gender=\"masculine\">août</term>    <term name=\"month-09\" gender=\"masculine\">septembre</term>    <term name=\"month-10\" gender=\"masculine\">octobre</term>    <term name=\"month-11\" gender=\"masculine\">novembre</term>    <term name=\"month-12\" gender=\"masculine\">décembre</term>    <!-- SHORT MONTH FORMS -->    <term name=\"month-01\" form=\"short\">janv.</term>    <term name=\"month-02\" form=\"short\">févr.</term>    <term name=\"month-03\" form=\"short\">mars</term>    <term name=\"month-04\" form=\"short\">avr.</term>    <term name=\"month-05\" form=\"short\">mai</term>    <term name=\"month-06\" form=\"short\">juin</term>    <term name=\"month-07\" form=\"short\">juill.</term>    <term name=\"month-08\" form=\"short\">août</term>    <term name=\"month-09\" form=\"short\">sept.</term>    <term name=\"month-10\" form=\"short\">oct.</term>    <term name=\"month-11\" form=\"short\">nov.</term>    <term name=\"month-12\" form=\"short\">déc.</term>    <!-- SEASONS -->    <term name=\"season-01\">printemps</term>    <term name=\"season-02\">été</term>    <term name=\"season-03\">automne</term>    <term name=\"season-04\">hiver</term>  </terms></locale>"
    },
    styles: {
        "american-anthropological-association": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\" default-locale=\"en-US\">  <info>    <title>American Anthropological Association</title>    <title-short>AAA</title-short>    <id>http://www.zotero.org/styles/american-anthropological-association</id>    <link href=\"http://www.zotero.org/styles/american-anthropological-association\" rel=\"self\"/>    <link href=\"http://www.aaanet.org/publications/style_guide.pdf\" rel=\"documentation\"/>    <author>      <name>Sebastian Karcher</name>    </author>    <contributor>      <name>Mark Dingemanse</name>      <email>mark.dingemanse@mpi.nl</email>    </contributor>    <category citation-format=\"author-date\"/>    <category field=\"anthropology\"/>    <summary>Citation style for the American Anthropological Association - Support from the Society for Cultural Anthropology is thankfully acknowledged</summary>    <updated>2012-09-27T22:06:38+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <macro name=\"secondary-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"none\">        <!--<group delimiter=\". \">	    <names variable=\"editor translator\" delimiter=\", \">	    <name and=\"text\" delimiter=\", \"/>	    <label form=\"short\" prefix=\", \"/>	    </names>	    </group> -->        <group delimiter=\". \">          <names variable=\"editor\" delimiter=\", \">            <name and=\"text\" delimiter=\", \"/>            <label form=\"short\" prefix=\", \"/>          </names>          <names variable=\"translator\" delimiter=\", \">            <name and=\"text\" delimiter=\", \"/>            <label form=\"short\" prefix=\", \"/>          </names>        </group>      </if>    </choose>  </macro>  <macro name=\"container-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <group delimiter=\". \" prefix=\" \">          <names variable=\"editor\" delimiter=\", \">            <name and=\"text\" delimiter=\", \"/>            <label form=\"short\" prefix=\", \"/>          </names>          <names variable=\"translator\" delimiter=\", \">            <name and=\"text\" delimiter=\", \"/>            <label form=\"short\" prefix=\", \"/>          </names>        </group>        <!-- <group delimiter=\", \">	     <names variable=\"editor translator\" delimiter=\", \">	     <name and=\"text\" delimiter=\", \"/>	     <label form=\"short\" prefix=\", \"/>	     </names>	     </group> -->      </if>    </choose>  </macro>  <macro name=\"recipient\">    <choose>      <if type=\"personal_communication\">        <choose>          <if variable=\"genre\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </if>          <else>            <text term=\"letter\" text-case=\"capitalize-first\"/>          </else>        </choose>      </if>    </choose>    <names variable=\"recipient\" delimiter=\", \">      <label form=\"verb\" prefix=\" \" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"contributors\">    <choose>      <if type=\"motion_picture\" match=\"none\">        <names variable=\"author\">          <name and=\"text\" name-as-sort-order=\"first\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>          <label form=\"short\" prefix=\", \"/>          <substitute>            <names variable=\"editor\"/>            <names variable=\"translator\"/>            <text macro=\"title\"/>          </substitute>        </names>        <text macro=\"recipient\"/>      </if>      <else>        <names variable=\"author\">          <name and=\"text\" name-as-sort-order=\"first\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\" suffix=\", dir.\"/>          <label form=\"short\" prefix=\", \"/>          <substitute>            <text macro=\"title\"/>          </substitute>        </names>      </else>    </choose>  </macro>  <macro name=\"contributors-short\">    <names variable=\"author\">      <name form=\"short\" and=\"text\" delimiter=\", \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <text macro=\"title\"/>      </substitute>    </names>  </macro>  <macro name=\"interviewer\">    <names variable=\"interviewer\" delimiter=\", \">      <label form=\"verb\" prefix=\" \" text-case=\"capitalize-first\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"archive\">    <choose>      <if variable=\"archive archive_location\" match=\"any\">        <group delimiter=\". \">          <text variable=\"archive_location\" text-case=\"capitalize-first\"/>          <text variable=\"archive\"/>          <text variable=\"archive-place\"/>        </group>      </if>    </choose>  </macro>  <macro name=\"access\">    <choose>      <if variable=\"URL\">        <group delimiter=\", \">          <text variable=\"URL\"/>          <group delimiter=\" \">            <text term=\"accessed\"/>            <date variable=\"accessed\">              <date-part name=\"month\" form=\"long\"/>              <date-part name=\"day\" prefix=\" \"/>              <date-part name=\"year\" prefix=\", \"/>            </date>          </group>        </group>      </if>    </choose>  </macro>  <macro name=\"title\">    <choose>      <if variable=\"title\" match=\"none\">        <choose>          <if type=\"personal_communication\" match=\"none\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </if>        </choose>      </if>      <else>        <group delimiter=\", \">          <text variable=\"title\" text-case=\"title\"/>          <group>            <choose>              <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">                <group>                  <text term=\"volume\" form=\"short\"/>                  <number variable=\"volume\" form=\"numeric\"/>                </group>              </if>            </choose>          </group>        </group>      </else>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song\" match=\"any\">        <choose>          <if is-numeric=\"edition\">            <group delimiter=\" \">              <number variable=\"edition\" form=\"ordinal\"/>              <text term=\"edition\" strip-periods=\"true\"/>            </group>          </if>          <else>            <text variable=\"edition\" suffix=\".\"/>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators\">    <choose>      <if type=\"article-journal\">        <text variable=\"volume\" prefix=\" \"/>        <text variable=\"issue\" prefix=\"(\" suffix=\")\"/>      </if>    </choose>  </macro>  <macro name=\"locators-chapter\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <group delimiter=\" \">          <label variable=\"page\" form=\"short\" text-case=\"capitalize-first\" prefix=\" \"/>          <text variable=\"page\"/>        </group>      </if>    </choose>  </macro>  <macro name=\"locators-article\">    <choose>      <if type=\"article-newspaper article-journal article-magazine\" match=\"any\">        <text variable=\"page\" prefix=\": \"/>      </if>    </choose>  </macro>  <macro name=\"point-locators\">    <group>      <choose>        <if locator=\"page\" match=\"none\">          <label variable=\"locator\" form=\"short\" suffix=\" \"/>        </if>      </choose>      <text variable=\"locator\"/>    </group>  </macro>  <macro name=\"container-prefix\">    <text term=\"in\" text-case=\"capitalize-first\" font-style=\"italic\"/>  </macro>  <macro name=\"container-title\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <text macro=\"container-prefix\" suffix=\" \"/>      </if>    </choose>    <text variable=\"container-title\" text-case=\"title\"/>  </macro>  <macro name=\"publisher\">    <choose>      <if type=\"motion_picture\" match=\"none\">        <group delimiter=\": \">          <choose>            <if type=\"thesis\" match=\"none\">              <text variable=\"publisher-place\"/>            </if>          </choose>          <text variable=\"publisher\"/>        </group>      </if>      <else>        <group delimiter=\". \">          <text variable=\"publisher\"/>          <text variable=\"publisher-place\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"date-reference\">    <choose>      <if variable=\"issued\">        <date variable=\"issued\">          <date-part name=\"year\"/>        </date>      </if>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"date-bibliography\">    <choose>      <if variable=\"issued\">        <date variable=\"issued\">          <date-part name=\"year\"/>        </date>      </if>      <else>        <text term=\"no date\" form=\"short\" text-case=\"capitalize-first\"/>      </else>    </choose>  </macro>  <macro name=\"day-month\">    <date variable=\"issued\">      <date-part name=\"month\"/>      <date-part name=\"day\" prefix=\" \"/>    </date>  </macro>  <macro name=\"collection-title\">    <text variable=\"collection-title\" text-case=\"title\"/>    <text variable=\"collection-number\" prefix=\", \"/>  </macro>  <macro name=\"event\">    <group delimiter=\" \">      <text term=\"presented at\" prefix=\" \"/>      <text variable=\"event\"/>    </group>  </macro>  <macro name=\"description\">    <group delimiter=\". \">      <text macro=\"interviewer\"/>      <text variable=\"medium\" text-case=\"capitalize-first\"/>    </group>    <choose>      <if variable=\"title\" match=\"none\"/>      <else-if type=\"thesis manuscript\" match=\"any\"/>      <else>        <group delimiter=\", \">          <text variable=\"genre\" text-case=\"capitalize-first\"/>          <choose>            <if type=\"report\">              <text variable=\"number\"/>            </if>          </choose>        </group>      </else>    </choose>  </macro>  <macro name=\"issue\">    <choose>      <if type=\"speech\">        <group delimiter=\", \">          <choose>            <if variable=\"genre\">              <text macro=\"event\" prefix=\" \"/>            </if>            <else>              <text macro=\"event\" prefix=\". Paper \"/>            </else>          </choose>          <text variable=\"event-place\"/>          <text macro=\"day-month\"/>        </group>      </if>      <else-if type=\"article-newspaper article-magazine\" match=\"any\">        <text macro=\"day-month\" prefix=\", \"/>      </else-if>      <else-if type=\"interview broadcast\" match=\"any\">        <group prefix=\". \" delimiter=\", \">          <text variable=\"publisher\"/>          <text macro=\"day-month\"/>        </group>      </else-if>      <else>        <group prefix=\". \" delimiter=\", \">          <choose>            <if type=\"thesis manuscript\" match=\"any\">              <text variable=\"genre\" text-case=\"capitalize-first\"/>            </if>          </choose>          <text macro=\"archive\"/>          <text macro=\"publisher\"/>        </group>      </else>    </choose>  </macro>  <citation et-al-min=\"4\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\">    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <group delimiter=\":\">        <group delimiter=\" \">          <text macro=\"contributors-short\"/>          <text macro=\"date-reference\"/>        </group>        <text macro=\"point-locators\"/>      </group>    </layout>  </citation>  <bibliography et-al-min=\"6\" et-al-use-first=\"3\" subsequent-author-substitute=\"\" entry-spacing=\"0\">    <sort>      <key macro=\"contributors\"/>      <key variable=\"issued\"/>    </sort>    <layout suffix=\".\">      <group display=\"block\">        <text macro=\"contributors\"/>      </group>      <group display=\"left-margin\">        <text macro=\"date-bibliography\" prefix=\" \"/>        <date variable=\"original-date\" prefix=\"[\" suffix=\"]\">          <date-part name=\"year\"/>        </date>      </group>      <group display=\"right-inline\">        <group delimiter=\". \">          <text macro=\"title\"/>          <text macro=\"description\"/>          <text macro=\"secondary-contributors\"/>          <text macro=\"container-title\"/>          <text macro=\"edition\"/>          <text macro=\"container-contributors\"/>        </group>        <text macro=\"locators-chapter\"/>        <text macro=\"locators\"/>        <text macro=\"collection-title\" prefix=\". \"/>        <text macro=\"issue\"/>        <text macro=\"locators-article\"/>        <text macro=\"access\" prefix=\". \"/>      </group>    </layout>  </bibliography></style>",
            name: "American Anthropological Association" },
        "apa": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"never\">  <info>    <title>American Psychological Association 6th edition</title>    <title-short>APA</title-short>    <id>http://www.zotero.org/styles/apa</id>    <link href=\"http://www.zotero.org/styles/apa\" rel=\"self\"/>    <link href=\"http://owl.english.purdue.edu/owl/resource/560/01/\" rel=\"documentation\"/>    <author>      <name>Simon Kornblith</name>      <email>simon@simonster.com</email>    </author>    <contributor>      <name>Bruce D'Arcus</name>    </contributor>    <contributor>      <name>Curtis M. Humphrey</name>    </contributor>    <contributor>      <name>Richard Karnesky</name>      <email>karnesky+zotero@gmail.com</email>      <uri>http://arc.nucapt.northwestern.edu/Richard_Karnesky</uri>    </contributor>    <contributor>      <name>Sebastian Karcher</name>    </contributor>    <contributor>      <name> Brenton M. Wiernik</name>      <email>zotero@wiernik.org</email>    </contributor>    <category citation-format=\"author-date\"/>    <category field=\"psychology\"/>    <category field=\"generic-base\"/>    <updated>2016-05-25T09:01:49+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <locale xml:lang=\"en\">    <terms>      <term name=\"editortranslator\" form=\"short\">        <single>ed. &amp; trans.</single>        <multiple>eds. &amp; trans.</multiple>      </term>      <term name=\"translator\" form=\"short\">        <single>trans.</single>        <multiple>trans.</multiple>      </term>    </terms>  </locale>  <macro name=\"container-contributors\">    <choose>      <if type=\"chapter paper-conference entry-dictionary entry-encyclopedia\" match=\"any\">        <group delimiter=\", \">          <names variable=\"container-author\" delimiter=\", \">            <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>            <label form=\"short\" prefix=\" (\" text-case=\"title\" suffix=\")\"/>          </names>          <names variable=\"editor translator\" delimiter=\", \">            <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>            <label form=\"short\" prefix=\" (\" text-case=\"title\" suffix=\")\"/>          </names>        </group>      </if>    </choose>  </macro>  <macro name=\"secondary-contributors\">    <choose>      <if type=\"article-journal chapter paper-conference entry-dictionary entry-encyclopedia\" match=\"none\">        <group delimiter=\", \" prefix=\" (\" suffix=\")\">          <names variable=\"container-author\" delimiter=\", \">            <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>            <label form=\"short\" prefix=\", \" text-case=\"title\"/>          </names>          <names variable=\"editor translator\" delimiter=\", \">            <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>            <label form=\"short\" prefix=\", \" text-case=\"title\"/>          </names>        </group>      </if>    </choose>  </macro>  <macro name=\"author\">    <names variable=\"author\">      <name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"short\" prefix=\" (\" suffix=\")\" text-case=\"capitalize-first\"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <choose>          <if type=\"report\">            <text variable=\"publisher\"/>            <text macro=\"title\"/>          </if>          <else>            <text macro=\"title\"/>          </else>        </choose>      </substitute>    </names>  </macro>  <macro name=\"author-short\">    <names variable=\"author\">      <name form=\"short\" and=\"symbol\" delimiter=\", \" initialize-with=\". \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <choose>          <if type=\"report\">            <text variable=\"publisher\"/>            <text variable=\"title\" form=\"short\" font-style=\"italic\"/>          </if>          <else-if type=\"legal_case\">            <text variable=\"title\" font-style=\"italic\"/>          </else-if>          <else-if type=\"bill book graphic legislation motion_picture song\" match=\"any\">            <text variable=\"title\" form=\"short\" font-style=\"italic\"/>          </else-if>          <else-if variable=\"reviewed-author\">            <choose>              <if variable=\"reviewed-title\" match=\"none\">                <text variable=\"title\" form=\"short\" font-style=\"italic\" prefix=\"Review of \"/>              </if>              <else>                <text variable=\"title\" form=\"short\" quotes=\"true\"/>              </else>            </choose>          </else-if>          <else>            <text variable=\"title\" form=\"short\" quotes=\"true\"/>          </else>        </choose>      </substitute>    </names>  </macro>  <macro name=\"access\">    <choose>      <if type=\"thesis report\" match=\"any\">        <choose>          <if variable=\"DOI\" match=\"any\">            <text variable=\"DOI\" prefix=\"https://doi.org/\"/>          </if>          <else-if variable=\"archive\" match=\"any\">            <group>              <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>              <text term=\"from\" suffix=\" \"/>              <text variable=\"archive\" suffix=\".\"/>              <text variable=\"archive_location\" prefix=\" (\" suffix=\")\"/>            </group>          </else-if>          <else>            <group>              <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>              <text term=\"from\" suffix=\" \"/>              <text variable=\"URL\"/>            </group>          </else>        </choose>      </if>      <else>        <choose>          <if variable=\"DOI\">            <text variable=\"DOI\" prefix=\"https://doi.org/\"/>          </if>          <else>            <choose>              <if type=\"webpage\">                <group delimiter=\" \">                  <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>                  <group>                    <date variable=\"accessed\" form=\"text\" suffix=\", \"/>                  </group>                  <text term=\"from\"/>                  <text variable=\"URL\"/>                </group>              </if>              <else>                <group>                  <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>                  <text term=\"from\" suffix=\" \"/>                  <text variable=\"URL\"/>                </group>              </else>            </choose>          </else>        </choose>      </else>    </choose>  </macro>  <macro name=\"title\">    <choose>      <if type=\"book graphic manuscript motion_picture report song speech thesis\" match=\"any\">        <choose>          <if variable=\"version\" type=\"book\" match=\"all\">            <!---This is a hack until we have a computer program type -->            <text variable=\"title\"/>          </if>          <else>            <text variable=\"title\" font-style=\"italic\"/>          </else>        </choose>      </if>      <else-if variable=\"reviewed-author\">        <choose>          <if variable=\"reviewed-title\">            <group delimiter=\" \">              <text variable=\"title\"/>              <group delimiter=\", \" prefix=\"[\" suffix=\"]\">                <text variable=\"reviewed-title\" font-style=\"italic\" prefix=\"Review of \"/>                <names variable=\"reviewed-author\" delimiter=\", \">                  <label form=\"verb-short\" suffix=\" \"/>                  <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>                </names>              </group>            </group>          </if>          <else>            <!-- assume `title` is title of reviewed work -->            <group delimiter=\", \" prefix=\"[\" suffix=\"]\">              <text variable=\"title\" font-style=\"italic\" prefix=\"Review of \"/>              <names variable=\"reviewed-author\" delimiter=\", \">                <label form=\"verb-short\" suffix=\" \"/>                <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>              </names>            </group>          </else>        </choose>      </else-if>      <else>        <text variable=\"title\"/>      </else>    </choose>  </macro>  <macro name=\"title-plus-extra\">    <text macro=\"title\"/>    <choose>      <if type=\"report thesis\" match=\"any\">        <group prefix=\" (\" suffix=\")\" delimiter=\", \">          <group delimiter=\" \">            <choose>              <if variable=\"genre\" match=\"any\">                <text variable=\"genre\"/>              </if>              <else>                <text variable=\"collection-title\"/>              </else>            </choose>            <text variable=\"number\" prefix=\"No. \"/>          </group>          <group delimiter=\" \">            <text term=\"version\" text-case=\"capitalize-first\"/>            <text variable=\"version\"/>          </group>          <text macro=\"edition\"/>        </group>      </if>      <else-if type=\"post-weblog webpage\" match=\"any\">        <text variable=\"genre\" prefix=\" [\" suffix=\"]\"/>      </else-if>      <else-if variable=\"version\">        <group delimiter=\" \" prefix=\" (\" suffix=\")\">          <text term=\"version\" text-case=\"capitalize-first\"/>          <text variable=\"version\"/>        </group>      </else-if>    </choose>    <text macro=\"format\" prefix=\" [\" suffix=\"]\"/>  </macro>  <macro name=\"format\">    <choose>      <if match=\"any\" variable=\"medium\">        <text variable=\"medium\" text-case=\"capitalize-first\"/>      </if>      <else-if type=\"dataset\" match=\"any\">        <text value=\"Data set\"/>      </else-if>    </choose>  </macro>  <macro name=\"publisher\">    <choose>      <if type=\"report\" match=\"any\">        <group delimiter=\": \">          <text variable=\"publisher-place\"/>          <text variable=\"publisher\"/>        </group>      </if>      <else-if type=\"thesis\" match=\"any\">        <group delimiter=\", \">          <text variable=\"publisher\"/>          <text variable=\"publisher-place\"/>        </group>      </else-if>      <else-if type=\"post-weblog webpage\" match=\"none\">        <group delimiter=\", \">          <choose>            <if variable=\"event version\" type=\"speech motion_picture\" match=\"none\">              <!-- Including version is to avoid printing the programming language for computerProgram /-->              <text variable=\"genre\"/>            </if>          </choose>          <choose>            <if type=\"article-journal article-magazine\" match=\"none\">              <group delimiter=\": \">                <choose>                  <if variable=\"publisher-place\">                    <text variable=\"publisher-place\"/>                  </if>                  <else>                    <text variable=\"event-place\"/>                  </else>                </choose>                <text variable=\"publisher\"/>              </group>            </if>          </choose>        </group>      </else-if>    </choose>  </macro>  <macro name=\"event\">    <choose>      <if variable=\"container-title\" match=\"none\">        <choose>          <if variable=\"event\">            <choose>              <if variable=\"genre\" match=\"none\">                <text term=\"presented at\" text-case=\"capitalize-first\" suffix=\" \"/>                <text variable=\"event\"/>              </if>              <else>                <group delimiter=\" \">                  <text variable=\"genre\" text-case=\"capitalize-first\"/>                  <text term=\"presented at\"/>                  <text variable=\"event\"/>                </group>              </else>            </choose>          </if>          <else-if type=\"speech\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </else-if>        </choose>      </if>    </choose>  </macro>  <macro name=\"issued\">    <choose>      <if type=\"bill legal_case legislation\" match=\"none\">        <choose>          <if variable=\"issued\">            <group prefix=\" (\" suffix=\")\">              <date variable=\"issued\">                <date-part name=\"year\"/>              </date>              <text variable=\"year-suffix\"/>              <choose>                <if type=\"speech\" match=\"any\">                  <date variable=\"issued\">                    <date-part prefix=\", \" name=\"month\"/>                  </date>                </if>                <else-if type=\"article-journal bill book chapter graphic legal_case legislation motion_picture paper-conference report song dataset\" match=\"none\">                  <date variable=\"issued\">                    <date-part prefix=\", \" name=\"month\"/>                    <date-part prefix=\" \" name=\"day\"/>                  </date>                </else-if>              </choose>            </group>          </if>          <else-if variable=\"status\">            <group prefix=\" (\" suffix=\")\">              <text variable=\"status\"/>              <text variable=\"year-suffix\" prefix=\"-\"/>            </group>          </else-if>          <else>            <group prefix=\" (\" suffix=\")\">              <text term=\"no date\" form=\"short\"/>              <text variable=\"year-suffix\" prefix=\"-\"/>            </group>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"issued-sort\">    <choose>      <if type=\"article-journal bill book chapter graphic legal_case legislation motion_picture paper-conference report song dataset\" match=\"none\">        <date variable=\"issued\">          <date-part name=\"year\"/>          <date-part name=\"month\"/>          <date-part name=\"day\"/>        </date>      </if>      <else>        <date variable=\"issued\">          <date-part name=\"year\"/>        </date>      </else>    </choose>  </macro>  <macro name=\"issued-year\">    <choose>      <if variable=\"issued\">        <group delimiter=\"/\">          <date variable=\"original-date\" form=\"text\"/>          <group>            <date variable=\"issued\">              <date-part name=\"year\"/>            </date>            <text variable=\"year-suffix\"/>          </group>        </group>      </if>      <else-if variable=\"status\">        <text variable=\"status\"/>        <text variable=\"year-suffix\" prefix=\"-\"/>      </else-if>      <else>        <text term=\"no date\" form=\"short\"/>        <text variable=\"year-suffix\" prefix=\"-\"/>      </else>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if is-numeric=\"edition\">        <group delimiter=\" \">          <number variable=\"edition\" form=\"ordinal\"/>          <text term=\"edition\" form=\"short\"/>        </group>      </if>      <else>        <text variable=\"edition\"/>      </else>    </choose>  </macro>  <macro name=\"locators\">    <choose>      <if type=\"article-journal article-magazine\" match=\"any\">        <group prefix=\", \" delimiter=\", \">          <group>            <text variable=\"volume\" font-style=\"italic\"/>            <text variable=\"issue\" prefix=\"(\" suffix=\")\"/>          </group>          <text variable=\"page\"/>        </group>        <choose>          <!--for advanced online publication-->          <if variable=\"issued\">            <choose>              <if variable=\"page issue\" match=\"none\">                <text variable=\"status\" prefix=\". \"/>              </if>            </choose>          </if>        </choose>      </if>      <else-if type=\"article-newspaper\">        <group delimiter=\" \" prefix=\", \">          <label variable=\"page\" form=\"short\"/>          <text variable=\"page\"/>        </group>      </else-if>      <else-if type=\"book graphic motion_picture report song chapter paper-conference entry-encyclopedia entry-dictionary\" match=\"any\">        <group prefix=\" (\" suffix=\")\" delimiter=\", \">          <choose>            <if type=\"report\" match=\"none\">              <!-- edition for report is included in title-plus-extra /-->              <text macro=\"edition\"/>            </if>          </choose>          <choose>            <if variable=\"volume\" match=\"any\">              <group>                <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\" suffix=\" \"/>                <number variable=\"volume\" form=\"numeric\"/>              </group>            </if>            <else>              <group>                <text term=\"volume\" form=\"short\" plural=\"true\" text-case=\"capitalize-first\" suffix=\" \"/>                <number variable=\"number-of-volumes\" form=\"numeric\" prefix=\"1&#8211;\"/>              </group>            </else>          </choose>          <group>            <label variable=\"page\" form=\"short\" suffix=\" \"/>            <text variable=\"page\"/>          </group>        </group>      </else-if>      <else-if type=\"legal_case\">        <group prefix=\" (\" suffix=\")\" delimiter=\" \">          <text variable=\"authority\"/>          <date variable=\"issued\" form=\"text\"/>        </group>      </else-if>      <else-if type=\"bill legislation\" match=\"any\">        <date variable=\"issued\" prefix=\" (\" suffix=\")\">          <date-part name=\"year\"/>        </date>      </else-if>    </choose>  </macro>  <macro name=\"citation-locator\">    <group>      <choose>        <if locator=\"chapter\">          <label variable=\"locator\" form=\"long\" text-case=\"capitalize-first\"/>        </if>        <else>          <label variable=\"locator\" form=\"short\"/>        </else>      </choose>      <text variable=\"locator\" prefix=\" \"/>    </group>  </macro>  <macro name=\"container\">    <choose>      <if type=\"post-weblog webpage\" match=\"none\">        <group>          <choose>            <if type=\"chapter paper-conference entry-encyclopedia\" match=\"any\">              <text term=\"in\" text-case=\"capitalize-first\" suffix=\" \"/>            </if>          </choose>          <group delimiter=\", \">            <text macro=\"container-contributors\"/>            <text macro=\"secondary-contributors\"/>            <text macro=\"container-title\"/>          </group>        </group>      </if>    </choose>  </macro>  <macro name=\"container-title\">    <choose>      <if type=\"article article-journal article-magazine article-newspaper\" match=\"any\">        <text variable=\"container-title\" font-style=\"italic\" text-case=\"title\"/>      </if>      <else-if type=\"bill legal_case legislation\" match=\"none\">        <text variable=\"container-title\" font-style=\"italic\"/>      </else-if>    </choose>  </macro>  <macro name=\"legal-cites\">    <choose>      <if type=\"bill legal_case legislation\" match=\"any\">        <group delimiter=\" \" prefix=\", \">          <choose>            <if variable=\"container-title\">              <text variable=\"volume\"/>              <text variable=\"container-title\"/>              <group delimiter=\" \">                <!--change to label variable=\"section\" as that becomes available -->                <text term=\"section\" form=\"symbol\"/>                <text variable=\"section\"/>              </group>              <text variable=\"page\"/>            </if>            <else>              <choose>                <if type=\"legal_case\">                  <text variable=\"number\" prefix=\"No. \"/>                </if>                <else>                  <text variable=\"number\" prefix=\"Pub. L. No. \"/>                  <group delimiter=\" \">                    <!--change to label variable=\"section\" as that becomes available -->                    <text term=\"section\" form=\"symbol\"/>                    <text variable=\"section\"/>                  </group>                </else>              </choose>            </else>          </choose>        </group>      </if>    </choose>  </macro>  <macro name=\"original-date\">    <choose>      <if variable=\"original-date\">        <group prefix=\"(\" suffix=\")\" delimiter=\" \">          <!---This should be localized-->          <text value=\"Original work published\"/>          <date variable=\"original-date\" form=\"text\"/>        </group>      </if>    </choose>  </macro>  <citation et-al-min=\"6\" et-al-use-first=\"1\" et-al-subsequent-min=\"3\" et-al-subsequent-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\" collapse=\"year\" givenname-disambiguation-rule=\"primary-name\">    <sort>      <key macro=\"author\"/>      <key macro=\"issued-sort\"/>    </sort>    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <group delimiter=\", \">        <text macro=\"author-short\"/>        <text macro=\"issued-year\"/>        <text macro=\"citation-locator\"/>      </group>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"8\" et-al-use-first=\"6\" et-al-use-last=\"true\" entry-spacing=\"0\" line-spacing=\"2\">    <sort>      <key macro=\"author\"/>      <key macro=\"issued-sort\" sort=\"ascending\"/>      <key macro=\"title\"/>    </sort>    <layout>      <group suffix=\".\">        <group delimiter=\". \">          <text macro=\"author\"/>          <text macro=\"issued\"/>          <text macro=\"title-plus-extra\"/>          <text macro=\"container\"/>        </group>        <text macro=\"legal-cites\"/>        <text macro=\"locators\"/>        <group delimiter=\", \" prefix=\". \">          <text macro=\"event\"/>          <text macro=\"publisher\"/>        </group>      </group>      <text macro=\"access\" prefix=\" \"/>      <text macro=\"original-date\" prefix=\" \"/>    </layout>  </bibliography></style>",
            name: "American Psychological Association" },
        "chicago-author-date": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"never\" page-range-format=\"chicago\">  <info>    <title>Chicago Manual of Style 16th edition (author-date)</title>    <id>http://www.zotero.org/styles/chicago-author-date</id>    <link href=\"http://www.zotero.org/styles/chicago-author-date\" rel=\"self\"/>    <link href=\"http://www.chicagomanualofstyle.org/tools_citationguide.html\" rel=\"documentation\"/>    <author>      <name>Julian Onions</name>      <email>julian.onions@gmail.com</email>    </author>    <contributor>      <name>Sebastian Karcher</name>    </contributor>    <contributor>      <name>Richard Karnesky</name>      <email>karnesky+zotero@gmail.com</email>      <uri>http://arc.nucapt.northwestern.edu/Richard_Karnesky</uri>    </contributor>    <contributor>      <name>Andrew Dunning</name>      <email>andrew.dunning@utoronto.ca</email>    </contributor>    <category citation-format=\"author-date\"/>    <category field=\"generic-base\"/>    <summary>The author-date variant of the Chicago style</summary>    <updated>2015-08-26T07:38:25+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <locale xml:lang=\"en\">    <terms>      <term name=\"editor\" form=\"verb-short\">ed.</term>      <term name=\"container-author\" form=\"verb\">by</term>      <term name=\"translator\" form=\"verb-short\">trans.</term>      <term name=\"editortranslator\" form=\"verb\">        <single>edited and translated by</single>        <multiple>edited and translated by</multiple>      </term>      <term name=\"translator\" form=\"short\">trans.</term>    </terms>  </locale>  <macro name=\"secondary-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"none\">        <group delimiter=\". \">          <names variable=\"editor translator\" delimiter=\". \">            <label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/>            <name and=\"text\" delimiter=\", \"/>          </names>          <names variable=\"director\" delimiter=\". \">            <label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/>            <name and=\"text\" delimiter=\", \"/>          </names>        </group>      </if>    </choose>  </macro>  <macro name=\"container-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <group prefix=\", \" delimiter=\", \">          <names variable=\"container-author\" delimiter=\", \">            <label form=\"verb\" suffix=\" \"/>            <name and=\"text\" delimiter=\", \"/>          </names>          <names variable=\"editor translator\" delimiter=\", \">            <label form=\"verb\" suffix=\" \"/>            <name and=\"text\" delimiter=\", \"/>          </names>        </group>      </if>    </choose>  </macro>  <macro name=\"editor\">    <names variable=\"editor\">      <name name-as-sort-order=\"first\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"short\" prefix=\", \"/>    </names>  </macro>  <macro name=\"translator\">    <names variable=\"translator\">      <name name-as-sort-order=\"first\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"short\" prefix=\", \"/>    </names>  </macro>  <macro name=\"recipient\">    <choose>      <if type=\"personal_communication\">        <choose>          <if variable=\"genre\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </if>          <else>            <text term=\"letter\" text-case=\"capitalize-first\"/>          </else>        </choose>      </if>    </choose>    <names variable=\"recipient\" delimiter=\", \">      <label form=\"verb\" prefix=\" \" text-case=\"lowercase\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"substitute-title\">    <choose>      <if type=\"article-magazine article-newspaper review review-book\" match=\"any\">        <text macro=\"container-title\"/>      </if>    </choose>  </macro>  <macro name=\"contributors\">    <group delimiter=\". \">      <names variable=\"author\">        <name and=\"text\" name-as-sort-order=\"first\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>        <label form=\"short\" prefix=\", \"/>        <substitute>          <names variable=\"editor\"/>          <names variable=\"translator\"/>          <names variable=\"director\"/>          <text macro=\"substitute-title\"/>          <text macro=\"title\"/>        </substitute>      </names>      <text macro=\"recipient\"/>    </group>  </macro>  <macro name=\"contributors-short\">    <names variable=\"author\">      <name form=\"short\" and=\"text\" delimiter=\", \" initialize-with=\". \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <names variable=\"director\"/>        <text macro=\"substitute-title\"/>        <text macro=\"title\"/>      </substitute>    </names>  </macro>  <macro name=\"interviewer\">    <names variable=\"interviewer\" delimiter=\", \">      <label form=\"verb\" prefix=\" \" text-case=\"capitalize-first\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"archive\">    <group delimiter=\". \">      <text variable=\"archive_location\" text-case=\"capitalize-first\"/>      <text variable=\"archive\"/>      <text variable=\"archive-place\"/>    </group>  </macro>  <macro name=\"access\">    <group delimiter=\". \">      <choose>        <if type=\"graphic report\" match=\"any\">          <text macro=\"archive\"/>        </if>        <else-if type=\"article-journal bill book chapter legal_case legislation motion_picture paper-conference\" match=\"none\">          <text macro=\"archive\"/>        </else-if>      </choose>      <choose>        <if type=\"webpage post-weblog\" match=\"any\">          <date variable=\"issued\" delimiter=\" \">            <date-part name=\"month\"/>            <date-part name=\"day\"/>          </date>        </if>      </choose>      <choose>        <if variable=\"issued\" match=\"none\">          <group delimiter=\" \">            <text term=\"accessed\" text-case=\"capitalize-first\"/>            <date variable=\"accessed\" delimiter=\" \">              <date-part name=\"month\"/>              <date-part name=\"day\"/>            </date>          </group>        </if>      </choose>      <choose>        <if type=\"legal_case\" match=\"none\">          <choose>            <if variable=\"DOI\">              <text variable=\"DOI\" prefix=\"doi:\"/>            </if>            <else>              <text variable=\"URL\"/>            </else>          </choose>        </if>      </choose>    </group>  </macro>  <macro name=\"title\">    <choose>      <if variable=\"title\" match=\"none\">        <choose>          <if type=\"personal_communication\" match=\"none\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </if>        </choose>      </if>      <else-if type=\"bill book graphic legislation motion_picture song\" match=\"any\">        <text variable=\"title\" text-case=\"title\" font-style=\"italic\"/>        <group prefix=\" (\" suffix=\")\" delimiter=\" \">          <text term=\"version\"/>          <text variable=\"version\"/>        </group>      </else-if>      <else-if variable=\"reviewed-author\">        <choose>          <if variable=\"reviewed-title\">            <group delimiter=\". \">              <text variable=\"title\" text-case=\"title\" quotes=\"true\"/>              <group delimiter=\", \">                <text variable=\"reviewed-title\" text-case=\"title\" font-style=\"italic\" prefix=\"Review of \"/>                <names variable=\"reviewed-author\">                  <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>                  <name and=\"text\" delimiter=\", \"/>                </names>              </group>            </group>          </if>          <else>            <group delimiter=\", \">              <text variable=\"title\" text-case=\"title\" font-style=\"italic\" prefix=\"Review of \"/>              <names variable=\"reviewed-author\">                <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>                <name and=\"text\" delimiter=\", \"/>              </names>            </group>          </else>        </choose>      </else-if>      <else-if type=\"legal_case interview patent\" match=\"any\">        <text variable=\"title\"/>      </else-if>      <else>        <text variable=\"title\" text-case=\"title\" quotes=\"true\"/>      </else>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">        <choose>          <if is-numeric=\"edition\">            <group delimiter=\" \" prefix=\". \">              <number variable=\"edition\" form=\"ordinal\"/>              <text term=\"edition\" form=\"short\" strip-periods=\"true\"/>            </group>          </if>          <else>            <text variable=\"edition\" text-case=\"capitalize-first\" prefix=\". \"/>          </else>        </choose>      </if>      <else-if type=\"chapter paper-conference\" match=\"any\">        <choose>          <if is-numeric=\"edition\">            <group delimiter=\" \" prefix=\", \">              <number variable=\"edition\" form=\"ordinal\"/>              <text term=\"edition\" form=\"short\"/>            </group>          </if>          <else>            <text variable=\"edition\" prefix=\", \"/>          </else>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"locators\">    <choose>      <if type=\"article-journal\">        <choose>          <if variable=\"volume\">            <text variable=\"volume\" prefix=\" \"/>            <group prefix=\" (\" suffix=\")\">              <choose>                <if variable=\"issue\">                  <text variable=\"issue\"/>                </if>                <else>                  <date variable=\"issued\">                    <date-part name=\"month\"/>                  </date>                </else>              </choose>            </group>          </if>          <else-if variable=\"issue\">            <group delimiter=\" \" prefix=\", \">              <text term=\"issue\" form=\"short\"/>              <text variable=\"issue\"/>              <date variable=\"issued\" prefix=\"(\" suffix=\")\">                <date-part name=\"month\"/>              </date>            </group>          </else-if>          <else>            <date variable=\"issued\" prefix=\", \">              <date-part name=\"month\"/>            </date>          </else>        </choose>      </if>      <else-if type=\"legal_case\">        <text variable=\"volume\" prefix=\", \"/>        <text variable=\"container-title\" prefix=\" \"/>        <text variable=\"page\" prefix=\" \"/>      </else-if>      <else-if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">        <group prefix=\". \" delimiter=\". \">          <group>            <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\" suffix=\" \"/>            <number variable=\"volume\" form=\"numeric\"/>          </group>          <group>            <number variable=\"number-of-volumes\" form=\"numeric\"/>            <text term=\"volume\" form=\"short\" prefix=\" \" plural=\"true\"/>          </group>        </group>      </else-if>      <else-if type=\"chapter paper-conference\" match=\"any\">        <choose>          <if variable=\"page\" match=\"none\">            <group prefix=\". \">              <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\" suffix=\" \"/>              <number variable=\"volume\" form=\"numeric\"/>            </group>          </if>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"locators-chapter\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <choose>          <if variable=\"page\">            <group prefix=\", \">              <text variable=\"volume\" suffix=\":\"/>              <text variable=\"page\"/>            </group>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-article\">    <choose>      <if type=\"article-newspaper\">        <group prefix=\", \" delimiter=\", \">          <group delimiter=\" \">            <text variable=\"edition\"/>            <text term=\"edition\"/>          </group>          <group>            <text term=\"section\" form=\"short\" suffix=\" \"/>            <text variable=\"section\"/>          </group>        </group>      </if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"volume issue\" match=\"any\">            <text variable=\"page\" prefix=\": \"/>          </if>          <else>            <text variable=\"page\" prefix=\", \"/>          </else>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"point-locators\">    <choose>      <if variable=\"locator\">        <choose>          <if locator=\"page\" match=\"none\">            <choose>              <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">                <choose>                  <if variable=\"volume\">                    <group>                      <text term=\"volume\" form=\"short\" suffix=\" \"/>                      <number variable=\"volume\" form=\"numeric\"/>                      <label variable=\"locator\" form=\"short\" prefix=\", \" suffix=\" \"/>                    </group>                  </if>                  <else>                    <label variable=\"locator\" form=\"short\" suffix=\" \"/>                  </else>                </choose>              </if>              <else>                <label variable=\"locator\" form=\"short\" suffix=\" \"/>              </else>            </choose>          </if>          <else-if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">            <number variable=\"volume\" form=\"numeric\" suffix=\":\"/>          </else-if>        </choose>        <text variable=\"locator\"/>      </if>    </choose>  </macro>  <macro name=\"container-prefix\">    <text term=\"in\" text-case=\"capitalize-first\"/>  </macro>  <macro name=\"container-title\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <text macro=\"container-prefix\" suffix=\" \"/>      </if>    </choose>    <choose>      <if type=\"legal_case\" match=\"none\">        <text variable=\"container-title\" text-case=\"title\" font-style=\"italic\"/>      </if>    </choose>  </macro>  <macro name=\"publisher\">    <group delimiter=\": \">      <text variable=\"publisher-place\"/>      <text variable=\"publisher\"/>    </group>  </macro>  <macro name=\"date\">    <choose>      <if variable=\"issued\">        <group delimiter=\" \">          <date variable=\"original-date\" form=\"text\" date-parts=\"year\" prefix=\"(\" suffix=\")\"/>          <date variable=\"issued\">            <date-part name=\"year\"/>          </date>        </group>      </if>      <else-if variable=\"accessed\">        <date variable=\"accessed\">          <date-part name=\"year\"/>        </date>      </else-if>      <else-if variable=\"status\">        <text variable=\"status\" text-case=\"capitalize-first\"/>      </else-if>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"date-in-text\">    <choose>      <if variable=\"issued\">        <group delimiter=\" \">          <date variable=\"original-date\" form=\"text\" date-parts=\"year\" prefix=\"[\" suffix=\"]\"/>          <date variable=\"issued\">            <date-part name=\"year\"/>          </date>        </group>      </if>      <else-if variable=\"accessed\">        <date variable=\"accessed\">          <date-part name=\"year\"/>        </date>      </else-if>      <else-if variable=\"status\">        <text variable=\"status\"/>      </else-if>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"day-month\">    <date variable=\"issued\">      <date-part name=\"month\"/>      <date-part name=\"day\" prefix=\" \"/>    </date>  </macro>  <macro name=\"collection-title\">    <choose>      <if match=\"none\" type=\"article-journal\">        <choose>          <if match=\"none\" is-numeric=\"collection-number\">            <group delimiter=\", \">              <text variable=\"collection-title\" text-case=\"title\"/>              <text variable=\"collection-number\"/>            </group>          </if>          <else>            <group delimiter=\" \">              <text variable=\"collection-title\" text-case=\"title\"/>              <text variable=\"collection-number\"/>            </group>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"collection-title-journal\">    <choose>      <if type=\"article-journal\">        <group delimiter=\" \">          <text variable=\"collection-title\"/>          <text variable=\"collection-number\"/>        </group>      </if>    </choose>  </macro>  <macro name=\"event\">    <group>      <text term=\"presented at\" suffix=\" \"/>      <text variable=\"event\"/>    </group>  </macro>  <macro name=\"description\">    <choose>      <if type=\"interview\">        <group delimiter=\". \">          <text macro=\"interviewer\"/>          <text variable=\"medium\" text-case=\"capitalize-first\"/>        </group>      </if>      <else-if type=\"patent\">        <group delimiter=\" \" prefix=\". \">          <text variable=\"authority\"/>          <text variable=\"number\"/>        </group>      </else-if>      <else>        <text variable=\"medium\" text-case=\"capitalize-first\" prefix=\". \"/>      </else>    </choose>    <choose>      <if variable=\"title\" match=\"none\"/>      <else-if type=\"thesis personal_communication speech\" match=\"any\"/>      <else>        <group delimiter=\" \" prefix=\". \">          <text variable=\"genre\" text-case=\"capitalize-first\"/>          <choose>            <if type=\"report\">              <text variable=\"number\"/>            </if>          </choose>        </group>      </else>    </choose>  </macro>  <macro name=\"issue\">    <choose>      <if type=\"legal_case\">        <text variable=\"authority\" prefix=\". \"/>      </if>      <else-if type=\"speech\">        <group prefix=\". \" delimiter=\", \">          <group delimiter=\" \">            <text variable=\"genre\" text-case=\"capitalize-first\"/>            <text macro=\"event\"/>          </group>          <text variable=\"event-place\"/>          <text macro=\"day-month\"/>        </group>      </else-if>      <else-if type=\"article-newspaper article-magazine personal_communication\" match=\"any\">        <text macro=\"day-month\" prefix=\", \"/>      </else-if>      <else-if type=\"patent\">        <group delimiter=\", \" prefix=\", \">          <group delimiter=\" \">            <!--Needs Localization-->            <text value=\"filed\"/>            <date variable=\"submitted\" form=\"text\"/>          </group>          <group delimiter=\" \">            <choose>              <if variable=\"issued submitted\" match=\"all\">                <text term=\"and\"/>              </if>            </choose>            <!--Needs Localization-->            <text value=\"issued\"/>            <date variable=\"issued\" form=\"text\"/>          </group>        </group>      </else-if>      <else>        <group prefix=\". \" delimiter=\", \">          <choose>            <if type=\"thesis\">              <text variable=\"genre\" text-case=\"capitalize-first\"/>            </if>          </choose>          <text macro=\"publisher\"/>        </group>      </else>    </choose>  </macro>  <citation et-al-min=\"4\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\" givenname-disambiguation-rule=\"primary-name\">    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <group delimiter=\", \">        <choose>          <if variable=\"issued accessed\" match=\"any\">            <group delimiter=\" \">              <text macro=\"contributors-short\"/>              <text macro=\"date-in-text\"/>            </group>          </if>          <!---comma before forthcoming and n.d.-->          <else>            <group delimiter=\", \">              <text macro=\"contributors-short\"/>              <text macro=\"date-in-text\"/>            </group>          </else>        </choose>        <text macro=\"point-locators\"/>      </group>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"11\" et-al-use-first=\"7\" subsequent-author-substitute=\"&#8212;&#8212;&#8212;\" entry-spacing=\"0\">    <sort>      <key macro=\"contributors\"/>      <key variable=\"issued\"/>      <key variable=\"title\"/>    </sort>    <layout suffix=\".\">      <group delimiter=\". \">        <text macro=\"contributors\"/>        <text macro=\"date\"/>        <text macro=\"title\"/>      </group>      <text macro=\"description\"/>      <text macro=\"secondary-contributors\" prefix=\". \"/>      <text macro=\"container-title\" prefix=\". \"/>      <text macro=\"container-contributors\"/>      <text macro=\"edition\"/>      <text macro=\"locators-chapter\"/>      <text macro=\"collection-title-journal\" prefix=\", \" suffix=\", \"/>      <text macro=\"locators\"/>      <text macro=\"collection-title\" prefix=\". \"/>      <text macro=\"issue\"/>      <text macro=\"locators-article\"/>      <text macro=\"access\" prefix=\". \"/>    </layout>  </bibliography></style>",
            name: "Chicago Manual of Style (author-date format)" },
        "chicago-note-bibliography": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"note\" version=\"1.0\" demote-non-dropping-particle=\"never\" page-range-format=\"chicago\">  <info>    <title>Chicago Manual of Style 16th edition (note)</title>    <id>http://www.zotero.org/styles/chicago-note-bibliography</id>    <link href=\"http://www.zotero.org/styles/chicago-note-bibliography\" rel=\"self\"/>    <link href=\"http://www.chicagomanualofstyle.org/tools_citationguide.html\" rel=\"documentation\"/>    <author>      <name>Julian Onions</name>      <email>julian.onions@gmail.com</email>    </author>    <contributor>      <name>Simon Kornblith</name>      <email>simon@simonster.com</email>    </contributor>    <contributor>      <name>Elena Razlogova</name>      <email>elena.razlogova@gmail.com</email>    </contributor>    <contributor>      <name>Frank Bennett</name>      <email>biercenator@gmail.com</email>    </contributor>    <contributor>      <name>Andrew Dunning</name>      <email>andrew.dunning@utoronto.ca</email>    </contributor>    <category citation-format=\"note\"/>    <category field=\"generic-base\"/>    <summary>Chicago format with short notes and bibliography</summary>    <updated>2012-10-25T21:15:26+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <locale xml:lang=\"en\">    <terms>      <term name=\"editor\" form=\"verb-short\">ed.</term>      <term name=\"translator\" form=\"verb-short\">trans.</term>      <term name=\"editortranslator\" form=\"verb-short\">        <single>ed. and trans.</single>        <multiple>ed. and trans.</multiple>      </term>      <term name=\"editortranslator\" form=\"verb\">        <single>Edited and translated by</single>        <multiple>Edited and translated by</multiple>      </term>      <term name=\"translator\" form=\"short\">trans.</term>    </terms>  </locale>  <macro name=\"editor-translator\">    <group delimiter=\", \">      <group delimiter=\" \">        <choose>          <if variable=\"container-author reviewed-author\" match=\"any\">            <group>              <names variable=\"container-author reviewed-author\">                <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>                <name and=\"text\" delimiter=\", \"/>              </names>            </group>          </if>        </choose>      </group>      <names variable=\"editor translator\" delimiter=\", \">        <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>        <name and=\"text\" delimiter=\", \"/>      </names>    </group>  </macro>  <macro name=\"secondary-contributors-note\">    <choose>      <if type=\"chapter paper-conference\" match=\"none\">        <text macro=\"editor-translator\"/>      </if>    </choose>  </macro>  <macro name=\"container-contributors-note\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <text macro=\"editor-translator\"/>      </if>    </choose>  </macro>  <macro name=\"secondary-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"none\">        <names variable=\"editor translator\" delimiter=\". \">          <label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/>          <name and=\"text\" delimiter=\", \"/>        </names>      </if>    </choose>  </macro>  <macro name=\"container-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <group delimiter=\", \">          <choose>            <if variable=\"author\">              <choose>                <if variable=\"container-author\" match=\"any\">                  <names variable=\"container-author\">                    <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>                    <name and=\"text\" delimiter=\", \"/>                  </names>                </if>              </choose>              <!--This includes page numers after the container author, e.g. for Introductions -->              <choose>                <if variable=\"container-author author\" match=\"all\">                  <group delimiter=\". \">                    <text variable=\"page\"/>                    <names variable=\"editor translator\" delimiter=\", \">                      <label form=\"verb\" suffix=\" \"/>                      <name and=\"text\" delimiter=\", \"/>                    </names>                  </group>                </if>                <else>                  <names variable=\"editor translator\" delimiter=\", \">                    <label form=\"verb\" text-case=\"lowercase\" suffix=\" \"/>                    <name and=\"text\" delimiter=\", \"/>                  </names>                </else>              </choose>            </if>          </choose>        </group>      </if>    </choose>  </macro>  <macro name=\"recipient-note\">    <names variable=\"recipient\" delimiter=\", \">      <label form=\"verb\" text-case=\"lowercase\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"contributors-note\">    <group delimiter=\" \">      <names variable=\"author\">        <name and=\"text\" sort-separator=\", \" delimiter=\", \"/>        <label form=\"short\" prefix=\", \"/>        <substitute>          <names variable=\"editor\"/>          <names variable=\"translator\"/>        </substitute>      </names>      <text macro=\"recipient-note\"/>    </group>  </macro>  <macro name=\"editor\">    <names variable=\"editor\">      <name name-as-sort-order=\"first\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"short\" prefix=\", \"/>    </names>  </macro>  <macro name=\"translator\">    <names variable=\"translator\">      <name name-as-sort-order=\"first\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"verb-short\" prefix=\", \"/>    </names>  </macro>  <macro name=\"recipient\">    <group delimiter=\" \">      <choose>        <if type=\"personal_communication\">          <choose>            <if variable=\"genre\">              <text variable=\"genre\" text-case=\"capitalize-first\"/>            </if>            <else>              <text term=\"letter\" text-case=\"capitalize-first\"/>            </else>          </choose>        </if>      </choose>      <text macro=\"recipient-note\"/>    </group>  </macro>  <macro name=\"contributors\">    <group delimiter=\". \">      <names variable=\"author\">        <name name-as-sort-order=\"first\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>        <substitute>          <text macro=\"editor\"/>          <text macro=\"translator\"/>        </substitute>      </names>      <text macro=\"recipient\"/>    </group>  </macro>  <macro name=\"recipient-short\">    <names variable=\"recipient\">      <label form=\"verb\" text-case=\"lowercase\" suffix=\" \"/>      <name form=\"short\" and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"contributors-short\">    <group delimiter=\" \">      <names variable=\"author\">        <name form=\"short\" and=\"text\" delimiter=\", \"/>        <substitute>          <names variable=\"editor\"/>          <names variable=\"translator\"/>        </substitute>      </names>      <text macro=\"recipient-short\"/>    </group>  </macro>  <macro name=\"contributors-sort\">    <names variable=\"author\">      <name name-as-sort-order=\"all\" and=\"text\" sort-separator=\", \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <text macro=\"title\"/>      </substitute>    </names>  </macro>  <macro name=\"interviewer-note\">    <names variable=\"interviewer\" delimiter=\", \">      <label form=\"verb\" text-case=\"lowercase\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"interviewer\">    <names variable=\"interviewer\" delimiter=\", \">      <label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/>      <name and=\"text\" delimiter=\", \"/>    </names>  </macro>  <macro name=\"title-note\">    <choose>      <if variable=\"title\" match=\"none\">        <text variable=\"genre\"/>      </if>      <else-if type=\"bill book graphic legislation motion_picture song\" match=\"any\">        <text variable=\"title\" text-case=\"title\" font-style=\"italic\"/>        <group delimiter=\" \" prefix=\", \">          <text term=\"version\"/>          <text variable=\"version\"/>        </group>      </else-if>      <else-if type=\"legal_case interview patent\" match=\"any\">        <text variable=\"title\"/>      </else-if>      <else-if variable=\"reviewed-author\">        <text variable=\"title\" font-style=\"italic\" prefix=\"review of \"/>      </else-if>      <else>        <text variable=\"title\" text-case=\"title\" quotes=\"true\"/>      </else>    </choose>  </macro>  <macro name=\"title\">    <choose>      <if variable=\"title\" match=\"none\">        <choose>          <if type=\"personal_communication\" match=\"none\">            <text variable=\"genre\" text-case=\"capitalize-first\"/>          </if>        </choose>      </if>      <else-if type=\"bill book graphic legislation motion_picture song\" match=\"any\">        <text variable=\"title\" text-case=\"title\" font-style=\"italic\"/>        <group prefix=\" (\" suffix=\")\" delimiter=\" \">          <text term=\"version\"/>          <text variable=\"version\"/>        </group>      </else-if>      <else-if variable=\"reviewed-author\">        <group delimiter=\", \">          <text variable=\"title\" font-style=\"italic\" prefix=\"Review of \"/>          <names variable=\"reviewed-author\">            <label form=\"verb-short\" text-case=\"lowercase\" suffix=\" \"/>            <name and=\"text\" delimiter=\", \"/>          </names>        </group>      </else-if>      <else-if type=\"legal_case interview patent\" match=\"any\">        <text variable=\"title\"/>      </else-if>      <else>        <text variable=\"title\" text-case=\"title\" quotes=\"true\"/>      </else>    </choose>  </macro>  <macro name=\"title-short\">    <choose>      <if variable=\"title\" match=\"none\">        <choose>          <if type=\"interview\">            <text term=\"interview\"/>          </if>          <else-if type=\"manuscript speech\" match=\"any\">            <text variable=\"genre\" form=\"short\"/>          </else-if>          <else-if type=\"personal_communication\">            <text macro=\"issued\"/>          </else-if>        </choose>      </if>      <else-if type=\"bill book graphic legislation motion_picture song\" match=\"any\">        <text variable=\"title\" text-case=\"title\" form=\"short\" font-style=\"italic\"/>      </else-if>      <else-if type=\"patent interview\" match=\"any\">        <text variable=\"title\" form=\"short\"/>      </else-if>      <else-if type=\"legal_case\" match=\"any\">        <text variable=\"title\"/>      </else-if>      <else>        <text variable=\"title\" text-case=\"title\" form=\"short\" quotes=\"true\"/>      </else>    </choose>  </macro>  <macro name=\"date-disambiguate\">    <choose>      <if disambiguate=\"true\">        <text macro=\"issued\"/>      </if>    </choose>  </macro>  <macro name=\"description-note\">    <group delimiter=\", \">      <text macro=\"interviewer-note\"/>      <text variable=\"medium\"/>      <choose>        <if variable=\"title\" match=\"none\"/>        <else-if type=\"manuscript thesis speech\" match=\"any\"/>        <else-if type=\"patent\">          <group delimiter=\" \">            <text variable=\"authority\"/>            <text variable=\"number\"/>          </group>        </else-if>        <else>          <text variable=\"genre\"/>        </else>      </choose>    </group>  </macro>  <macro name=\"description\">    <group delimiter=\", \">      <group delimiter=\". \">        <text macro=\"interviewer\"/>        <text variable=\"medium\" text-case=\"capitalize-first\"/>      </group>      <choose>        <if variable=\"title\" match=\"none\"/>        <else-if type=\"thesis speech\" match=\"any\"/>        <else-if type=\"patent\">          <group delimiter=\" \">            <text variable=\"authority\"/>            <text variable=\"number\"/>          </group>        </else-if>        <else>          <text variable=\"genre\" text-case=\"capitalize-first\"/>        </else>      </choose>    </group>  </macro>  <macro name=\"container-title-note\">    <group delimiter=\" \">      <choose>        <if type=\"chapter paper-conference\" match=\"any\">          <text term=\"in\"/>        </if>      </choose>      <choose>        <if type=\"legal_case\" match=\"none\">          <text variable=\"container-title\" text-case=\"title\" font-style=\"italic\"/>        </if>      </choose>    </group>  </macro>  <macro name=\"container-title\">    <group delimiter=\" \">      <choose>        <if type=\"chapter paper-conference\" match=\"any\">          <text term=\"in\" text-case=\"capitalize-first\"/>        </if>      </choose>      <choose>        <if type=\"legal_case\" match=\"none\">          <text variable=\"container-title\" text-case=\"title\" font-style=\"italic\"/>        </if>      </choose>    </group>  </macro>  <macro name=\"collection-title\">    <choose>      <if match=\"none\" type=\"article-journal\">        <choose>          <if match=\"none\" is-numeric=\"collection-number\">            <group delimiter=\", \">              <text variable=\"collection-title\" text-case=\"title\"/>              <text variable=\"collection-number\"/>            </group>          </if>          <else>            <group delimiter=\" \">              <text variable=\"collection-title\" text-case=\"title\"/>              <text variable=\"collection-number\"/>            </group>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"collection-title-journal\">    <choose>      <if type=\"article-journal\">        <group delimiter=\" \">          <text variable=\"collection-title\"/>          <text variable=\"collection-number\"/>        </group>      </if>    </choose>  </macro>  <macro name=\"edition-note\">    <choose>      <if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song\" match=\"any\">        <choose>          <if is-numeric=\"edition\">            <group delimiter=\" \">              <number variable=\"edition\" form=\"ordinal\"/>              <text term=\"edition\" form=\"short\"/>            </group>          </if>          <else>            <text variable=\"edition\"/>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song\" match=\"any\">        <choose>          <if is-numeric=\"edition\">            <group delimiter=\" \">              <number variable=\"edition\" form=\"ordinal\"/>              <text term=\"edition\" form=\"short\"/>            </group>          </if>          <else>            <text variable=\"edition\" text-case=\"capitalize-first\" suffix=\".\"/>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-note-join-with-space\">    <choose>      <if type=\"article-journal\" variable=\"volume\" match=\"all\">        <choose>          <if match=\"none\" variable=\"collection-title\">            <text macro=\"locators-note\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-note-join-with-comma\">    <choose>      <if type=\"article-journal\" match=\"none\">        <text macro=\"locators-note\"/>      </if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"volume\" match=\"none\">            <text macro=\"locators-note\"/>          </if>          <else-if match=\"any\" variable=\"collection-title\">            <text macro=\"locators-note\"/>          </else-if>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"locators-note\">    <choose>      <if type=\"article-journal\">        <group delimiter=\", \">          <text macro=\"collection-title-journal\"/>          <number variable=\"volume\"/>          <group delimiter=\" \">            <text term=\"issue\" form=\"short\"/>            <number variable=\"issue\"/>          </group>        </group>      </if>      <else-if type=\"legal_case\">        <group delimiter=\", \">          <group delimiter=\" \">            <number variable=\"volume\"/>            <text variable=\"container-title\"/>            <text variable=\"page\"/>          </group>          <text variable=\"locator\"/>        </group>      </else-if>      <else-if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song\" match=\"any\">        <group delimiter=\", \">          <text macro=\"edition-note\"/>          <group delimiter=\" \">            <text term=\"volume\" form=\"short\"/>            <number variable=\"volume\" form=\"numeric\"/>          </group>          <choose>            <if variable=\"locator\" match=\"none\">              <group delimiter=\" \">                <number variable=\"number-of-volumes\" form=\"numeric\"/>                <text term=\"volume\" form=\"short\" plural=\"true\"/>              </group>            </if>          </choose>        </group>      </else-if>    </choose>  </macro>  <macro name=\"locators-join-with-space\">    <choose>      <if type=\"article-journal\" variable=\"volume\" match=\"all\">        <choose>          <if match=\"none\" variable=\"collection-title\">            <text macro=\"locators\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-join-with-comma\">    <choose>      <if type=\"legal_case chapter paper-conference\" match=\"any\">        <text macro=\"locators\"/>      </if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"volume\" match=\"none\">            <text macro=\"locators\"/>          </if>          <else-if match=\"any\" variable=\"collection-title\">            <text macro=\"locators\"/>          </else-if>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"locators-join-with-period\">    <choose>      <if type=\"legal_case article-journal chapter paper-conference\" match=\"none\">        <text macro=\"locators\"/>      </if>    </choose>  </macro>  <macro name=\"locators\">    <choose>      <if type=\"article-journal\">        <group delimiter=\", \">          <text macro=\"collection-title-journal\"/>          <number variable=\"volume\"/>          <group delimiter=\" \">            <text term=\"issue\" form=\"short\"/>            <number variable=\"issue\"/>          </group>        </group>      </if>      <else-if type=\"legal_case\">        <group delimiter=\" \">          <number variable=\"volume\"/>          <text variable=\"container-title\"/>          <text variable=\"page\"/>        </group>      </else-if>      <else-if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">        <group delimiter=\". \">          <text macro=\"edition\"/>          <group delimiter=\" \">            <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\"/>            <number variable=\"volume\" form=\"numeric\"/>          </group>          <group delimiter=\" \">            <number variable=\"number-of-volumes\" form=\"numeric\"/>            <text term=\"volume\" form=\"short\" plural=\"true\"/>          </group>        </group>      </else-if>      <else-if type=\"chapter paper-conference\" match=\"any\">        <group delimiter=\". \">          <text macro=\"edition\"/>          <choose>            <if variable=\"page\" match=\"none\">              <group delimiter=\" \">                <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\"/>                <number variable=\"volume\" form=\"numeric\"/>              </group>            </if>          </choose>        </group>      </else-if>    </choose>  </macro>  <macro name=\"locators-newspaper\">    <choose>      <if type=\"article-newspaper\">        <group delimiter=\", \">          <group delimiter=\" \">            <number variable=\"edition\"/>            <text term=\"edition\"/>          </group>          <group delimiter=\" \">            <text term=\"section\" form=\"short\"/>            <text variable=\"section\"/>          </group>        </group>      </if>    </choose>  </macro>  <macro name=\"event-note\">    <text variable=\"event\"/>  </macro>  <macro name=\"event\">    <choose>      <if variable=\"title\">        <group delimiter=\" \">          <text term=\"presented at\"/>          <text variable=\"event\"/>        </group>      </if>      <else>        <group delimiter=\" \">          <text term=\"presented at\" text-case=\"capitalize-first\"/>          <text variable=\"event\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"originally-published\">    <group delimiter=\", \">      <group delimiter=\": \">        <text variable=\"original-publisher-place\"/>        <text variable=\"original-publisher\"/>      </group>      <date variable=\"original-date\" form=\"text\" date-parts=\"year\"/>    </group>  </macro>  <macro name=\"reprint-note\">    <!--needs localization-->    <choose>      <if variable=\"original-date issued\" match=\"all\">        <choose>          <!--for whatever reason in notes, when we have both original and new publishers, reprint doesn't appear-->          <if variable=\"original-publisher original-publisher-place\" match=\"none\">            <text value=\"repr.\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"reprint\">    <!--needs localization-->    <choose>      <if variable=\"original-date issued\" match=\"all\">        <text value=\"reprint\" text-case=\"capitalize-first\"/>      </if>    </choose>  </macro>  <macro name=\"publisher\">    <choose>      <if type=\"thesis\">        <text variable=\"publisher\"/>      </if>      <else-if type=\"speech\">        <text variable=\"event-place\"/>      </else-if>      <else>        <group delimiter=\": \">          <text variable=\"publisher-place\"/>          <text variable=\"publisher\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"issued\">    <choose>      <if variable=\"issued\">        <choose>          <if type=\"graphic report\" match=\"any\">            <date variable=\"issued\" form=\"text\"/>          </if>          <else-if type=\"legal_case\">            <group delimiter=\" \">              <text variable=\"authority\"/>              <date variable=\"issued\">                <date-part name=\"year\"/>              </date>            </group>          </else-if>          <else-if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song thesis\" match=\"any\">            <date variable=\"issued\">              <date-part name=\"year\"/>            </date>          </else-if>          <else-if type=\"patent\">            <group delimiter=\", \">              <group delimiter=\" \">                <!--Needs Localization-->                <text value=\"filed\"/>                <date variable=\"submitted\" form=\"text\"/>              </group>              <group delimiter=\" \">                <choose>                  <if variable=\"issued submitted\" match=\"all\">                    <text term=\"and\"/>                  </if>                </choose>                <!--Needs Localization-->                <text value=\"issued\"/>                <date variable=\"issued\" form=\"text\"/>              </group>            </group>          </else-if>          <else>            <date variable=\"issued\" form=\"text\"/>          </else>        </choose>      </if>      <else-if variable=\"status\">        <text variable=\"status\"/>      </else-if>      <else-if variable=\"accessed URL\" match=\"all\"/>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"point-locators-subsequent\">    <choose>      <if type=\"legal_case\" variable=\"locator\" match=\"all\">        <choose>          <if locator=\"page\">            <group delimiter=\":\">              <number variable=\"volume\"/>              <text variable=\"locator\"/>            </group>          </if>          <else>            <group delimiter=\" \">              <label variable=\"locator\" form=\"short\"/>              <text variable=\"locator\"/>            </group>          </else>        </choose>      </if>      <else-if variable=\"locator\">        <choose>          <if locator=\"page\" match=\"none\">            <group delimiter=\" \">              <choose>                <if type=\"bill book graphic legislation motion_picture report song\" match=\"any\">                  <choose>                    <if variable=\"volume\">                      <group delimiter=\", \">                        <group delimiter=\" \">                          <text term=\"volume\" form=\"short\"/>                          <number variable=\"volume\" form=\"numeric\"/>                        </group>                        <label variable=\"locator\" form=\"short\"/>                      </group>                    </if>                    <else>                      <label variable=\"locator\" form=\"short\"/>                    </else>                  </choose>                </if>                <else>                  <label variable=\"locator\" form=\"short\"/>                </else>              </choose>              <text variable=\"locator\"/>            </group>          </if>          <else-if type=\"bill book graphic legislation motion_picture report song\" match=\"any\">            <group delimiter=\":\">              <number variable=\"volume\" form=\"numeric\"/>              <text variable=\"locator\"/>            </group>          </else-if>          <else>            <text variable=\"locator\"/>          </else>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"point-locators-join-with-colon\">    <choose>      <if type=\"article-journal\">        <choose>          <if variable=\"locator page\" match=\"any\">            <choose>              <if variable=\"volume issue\" match=\"any\">                <text macro=\"point-locators\"/>              </if>            </choose>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"point-locators-join-with-comma\">    <choose>      <if type=\"article-journal\" match=\"none\">        <text macro=\"point-locators\"/>      </if>      <else-if variable=\"volume issue\" match=\"none\">        <text macro=\"point-locators\"/>      </else-if>    </choose>  </macro>  <macro name=\"point-locators\">    <choose>      <if variable=\"locator\" match=\"none\">        <choose>          <if type=\"article-journal chapter paper-conference\" match=\"any\">            <text variable=\"page\"/>          </if>        </choose>      </if>      <else-if type=\"article-journal\">        <group delimiter=\" \">          <choose>            <if locator=\"page\" match=\"none\">              <label variable=\"locator\" form=\"short\" suffix=\" \"/>            </if>          </choose>          <text variable=\"locator\"/>        </group>      </else-if>      <else-if type=\"legal_case\"/>      <else>        <group delimiter=\" \">          <choose>            <if locator=\"page\" match=\"none\">              <label variable=\"locator\" form=\"short\"/>            </if>          </choose>          <text variable=\"locator\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"locators-chapter\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <choose>          <if variable=\"author container-author\" match=\"all\"/>          <else>            <choose>              <if variable=\"page\">                <number variable=\"volume\" suffix=\":\"/>                <text variable=\"page\"/>              </if>            </choose>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-journal-join-with-colon\">    <choose>      <if type=\"article-journal\">        <choose>          <if variable=\"volume issue\" match=\"any\">            <text variable=\"page\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"locators-journal-join-with-comma\">    <choose>      <if type=\"article-journal\">        <choose>          <if variable=\"volume issue\" match=\"none\">            <text variable=\"page\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"archive-note\">    <choose>      <if type=\"thesis\">        <group delimiter=\" \">          <text variable=\"archive\"/>          <text variable=\"archive_location\" prefix=\"(\" suffix=\")\"/>        </group>      </if>      <else>        <group delimiter=\", \">          <text variable=\"archive_location\"/>          <text variable=\"archive\"/>          <text variable=\"archive-place\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"archive\">    <choose>      <if type=\"thesis\">        <group delimiter=\" \">          <text variable=\"archive\"/>          <text variable=\"archive_location\" prefix=\"(\" suffix=\")\"/>        </group>      </if>      <else>        <group delimiter=\". \">          <text variable=\"archive_location\" text-case=\"capitalize-first\"/>          <text variable=\"archive\"/>          <text variable=\"archive-place\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"issue-note-join-with-space\">    <choose>      <if type=\"article-journal legal_case manuscript thesis\" variable=\"publisher-place publisher\" match=\"any\">        <!--Chicago doesn't use publisher/place for Newspapers and we want the date delimited by a comma-->        <choose>          <if type=\"article-newspaper\" match=\"none\">            <choose>              <if type=\"article-journal\" match=\"none\">                <text macro=\"issue-note\"/>              </if>              <else-if variable=\"issue volume\" match=\"any\">                <text macro=\"issue-note\"/>              </else-if>            </choose>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"issue-note-join-with-comma\">    <choose>      <if type=\"article-journal legal_case manuscript thesis\" variable=\"publisher-place publisher\" match=\"none\">        <text macro=\"issue-note\"/>      </if>      <else-if type=\"article-newspaper\">        <text macro=\"issue-note\"/>      </else-if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"volume issue\" match=\"none\">            <text macro=\"issue-note\"/>          </if>        </choose>      </else-if>    </choose>  </macro>  <macro name=\"issue-note\">    <choose>      <if type=\"legal_case\" match=\"any\">        <text macro=\"issued\" prefix=\"(\" suffix=\")\"/>      </if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"volume issue\" match=\"any\">            <text macro=\"issued\" prefix=\"(\" suffix=\")\"/>          </if>          <else>            <text macro=\"issued\"/>          </else>        </choose>      </else-if>      <else-if type=\"article-newspaper\">        <text macro=\"issued\"/>      </else-if>      <else-if variable=\"publisher-place event-place publisher genre\" match=\"any\">        <group prefix=\"(\" suffix=\")\" delimiter=\", \">          <choose>            <if variable=\"title\" match=\"none\"/>            <else-if type=\"manuscript thesis speech\" match=\"any\">              <text variable=\"genre\"/>            </else-if>          </choose>          <text macro=\"event-note\"/>          <group delimiter=\"; \">            <text macro=\"originally-published\"/>            <group delimiter=\", \">              <text macro=\"reprint-note\"/>              <text macro=\"publisher\"/>            </group>          </group>          <text macro=\"issued\"/>        </group>      </else-if>      <else>        <text macro=\"issued\"/>      </else>    </choose>  </macro>  <macro name=\"issue-join-with-space\">    <choose>      <if type=\"article-journal legal_case\" match=\"any\">        <choose>          <if variable=\"issue volume\" match=\"any\">            <text macro=\"issue\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"issue-join-with-period\">    <choose>      <if type=\"article-journal legal_case\" match=\"none\">        <choose>          <if type=\"speech\" variable=\"publisher publisher-place\" match=\"any\">            <text macro=\"issue\"/>          </if>        </choose>      </if>    </choose>  </macro>  <macro name=\"issue-join-with-comma\">    <choose>      <if type=\"article-journal legal_case\" match=\"none\">        <choose>          <if type=\"speech\" variable=\"publisher publisher-place\" match=\"none\">            <text macro=\"issue\"/>          </if>        </choose>      </if>      <else-if variable=\"volume issue\" match=\"none\">        <text macro=\"issue\"/>      </else-if>    </choose>  </macro>  <macro name=\"issue\">    <choose>      <if type=\"legal_case\" match=\"any\">        <text macro=\"issued\" prefix=\"(\" suffix=\")\"/>      </if>      <else-if type=\"article-journal\">        <choose>          <if variable=\"issue volume\" match=\"any\">            <text macro=\"issued\" prefix=\"(\" suffix=\")\"/>          </if>          <else>            <text macro=\"issued\"/>          </else>        </choose>      </else-if>      <else-if type=\"speech\">        <group delimiter=\", \">          <group delimiter=\" \">            <choose>              <if variable=\"title\" match=\"none\"/>              <else>                <text variable=\"genre\" text-case=\"capitalize-first\"/>              </else>            </choose>            <text macro=\"event\"/>          </group>          <text variable=\"event-place\"/>          <text macro=\"issued\"/>        </group>      </else-if>      <!--Chicago doesn't use publisher/place for Newspapers -->      <else-if type=\"article-newspaper\">        <text macro=\"issued\"/>      </else-if>      <else-if variable=\"publisher-place publisher\" match=\"any\">        <group delimiter=\", \">          <choose>            <if type=\"thesis\">              <text variable=\"genre\" text-case=\"capitalize-first\"/>            </if>          </choose>          <group delimiter=\". \">            <text macro=\"originally-published\"/>            <group delimiter=\", \">              <text macro=\"reprint\"/>              <text macro=\"publisher\"/>            </group>          </group>          <text macro=\"issued\"/>        </group>      </else-if>      <else>        <text macro=\"issued\"/>      </else>    </choose>  </macro>  <macro name=\"access-note\">    <group delimiter=\", \">      <choose>        <if type=\"graphic report\" match=\"any\">          <text macro=\"archive-note\"/>        </if>        <else-if type=\"article-journal bill book chapter legal_case legislation motion_picture paper-conference\" match=\"none\">          <text macro=\"archive-note\"/>        </else-if>      </choose>      <choose>        <if variable=\"issued\" match=\"none\">          <group delimiter=\" \">            <text term=\"accessed\"/>            <date variable=\"accessed\" form=\"text\"/>          </group>        </if>      </choose>      <choose>        <if type=\"legal_case\" match=\"none\">          <choose>            <if variable=\"DOI\">              <text variable=\"DOI\" prefix=\"doi:\"/>            </if>            <else>              <text variable=\"URL\"/>            </else>          </choose>        </if>      </choose>    </group>  </macro>  <macro name=\"access\">    <group delimiter=\". \">      <choose>        <if type=\"graphic report\" match=\"any\">          <text macro=\"archive\"/>        </if>        <else-if type=\"article-journal bill book chapter legal_case legislation motion_picture paper-conference\" match=\"none\">          <text macro=\"archive\"/>        </else-if>      </choose>      <choose>        <if variable=\"issued\" match=\"none\">          <group delimiter=\" \">            <text term=\"accessed\" text-case=\"capitalize-first\"/>            <date variable=\"accessed\" form=\"text\"/>          </group>        </if>      </choose>      <choose>        <if type=\"legal_case\" match=\"none\">          <choose>            <if variable=\"DOI\">              <text variable=\"DOI\" prefix=\"doi:\"/>            </if>            <else>              <text variable=\"URL\"/>            </else>          </choose>        </if>      </choose>    </group>  </macro>  <macro name=\"case-locator-subsequent\">    <choose>      <if type=\"legal_case\">        <text macro=\"locators-note\"/>      </if>    </choose>  </macro>  <macro name=\"case-issue-subsequent\">    <choose>      <if type=\"legal_case\">        <text macro=\"issue\"/>      </if>    </choose>  </macro>  <citation et-al-min=\"4\" et-al-use-first=\"1\" disambiguate-add-names=\"true\">    <layout suffix=\".\" delimiter=\"; \">      <choose>        <if position=\"ibid-with-locator\">          <group delimiter=\", \">            <text term=\"ibid\"/>            <text macro=\"point-locators-subsequent\"/>          </group>        </if>        <else-if position=\"ibid\">          <text term=\"ibid\"/>        </else-if>        <else>          <group delimiter=\", \">            <text macro=\"contributors-short\"/>            <group delimiter=\" \">              <group delimiter=\", \">                <text macro=\"title-short\"/>                <!--if title & author are the same: -->                <text macro=\"date-disambiguate\"/>                <text macro=\"case-locator-subsequent\"/>              </group>              <text macro=\"case-issue-subsequent\"/>            </group>            <text macro=\"point-locators-subsequent\"/>          </group>        </else>      </choose>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"11\" et-al-use-first=\"7\" subsequent-author-substitute=\"&#8212;&#8212;&#8212;\" entry-spacing=\"0\">    <sort>      <key macro=\"contributors-sort\"/>      <key variable=\"title\"/>      <key variable=\"genre\"/>      <key variable=\"issued\"/>    </sort>    <layout suffix=\".\">      <group delimiter=\". \">        <group delimiter=\": \">          <group delimiter=\", \">            <group delimiter=\" \">              <group delimiter=\". \">                <group delimiter=\" \">                  <group delimiter=\", \">                    <group delimiter=\". \">                      <group delimiter=\". \">                        <text macro=\"contributors\"/>                        <text macro=\"title\"/>                      </group>                      <text macro=\"description\"/>                      <text macro=\"secondary-contributors\"/>                      <group delimiter=\", \">                        <text macro=\"container-title\"/>                        <text macro=\"container-contributors\"/>                      </group>                      <text macro=\"locators-join-with-period\"/>                    </group>                    <text macro=\"locators-join-with-comma\"/>                    <text macro=\"locators-chapter\"/>                  </group>                  <text macro=\"locators-join-with-space\"/>                </group>                <text macro=\"collection-title\"/>                <text macro=\"issue-join-with-period\"/>              </group>              <text macro=\"issue-join-with-space\"/>            </group>            <text macro=\"issue-join-with-comma\"/>            <text macro=\"locators-journal-join-with-comma\"/>            <text macro=\"locators-newspaper\"/>          </group>          <text macro=\"locators-journal-join-with-colon\"/>        </group>        <text macro=\"access\"/>      </group>    </layout>  </bibliography></style>",
            name: "Chicago Manual of Style (note with bibliography)" },
        "harvard1": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\">  <info>    <title>Harvard Reference format 1 (author-date)</title>    <id>http://www.zotero.org/styles/harvard1</id>    <link href=\"http://www.zotero.org/styles/harvard1\" rel=\"self\"/>    <link href=\"http://libweb.anglia.ac.uk/referencing/harvard.htm\" rel=\"documentation\"/>    <author>      <name>Julian Onions</name>      <email>julian.onions@gmail.com</email>    </author>    <category citation-format=\"author-date\"/>    <category field=\"generic-base\"/>    <summary>The Harvard author-date style</summary>    <updated>2012-09-27T22:06:38+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <macro name=\"editor\">    <names variable=\"editor\" delimiter=\", \">      <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>      <label form=\"short\" prefix=\", \" text-case=\"lowercase\"/>    </names>  </macro>  <macro name=\"anon\">    <text term=\"anonymous\" form=\"short\" text-case=\"capitalize-first\" strip-periods=\"true\"/>  </macro>  <macro name=\"author\">    <names variable=\"author\">      <name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\".\" delimiter-precedes-last=\"never\" delimiter=\", \"/>      <label form=\"short\" prefix=\" \" text-case=\"lowercase\"/>      <substitute>        <names variable=\"editor\"/>        <text macro=\"anon\"/>      </substitute>    </names>  </macro>  <macro name=\"author-short\">    <names variable=\"author\">      <name form=\"short\" and=\"symbol\" delimiter=\", \" delimiter-precedes-last=\"never\" initialize-with=\". \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <text macro=\"anon\"/>      </substitute>    </names>  </macro>  <macro name=\"access\">    <choose>      <if variable=\"URL\">        <text value=\"Available at:\" suffix=\" \"/>        <text variable=\"URL\"/>        <group prefix=\" [\" suffix=\"]\">          <text term=\"accessed\" text-case=\"capitalize-first\" suffix=\" \"/>          <date variable=\"accessed\">            <date-part name=\"month\" suffix=\" \"/>            <date-part name=\"day\" suffix=\", \"/>            <date-part name=\"year\"/>          </date>        </group>      </if>    </choose>  </macro>  <macro name=\"title\">    <choose>      <if type=\"bill book graphic legal_case legislation motion_picture report song thesis\" match=\"any\">        <text variable=\"title\" font-style=\"italic\"/>      </if>      <else>        <text variable=\"title\"/>      </else>    </choose>  </macro>  <macro name=\"publisher\">    <group delimiter=\": \">      <text variable=\"publisher-place\"/>      <text variable=\"publisher\"/>    </group>  </macro>  <macro name=\"year-date\">    <choose>      <if variable=\"issued\">        <date variable=\"issued\">          <date-part name=\"year\"/>        </date>      </if>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if is-numeric=\"edition\">        <group delimiter=\" \">          <number variable=\"edition\" form=\"ordinal\"/>          <text term=\"edition\" form=\"short\"/>        </group>      </if>      <else>        <text variable=\"edition\" suffix=\".\"/>      </else>    </choose>  </macro>  <macro name=\"pages\">    <group>      <label variable=\"page\" form=\"short\" suffix=\" \"/>      <text variable=\"page\"/>    </group>  </macro>  <citation et-al-min=\"3\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\">    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <group delimiter=\", \">        <group delimiter=\" \">          <text macro=\"author-short\"/>          <text macro=\"year-date\"/>        </group>        <group>          <label variable=\"locator\" form=\"short\"/>          <text variable=\"locator\"/>        </group>      </group>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"4\" et-al-use-first=\"1\">    <sort>      <key macro=\"author\"/>      <key variable=\"title\"/>    </sort>    <layout>      <text macro=\"author\" suffix=\",\"/>      <date variable=\"issued\" prefix=\" \" suffix=\".\">        <date-part name=\"year\"/>      </date>      <choose>        <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">          <group prefix=\" \" delimiter=\" \" suffix=\",\">            <text macro=\"title\"/>            <text macro=\"edition\"/>            <text macro=\"editor\"/>          </group>          <text prefix=\" \" suffix=\".\" macro=\"publisher\"/>        </if>        <else-if type=\"chapter paper-conference\" match=\"any\">          <text macro=\"title\" prefix=\" \" suffix=\".\"/>          <group prefix=\" \" delimiter=\" \">            <text term=\"in\" text-case=\"capitalize-first\"/>            <text macro=\"editor\"/>            <text variable=\"container-title\" font-style=\"italic\" suffix=\".\"/>            <text variable=\"collection-title\" suffix=\".\"/>            <text variable=\"event\" suffix=\".\"/>            <group suffix=\".\" delimiter=\", \">              <text macro=\"publisher\" prefix=\" \"/>              <text macro=\"pages\"/>            </group>          </group>        </else-if>        <else-if type=\"thesis\">          <group prefix=\" \" suffix=\".\" delimiter=\". \">            <text macro=\"title\"/>            <text variable=\"genre\"/>            <text macro=\"publisher\"/>          </group>        </else-if>        <else>          <group suffix=\".\">            <text macro=\"title\" prefix=\" \"/>            <text macro=\"editor\" prefix=\" \"/>          </group>          <group prefix=\" \" suffix=\".\">            <text variable=\"container-title\" font-style=\"italic\"/>            <group prefix=\", \">              <text variable=\"volume\"/>              <text variable=\"issue\" prefix=\"(\" suffix=\")\"/>            </group>            <group prefix=\", \">              <label variable=\"page\" form=\"short\"/>              <text variable=\"page\"/>            </group>          </group>        </else>      </choose>      <text prefix=\" \" macro=\"access\" suffix=\".\"/>    </layout>  </bibliography></style>",
            name: "Harvard Reference format 1 (author-date)" },
        "mla": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"never\">  <info>    <title>Modern Language Association 8th edition</title>    <title-short>MLA</title-short>    <id>http://www.zotero.org/styles/modern-language-association-8th-edition</id>    <link href=\"http://www.zotero.org/styles/modern-language-association-8th-edition\" rel=\"self\"/>    <link href=\"http://style.mla.org\" rel=\"documentation\"/>    <author>      <name>Sebastian Karcher</name>    </author>    <category citation-format=\"author\"/>    <category field=\"generic-base\"/>    <summary>This style adheres to the MLA 8th edition handbook. Follows the structure of references as outlined in the MLA Manual closely</summary>    <updated>2014-07-06T20:05:10+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <locale xml:lang=\"en\">    <date form=\"text\">      <date-part name=\"day\" suffix=\" \"/>      <date-part name=\"month\" suffix=\" \" form=\"short\"/>      <date-part name=\"year\"/>    </date>    <terms>      <term name=\"month-01\" form=\"short\">Jan.</term>      <term name=\"month-02\" form=\"short\">Feb.</term>      <term name=\"month-03\" form=\"short\">Mar.</term>      <term name=\"month-04\" form=\"short\">Apr.</term>      <term name=\"month-05\" form=\"short\">May</term>      <term name=\"month-06\" form=\"short\">June</term>      <term name=\"month-07\" form=\"short\">July</term>      <term name=\"month-08\" form=\"short\">Aug.</term>      <term name=\"month-09\" form=\"short\">Sept.</term>      <term name=\"month-10\" form=\"short\">Oct.</term>      <term name=\"month-11\" form=\"short\">Nov.</term>      <term name=\"month-12\" form=\"short\">Dec.</term>      <term name=\"translator\" form=\"short\">trans.</term>    </terms>  </locale>  <macro name=\"author\">    <names variable=\"author\">      <name name-as-sort-order=\"first\" and=\"text\" delimiter-precedes-last=\"always\" delimiter-precedes-et-al=\"always\" initialize=\"false\" initialize-with=\". \"/>      <label form=\"long\" prefix=\", \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <text macro=\"title-short\"/>      </substitute>    </names>  </macro>  <macro name=\"author-short\">    <group delimiter=\", \">      <names variable=\"author\">        <name form=\"short\" initialize-with=\". \" and=\"text\"/>        <substitute>          <names variable=\"editor\"/>          <names variable=\"translator\"/>          <text macro=\"title-short\"/>        </substitute>      </names>      <choose>        <if disambiguate=\"true\">          <text macro=\"title-short\"/>        </if>      </choose>    </group>  </macro>  <macro name=\"title\">    <choose>      <if variable=\"container-title\" match=\"any\">        <text variable=\"title\" quotes=\"true\" text-case=\"title\"/>      </if>      <else>        <text variable=\"title\" font-style=\"italic\" text-case=\"title\"/>      </else>    </choose>  </macro>  <macro name=\"title-short\">    <choose>      <if variable=\"container-title\" match=\"any\">        <text variable=\"title\" form=\"short\" quotes=\"true\" text-case=\"title\"/>      </if>      <else>        <text variable=\"title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/>      </else>    </choose>  </macro>  <macro name=\"container-title\">    <text variable=\"container-title\" font-style=\"italic\" text-case=\"title\"/>  </macro>  <macro name=\"other-contributors\">    <choose>      <if variable=\"container-title\" match=\"any\">        <names variable=\"editor translator\" delimiter=\", \">          <label form=\"verb\" suffix=\" \"/>          <name and=\"text\"/>        </names>      </if>      <else>        <names variable=\"editor translator\" delimiter=\", \">          <label form=\"verb\" suffix=\" \" text-case=\"capitalize-first\"/>          <name and=\"text\"/>        </names>      </else>    </choose>  </macro>  <macro name=\"version\">    <group delimiter=\", \">      <choose>        <if is-numeric=\"edition\">          <group delimiter=\" \">            <number variable=\"edition\" form=\"ordinal\"/>            <text term=\"edition\" form=\"short\"/>          </group>        </if>        <else>          <text variable=\"edition\" text-case=\"capitalize-first\"/>        </else>      </choose>      <text variable=\"version\"/>    </group>  </macro>  <macro name=\"number\">    <group delimiter=\", \">      <group>        <choose>          <!--lowercase if we have a preceding element-->          <if variable=\"edition container-title\" match=\"any\">            <group delimiter=\" \">              <text term=\"volume\" form=\"short\"/>              <text variable=\"volume\"/>            </group>          </if>          <!--other contributors preceding the volume-->          <else-if variable=\"author editor\" match=\"all\">            <group delimiter=\" \">              <text term=\"volume\" form=\"short\"/>              <text variable=\"volume\"/>            </group>          </else-if>          <else>            <group delimiter=\" \">              <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\"/>              <text variable=\"volume\"/>            </group>          </else>        </choose>      </group>      <group delimiter=\" \">        <text term=\"issue\" form=\"short\"/>        <text variable=\"issue\"/>      </group>      <choose>        <if type=\"report\">          <text variable=\"genre\"/>        </if>      </choose>      <text variable=\"number\"/>    </group>  </macro>  <macro name=\"publisher\">    <text variable=\"publisher\"/>  </macro>  <macro name=\"publication-date\">    <choose>      <if type=\"book chapter paper-conference motion_picture\" match=\"any\">        <date variable=\"issued\" form=\"numeric\" date-parts=\"year\"/>      </if>      <else-if type=\"article-journal article-magazine\" match=\"any\">        <date variable=\"issued\" form=\"text\" date-parts=\"year-month\"/>      </else-if>      <else-if type=\"speech\" match=\"none\">        <date variable=\"issued\" form=\"text\"/>      </else-if>    </choose>  </macro>  <macro name=\"location\">    <group delimiter=\", \">      <group delimiter=\" \">        <label variable=\"page\" form=\"short\"/>        <text variable=\"page\"/>      </group>      <choose>        <if variable=\"source\" match=\"none\">          <choose>            <if variable=\"URL\">              <text macro=\"URI\"/>            </if>          </choose>        </if>      </choose>    </group>  </macro>  <macro name=\"container2-title\">    <group delimiter=\", \">      <choose>        <if type=\"speech\">          <text variable=\"event\"/>          <date variable=\"event-date\" form=\"text\"/>          <text variable=\"event-place\"/>        </if>      </choose>      <text variable=\"archive\"/>      <text variable=\"archive-place\"/>      <text variable=\"archive_location\"/>    </group>  </macro>  <macro name=\"container2-location\">    <choose>      <if variable=\"source URL\" match=\"all\">        <group delimiter=\", \">          <text variable=\"source\" font-style=\"italic\"/>          <text macro=\"URI\"/>        </group>      </if>    </choose>  </macro>  <macro name=\"URI\">    <choose>      <if variable=\"DOI\">        <text variable=\"DOI\" prefix=\"doi:\"/>      </if>      <else>        <text variable=\"URL\"/>      </else>    </choose>  </macro>  <macro name=\"accessed\">    <!--using accessed where we don't have an issued date; follows recommendation on p. 53 -->    <choose>      <if variable=\"issued\" match=\"none\">        <group delimiter=\" \">          <text term=\"accessed\" text-case=\"capitalize-first\"/>          <date variable=\"accessed\" form=\"text\"/>        </group>      </if>    </choose>  </macro>  <citation et-al-min=\"3\" et-al-use-first=\"1\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\">    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <choose>        <if locator=\"page\">          <group delimiter=\" \">            <text macro=\"author-short\"/>            <text variable=\"locator\"/>          </group>        </if>        <else>          <group delimiter=\", \">            <text macro=\"author-short\"/>            <group>              <label variable=\"locator\" form=\"short\"/>              <text variable=\"locator\"/>            </group>          </group>        </else>      </choose>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"3\" et-al-use-first=\"1\" line-spacing=\"2\" entry-spacing=\"0\" subsequent-author-substitute=\"---\">    <sort>      <key macro=\"author\"/>      <key variable=\"title\"/>    </sort>    <layout suffix=\".\">      <group delimiter=\". \">        <text macro=\"author\"/>        <text macro=\"title\"/>        <date variable=\"original-date\" form=\"numeric\" date-parts=\"year\"/>        <group delimiter=\", \">          <!---This group corresponds to MLA's \"Container 1\"-->          <text macro=\"container-title\"/>          <text macro=\"other-contributors\"/>          <text macro=\"version\"/>          <text macro=\"number\"/>          <text macro=\"publisher\"/>          <text macro=\"publication-date\"/>          <text macro=\"location\"/>        </group>        <group delimiter=\", \">          <!---This group corresponds to MLA's \"Container 2\"-->          <!--currently just using this one for archival info-->          <text macro=\"container2-title\"/>          <text macro=\"container2-location\"/>        </group>        <text macro=\"accessed\"/>      </group>    </layout>  </bibliography></style>",
            name: "Modern Language Association" },
        "nature": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\" default-locale=\"en-GB\">  <info>    <title>Nature</title>    <id>http://www.zotero.org/styles/nature</id>    <link href=\"http://www.zotero.org/styles/nature\" rel=\"self\"/>    <link href=\"http://www.nature.com/nature/authors/gta/index.html#a5.4\" rel=\"documentation\"/>    <author>      <name>Michael Berkowitz</name>      <email>mberkowi@gmu.edu</email>    </author>    <category citation-format=\"numeric\"/>    <category field=\"science\"/>    <category field=\"generic-base\"/>    <issn>0028-0836</issn>    <eissn>1476-4687</eissn>    <updated>2014-09-10T06:11:43+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <macro name=\"title\">    <choose>      <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">        <text variable=\"title\" font-style=\"italic\"/>      </if>      <else-if type=\"chapter\" match=\"any\"/>      <else>        <text variable=\"title\"/>      </else>    </choose>  </macro>  <macro name=\"author\">    <names variable=\"author\">      <name sort-separator=\", \" delimiter=\", \" and=\"symbol\" initialize-with=\". \" delimiter-precedes-last=\"never\" name-as-sort-order=\"all\"/>      <label form=\"short\" prefix=\", \"/>      <et-al font-style=\"italic\"/>    </names>  </macro>  <macro name=\"access\">    <choose>      <if variable=\"volume\"/>      <else-if variable=\"DOI\">        <text variable=\"DOI\" prefix=\"doi:\"/>      </else-if>      <else-if type=\"webpage\" variable=\"URL\" match=\"all\">        <text term=\"available at\" text-case=\"capitalize-first\" suffix=\": \"/>        <text variable=\"URL\" suffix=\". \"/>        <group prefix=\"(\" suffix=\")\" delimiter=\": \">          <text term=\"accessed\" text-case=\"capitalize-first\"/>          <date variable=\"accessed\">            <date-part name=\"day\" suffix=\" \" form=\"ordinal\"/>            <date-part name=\"month\" suffix=\" \"/>            <date-part name=\"year\"/>          </date>        </group>      </else-if>    </choose>  </macro>  <macro name=\"issuance\">    <choose>      <if type=\"bill book graphic legal_case legislation motion_picture report song thesis chapter paper-conference\" match=\"any\">        <group delimiter=\", \" prefix=\"(\" suffix=\").\">          <text variable=\"publisher\" form=\"long\"/>          <date variable=\"issued\">            <date-part name=\"year\"/>          </date>        </group>      </if>      <else>        <date prefix=\"(\" suffix=\").\" variable=\"issued\">          <date-part name=\"year\"/>        </date>      </else>    </choose>  </macro>  <macro name=\"container-title\">    <choose>      <if type=\"article-journal\">        <text variable=\"container-title\" font-style=\"italic\" form=\"short\"/>      </if>      <else>        <text variable=\"container-title\" font-style=\"italic\"/>      </else>    </choose>  </macro>  <macro name=\"editor\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <names variable=\"editor\" prefix=\"(\" suffix=\")\">          <label form=\"short\" suffix=\" \"/>          <name and=\"symbol\" delimiter-precedes-last=\"never\" initialize-with=\". \" name-as-sort-order=\"all\"/>        </names>      </if>    </choose>  </macro>  <citation collapse=\"citation-number\">    <sort>      <key variable=\"citation-number\"/>    </sort>    <layout vertical-align=\"sup\" delimiter=\",\">      <text variable=\"citation-number\"/>    </layout>  </citation>  <bibliography et-al-min=\"6\" et-al-use-first=\"1\" second-field-align=\"flush\" entry-spacing=\"0\" line-spacing=\"2\">    <layout>      <text variable=\"citation-number\" suffix=\".\"/>      <group delimiter=\" \">        <text macro=\"author\" suffix=\".\"/>        <text macro=\"title\" suffix=\".\"/>        <choose>          <if type=\"chapter paper-conference\" match=\"any\">            <text term=\"in\" form=\"long\" plural=\"false\"/>          </if>        </choose>        <text macro=\"container-title\"/>        <text macro=\"editor\"/>        <group font-weight=\"bold\">          <text variable=\"volume\" suffix=\",\"/>        </group>        <text variable=\"page\"/>        <text macro=\"issuance\"/>        <text macro=\"access\"/>      </group>    </layout>  </bibliography></style>",
            name: "Nature" },
        "oxford-university-press-humsoc": {
            definition: "<?xml version=\"1.0\" encoding=\"utf-8\"?><style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\" page-range-format=\"minimal\" default-locale=\"en-GB\">  <info>    <title>Oxford University Press HUMSOC</title>    <title-short>Oxford HUMSOC</title-short>    <id>http://www.zotero.org/styles/oxford-university-press-humsoc</id>    <link href=\"http://www.zotero.org/styles/oxford-university-press-humsoc\" rel=\"self\"/>    <link href=\"http://www.zotero.org/styles/apa-5th-edition\" rel=\"template\"/>    <link href=\"http://www.oxfordjournals.org/our_journals/rev/for_authors/manuscript_instructions.html#Journal%20copyediting%20style\" rel=\"documentation\"/>    <author>      <name>James Howison</name>      <email>james@howison.name</email>    </author>    <category citation-format=\"author-date\"/>    <category field=\"humanities\"/>    <category field=\"social_science\"/>    <updated>2014-04-03T22:06:38+00:00</updated>    <rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>  </info>  <locale xml:lang=\"en-GB\">    <terms>      <term name=\"editor\" form=\"short\">        <single>ed.</single>        <multiple>eds</multiple>      </term>    </terms>  </locale>  <macro name=\"editor\">    <names variable=\"editor\" delimiter=\", \">      <name and=\"symbol\" delimiter=\", \" initialize-with=\". \" sort-separator=\" \" name-as-sort-order=\"all\"/>      <label form=\"short\" prefix=\" (\" suffix=\") \"/>      <substitute>        <names variable=\"translator\"/>      </substitute>    </names>  </macro>  <macro name=\"container-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"any\">        <text macro=\"editor\"/>      </if>    </choose>  </macro>  <macro name=\"secondary-contributors\">    <choose>      <if type=\"chapter paper-conference\" match=\"none\">        <names variable=\"translator\" delimiter=\", \" prefix=\" (\" suffix=\")\">          <name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/>          <label form=\"short\" prefix=\", \" text-case=\"capitalize-first\"/>          <substitute>            <names variable=\"editor\"/>          </substitute>        </names>      </if>    </choose>  </macro>  <macro name=\"author\">    <names variable=\"author\">      <name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/>      <label form=\"short\" prefix=\" (\" suffix=\")\" text-case=\"capitalize-first\"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <text macro=\"title\"/>      </substitute>    </names>  </macro>  <macro name=\"author-short\">    <names variable=\"author\">      <name form=\"short\" and=\"symbol\" delimiter=\", \" initialize-with=\". \"/>      <substitute>        <names variable=\"editor\"/>        <names variable=\"translator\"/>        <choose>          <if type=\"bill book graphic legal_case legislation motion_picture report song\" match=\"any\">            <text variable=\"title\" form=\"short\" font-style=\"italic\"/>          </if>          <else>            <text variable=\"title\" form=\"short\" quotes=\"true\"/>          </else>        </choose>      </substitute>    </names>  </macro>  <macro name=\"URL\">    <group prefix=\"&lt;\" suffix=\"&gt;\">      <text variable=\"URL\"/>    </group>  </macro>  <macro name=\"access\">    <choose>      <if type=\"thesis\">        <choose>          <if variable=\"archive\" match=\"any\">            <group>              <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>              <text term=\"from\" suffix=\" \"/>              <text variable=\"archive\" suffix=\".\"/>              <text variable=\"archive_location\" prefix=\" (\" suffix=\")\"/>            </group>          </if>          <else>            <group>              <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>              <date variable=\"accessed\" suffix=\", \">                <date-part name=\"month\" suffix=\" \"/>                <date-part name=\"day\" suffix=\", \"/>                <date-part name=\"year\"/>              </date>              <text term=\"from\" suffix=\" \"/>              <text macro=\"URL\"/>            </group>          </else>        </choose>      </if>      <else>        <choose>          <if variable=\"URL\">            <choose>              <if variable=\"archive\">                <group>                  <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>                  <text term=\"from\" suffix=\" \"/>                  <text variable=\"archive\" suffix=\".\"/>                </group>              </if>              <else-if type=\"post-weblog post webpage report\" match=\"any\">                <group>                  <text term=\"retrieved\" text-case=\"capitalize-first\" suffix=\" \"/>                  <date variable=\"accessed\" suffix=\", \">                    <date-part name=\"month\" suffix=\" \"/>                    <date-part name=\"day\" suffix=\", \"/>                    <date-part name=\"year\"/>                  </date>                  <group>                    <text term=\"from\" suffix=\" \"/>                    <text macro=\"URL\"/>                  </group>                </group>              </else-if>            </choose>          </if>        </choose>      </else>    </choose>  </macro>  <macro name=\"title\">    <choose>      <if type=\"report thesis\" match=\"any\">        <group delimiter=\" \" suffix=\".\">          <text variable=\"title\" font-style=\"italic\"/>          <group prefix=\"(\" suffix=\")\">            <text variable=\"genre\"/>            <text variable=\"number\" prefix=\" No. \"/>          </group>        </group>      </if>      <else-if type=\"bill book graphic legal_case legislation manuscript motion_picture report song speech\" match=\"any\">        <text variable=\"title\" font-style=\"italic\" suffix=\".\"/>      </else-if>      <else-if type=\"article-journal\">        <text variable=\"title\" quotes=\"true\" suffix=\",\"/>      </else-if>      <else>        <text variable=\"title\" quotes=\"true\" suffix=\".\"/>      </else>    </choose>  </macro>  <macro name=\"publisher\">    <choose>      <if type=\"report\" match=\"any\">        <group delimiter=\": \">          <text variable=\"publisher-place\"/>          <text variable=\"publisher\"/>        </group>      </if>      <else-if type=\"chapter\" match=\"any\">        <group delimiter=\": \">          <text variable=\"publisher\"/>          <text variable=\"publisher-place\"/>        </group>      </else-if>      <else-if type=\"thesis\" match=\"any\">        <group delimiter=\", \">          <text variable=\"publisher\"/>          <text variable=\"publisher-place\"/>        </group>      </else-if>      <else>        <choose>          <if variable=\"event\" match=\"none\">            <text variable=\"genre\" suffix=\", \"/>          </if>        </choose>        <group delimiter=\": \">          <text variable=\"publisher-place\"/>          <text variable=\"publisher\"/>        </group>      </else>    </choose>  </macro>  <macro name=\"event\">    <choose>      <if variable=\"event\">        <choose>          <if variable=\"genre\" match=\"none\">            <text term=\"presented at\" text-case=\"capitalize-first\" suffix=\" \"/>            <text variable=\"event\"/>            <date variable=\"issued\">              <date-part prefix=\", \" name=\"month\"/>              <date-part prefix=\" \" name=\"day\"/>            </date>          </if>          <else>            <group delimiter=\" \">              <text variable=\"genre\" text-case=\"capitalize-first\"/>              <text term=\"presented at\"/>              <text variable=\"event\"/>              <date variable=\"issued\">                <date-part prefix=\", \" name=\"month\"/>                <date-part prefix=\" \" name=\"day\"/>              </date>            </group>          </else>        </choose>      </if>    </choose>  </macro>  <macro name=\"issued\">    <choose>      <if variable=\"issued\">        <group prefix=\" (\" suffix=\").\">          <date variable=\"issued\">            <date-part name=\"year\"/>          </date>        </group>      </if>      <else>        <text prefix=\" (\" term=\"no date\" suffix=\").\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"issued-year\">    <choose>      <if variable=\"issued\">        <date variable=\"issued\">          <date-part name=\"year\"/>        </date>      </if>      <else>        <text term=\"no date\" form=\"short\"/>      </else>    </choose>  </macro>  <macro name=\"edition\">    <choose>      <if is-numeric=\"edition\">        <group delimiter=\" \">          <number variable=\"edition\" form=\"ordinal\"/>          <text term=\"edition\" form=\"short\"/>        </group>      </if>      <else>        <text variable=\"edition\" suffix=\".\"/>      </else>    </choose>  </macro>  <macro name=\"locators\">    <choose>      <if type=\"article-journal article-magazine article-newspaper\" match=\"any\">        <group prefix=\", \" delimiter=\": \">          <group delimiter=\"/\">            <text variable=\"volume\"/>            <text variable=\"issue\"/>          </group>          <text variable=\"page\"/>        </group>      </if>      <else-if type=\"bill book chapter graphic legal_case legislation motion_picture paper-conference report song\" match=\"any\">        <group prefix=\", \" suffix=\".\" delimiter=\", \">          <text macro=\"edition\"/>          <group>            <text term=\"volume\" form=\"short\" plural=\"true\" text-case=\"capitalize-first\" suffix=\" \"/>            <number variable=\"number-of-volumes\" form=\"numeric\" prefix=\"1-\"/>          </group>          <group>            <text term=\"volume\" form=\"short\" text-case=\"capitalize-first\" suffix=\" \"/>            <number variable=\"volume\" form=\"numeric\"/>          </group>          <group>            <label variable=\"page\" form=\"short\" suffix=\" \"/>            <text variable=\"page\"/>          </group>        </group>      </else-if>    </choose>  </macro>  <macro name=\"citation-locator\">    <group>      <label variable=\"locator\" form=\"short\"/>      <text variable=\"locator\" prefix=\" \"/>    </group>  </macro>  <citation et-al-min=\"3\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\" givenname-disambiguation-rule=\"primary-name\" collapse=\"year\">    <sort>      <key macro=\"author\"/>      <key macro=\"issued-year\"/>    </sort>    <layout prefix=\"(\" suffix=\")\" delimiter=\"; \">      <group delimiter=\" \">        <text macro=\"author-short\"/>        <text macro=\"issued-year\"/>        <text macro=\"citation-locator\"/>      </group>    </layout>  </citation>  <bibliography hanging-indent=\"true\" et-al-min=\"8\" et-al-use-first=\"7\" entry-spacing=\"0\" line-spacing=\"1\" subsequent-author-substitute=\"&#8212;&#8212;\">    <sort>      <key macro=\"author\"/>      <key macro=\"issued-year\" sort=\"ascending\"/>    </sort>    <layout>      <group suffix=\".\">        <text macro=\"author\" suffix=\".\"/>        <text macro=\"issued\" suffix=\" \"/>        <group delimiter=\" \">          <text macro=\"title\"/>          <group>            <text macro=\"container-contributors\"/>            <text macro=\"secondary-contributors\"/>            <group delimiter=\", \">              <text variable=\"container-title\" font-style=\"italic\"/>              <text variable=\"collection-title\"/>            </group>          </group>        </group>        <text macro=\"locators\"/>        <group delimiter=\", \" prefix=\". \">          <text macro=\"event\"/>          <text macro=\"publisher\"/>        </group>      </group>      <text macro=\"access\" prefix=\". \"/>      <text variable=\"DOI\" prefix=\". DOI: \"/>    </layout>  </bibliography></style>",
            name: "Oxford University Press HUMSOC" }
    }
};
var defaultCitationStyle = exports.defaultCitationStyle = "american-anthropological-association";

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/** @file Makes a list of available styles for the document and book style menus. 
 This file is automatically created using ./manage.py create_document_styles
*/
var documentStyleList = exports.documentStyleList = [];
var defaultDocumentStyle = exports.defaultDocumentStyle = "acmStyle";

},{}],15:[function(require,module,exports){
"use strict";

var _printBook = require("./es6_modules/print-book");

/* Create thePrintBook and make it available to the general namespace for debugging
purposes.*/

var thePrintBook = new _printBook.PrintBook();
window.thePrintBook = thePrintBook;

},{"./es6_modules/print-book":7}],16:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":47}],17:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":48}],18:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":49}],19:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":50}],20:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":51}],21:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":52}],22:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/set"), __esModule: true };
},{"core-js/library/fn/set":53}],23:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":54}],24:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":55}],25:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],26:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":20}],27:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":20}],28:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":17,"../core-js/is-iterable":18}],29:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};
},{"../core-js/array/from":16}],30:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":23,"../core-js/symbol/iterator":24}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/** A list of supported languages (without aliases)  in the langid field */
var langidOptions = {
    "acadian": {
        "csl": "fr-CA",
        "biblatex": "acadian"
    },
    "afrikaans": {
        "csl": "af-ZA",
        "biblatex": "afrikaans"
    },
    "arabic": {
        "csl": "ar",
        "biblatex": "arabic"
    },
    "basque": {
        "csl": "eu",
        "biblatex": "basque"
    },
    "bulgarian": {
        "csl": "bg-BG",
        "biblatex": "bulgarian"
    },
    "catalan": {
        "csl": "ca-AD",
        "biblatex": "catalan"
    },
    "chinese": {
        "csl": "zh-CN",
        "biblatex": "pinyin"
    },
    "croatian": {
        "csl": "hr-HR",
        "biblatex": "croatian"
    },
    "czech": {
        "csl": "cs-CZ",
        "biblatex": "czech"
    },
    "danish": {
        "csl": "da-DK",
        "biblatex": "danish"
    },
    "dutch": {
        "csl": "nl-NL",
        "biblatex": "dutch"
    },
    "auenglish": {
        "csl": "en-GB",
        "biblatex": "australian"
    },
    "caenglish": {
        "csl": "en-US",
        "biblatex": "canadian"
    },
    "nzenglish": {
        "csl": "en-GB",
        "biblatex": "newzealand"
    },
    "ukenglish": {
        "csl": "en-GB",
        "biblatex": "ukenglish"
    },
    "usenglish": {
        "csl": "en-US",
        "biblatex": "usenglish"
    },
    "estonian": {
        "csl": "et-EE",
        "biblatex": "estonian"
    },
    "finnish": {
        "csl": "fi-FI",
        "biblatex": "finnish"
    },
    "french": {
        "csl": "fr-FR",
        "biblatex": "french"
    },
    "cafrench": {
        "csl": "fr-CA",
        "biblatex": "canadien"
    },
    "german": {
        "csl": "de-DE",
        "biblatex": "ngerman"
    },
    "atgerman": {
        "csl": "de-AT",
        "biblatex": "naustrian"
    },
    "greek": {
        "csl": "el-GR",
        "biblatex": "greek"
    },
    "hebrew": {
        "csl": "he-IL",
        "biblatex": "hebrew"
    },
    "hungarian": {
        "csl": "hu-HU",
        "biblatex": "hungarian"
    },
    "icelandic": {
        "csl": "is-IS",
        "biblatex": "icelandic"
    },
    "italian": {
        "csl": "it-IT",
        "biblatex": "italian"
    },
    "japanese": {
        "csl": "ja-JP",
        "biblatex": "japanese"
    },
    "latin": {
        "csl": "la",
        "biblatex": "latin"
    },
    "latvian": {
        "csl": "lv-LV",
        "biblatex": "latvian"
    },
    "lithuanian": {
        "csl": "lt-LT",
        "biblatex": "lithuanian"
    },
    "magyar": {
        "csl": "hu-HU",
        "biblatex": "magyar"
    },
    "mongolian": {
        "csl": "mn-MN",
        "biblatex": "mongolian"
    },
    "norwegian": {
        "csl": "nb-NO",
        "biblatex": "norsk"
    },
    "newnorwegian": {
        "csl": "nn-NO",
        "biblatex": "nynorsk"
    },
    "farsi": {
        "csl": "fa-IR",
        "biblatex": "farsi"
    },
    "polish": {
        "csl": "pl-PL",
        "biblatex": "polish"
    },
    "portuguese": {
        "csl": "pt-PT",
        "biblatex": "portuguese"
    },
    "brportuguese": {
        "csl": "pt-BR",
        "biblatex": "brazilian"
    },
    "romanian": {
        "csl": "ro-RO",
        "biblatex": "romanian"
    },
    "russian": {
        "csl": "ru-RU",
        "biblatex": "russian"
    },
    "serbian": {
        "csl": "sr-RS",
        "biblatex": "serbian"
    },
    "cyrillicserbian": {
        "csl": "sr-RS",
        "biblatex": "serbianc"
    },
    "slovak": {
        "csl": "sk-SK",
        "biblatex": "slovak"
    },
    "slovene": {
        "csl": "sl-SL",
        "biblatex": "slovene"
    },
    "spanish": {
        "csl": "es-ES",
        "biblatex": "spanish"
    },
    "swedish": {
        "csl": "sv-SE",
        "biblatex": "swedish"
    },
    "thai": {
        "csl": "th-TH",
        "biblatex": "thai"
    },
    "turkish": {
        "csl": "tr-TR",
        "biblatex": "turkish"
    },
    "ukrainian": {
        "csl": "uk-UA",
        "biblatex": "ukrainian"
    },
    "vietnamese": {
        "csl": "vi-VN",
        "biblatex": "vietnamese"
    }
};

var pubstateOptions = {
    "inpreparation": {
        "csl": "in preparation",
        "biblatex": "inpreparation"
    },
    "submitted": {
        "csl": "submitted",
        "biblatex": "submitted"
    },
    "forthcoming": {
        "csl": "forthcoming",
        "biblatex": "forthcoming"
    },
    "inpress": {
        "csl": "in press",
        "biblatex": "inpress"
    },
    "prepublished": {
        "csl": "prepublished",
        "biblatex": "prepublished"
    }
};

var languageOptions = ['catalan', 'croatian', 'czech', 'danish', 'dutch', 'english', 'american', 'finnish', 'french', 'german', 'greek', 'italian', 'latin', 'norwegian', 'polish', 'portuguese', 'brazilian', 'russian', 'slovene', 'spanish', 'swedish'];

/** A list of field types of Bibligraphy DB with lookup by field name. */
var BibFieldTypes = exports.BibFieldTypes = {
    'abstract': {
        type: 'f_long_literal',
        biblatex: 'abstract',
        csl: 'abstract'
    },
    'addendum': {
        type: 'f_literal',
        biblatex: 'addendum'
    },
    'afterword': {
        type: 'l_name',
        biblatex: 'afterword'
    },
    'annotation': {
        type: 'f_long_literal',
        biblatex: 'annotation'
    },
    'annotator': {
        type: 'l_name',
        biblatex: 'annotator'
    },
    'author': {
        type: 'l_name',
        biblatex: 'author',
        csl: 'author'
    },
    'bookauthor': {
        type: 'l_name',
        biblatex: 'bookauthor',
        csl: 'container-author'
    },
    'bookpagination': {
        type: 'f_key',
        biblatex: 'bookpagination',
        options: ['page', 'column', 'section', 'paragraph', 'verse', 'line']
    },
    'booksubtitle': {
        type: 'f_title',
        biblatex: 'booksubtitle'
    },
    'booktitle': {
        type: 'f_title',
        biblatex: 'booktitle',
        csl: 'container-title'
    },
    'booktitleaddon': {
        type: 'f_title',
        biblatex: 'booktitleaddon'
    },
    'chapter': {
        type: 'f_literal',
        biblatex: 'chapter',
        csl: 'chapter-number'
    },
    'commentator': {
        type: 'l_name',
        biblatex: 'commentator'
    },
    'date': {
        type: 'f_date',
        biblatex: 'date',
        csl: 'issued'
    },
    'doi': {
        type: 'f_verbatim',
        biblatex: 'doi',
        csl: 'DOI'
    },
    'edition': {
        type: 'f_integer',
        biblatex: 'edition',
        csl: 'edition'
    },
    'editor': {
        type: 'l_name',
        biblatex: 'editor',
        csl: 'editor'
    },
    'editora': {
        type: 'l_name',
        biblatex: 'editora'
    },
    'editorb': {
        type: 'l_name',
        biblatex: 'editorb'
    },
    'editorc': {
        type: 'l_name',
        biblatex: 'editorc'
    },
    'editortype': {
        type: 'f_key',
        biblatex: 'editortype',
        options: ['editor', 'compiler', 'founder', 'continuator', 'redactor', 'reviser', 'collaborator']
    },
    'editoratype': {
        type: 'f_key',
        biblatex: 'editoratype',
        options: ['editor', 'compiler', 'founder', 'continuator', 'redactor', 'reviser', 'collaborator']
    },
    'editorbtype': {
        type: 'f_key',
        biblatex: 'editorbtype',
        options: ['editor', 'compiler', 'founder', 'continuator', 'redactor', 'reviser', 'collaborator']
    },
    'editorctype': {
        type: 'f_key',
        biblatex: 'editorctype',
        options: ['editor', 'compiler', 'founder', 'continuator', 'redactor', 'reviser', 'collaborator']
    },
    'eid': {
        type: 'f_literal',
        biblatex: 'eid'
    },
    'entrysubtype': {
        type: 'f_literal',
        biblatex: 'entrysubtype'
    },
    'eprint': {
        type: 'f_verbatim',
        biblatex: 'eprint'
    },
    'eprintclass': {
        type: 'f_literal',
        biblatex: 'eprintclass'
    },
    'eprinttype': {
        type: 'f_literal',
        biblatex: 'eprinttype'
    },
    'eventdate': {
        type: 'f_date',
        biblatex: 'eventdate',
        csl: 'event-date'
    },
    'eventtitle': {
        type: 'f_title',
        biblatex: 'eventtitle',
        csl: 'event'
    },
    'file': {
        type: 'f_verbatim',
        biblatex: 'file'
    },
    'foreword': {
        type: 'l_name',
        biblatex: 'foreword'
    },
    'holder': {
        type: 'l_name',
        biblatex: 'holder'
    },
    'howpublished': {
        type: 'f_literal',
        biblatex: 'howpublished',
        csl: 'medium'
    },
    'indextitle': {
        type: 'f_literal',
        biblatex: 'indextitle'
    },
    'institution': {
        type: 'l_literal',
        biblatex: 'institution'
    },
    'introduction': {
        type: 'l_name',
        biblatex: 'introduction'
    },
    'isan': {
        type: 'f_literal',
        biblatex: 'isan'
    },
    'isbn': {
        type: 'f_literal',
        biblatex: 'isbn',
        csl: 'ISBN'
    },
    'ismn': {
        type: 'f_literal',
        biblatex: 'ismn'
    },
    'isrn': {
        type: 'f_literal',
        biblatex: 'isrn'
    },
    'issn': {
        type: 'f_literal',
        biblatex: 'issn',
        csl: 'ISSN'
    },
    'issue': {
        type: 'f_literal',
        biblatex: 'issue',
        csl: 'issue'
    },
    'issuesubtitle': {
        type: 'f_literal',
        biblatex: 'issuesubtitle'
    },
    'issuetitle': {
        type: 'f_literal',
        biblatex: 'issuetitle'
    },
    'iswc': {
        type: 'f_literal',
        biblatex: 'iswc'
    },
    'journalsubtitle': {
        type: 'f_literal',
        biblatex: 'journalsubtitle'
    },
    'journaltitle': {
        type: 'f_literal',
        biblatex: 'journaltitle',
        csl: 'container-title'
    },
    'keywords': {
        type: 'l_tag',
        biblatex: 'keywords'
    },
    'label': {
        type: 'f_literal',
        biblatex: 'label'
    },
    'language': {
        type: 'l_key',
        biblatex: 'language',
        options: languageOptions
    },
    'langid': {
        type: 'f_key',
        strict: true, // Does not allow costum strings
        biblatex: 'langid',
        csl: 'language',
        options: langidOptions
    },
    'library': {
        type: 'f_literal',
        biblatex: 'library'
    },
    'location': {
        type: 'l_literal',
        biblatex: 'location',
        csl: 'publisher-place'
    },
    'mainsubtitle': {
        type: 'f_title',
        biblatex: 'mainsubtitle'
    },
    'maintitle': {
        type: 'f_title',
        biblatex: 'maintitle'
    },
    'maintitleaddon': {
        type: 'f_title',
        biblatex: 'maintitleaddon'
    },
    'nameaddon': {
        type: 'f_literal',
        biblatex: 'nameaddon'
    },
    'note': {
        type: 'f_literal',
        biblatex: 'note',
        csl: 'note'
    },
    'number': {
        type: 'f_literal',
        biblatex: 'number',
        csl: 'number'
    },
    'organization': {
        type: 'l_literal',
        biblatex: 'organization'
    },
    'origdate': {
        type: 'f_date',
        biblatex: 'origdate',
        csl: 'original-date'
    },
    'origlanguage': {
        type: 'f_key',
        biblatex: 'origlanguage',
        options: languageOptions
    },
    'origlocation': {
        type: 'l_literal',
        biblatex: 'origlocation',
        csl: 'original-publisher-place'
    },
    'origpublisher': {
        type: 'l_literal',
        biblatex: 'origpublisher',
        csl: 'original-publisher'
    },
    'origtitle': {
        type: 'f_title',
        biblatex: 'origtitle',
        csl: 'original-title'
    },
    'pages': {
        type: 'l_range',
        biblatex: 'pages',
        csl: 'page'
    },
    'pagetotal': {
        type: 'f_literal',
        biblatex: 'pagetotal',
        csl: 'number-of-pages'
    },
    'pagination': {
        type: 'f_key',
        biblatex: 'pagination',
        options: ['page', 'column', 'section', 'paragraph', 'verse', 'line']
    },
    'part': {
        type: 'f_literal',
        biblatex: 'part'
    },
    'publisher': {
        type: 'l_literal',
        biblatex: 'publisher',
        csl: 'publisher'
    },
    'pubstate': {
        type: 'f_key',
        biblatex: 'pubstate',
        csl: 'status',
        options: pubstateOptions
    },
    'reprinttitle': {
        type: 'f_literal',
        biblatex: 'reprinttitle'
    },
    'series': {
        type: 'f_literal',
        biblatex: 'series',
        csl: 'collection-title'
    },
    'shortauthor': {
        type: 'l_name',
        biblatex: 'shortauthor'
    },
    'shorteditor': {
        type: 'l_name',
        biblatex: 'shorteditor'
    },
    'shorthand': {
        type: 'f_literal',
        biblatex: 'shorthand'
    },
    'shorthandintro': {
        type: 'f_literal',
        biblatex: 'shorthandintro'
    },
    'shortjournal': {
        type: 'f_literal',
        biblatex: 'shortjournal',
        csl: 'container-title-short'
    },
    'shortseries': {
        type: 'f_literal',
        biblatex: 'shortseries'
    },
    'shorttitle': {
        type: 'f_literal',
        biblatex: 'shorttitle',
        csl: 'title-short'
    },
    'subtitle': {
        type: 'f_title',
        biblatex: 'subtitle'
    },
    'title': {
        type: 'f_title',
        biblatex: 'title',
        csl: 'title'
    },
    'titleaddon': {
        type: 'f_title',
        biblatex: 'titleaddon'
    },
    'translator': {
        type: 'l_name',
        biblatex: 'translator',
        csl: 'translator'
    },
    'type': {
        type: 'f_key',
        biblatex: 'type',
        options: ['manual', 'patent', 'report', 'thesis', 'mathesis', 'phdthesis', 'candthesis', 'techreport', 'resreport', 'software', 'datacd', 'audiocd']
    },
    'url': {
        type: 'f_uri',
        biblatex: 'url',
        csl: 'URL'
    },
    'urldate': {
        type: 'f_date',
        biblatex: 'urldate',
        csl: 'accessed'
    },
    'venue': {
        type: 'f_literal',
        biblatex: 'venue',
        csl: 'event-place'
    },
    'version': {
        type: 'f_literal',
        biblatex: 'version',
        csl: 'version'
    },
    'volume': {
        type: 'f_literal',
        biblatex: 'volume',
        csl: 'volume'
    },
    'volumes': {
        type: 'f_literal',
        biblatex: 'volumes',
        csl: 'number-of-volumes'
    }
};

/** A list of all bib types and their fields. */
var BibTypes = exports.BibTypes = {
    "article": {
        "order": 1,
        "biblatex": "article",
        "csl": "article",
        "required": ["journaltitle", "title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "annotator", "commentator", "doi", "editor", "editora", "editorb", "editorc", "eid", "eprint", "eprintclass", "eprinttype", "issn", "issue", "issuesubtitle", "issuetitle", "journalsubtitle", "language", "langid", "note", "number", "origlanguage", "pages", "pagination", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "version", "volume", "annotation", "keywords"]
    },
    "article-magazine": {
        "order": 2,
        "biblatex": "article",
        "csl": "article-magazine",
        "required": ["journaltitle", "title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "annotator", "commentator", "doi", "editor", "editora", "editorb", "editorc", "eid", "eprint", "eprintclass", "eprinttype", "issn", "issue", "issuesubtitle", "issuetitle", "journalsubtitle", "language", "langid", "note", "number", "origlanguage", "pages", "pagination", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "version", "volume", "annotation", "keywords"]
    },
    "article-newspaper": {
        "order": 3,
        "biblatex": "article",
        "csl": "article-newspaper",
        "required": ["journaltitle", "title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "annotator", "commentator", "doi", "editor", "editora", "editorb", "editorc", "eid", "eprint", "eprintclass", "eprinttype", "issn", "issue", "issuesubtitle", "issuetitle", "journalsubtitle", "language", "langid", "note", "number", "origlanguage", "pages", "pagination", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "version", "volume", "annotation", "keywords"]
    },
    "article-journal": {
        "order": 4,
        "biblatex": "article",
        "csl": "article-journal",
        "required": ["journaltitle", "title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "annotator", "commentator", "doi", "editor", "editora", "editorb", "editorc", "eid", "eprint", "eprintclass", "eprinttype", "issn", "issue", "issuesubtitle", "issuetitle", "journalsubtitle", "language", "langid", "note", "number", "origlanguage", "pages", "pagination", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "version", "volume", "annotation", "keywords"]
    },
    "post-weblog": {
        "order": 5,
        "biblatex": "online",
        "csl": "post-weblog",
        "required": ["date", "title", "url"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "addendum", "pubstate", "subtitle", "language", "langid", "urldate", "titleaddon", "version", "note", "organization", "annotation", "keywords"]
    },
    "book": {
        "order": 10,
        "biblatex": "book",
        "csl": "book",
        "required": ["title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "chapter", "commentator", "doi", "edition", "editor", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "pagetotal", "bookpagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "mvbook": {
        "order": 11,
        "biblatex": "mvbook",
        "csl": "book",
        "required": ["title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "commentator", "doi", "edition", "editor", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "note", "number", "origlanguage", "pagetotal", "bookpagination", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volumes", "annotation", "keywords"]
    },
    "inbook": {
        "order": 12,
        "biblatex": "inbook",
        "csl": "chapter",
        "required": ["title", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "bookauthor", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editor", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "bookinbook": {
        "order": 13,
        "biblatex": "bookinbook",
        "csl": "chapter",
        "required": ["title", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "bookauthor", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editor", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "suppbook": {
        "order": 14,
        "biblatex": "suppbook",
        "csl": "chapter",
        "required": ["title", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "bookauthor", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editor", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "booklet": {
        "order": 15,
        "biblatex": "booklet",
        "csl": "pamphlet",
        "required": ["title", "date"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "titleaddon", "addendum", "pages", "pagination", "howpublished", "type", "pubstate", "chapter", "doi", "subtitle", "language", "langid", "location", "url", "urldate", "pagetotal", "bookpagination", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "collection": {
        "order": 20,
        "biblatex": "collection",
        "csl": "dataset",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "pagetotal", "bookpagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "mvcollection": {
        "order": 21,
        "biblatex": "mvcollection",
        "csl": "dataset",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "note", "number", "origlanguage", "pagetotal", "bookpagination", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volumes", "annotation", "keywords"]
    },
    "incollection": {
        "order": 22,
        "biblatex": "incollection",
        "csl": "entry",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "suppcollection": {
        "order": 23,
        "biblatex": "suppcollection",
        "csl": "entry",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "post": {
        "order": 30,
        "biblatex": "online",
        "csl": "post",
        "required": ["date", "title", "url"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "addendum", "pubstate", "subtitle", "language", "langid", "urldate", "titleaddon", "version", "note", "organization", "annotation", "keywords"]
    },
    "manual": {
        "order": 40,
        "biblatex": "manual",
        "csl": "book",
        "required": ["title", "date"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "addendum", "chapter", "doi", "edition", "eprint", "eprintclass", "eprinttype", "isbn", "language", "langid", "location", "note", "number", "organization", "pages", "pagination", "pagetotal", "bookpagination", "publisher", "pubstate", "series", "subtitle", "titleaddon", "type", "url", "urldate", "version", "annotation", "keywords"]
    },
    "misc": {
        "order": 41,
        "biblatex": "misc",
        "csl": "entry",
        "required": ["title", "date"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "addendum", "howpublished", "type", "pubstate", "organization", "doi", "subtitle", "language", "langid", "location", "url", "urldate", "titleaddon", "version", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "online": {
        "order": 42,
        "biblatex": "online",
        "csl": "webpage",
        "required": ["date", "title", "url"],
        "eitheror": ["editor", "author"],
        "optional": ["abstract", "addendum", "pubstate", "subtitle", "language", "langid", "urldate", "titleaddon", "version", "note", "organization", "annotation", "keywords"]
    },
    "patent": {
        "order": 43,
        "biblatex": "patent",
        "csl": "patent",
        "required": ["title", "number", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "holder", "location", "pubstate", "doi", "subtitle", "titleaddon", "type", "url", "urldate", "version", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "periodical": {
        "order": 50,
        "biblatex": "periodical",
        "csl": "book",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "volume", "pubstate", "number", "series", "issn", "issue", "issuesubtitle", "issuetitle", "doi", "subtitle", "editora", "editorb", "editorc", "url", "urldate", "language", "langid", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "suppperiodical": {
        "order": 51,
        "biblatex": "suppperiodical",
        "csl": "entry",
        "required": ["journaltitle", "title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "annotator", "commentator", "doi", "editor", "editora", "editorb", "editorc", "eid", "eprint", "eprintclass", "eprinttype", "issn", "issue", "issuesubtitle", "issuetitle", "journalsubtitle", "language", "langid", "note", "number", "origlanguage", "pages", "pagination", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "version", "volume", "annotation", "keywords"]
    },
    "proceedings": {
        "order": 60,
        "biblatex": "proceedings",
        "csl": "entry",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "chapter", "doi", "eprint", "eprintclass", "eprinttype", "eventdate", "eventtitle", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "organization", "pages", "pagination", "pagetotal", "bookpagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "url", "urldate", "venue", "volume", "volumes", "annotation", "keywords"]
    },
    "mvproceedings": {
        "order": 61,
        "biblatex": "mvproceedings",
        "csl": "entry",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "doi", "eprint", "eprintclass", "eprinttype", "eventdate", "eventtitle", "isbn", "language", "langid", "location", "note", "number", "organization", "pagetotal", "bookpagination", "publisher", "pubstate", "series", "subtitle", "titleaddon", "url", "urldate", "venue", "volumes", "annotation", "keywords"]
    },
    "inproceedings": {
        "order": 62,
        "biblatex": "inproceedings",
        "csl": "paper-conference",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "booksubtitle", "booktitleaddon", "chapter", "doi", "eprint", "eprintclass", "eprinttype", "eventdate", "eventtitle", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "organization", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "url", "urldate", "venue", "volume", "volumes", "annotation", "keywords"]
    },
    "reference": {
        "order": 70,
        "biblatex": "book",
        "csl": "reference",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "pagetotal", "bookpagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "mvreference": {
        "order": 71,
        "biblatex": "mvreference",
        "csl": "book",
        "required": ["editor", "title", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "note", "number", "origlanguage", "pagetotal", "bookpagination", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volumes", "annotation", "keywords"]
    },
    "inreference": {
        "order": 72,
        "biblatex": "inreference",
        "csl": "entry",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "entry-encyclopedia": {
        "order": 73,
        "biblatex": "inreference",
        "csl": "entry-encyclopedia",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "entry-dictionary": {
        "order": 74,
        "biblatex": "inreference",
        "csl": "entry-dictionary",
        "required": ["title", "editor", "booktitle", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "afterword", "annotator", "booksubtitle", "booktitleaddon", "chapter", "commentator", "doi", "edition", "editora", "editorb", "editorc", "eprint", "eprintclass", "eprinttype", "foreword", "introduction", "isbn", "language", "langid", "location", "mainsubtitle", "maintitle", "maintitleaddon", "note", "number", "origlanguage", "pages", "pagination", "part", "publisher", "pubstate", "series", "subtitle", "titleaddon", "translator", "url", "urldate", "volume", "volumes", "annotation", "keywords"]
    },
    "report": {
        "order": 80,
        "biblatex": "report",
        "csl": "report",
        "required": ["author", "title", "type", "institution", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "pages", "pagination", "pagetotal", "bookpagination", "pubstate", "number", "isrn", "chapter", "doi", "subtitle", "language", "langid", "location", "url", "urldate", "titleaddon", "version", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "thesis": {
        "order": 81,
        "biblatex": "thesis",
        "csl": "thesis",
        "required": ["author", "title", "type", "institution", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "pages", "pagination", "pagetotal", "bookpagination", "pubstate", "isbn", "chapter", "doi", "subtitle", "language", "langid", "location", "url", "urldate", "titleaddon", "note", "eprint", "eprintclass", "eprinttype", "annotation", "keywords"]
    },
    "unpublished": {
        "order": 90,
        "biblatex": "unpublished",
        "csl": "manuscript",
        "required": ["title", "author", "date"],
        "eitheror": [],
        "optional": ["abstract", "addendum", "howpublished", "pubstate", "isbn", "date", "subtitle", "language", "langid", "location", "url", "urldate", "titleaddon", "note", "annotation", "keywords"]
    }
};
},{}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.edtfParse = edtfParse;
exports.edtfCheck = edtfCheck;

var _parser = require('../lib/edtf/src/parser');

function edtfParse(dateString) {
    return (0, _parser.parse)(
    // Convert to edtf draft spec format supported by edtf.js
    dateString.replace(/^y/, 'Y').replace(/unknown/g, '*').replace(/open/g, '').replace(/u/g, 'X').replace(/\?~/g, '%'));
}

function edtfCheck(dateString) {
    // check if date is valid edtf string (level 0 or 1).
    try {
        var dateObj = edtfParse(dateString);
        if (dateObj.level < 2 && (dateObj.type === 'Date' && dateObj.values || dateObj.type === 'Season' && dateObj.values || dateObj.type === 'Interval' && dateObj.values[0].values && dateObj.values[1].values)) {
            return true;
        } else {
            return false;
        }
    } catch (err) {
        return false;
    }
}
},{"../lib/edtf/src/parser":35}],33:[function(require,module,exports){
'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DAY = /^days?$/i;
var MONTH = /^months?$/i;
var YEAR = /^years?$/i;
var SYMBOL = /^[xX]$/;
var SYMBOLS = /[xX]/g;
var PATTERN = /^[0-9xXdDmMyY]{8}$/;
var YYYYMMDD = 'YYYYMMDD'.split('');
var MAXDAYS = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

var pow = Math.pow,
    max = Math.max,
    min = Math.min;

/**
 * Bitmasks are used to set Unspecified, Uncertain and
 * Approximate flags for a Date. The bitmask for one
 * feature corresponds to a numeric value based on the
 * following pattern:
 *
 *           YYYYMMDD
 *           --------
 *   Day     00000011
 *   Month   00001100
 *   Year    11110000
 *
 */

var Bitmask = function () {
  (0, _createClass3.default)(Bitmask, null, [{
    key: 'test',
    value: function test(a, b) {
      return this.convert(a) & this.convert(b);
    }
  }, {
    key: 'convert',
    value: function convert() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      // eslint-disable-line complexity
      value = value || 0;

      if (value instanceof Bitmask) return value.value;

      switch (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) {
        case 'number':
          return value;

        case 'boolean':
          return value ? Bitmask.YMD : 0;

        case 'string':
          if (DAY.test(value)) return Bitmask.DAY;
          if (MONTH.test(value)) return Bitmask.MONTH;
          if (YEAR.test(value)) return Bitmask.YEAR;
          if (PATTERN.test(value)) return Bitmask.compute(value);
        // fall through!

        default:
          throw new Error('invalid value: ' + value);
      }
    }
  }, {
    key: 'compute',
    value: function compute(value) {
      return value.split('').reduce(function (memo, c, idx) {
        return memo | (SYMBOL.test(c) ? pow(2, idx) : 0);
      }, 0);
    }
  }, {
    key: 'values',
    value: function values(mask) {
      var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var num = Bitmask.numbers(mask, digit).split('');
      var values = [Number(num.slice(0, 4).join(''))];

      if (num.length > 4) values.push(Number(num.slice(4, 6).join('')));
      if (num.length > 6) values.push(Number(num.slice(6, 8).join('')));

      return Bitmask.normalize(values);
    }
  }, {
    key: 'numbers',
    value: function numbers(mask) {
      var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return mask.replace(SYMBOLS, digit);
    }
  }, {
    key: 'normalize',
    value: function normalize(values) {
      if (values.length > 1) values[1] = min(11, max(0, values[1] - 1));

      if (values.length > 2) values[2] = min(MAXDAYS[values[1]] || NaN, max(1, values[2]));

      return values;
    }
  }]);

  function Bitmask() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    (0, _classCallCheck3.default)(this, Bitmask);

    this.value = Bitmask.convert(value);
  }

  (0, _createClass3.default)(Bitmask, [{
    key: 'test',
    value: function test() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      return this.value & Bitmask.convert(value);
    }
  }, {
    key: 'bit',
    value: function bit(k) {
      return this.value & pow(2, k);
    }
  }, {
    key: 'add',
    value: function add(value) {
      return this.value = this.value | Bitmask.convert(value), this;
    }
  }, {
    key: 'set',
    value: function set() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      return this.value = Bitmask.convert(value), this;
    }
  }, {
    key: 'mask',
    value: function mask() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : YYYYMMDD;

      var _this = this;

      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var symbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'X';

      return input.map(function (c, idx) {
        return _this.bit(offset + idx) ? symbol : c;
      });
    }
  }, {
    key: 'masks',
    value: function masks(values) {
      var _this2 = this;

      var symbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X';

      var offset = 0;

      return values.map(function (value) {
        var mask = _this2.mask(value.split(''), offset, symbol);
        offset = offset + mask.length;

        return mask.join('');
      });
    }
  }, {
    key: 'max',
    value: function max(_ref) {
      var _ref2 = (0, _slicedToArray3.default)(_ref, 3),
          year = _ref2[0],
          month = _ref2[1],
          day = _ref2[2];

      // eslint-disable-line complexity
      if (!year) return [];

      year = Number(this.test(Bitmask.YEAR) ? this.masks([year], '9')[0] : year);

      if (!month) return [year];

      month = Number(month) - 1;

      switch (this.test(Bitmask.MONTH)) {
        case Bitmask.MONTH:
          month = 11;
          break;
        case Bitmask.MX:
          month = month < 9 ? 8 : 11;
          break;
        case Bitmask.XM:
          month = (month + 1) % 10;
          month = month < 3 ? month + 9 : month - 1;
          break;
      }

      if (!day) return [year, month];

      day = Number(day);

      switch (this.test(Bitmask.DAY)) {
        case Bitmask.DAY:
          day = MAXDAYS[month];
          break;
        case Bitmask.DX:
          day = min(MAXDAYS[month], day + (9 - day % 10));
          break;
        case Bitmask.XD:
          day = day % 10;

          if (month === 1) {
            day = day === 9 && !leap(year) ? day + 10 : day + 20;
          } else {
            day = day < 2 ? day + 30 : day + 20;
            if (day > MAXDAYS[month]) day = day - 10;
          }

          break;
      }

      if (month === 1 && day > 28 && !leap(year)) {
        day = 28;
      }

      return [year, month, day];
    }
  }, {
    key: 'marks',
    value: function marks(values) {
      var _this3 = this;

      var symbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '?';

      return values.map(function (value, idx) {
        return [_this3.qualified(idx * 2) ? symbol : '', value, _this3.qualified(idx * 2 + 1) ? symbol : ''].join('');
      });
    }
  }, {
    key: 'qualified',
    value: function qualified(idx) {
      // eslint-disable-line complexity
      switch (idx) {
        case 1:
          return this.value === Bitmask.YEAR || this.value & Bitmask.YEAR && !(this.value & Bitmask.MONTH);
        case 2:
          return this.value === Bitmask.MONTH || this.value & Bitmask.MONTH && !(this.value & Bitmask.YEAR);
        case 3:
          return this.value === Bitmask.YM;
        case 4:
          return this.value === Bitmask.DAY || this.value & Bitmask.DAY && this.value !== Bitmask.YMD;
        case 5:
          return this.value === Bitmask.YMD;
        default:
          return false;
      }
    }
  }, {
    key: 'qualify',
    value: function qualify(idx) {
      return this.value = this.value | Bitmask.UA[idx], this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.value;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X';

      return this.masks(['YYYY', 'MM', 'DD'], symbol).join('-');
    }
  }, {
    key: 'day',
    get: function get() {
      return this.test(Bitmask.DAY);
    }
  }, {
    key: 'month',
    get: function get() {
      return this.test(Bitmask.MONTH);
    }
  }, {
    key: 'year',
    get: function get() {
      return this.test(Bitmask.YEAR);
    }
  }]);
  return Bitmask;
}();

Bitmask.prototype.is = Bitmask.prototype.test;

function leap(year) {
  if (year % 4 > 0) return false;
  if (year % 100 > 0) return true;
  if (year % 400 > 0) return false;
  return true;
}

Bitmask.DAY = Bitmask.D = Bitmask.compute('yyyymmxx');
Bitmask.MONTH = Bitmask.M = Bitmask.compute('yyyyxxdd');
Bitmask.YEAR = Bitmask.Y = Bitmask.compute('xxxxmmdd');

Bitmask.MD = Bitmask.M | Bitmask.D;
Bitmask.YMD = Bitmask.Y | Bitmask.MD;
Bitmask.YM = Bitmask.Y | Bitmask.M;

Bitmask.YYXX = Bitmask.compute('yyxxmmdd');
Bitmask.YYYX = Bitmask.compute('yyyxmmdd');
Bitmask.XXXX = Bitmask.compute('xxxxmmdd');

Bitmask.DX = Bitmask.compute('yyyymmdx');
Bitmask.XD = Bitmask.compute('yyyymmxd');
Bitmask.MX = Bitmask.compute('yyyymxdd');
Bitmask.XM = Bitmask.compute('yyyyxmdd');

/*
 * Map each UA symbol position to a mask.
 *
 *   ~YYYY~-~MM~-~DD~
 *   0    1 2  3 4  5
 */
Bitmask.UA = [Bitmask.YEAR, Bitmask.YEAR, // YEAR !DAY
Bitmask.MONTH, Bitmask.YM, Bitmask.DAY, // YEARDAY
Bitmask.YMD];

module.exports = Bitmask;
},{"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26,"babel-runtime/helpers/slicedToArray":28,"babel-runtime/helpers/typeof":30}],34:[function(require,module,exports){
'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
  function id(x) {
    return x[0];
  }

  var _require = require('./util'),
      num = _require.num,
      zero = _require.zero,
      nothing = _require.nothing,
      pick = _require.pick,
      pluck = _require.pluck,
      join = _require.join,
      concat = _require.concat,
      merge = _require.merge,
      century = _require.century,
      interval = _require.interval,
      list = _require.list,
      masked = _require.masked,
      date = _require.date,
      datetime = _require.datetime,
      season = _require.season,
      qualify = _require.qualify,
      year = _require.year,
      decade = _require.decade;

  var _require2 = require('./bitmask'),
      DAY = _require2.DAY,
      MONTH = _require2.MONTH,
      YEAR = _require2.YEAR,
      YMD = _require2.YMD,
      YM = _require2.YM,
      MD = _require2.MD,
      YYXX = _require2.YYXX,
      YYYX = _require2.YYYX,
      XXXX = _require2.XXXX;

  var grammar = {
    ParserRules: [{ "name": "edtf", "symbols": ["L0"], "postprocess": id }, { "name": "edtf", "symbols": ["L1"], "postprocess": id }, { "name": "edtf", "symbols": ["L2"], "postprocess": id }, { "name": "L0", "symbols": ["date_time"], "postprocess": id }, { "name": "L0", "symbols": ["century"], "postprocess": id }, { "name": "L0", "symbols": ["L0i"], "postprocess": id }, { "name": "L0i", "symbols": ["date_time", { "literal": "/" }, "date_time"], "postprocess": interval(0) }, { "name": "century", "symbols": ["positive_century"], "postprocess": function postprocess(data) {
        return century(data[0]);
      } }, { "name": "century$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "century", "symbols": ["century$string$1"], "postprocess": function postprocess(data) {
        return century(0);
      } }, { "name": "century", "symbols": [{ "literal": "-" }, "positive_century"], "postprocess": function postprocess(data) {
        return century(-data[1]);
      } }, { "name": "positive_century", "symbols": ["positive_digit", "digit"], "postprocess": num }, { "name": "positive_century", "symbols": [{ "literal": "0" }, "positive_digit"], "postprocess": num }, { "name": "date_time", "symbols": ["date"], "postprocess": id }, { "name": "date_time", "symbols": ["datetime"], "postprocess": id }, { "name": "date", "symbols": ["year"], "postprocess": function postprocess(data) {
        return date(data);
      } }, { "name": "date", "symbols": ["year_month"], "postprocess": function postprocess(data) {
        return date(data[0]);
      } }, { "name": "date", "symbols": ["year_month_day"], "postprocess": function postprocess(data) {
        return date(data[0]);
      } }, { "name": "year", "symbols": ["positive_year"], "postprocess": id }, { "name": "year", "symbols": ["negative_year"], "postprocess": id }, { "name": "year$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "year", "symbols": ["year$string$1"], "postprocess": join }, { "name": "positive_year", "symbols": ["positive_digit", "digit", "digit", "digit"], "postprocess": join }, { "name": "positive_year", "symbols": [{ "literal": "0" }, "positive_digit", "digit", "digit"], "postprocess": join }, { "name": "positive_year$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_year", "symbols": ["positive_year$string$1", "positive_digit", "digit"], "postprocess": join }, { "name": "positive_year$string$2", "symbols": [{ "literal": "0" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_year", "symbols": ["positive_year$string$2", "positive_digit"], "postprocess": join }, { "name": "negative_year", "symbols": [{ "literal": "-" }, "positive_year"], "postprocess": join }, { "name": "year_month", "symbols": ["year", { "literal": "-" }, "month"], "postprocess": pick(0, 2) }, { "name": "year_month_day", "symbols": ["year", { "literal": "-" }, "month_day"], "postprocess": pick(0, 2) }, { "name": "month", "symbols": ["d01_12"], "postprocess": id }, { "name": "month_day", "symbols": ["m31", { "literal": "-" }, "day"], "postprocess": pick(0, 2) }, { "name": "month_day", "symbols": ["m30", { "literal": "-" }, "d01_30"], "postprocess": pick(0, 2) }, { "name": "month_day$string$1", "symbols": [{ "literal": "0" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "month_day", "symbols": ["month_day$string$1", { "literal": "-" }, "d01_29"], "postprocess": pick(0, 2) }, { "name": "day", "symbols": ["d01_31"], "postprocess": id }, { "name": "datetime$ebnf$1$subexpression$1", "symbols": ["timezone"], "postprocess": id }, { "name": "datetime$ebnf$1", "symbols": ["datetime$ebnf$1$subexpression$1"], "postprocess": id }, { "name": "datetime$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "datetime", "symbols": ["year_month_day", { "literal": "T" }, "time", "datetime$ebnf$1"], "postprocess": datetime }, { "name": "time", "symbols": ["hours", { "literal": ":" }, "minutes", { "literal": ":" }, "seconds", "milliseconds"], "postprocess": pick(0, 2, 4, 5) }, { "name": "time$string$1", "symbols": [{ "literal": "2" }, { "literal": "4" }, { "literal": ":" }, { "literal": "0" }, { "literal": "0" }, { "literal": ":" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "time", "symbols": ["time$string$1"], "postprocess": function postprocess() {
        return [24, 0, 0];
      } }, { "name": "hours", "symbols": ["d00_23"], "postprocess": num }, { "name": "minutes", "symbols": ["d00_59"], "postprocess": num }, { "name": "seconds", "symbols": ["d00_59"], "postprocess": num }, { "name": "milliseconds", "symbols": [] }, { "name": "milliseconds", "symbols": [{ "literal": "." }, "d3"], "postprocess": function postprocess(data) {
        return num(data.slice(1));
      } }, { "name": "timezone", "symbols": [{ "literal": "Z" }], "postprocess": zero }, { "name": "timezone", "symbols": [{ "literal": "-" }, "offset"], "postprocess": function postprocess(data) {
        return -data[1];
      } }, { "name": "timezone", "symbols": [{ "literal": "+" }, "positive_offset"], "postprocess": pick(1) }, { "name": "positive_offset", "symbols": ["offset"], "postprocess": id }, { "name": "positive_offset$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }, { "literal": ":" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_offset", "symbols": ["positive_offset$string$1"], "postprocess": zero }, { "name": "positive_offset$subexpression$1$string$1", "symbols": [{ "literal": "1" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_offset$subexpression$1", "symbols": ["positive_offset$subexpression$1$string$1"] }, { "name": "positive_offset$subexpression$1$string$2", "symbols": [{ "literal": "1" }, { "literal": "3" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_offset$subexpression$1", "symbols": ["positive_offset$subexpression$1$string$2"] }, { "name": "positive_offset", "symbols": ["positive_offset$subexpression$1", { "literal": ":" }, "minutes"], "postprocess": function postprocess(data) {
        return num(data[0]) * 60 + data[2];
      } }, { "name": "positive_offset$string$2", "symbols": [{ "literal": "1" }, { "literal": "4" }, { "literal": ":" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_offset", "symbols": ["positive_offset$string$2"], "postprocess": function postprocess() {
        return 840;
      } }, { "name": "positive_offset", "symbols": ["d00_14"], "postprocess": function postprocess(data) {
        return num(data[0]) * 60;
      } }, { "name": "offset", "symbols": ["d01_11", { "literal": ":" }, "minutes"], "postprocess": function postprocess(data) {
        return num(data[0]) * 60 + data[2];
      } }, { "name": "offset$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }, { "literal": ":" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "offset", "symbols": ["offset$string$1", "d01_59"], "postprocess": function postprocess(data) {
        return num(data[1]);
      } }, { "name": "offset$string$2", "symbols": [{ "literal": "1" }, { "literal": "2" }, { "literal": ":" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "offset", "symbols": ["offset$string$2"], "postprocess": function postprocess() {
        return 720;
      } }, { "name": "offset", "symbols": ["d01_12"], "postprocess": function postprocess(data) {
        return num(data[0]) * 60;
      } }, { "name": "L1", "symbols": ["L1d"], "postprocess": id }, { "name": "L1", "symbols": ["L1Y"], "postprocess": id }, { "name": "L1", "symbols": ["L1S"], "postprocess": id }, { "name": "L1", "symbols": ["L1i"], "postprocess": id }, { "name": "L1d", "symbols": ["date_ua"], "postprocess": id }, { "name": "L1d", "symbols": ["L1X"], "postprocess": merge(0, { type: 'Date', level: 1 }) }, { "name": "date_ua", "symbols": ["date", "UA"], "postprocess": merge(0, 1, { level: 1 }) }, { "name": "L1i", "symbols": ["L1i_date", { "literal": "/" }, "L1i_date"], "postprocess": interval(1) }, { "name": "L1i", "symbols": ["date_time", { "literal": "/" }, "L1i_date"], "postprocess": interval(1) }, { "name": "L1i", "symbols": ["L1i_date", { "literal": "/" }, "date_time"], "postprocess": interval(1) }, { "name": "L1i_date", "symbols": [], "postprocess": nothing }, { "name": "L1i_date", "symbols": ["date_ua"], "postprocess": id }, { "name": "L1i_date", "symbols": ["INFINITY"], "postprocess": id }, { "name": "INFINITY", "symbols": [{ "literal": "*" }], "postprocess": function postprocess() {
        return Infinity;
      } }, { "name": "L1X$string$1", "symbols": [{ "literal": "-" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["d4", { "literal": "-" }, "md", "L1X$string$1"], "postprocess": masked() }, { "name": "L1X$string$2", "symbols": [{ "literal": "-" }, { "literal": "X" }, { "literal": "X" }, { "literal": "-" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["d4", "L1X$string$2"], "postprocess": masked() }, { "name": "L1X$string$3", "symbols": [{ "literal": "X" }, { "literal": "X" }, { "literal": "X" }, { "literal": "X" }, { "literal": "-" }, { "literal": "X" }, { "literal": "X" }, { "literal": "-" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["L1X$string$3"], "postprocess": masked() }, { "name": "L1X$string$4", "symbols": [{ "literal": "-" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["d4", "L1X$string$4"], "postprocess": masked() }, { "name": "L1X$string$5", "symbols": [{ "literal": "X" }, { "literal": "X" }, { "literal": "X" }, { "literal": "X" }, { "literal": "-" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["L1X$string$5"], "postprocess": masked() }, { "name": "L1X$string$6", "symbols": [{ "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["d2", "L1X$string$6"], "postprocess": masked() }, { "name": "L1X", "symbols": ["d3", { "literal": "X" }], "postprocess": masked() }, { "name": "L1X$string$7", "symbols": [{ "literal": "X" }, { "literal": "X" }, { "literal": "X" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1X", "symbols": ["L1X$string$7"], "postprocess": masked() }, { "name": "L1Y", "symbols": [{ "literal": "Y" }, "d5+"], "postprocess": function postprocess(data) {
        return year([num(data[1])], 1);
      } }, { "name": "L1Y$string$1", "symbols": [{ "literal": "Y" }, { "literal": "-" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "L1Y", "symbols": ["L1Y$string$1", "d5+"], "postprocess": function postprocess(data) {
        return year([-num(data[1])], 1);
      } }, { "name": "UA", "symbols": [{ "literal": "?" }], "postprocess": function postprocess() {
        return { uncertain: true };
      } }, { "name": "UA", "symbols": [{ "literal": "~" }], "postprocess": function postprocess() {
        return { approximate: true };
      } }, { "name": "UA", "symbols": [{ "literal": "%" }], "postprocess": function postprocess() {
        return { approximate: true, uncertain: true };
      } }, { "name": "L1S", "symbols": ["year", { "literal": "-" }, "d21_24"], "postprocess": function postprocess(data) {
        return season(data, 1);
      } }, { "name": "L2", "symbols": ["L2d"], "postprocess": id }, { "name": "L2", "symbols": ["L2Y"], "postprocess": id }, { "name": "L2", "symbols": ["L2S"], "postprocess": id }, { "name": "L2", "symbols": ["L2D"], "postprocess": id }, { "name": "L2", "symbols": ["L2i"], "postprocess": id }, { "name": "L2", "symbols": ["set"], "postprocess": id }, { "name": "L2", "symbols": ["list"], "postprocess": id }, { "name": "L2d", "symbols": ["ua_date"], "postprocess": id }, { "name": "L2d", "symbols": ["L2X"], "postprocess": merge(0, { type: 'Date', level: 2 }) }, { "name": "L2D", "symbols": ["decade"], "postprocess": id }, { "name": "L2D", "symbols": ["decade", "UA"], "postprocess": merge(0, 1) }, { "name": "ua_date", "symbols": ["ua_year"], "postprocess": qualify }, { "name": "ua_date", "symbols": ["ua_year_month"], "postprocess": qualify }, { "name": "ua_date", "symbols": ["ua_year_month_day"], "postprocess": qualify }, { "name": "ua_year", "symbols": ["UA", "year"], "postprocess": function postprocess(data) {
        return [data];
      } }, { "name": "ua_year_month$macrocall$2", "symbols": ["year"] }, { "name": "ua_year_month$macrocall$1$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month$macrocall$1$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month$macrocall$1$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month$macrocall$1$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month$macrocall$1", "symbols": ["ua_year_month$macrocall$1$ebnf$1", "ua_year_month$macrocall$2", "ua_year_month$macrocall$1$ebnf$2"] }, { "name": "ua_year_month$macrocall$4", "symbols": ["month"] }, { "name": "ua_year_month$macrocall$3$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month$macrocall$3$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month$macrocall$3$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month$macrocall$3$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month$macrocall$3", "symbols": ["ua_year_month$macrocall$3$ebnf$1", "ua_year_month$macrocall$4", "ua_year_month$macrocall$3$ebnf$2"] }, { "name": "ua_year_month", "symbols": ["ua_year_month$macrocall$1", { "literal": "-" }, "ua_year_month$macrocall$3"], "postprocess": pluck(0, 2) }, { "name": "ua_year_month_day$macrocall$2", "symbols": ["year"] }, { "name": "ua_year_month_day$macrocall$1$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month_day$macrocall$1$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month_day$macrocall$1$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_year_month_day$macrocall$1$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_year_month_day$macrocall$1", "symbols": ["ua_year_month_day$macrocall$1$ebnf$1", "ua_year_month_day$macrocall$2", "ua_year_month_day$macrocall$1$ebnf$2"] }, { "name": "ua_year_month_day", "symbols": ["ua_year_month_day$macrocall$1", { "literal": "-" }, "ua_month_day"], "postprocess": function postprocess(data) {
        return [data[0]].concat((0, _toConsumableArray3.default)(data[2]));
      } }, { "name": "ua_month_day$macrocall$2", "symbols": ["m31"] }, { "name": "ua_month_day$macrocall$1$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$1$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$1$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$1$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$1", "symbols": ["ua_month_day$macrocall$1$ebnf$1", "ua_month_day$macrocall$2", "ua_month_day$macrocall$1$ebnf$2"] }, { "name": "ua_month_day$macrocall$4", "symbols": ["day"] }, { "name": "ua_month_day$macrocall$3$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$3$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$3$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$3$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$3", "symbols": ["ua_month_day$macrocall$3$ebnf$1", "ua_month_day$macrocall$4", "ua_month_day$macrocall$3$ebnf$2"] }, { "name": "ua_month_day", "symbols": ["ua_month_day$macrocall$1", { "literal": "-" }, "ua_month_day$macrocall$3"], "postprocess": pluck(0, 2) }, { "name": "ua_month_day$macrocall$6", "symbols": ["m30"] }, { "name": "ua_month_day$macrocall$5$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$5$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$5$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$5$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$5", "symbols": ["ua_month_day$macrocall$5$ebnf$1", "ua_month_day$macrocall$6", "ua_month_day$macrocall$5$ebnf$2"] }, { "name": "ua_month_day$macrocall$8", "symbols": ["d01_30"] }, { "name": "ua_month_day$macrocall$7$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$7$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$7$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$7$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$7", "symbols": ["ua_month_day$macrocall$7$ebnf$1", "ua_month_day$macrocall$8", "ua_month_day$macrocall$7$ebnf$2"] }, { "name": "ua_month_day", "symbols": ["ua_month_day$macrocall$5", { "literal": "-" }, "ua_month_day$macrocall$7"], "postprocess": pluck(0, 2) }, { "name": "ua_month_day$macrocall$10$string$1", "symbols": [{ "literal": "0" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "ua_month_day$macrocall$10", "symbols": ["ua_month_day$macrocall$10$string$1"] }, { "name": "ua_month_day$macrocall$9$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$9$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$9$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$9$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$9", "symbols": ["ua_month_day$macrocall$9$ebnf$1", "ua_month_day$macrocall$10", "ua_month_day$macrocall$9$ebnf$2"] }, { "name": "ua_month_day$macrocall$12", "symbols": ["d01_29"] }, { "name": "ua_month_day$macrocall$11$ebnf$1", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$11$ebnf$1", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$11$ebnf$2", "symbols": ["UA"], "postprocess": id }, { "name": "ua_month_day$macrocall$11$ebnf$2", "symbols": [], "postprocess": function postprocess(d) {
        return null;
      } }, { "name": "ua_month_day$macrocall$11", "symbols": ["ua_month_day$macrocall$11$ebnf$1", "ua_month_day$macrocall$12", "ua_month_day$macrocall$11$ebnf$2"] }, { "name": "ua_month_day", "symbols": ["ua_month_day$macrocall$9", { "literal": "-" }, "ua_month_day$macrocall$11"], "postprocess": pluck(0, 2) }, { "name": "L2X", "symbols": ["dx4"], "postprocess": masked() }, { "name": "L2X", "symbols": ["dx4", { "literal": "-" }, "mx"], "postprocess": masked() }, { "name": "L2X", "symbols": ["dx4", { "literal": "-" }, "mdx"], "postprocess": masked() }, { "name": "mdx", "symbols": ["m31x", { "literal": "-" }, "d31x"], "postprocess": join }, { "name": "mdx", "symbols": ["m30x", { "literal": "-" }, "d30x"], "postprocess": join }, { "name": "mdx$string$1", "symbols": [{ "literal": "0" }, { "literal": "2" }, { "literal": "-" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "mdx", "symbols": ["mdx$string$1", "d29x"], "postprocess": join }, { "name": "L2i", "symbols": ["L2i_date", { "literal": "/" }, "L2i_date"], "postprocess": interval(2) }, { "name": "L2i", "symbols": ["date_time", { "literal": "/" }, "L2i_date"], "postprocess": interval(2) }, { "name": "L2i", "symbols": ["L2i_date", { "literal": "/" }, "date_time"], "postprocess": interval(2) }, { "name": "L2i_date", "symbols": [], "postprocess": nothing }, { "name": "L2i_date", "symbols": ["ua_date"], "postprocess": id }, { "name": "L2i_date", "symbols": ["L2X"], "postprocess": id }, { "name": "L2i_date", "symbols": ["INFINITY"], "postprocess": id }, { "name": "L2Y", "symbols": ["exp_year"], "postprocess": id }, { "name": "L2Y", "symbols": ["exp_year", "significant_digits"], "postprocess": merge(0, 1) }, { "name": "L2Y", "symbols": ["L1Y", "significant_digits"], "postprocess": merge(0, 1, { level: 2 }) }, { "name": "L2Y", "symbols": ["year", "significant_digits"], "postprocess": function postprocess(data) {
        return year([data[0]], 2, data[1]);
      } }, { "name": "significant_digits", "symbols": [{ "literal": "S" }, "positive_digit"], "postprocess": function postprocess(data) {
        return { significant: num(data[1]) };
      } }, { "name": "exp_year", "symbols": [{ "literal": "Y" }, "exp"], "postprocess": function postprocess(data) {
        return year([data[1]], 2);
      } }, { "name": "exp_year$string$1", "symbols": [{ "literal": "Y" }, { "literal": "-" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "exp_year", "symbols": ["exp_year$string$1", "exp"], "postprocess": function postprocess(data) {
        return year([-data[1]], 2);
      } }, { "name": "exp", "symbols": ["digits", { "literal": "E" }, "digits"], "postprocess": function postprocess(data) {
        return num(data[0]) * Math.pow(10, num(data[2]));
      } }, { "name": "L2S", "symbols": ["year", { "literal": "-" }, "d25_41"], "postprocess": function postprocess(data) {
        return season(data, 2);
      } }, { "name": "decade", "symbols": ["positive_decade"], "postprocess": function postprocess(data) {
        return decade(data[0]);
      } }, { "name": "decade$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "decade", "symbols": ["decade$string$1"], "postprocess": function postprocess() {
        return decade(0);
      } }, { "name": "decade", "symbols": [{ "literal": "-" }, "positive_decade"], "postprocess": function postprocess(data) {
        return decade(-data[1]);
      } }, { "name": "positive_decade", "symbols": ["positive_digit", "digit", "digit"], "postprocess": num }, { "name": "positive_decade", "symbols": [{ "literal": "0" }, "positive_digit", "digit"], "postprocess": num }, { "name": "positive_decade$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "positive_decade", "symbols": ["positive_decade$string$1", "positive_digit"], "postprocess": num }, { "name": "set", "symbols": ["LSB", "OL", "RSB"], "postprocess": list }, { "name": "list", "symbols": ["LLB", "OL", "RLB"], "postprocess": list }, { "name": "LSB", "symbols": [{ "literal": "[" }], "postprocess": function postprocess() {
        return { type: 'Set' };
      } }, { "name": "LSB$string$1", "symbols": [{ "literal": "[" }, { "literal": "." }, { "literal": "." }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "LSB", "symbols": ["LSB$string$1"], "postprocess": function postprocess() {
        return { type: 'Set', earlier: true };
      } }, { "name": "LLB", "symbols": [{ "literal": "{" }], "postprocess": function postprocess() {
        return { type: 'List' };
      } }, { "name": "RSB", "symbols": [{ "literal": "]" }], "postprocess": nothing }, { "name": "RSB$string$1", "symbols": [{ "literal": "." }, { "literal": "." }, { "literal": "]" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "RSB", "symbols": ["RSB$string$1"], "postprocess": function postprocess() {
        return { later: true };
      } }, { "name": "RLB", "symbols": [{ "literal": "}" }], "postprocess": nothing }, { "name": "OL", "symbols": ["LI"], "postprocess": function postprocess(data) {
        return [data[0]];
      } }, { "name": "OL", "symbols": ["OL", "_", { "literal": "," }, "_", "LI"], "postprocess": function postprocess(data) {
        return [].concat((0, _toConsumableArray3.default)(data[0]), [data[4]]);
      } }, { "name": "LI", "symbols": ["date"], "postprocess": id }, { "name": "LI", "symbols": ["ua_date"], "postprocess": id }, { "name": "LI", "symbols": ["L2X"], "postprocess": id }, { "name": "LI", "symbols": ["consecutives"], "postprocess": id }, { "name": "consecutives$string$1", "symbols": [{ "literal": "." }, { "literal": "." }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "consecutives", "symbols": ["year_month_day", "consecutives$string$1", "year_month_day"], "postprocess": function postprocess(d) {
        return [date(d[0]), date(d[2])];
      } }, { "name": "consecutives$string$2", "symbols": [{ "literal": "." }, { "literal": "." }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "consecutives", "symbols": ["year_month", "consecutives$string$2", "year_month"], "postprocess": function postprocess(d) {
        return [date(d[0]), date(d[2])];
      } }, { "name": "consecutives$string$3", "symbols": [{ "literal": "." }, { "literal": "." }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "consecutives", "symbols": ["year", "consecutives$string$3", "year"], "postprocess": function postprocess(d) {
        return [date([d[0]]), date([d[2]])];
      } }, { "name": "digit", "symbols": ["positive_digit"], "postprocess": id }, { "name": "digit", "symbols": [{ "literal": "0" }], "postprocess": id }, { "name": "digits", "symbols": ["digit"], "postprocess": id }, { "name": "digits", "symbols": ["digits", "digit"], "postprocess": join }, { "name": "d4", "symbols": ["d2", "d2"], "postprocess": join }, { "name": "d3", "symbols": ["d2", "digit"], "postprocess": join }, { "name": "d2", "symbols": ["digit", "digit"], "postprocess": join }, { "name": "d5+", "symbols": ["positive_digit", "d3", "digits"], "postprocess": num }, { "name": "d1x", "symbols": [/[1-9X]/], "postprocess": id }, { "name": "dx", "symbols": ["d1x"], "postprocess": id }, { "name": "dx", "symbols": [{ "literal": "0" }], "postprocess": id }, { "name": "dx2", "symbols": ["dx", "dx"], "postprocess": join }, { "name": "dx4", "symbols": ["dx2", "dx2"], "postprocess": join }, { "name": "md", "symbols": ["m31"], "postprocess": id }, { "name": "md", "symbols": ["m30"], "postprocess": id }, { "name": "md$string$1", "symbols": [{ "literal": "0" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "md", "symbols": ["md$string$1"], "postprocess": id }, { "name": "mx", "symbols": [{ "literal": "0" }, "d1x"], "postprocess": join }, { "name": "mx", "symbols": [/[1X]/, /[012X]/], "postprocess": join }, { "name": "m31x", "symbols": [/[0X]/, /[13578X]/], "postprocess": join }, { "name": "m31x", "symbols": [/[1X]/, /[02]/], "postprocess": join }, { "name": "m31x$string$1", "symbols": [{ "literal": "1" }, { "literal": "X" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31x", "symbols": ["m31x$string$1"], "postprocess": id }, { "name": "m30x", "symbols": [/[0X]/, /[469]/], "postprocess": join }, { "name": "m30x$string$1", "symbols": [{ "literal": "1" }, { "literal": "1" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m30x", "symbols": ["m30x$string$1"], "postprocess": join }, { "name": "d29x", "symbols": [{ "literal": "0" }, "d1x"], "postprocess": join }, { "name": "d29x", "symbols": [/[1-2X]/, "dx"], "postprocess": join }, { "name": "d30x", "symbols": ["d29x"], "postprocess": join }, { "name": "d30x$string$1", "symbols": [{ "literal": "3" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d30x", "symbols": ["d30x$string$1"], "postprocess": id }, { "name": "d31x", "symbols": ["d30x"], "postprocess": id }, { "name": "d31x", "symbols": [{ "literal": "3" }, /[1X]/], "postprocess": join }, { "name": "positive_digit", "symbols": [/[1-9]/], "postprocess": id }, { "name": "m31$subexpression$1$string$1", "symbols": [{ "literal": "0" }, { "literal": "1" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$1"] }, { "name": "m31$subexpression$1$string$2", "symbols": [{ "literal": "0" }, { "literal": "3" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$2"] }, { "name": "m31$subexpression$1$string$3", "symbols": [{ "literal": "0" }, { "literal": "5" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$3"] }, { "name": "m31$subexpression$1$string$4", "symbols": [{ "literal": "0" }, { "literal": "7" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$4"] }, { "name": "m31$subexpression$1$string$5", "symbols": [{ "literal": "0" }, { "literal": "8" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$5"] }, { "name": "m31$subexpression$1$string$6", "symbols": [{ "literal": "1" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$6"] }, { "name": "m31$subexpression$1$string$7", "symbols": [{ "literal": "1" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m31$subexpression$1", "symbols": ["m31$subexpression$1$string$7"] }, { "name": "m31", "symbols": ["m31$subexpression$1"], "postprocess": id }, { "name": "m30$subexpression$1$string$1", "symbols": [{ "literal": "0" }, { "literal": "4" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m30$subexpression$1", "symbols": ["m30$subexpression$1$string$1"] }, { "name": "m30$subexpression$1$string$2", "symbols": [{ "literal": "0" }, { "literal": "6" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m30$subexpression$1", "symbols": ["m30$subexpression$1$string$2"] }, { "name": "m30$subexpression$1$string$3", "symbols": [{ "literal": "0" }, { "literal": "9" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m30$subexpression$1", "symbols": ["m30$subexpression$1$string$3"] }, { "name": "m30$subexpression$1$string$4", "symbols": [{ "literal": "1" }, { "literal": "1" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "m30$subexpression$1", "symbols": ["m30$subexpression$1$string$4"] }, { "name": "m30", "symbols": ["m30$subexpression$1"], "postprocess": id }, { "name": "d01_11", "symbols": [{ "literal": "0" }, "positive_digit"], "postprocess": join }, { "name": "d01_11", "symbols": [{ "literal": "1" }, /[0-1]/], "postprocess": join }, { "name": "d01_12", "symbols": ["d01_11"], "postprocess": id }, { "name": "d01_12$string$1", "symbols": [{ "literal": "1" }, { "literal": "2" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d01_12", "symbols": ["d01_12$string$1"], "postprocess": id }, { "name": "d01_13", "symbols": ["d01_12"], "postprocess": id }, { "name": "d01_13$string$1", "symbols": [{ "literal": "1" }, { "literal": "3" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d01_13", "symbols": ["d01_13$string$1"], "postprocess": id }, { "name": "d00_14$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d00_14", "symbols": ["d00_14$string$1"], "postprocess": id }, { "name": "d00_14", "symbols": ["d01_13"], "postprocess": id }, { "name": "d00_14$string$2", "symbols": [{ "literal": "1" }, { "literal": "4" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d00_14", "symbols": ["d00_14$string$2"], "postprocess": id }, { "name": "d00_23$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d00_23", "symbols": ["d00_23$string$1"], "postprocess": id }, { "name": "d00_23", "symbols": ["d01_23"], "postprocess": id }, { "name": "d01_23", "symbols": [{ "literal": "0" }, "positive_digit"], "postprocess": join }, { "name": "d01_23", "symbols": [{ "literal": "1" }, "digit"], "postprocess": join }, { "name": "d01_23", "symbols": [{ "literal": "2" }, /[0-3]/], "postprocess": join }, { "name": "d01_29", "symbols": [{ "literal": "0" }, "positive_digit"], "postprocess": join }, { "name": "d01_29", "symbols": [/[1-2]/, "digit"], "postprocess": join }, { "name": "d01_30", "symbols": ["d01_29"], "postprocess": id }, { "name": "d01_30$string$1", "symbols": [{ "literal": "3" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d01_30", "symbols": ["d01_30$string$1"], "postprocess": id }, { "name": "d01_31", "symbols": ["d01_30"], "postprocess": id }, { "name": "d01_31$string$1", "symbols": [{ "literal": "3" }, { "literal": "1" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d01_31", "symbols": ["d01_31$string$1"], "postprocess": id }, { "name": "d00_59$string$1", "symbols": [{ "literal": "0" }, { "literal": "0" }], "postprocess": function joiner(d) {
        return d.join('');
      } }, { "name": "d00_59", "symbols": ["d00_59$string$1"], "postprocess": id }, { "name": "d00_59", "symbols": ["d01_59"], "postprocess": id }, { "name": "d01_59", "symbols": ["d01_29"], "postprocess": id }, { "name": "d01_59", "symbols": [/[345]/, "digit"], "postprocess": join }, { "name": "d21_24", "symbols": [{ "literal": "2" }, /[1-4]/], "postprocess": join }, { "name": "d25_41", "symbols": [{ "literal": "2" }, /[5-9]/], "postprocess": join }, { "name": "d25_41", "symbols": [{ "literal": "3" }, "digit"], "postprocess": join }, { "name": "d25_41", "symbols": [{ "literal": "4" }, /[01]/], "postprocess": join }, { "name": "_$ebnf$1", "symbols": [] }, { "name": "_$ebnf$1", "symbols": [{ "literal": " " }, "_$ebnf$1"], "postprocess": function arrconcat(d) {
        return [d[0]].concat(d[1]);
      } }, { "name": "_", "symbols": ["_$ebnf$1"] }],
    ParserStart: "edtf"
  };
  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = grammar;
  } else {
    window.grammar = grammar;
  }
})();
},{"./bitmask":33,"./util":36,"babel-runtime/helpers/toConsumableArray":29}],35:[function(require,module,exports){
'use strict';

var nearley = require('nearley');
var grammar = require('./grammar');

function byLevel(a, b) {
  return a.level < b.level ? -1 : a.level > b.level ? 1 : 0;
}

function limit(results, _ref) {
  var level = _ref.level,
      types = _ref.types;

  if (!results.length) return results;
  if (typeof level !== 'number') level = 2;

  return results.filter(function (res) {
    return level >= res.level && (!types || types.includes(res.type));
  });
}

function best(results) {
  if (results.length < 2) return results[0];

  // If there are multiple results, pick the first
  // one on the lowest level!
  return results.sort(byLevel)[0];
}

module.exports = {
  parse: function parse(input) {
    var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    try {
      var nep = module.exports.parser();
      var res = best(limit(nep.feed(input).results, constraints));

      if (!res) throw new Error('edtf: No possible parsings (@EOS)');

      return res;
    } catch (error) {
      error.message += ' for "' + input + '"';
      throw error;
    }
  },
  parser: function parser() {
    return new nearley.Parser(grammar.ParserRules, grammar.ParserStart);
  }
};
},{"./grammar":34,"nearley":169}],36:[function(require,module,exports){
'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Bitmask = require('./bitmask');
var assign = _assign2.default;


var util = {
  num: function num(data) {
    return Number(Array.isArray(data) ? data.join('') : data);
  },
  join: function join(data) {
    return data.join('');
  },
  zero: function zero() {
    return 0;
  },
  nothing: function nothing() {
    return null;
  },
  pick: function pick() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.length === 1 ? function (data) {
      return data[args[0]];
    } : function (data) {
      return util.concat(data, args);
    };
  },
  pluck: function pluck() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return function (data) {
      return args.map(function (i) {
        return data[i];
      });
    };
  },
  concat: function concat(data) {
    var idx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : data.keys();

    return (0, _from2.default)(idx).reduce(function (memo, i) {
      return data[i] !== null ? memo.concat(data[i]) : memo;
    }, []);
  },
  merge: function merge() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if ((0, _typeof3.default)(args[args.length - 1]) === 'object') var extra = args.pop();

    return function (data) {
      return assign(args.reduce(function (a, i) {
        return assign(a, data[i]);
      }, {}), extra);
    };
  },
  interval: function interval(level) {
    return function (data) {
      return {
        values: [data[0], data[2]],
        type: 'Interval',
        level: level
      };
    };
  },
  masked: function masked() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unspecified';
    var symbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X';

    return function (data, _, reject) {
      var mask = data.join('').replace(/-/g, '');

      return mask.indexOf(symbol) === -1 ? reject : (0, _defineProperty3.default)({
        values: Bitmask.values(mask)
      }, type, Bitmask.compute(mask));
    };
  },
  date: function date(values) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    return assign({
      type: 'Date',
      level: level,
      values: Bitmask.normalize(values.map(Number))
    }, extra);
  },
  year: function year(values) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    return assign({
      type: 'Year',
      level: level,
      values: values.map(Number)
    }, extra);
  },
  century: function century(_century) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    return {
      type: 'Century',
      level: level,
      values: [_century]
    };
  },
  decade: function decade(_decade) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

    return {
      type: 'Decade',
      level: level,
      values: [_decade]
    };
  },
  datetime: function datetime(data) {
    return {
      values: Bitmask.normalize(data[0].map(Number)).concat(data[2]),
      offset: data[3],
      type: 'Date',
      level: 0
    };
  },
  season: function season(data) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return {
      type: 'Season',
      level: level,
      values: [Number(data[0]), Number(data[2])]
    };
  },
  list: function list(data) {
    return assign({ values: data[1], level: 2 }, data[0], data[2]);
  },
  qualify: function qualify(_ref2, _, reject) {
    var _ref3 = (0, _slicedToArray3.default)(_ref2, 1),
        parts = _ref3[0];

    var q = {
      uncertain: new Bitmask(), approximate: new Bitmask()
    };

    var values = parts.map(function (_ref4, idx) {
      var _ref5 = (0, _slicedToArray3.default)(_ref4, 3),
          lhs = _ref5[0],
          part = _ref5[1],
          rhs = _ref5[2];

      for (var ua in lhs) {
        q[ua].qualify(idx * 2);
      }for (var _ua in rhs) {
        q[_ua].qualify(1 + idx * 2);
      }return part;
    });

    return !q.uncertain.value && !q.approximate.value ? reject : assign(util.date(values, 2), {
      uncertain: q.uncertain.value,
      approximate: q.approximate.value
    });
  }
};

module.exports = util;
},{"./bitmask":33,"babel-runtime/core-js/array/from":16,"babel-runtime/core-js/object/assign":19,"babel-runtime/helpers/defineProperty":27,"babel-runtime/helpers/slicedToArray":28,"babel-runtime/helpers/typeof":30}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibLatexExporter = undefined;

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _const = require("./const");

var _const2 = require("../const");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Export a list of bibliography items to bibLateX and serve the file to the user as a ZIP-file.
 * @class BibLatexExporter
 * @param pks A list of pks of the bibliography items that are to be exported.
 */

var TAGS = {
    'strong': { open: '\\mkbibbold{', close: '}' },
    'em': { open: '\\mkbibitalic{', close: '}' },
    'smallcaps': { open: '\\textsc{', close: '}' },
    'enquote': { open: '\\enquote{', close: '}' },
    'nocase': { open: '{{', close: '}}' },
    'sub': { open: '_{', close: '}' },
    'sup': { open: '^{', close: '}' },
    'math': { open: '$', close: '$' },
    'url': { open: "\\url{", close: '}', verbatim: true }
};

var BibLatexExporter = exports.BibLatexExporter = function () {
    function BibLatexExporter(bibDB) {
        var pks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        (0, _classCallCheck3.default)(this, BibLatexExporter);

        this.bibDB = bibDB; // The bibliography database to export from.
        if (pks) {
            this.pks = pks; // A list of pk values of the bibliography items to be exported.
        } else {
            this.pks = (0, _keys2.default)(bibDB); // If none are selected, all keys are exporter
        }
        this.config = config;
        this.warnings = [];
    }

    (0, _createClass3.default)(BibLatexExporter, [{
        key: "_reformKey",
        value: function _reformKey(theValue, fKey) {
            if (typeof theValue === 'string') {
                var fieldType = _const2.BibFieldTypes[fKey];
                if (Array.isArray(fieldType['options'])) {
                    return this._escapeTeX(theValue);
                } else {
                    return this._escapeTeX(fieldType['options'][theValue]['biblatex']);
                }
            } else {
                return this._reformText(theValue);
            }
        }
    }, {
        key: "_reformRange",
        value: function _reformRange(theValue) {
            var _this = this;

            var that = this;
            return theValue.map(function (range) {
                return range.map(function (text) {
                    return _this._reformText(text);
                }).join('--');
            }).join(',');
        }
    }, {
        key: "_reformName",
        value: function _reformName(theValue) {
            var names = [],
                that = this;
            theValue.forEach(function (name) {
                if (name.literal) {
                    var literal = that._reformText(name.literal);
                    names.push("{" + literal + "}");
                } else {
                    var family = name.family ? that._reformText(name.family) : '';
                    var given = name.given ? that._reformText(name.given) : '';
                    var suffix = name.suffix ? that._reformText(name.suffix) : false;
                    var prefix = name.prefix ? that._reformText(name.prefix) : false;
                    var useprefix = name.useprefix ? name.useprefix : false;
                    if (that.config.traditionalNames) {
                        if (suffix && prefix) {
                            names.push("{" + prefix + " " + family + "}, {" + suffix + "}, {" + given + "}");
                        } else if (suffix) {
                            names.push("{" + family + "}, {" + suffix + "}, {" + given + "}");
                        } else if (prefix) {
                            names.push("{" + prefix + " " + family + "}, {" + given + "}");
                        } else {
                            names.push("{" + family + "}, {" + given + "}");
                        }
                    } else {
                        var nameParts = [];
                        if (given.length) {
                            nameParts.push(that._protectNamePart("given={" + given + "}"));
                        }
                        if (family.length) {
                            nameParts.push(that._protectNamePart("family={" + family + "}"));
                        }
                        if (suffix) {
                            nameParts.push(that._protectNamePart("suffix={" + suffix + "}"));
                        }
                        if (prefix) {
                            nameParts.push(that._protectNamePart("prefix={" + prefix + "}"));
                            nameParts.push("useprefix=" + name.useprefix);
                        }
                        names.push("{" + nameParts.join(', ') + "}");
                    }
                }
            });
            return names.join(' and ');
        }
    }, {
        key: "_protectNamePart",
        value: function _protectNamePart(namePart) {
            if (namePart.includes(',')) {
                return "\"" + namePart + "\"";
            } else {
                return namePart;
            }
        }
    }, {
        key: "_escapeTeX",
        value: function _escapeTeX(theValue) {
            if ('string' != typeof theValue) {
                return false;
            }
            var len = _const.TexSpecialChars.length;
            for (var i = 0; i < len; i++) {
                theValue = theValue.replace(_const.TexSpecialChars[i][0], _const.TexSpecialChars[i][1]);
            }
            return theValue;
        }
    }, {
        key: "_reformText",
        value: function _reformText(theValue) {
            var _this2 = this;

            var that = this,
                latex = '',
                lastMarks = [];
            theValue.forEach(function (node) {
                if (node.type === 'variable') {
                    // This is an undefined variable
                    // This should usually not happen, as CSL doesn't know what to
                    // do with these. We'll put them into an unsupported tag.
                    latex += "} # " + node.attrs.variable + " # {";
                    _this2.warnings.push({
                        type: 'undefined_variable',
                        variable: node.attrs.variable
                    });
                    return;
                }
                var newMarks = [];
                if (node.marks) {
                    (function () {
                        var mathMode = false;
                        node.marks.forEach(function (mark) {
                            // We need to activate mathmode for the lowest level sub/sup node.
                            if ((mark.type === 'sup' || mark.type === 'sub') && !mathMode) {
                                newMarks.push('math');
                                newMarks.push(mark.type);
                                mathMode = true;
                            } else if (mark.type === 'nocase') {
                                // No case has to be applied at the top level to be effective.
                                newMarks.unshift(mark.type);
                            } else {
                                newMarks.push(mark.type);
                            }
                        });
                    })();
                }
                // close all tags that are not present in current text node.
                // Go through last marksd in revrse order to close innermost tags first.
                var closing = false;
                lastMarks.slice().reverse().forEach(function (mark, rIndex) {
                    var index = lastMarks.length - rIndex;
                    if (mark != newMarks[index]) {
                        closing = true;
                    }
                    if (closing) {
                        latex += TAGS[mark].close;
                        // If not inside of a nocase, add a protective brace around tag.
                        if (lastMarks[0] !== 'nocase' && TAGS[mark].open[0] === '\\') {
                            latex += '}';
                        }
                    }
                });
                // open all new tags that were not present in the last text node.
                var opening = false,
                    verbatim = false;
                newMarks.forEach(function (mark, index) {
                    if (mark != lastMarks[index]) {
                        opening = true;
                    }
                    if (opening) {
                        // If not inside of a nocase, add a protective brace around tag.
                        if (newMarks[0] !== 'nocase' && TAGS[mark].open[0] === '\\') {
                            latex += '{';
                        }
                        latex += TAGS[mark].open;
                        if (TAGS[mark].verbatim) {
                            verbatim = true;
                        }
                    }
                });
                if (verbatim) {
                    latex += node.text;
                } else {
                    latex += that._escapeTeX(node.text);
                }
                lastMarks = newMarks;
            });
            // Close all still open tags
            lastMarks.slice().reverse().forEach(function (mark) {
                latex += TAGS[mark].close;
            });
            return latex;
        }
    }, {
        key: "_getBibtexString",
        value: function _getBibtexString(biblist) {
            var len = biblist.length,
                str = '';
            for (var i = 0; i < len; i++) {
                if (0 < i) {
                    str += '\n\n';
                }
                var data = biblist[i];
                str += "@" + data.type + "{" + data.key;
                for (var vKey in data.values) {
                    var value = ("{" + data.values[vKey] + "}").replace(/\{\} \# /g, '').replace(/\# \{\}/g, '');
                    str += ",\n" + vKey + " = " + value;
                }
                str += "\n}";
            }
            return str;
        }
    }, {
        key: "output",
        get: function get() {
            var _this3 = this;

            var that = this;
            this.bibtexArray = [];
            this.bibtexStr = '';

            var len = this.pks.length;

            for (var i = 0; i < len; i++) {
                var pk = this.pks[i];
                var bib = this.bibDB[pk];
                var bibEntry = {
                    'type': _const2.BibTypes[bib['bib_type']]['biblatex'],
                    'key': bib['entry_key'].length ? bib['entry_key'] : 'Undefined'
                };
                var fValues = {};

                var _loop = function _loop(fKey) {
                    if (!_const2.BibFieldTypes[fKey]) {
                        return "continue";
                    }
                    var fValue = bib.fields[fKey];
                    var fType = _const2.BibFieldTypes[fKey]['type'];
                    var key = _const2.BibFieldTypes[fKey]['biblatex'];
                    switch (fType) {
                        case 'f_date':
                            fValues[key] = fValue; // EDTF 1.0 level 0/1 compliant string.
                            break;
                        case 'f_integer':
                            fValues[key] = _this3._reformText(fValue);
                            break;
                        case 'f_key':
                            fValues[key] = _this3._reformKey(fValue, fKey);
                            break;
                        case 'f_literal':
                        case 'f_long_literal':
                            fValues[key] = _this3._reformText(fValue);
                            break;
                        case 'l_range':
                            fValues[key] = _this3._reformRange(fValue);
                            break;
                        case 'f_title':
                            fValues[key] = _this3._reformText(fValue);
                            break;
                        case 'f_uri':
                        case 'f_verbatim':
                            fValues[key] = fValue.replace(/{|}/g, ''); // TODO: balanced braces should probably be ok here.
                            break;
                        case 'l_key':
                            fValues[key] = _this3._escapeTeX(fValue.map(function (key) {
                                return that._reformKey(key, fKey);
                            }).join(' and '));
                            break;
                        case 'l_literal':
                            fValues[key] = fValue.map(function (text) {
                                return that._reformText(text);
                            }).join(' and ');
                            break;
                        case 'l_name':
                            fValues[key] = _this3._reformName(fValue);
                            break;
                        case 'l_tag':
                            fValues[key] = _this3._escapeTeX(fValue.join(', '));
                            break;
                        default:
                            console.warn("Unrecognized type: " + fType + "!");
                    }
                };

                for (var fKey in bib.fields) {
                    var _ret2 = _loop(fKey);

                    if (_ret2 === "continue") continue;
                }
                bibEntry.values = fValues;
                this.bibtexArray[this.bibtexArray.length] = bibEntry;
            }
            this.bibtexStr = this._getBibtexString(this.bibtexArray);
            return this.bibtexStr;
        }
    }]);
    return BibLatexExporter;
}();
},{"../const":31,"./const":38,"babel-runtime/core-js/object/keys":21,"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
// A much smaller list for export than for import, as biblatex does understand utf8
var TexSpecialChars = exports.TexSpecialChars = [[/\\/g, '\\textbackslash '], [/\{/g, '\\{ '], [/\}/g, '\\} '], [/&/g, '{\\&}'], [/%/g, '{\\%}'], [/\$/g, '{\\$}'], [/#/g, '{\\#}'], [/_/g, '{\\_}'], [/~/g, '{\\textasciitilde}'], [/\^/g, '{\\textasciicircum}'], [/ and /g, ' {and} ']];
},{}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CSLExporter = undefined;

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _const = require("../const");

var _edtf = require("../edtf");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Converts a BibDB to a DB of the CSL type.
 * @param bibDB The bibliography database to convert.
 */

var TAGS = {
    'strong': { open: '<b>', close: '</b>' },
    'em': { open: '<i>', close: '</i>' },
    'sub': { open: '<sub>', close: '</sub>' },
    'sup': { open: '<sup>', close: '</sup>' },
    'smallcaps': { open: '<span style="font-variant:small-caps;">', close: '</span>' },
    'nocase': { open: '<span class="nocase">', close: '</span>' },
    'enquote': { open: '“', close: '”' },
    'url': { open: '', close: '' },
    'undefined': { open: '[', close: ']' }
};

var CSLExporter = exports.CSLExporter = function () {
    function CSLExporter(bibDB, pks) {
        (0, _classCallCheck3.default)(this, CSLExporter);

        this.bibDB = bibDB;
        if (pks) {
            this.pks = pks; // A list of pk values of the bibliography items to be exported.
        } else {
            this.pks = (0, _keys2.default)(bibDB); // If none are selected, all keys are exporter
        }
        this.cslDB = {};
        this.errors = [];
    }

    (0, _createClass3.default)(CSLExporter, [{
        key: "getCSLEntry",

        /** Converts one BibDB entry to CSL format.
         * @function getCSLEntry
         * @param id The id identifying the bibliography entry.
         */
        value: function getCSLEntry(id) {
            var _this = this;

            var that = this,
                bib = this.bibDB[id],
                fValues = {};

            var _loop = function _loop(fKey) {
                if (bib.fields[fKey] !== '' && fKey in _const.BibFieldTypes && 'csl' in _const.BibFieldTypes[fKey]) {
                    var fValue = bib.fields[fKey];
                    var fType = _const.BibFieldTypes[fKey]['type'];
                    var key = _const.BibFieldTypes[fKey]['csl'];

                    (function () {
                        switch (fType) {
                            case 'f_date':
                                fValues[key] = _this._reformDate(fValue);
                                break;
                            case 'f_integer':
                                fValues[key] = _this._reformInteger(fValue);
                                break;
                            case 'f_key':
                                fValues[key] = _this._reformKey(fValue, fKey);
                                break;
                            case 'f_literal':
                            case 'f_long_literal':
                                fValues[key] = _this._reformText(fValue);
                                break;
                            case 'l_range':
                                fValues[key] = _this._reformRange(fValue);
                                break;
                            case 'f_title':
                                fValues[key] = _this._reformText(fValue);
                                break;
                            case 'f_uri':
                            case 'f_verbatim':
                                fValues[key] = fValue;
                                break;
                            case 'l_key':
                                fValues[key] = fValue.map(function (key) {
                                    return that._reformKey(key, fKey);
                                }).join(' and ');
                                break;
                            case 'l_literal':
                                var reformedTexts = [];
                                fValue.forEach(function (text) {
                                    reformedTexts.push(that._reformText(text));
                                });
                                fValues[key] = reformedTexts.join(', ');
                                break;
                            case 'l_name':
                                fValues[key] = _this._reformName(fValue);
                                break;
                            case 'l_tag':
                                fValues[key] = fValue.join(', ');
                                break;
                            default:
                                console.warn("Unrecognized type: " + fType + "!");
                        }
                    })();
                }
            };

            for (var fKey in bib.fields) {
                _loop(fKey);
            }
            fValues['type'] = _const.BibTypes[bib.bib_type].csl;
            return fValues;
        }
    }, {
        key: "_reformKey",
        value: function _reformKey(theValue, fKey) {
            if (typeof theValue === 'string') {
                var fieldType = _const.BibFieldTypes[fKey];
                if (Array.isArray(fieldType['options'])) {
                    return theValue;
                } else {
                    return fieldType['options'][theValue]['csl'];
                }
            } else {
                return this._reformText(theValue);
            }
        }
    }, {
        key: "_reformRange",
        value: function _reformRange(theValue) {
            var _this2 = this;

            var that = this;
            return theValue.map(function (range) {
                return range.map(function (text) {
                    return _this2._reformText(text);
                }).join('--');
            }).join(',');
        }
    }, {
        key: "_reformInteger",
        value: function _reformInteger(theValue) {
            var theString = this._reformText(theValue);
            var theInt = parseInt(theString);
            if (theString !== String(theInt)) {
                return theString;
            }
            return theInt;
        }
    }, {
        key: "_reformText",
        value: function _reformText(theValue) {
            var _this3 = this;

            var that = this,
                html = '',
                lastMarks = [];
            theValue.forEach(function (node) {
                if (node.type === 'variable') {
                    // This is an undefined variable
                    // This should usually not happen, as CSL doesn't know what to
                    // do with these. We'll put them into an unsupported tag.
                    html += "" + TAGS.undefined.open + node.attrs.variable + TAGS.undefined.close;
                    _this3.errors.push({
                        type: 'undefined_variable',
                        variable: node.attrs.variable
                    });
                    return;
                }
                var newMarks = [];
                if (node.marks) {
                    node.marks.forEach(function (mark) {
                        newMarks.push(mark.type);
                    });
                }
                // close all tags that are not present in current text node.
                // Go through last marksd in reverse order to close innermost tags first.
                var closing = false;
                lastMarks.slice().reverse().forEach(function (mark, rIndex) {
                    var index = lastMarks.length - rIndex;
                    if (mark != newMarks[index]) {
                        closing = true;
                    }
                    if (closing) {
                        html += TAGS[mark].close;
                    }
                });
                // open all new tags that were not present in the last text node.
                var opening = false;
                newMarks.forEach(function (mark, index) {
                    if (mark != lastMarks[index]) {
                        opening = true;
                    }
                    if (opening) {
                        html += TAGS[mark].open;
                    }
                });
                html += node.text;
                lastMarks = newMarks;
            });
            // Close all still open tags
            lastMarks.slice().reverse().forEach(function (mark) {
                html += TAGS[mark].close;
            });
            return html;
        }
    }, {
        key: "_reformDate",
        value: function _reformDate(dateStr) {
            var dateObj = (0, _edtf.edtfParse)(dateStr);
            if (dateObj.type === 'Interval') {
                return {
                    'date-parts': [this._edtfToCSL(dateObj.values[0].values.slice(0, 3)), this._edtfToCSL(dateObj.values[1].values.slice(0, 3))]
                };
            } else {
                return {
                    'date-parts': [this._edtfToCSL(dateObj.values.slice(0, 3))]
                };
            }
        }
    }, {
        key: "_edtfToCSL",
        value: function _edtfToCSL(dateArray) {
            // Add 1 to month (0-11 in edtf.js === 1-12 in CSL json)
            if (dateArray.length > 1) {
                dateArray[1] = dateArray[1] + 1;
            }
            return dateArray;
        }
    }, {
        key: "_reformName",
        value: function _reformName(theNames) {
            var reformedNames = [],
                that = this;
            theNames.forEach(function (name) {
                var reformedName = {};
                if (name.literal) {
                    reformedName['literal'] = that._reformText(name.literal);
                } else {
                    reformedName['given'] = that._reformText(name.given);
                    reformedName['family'] = that._reformText(name.family);
                    if (name.suffix) {
                        reformedName['suffix'] = that._reformText(name.suffix);
                    }
                    if (name.prefix) {
                        if (name.useprefix === true) {
                            reformedName['non-dropping-particle'] = that._reformText(name.prefix);
                        } else {
                            reformedName['dropping-particle'] = that._reformText(name.prefix);
                        }
                    }
                    reformedName['family'] = that._reformText(name['family']);
                }
                reformedNames.push(reformedName);
            });
            return reformedNames;
        }
    }, {
        key: "output",
        get: function get() {
            for (var bibId in this.bibDB) {
                if (this.pks.indexOf(bibId) !== -1) {
                    this.cslDB[bibId] = this.getCSLEntry(bibId);
                    this.cslDB[bibId].id = bibId;
                }
            }
            return this.cslDB;
        }
    }]);
    return CSLExporter;
}();
},{"../const":31,"../edtf":32,"babel-runtime/core-js/object/keys":21,"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibLatexParser = undefined;

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _const = require("../const");

var _const2 = require("./const");

var _nameParser = require("./name-parser");

var _literalParser = require("./literal-parser");

var _tools = require("./tools");

var _edtf = require("../edtf");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Parses files in BibTeX/BibLaTeX format
 */

/* Based on original work by Henrik Muehe (c) 2010,
 * licensed under the MIT license,
 * https://code.google.com/archive/p/bibtex-js/
 */

/* Config options (default value for every option is false)
   - rawFields (false/true):
   Adds a `raw_fields` object to each entry which contains all fields with only
  TeX character replacement and no other processing.
   - processUnexpected (false/true):
   Processes fields with names that are known, but are not expected for the given bibtype,
  adding them to an `unexpected_fields` object to each entry.
   - processUnknown (false/true/object [specifying content type for specific unknown]):
   Processes fields with names that are unknown, adding them to an `unknown_fields`
  object to each entry.
   example:
      > a = new BibLatexParser(..., {processUnknown: true})
      > a.output
      {
          "0:": {
              ...
              unknown_fields: {
                  ...
              }
          }
      }
       > a = new BibLatexParser(..., {processUnknown: {commentator: 'l_name'}})
      > a.output
      {
          "0:": {
              ...
              unknown_fields: {
                  commentator: [
                      {
                          given: ...,
                          family: ...
                      }
                  ]
                  ...
              }
          }
      }
*/

var BibLatexParser = exports.BibLatexParser = function () {
    function BibLatexParser(input) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _classCallCheck3.default)(this, BibLatexParser);

        this.input = input;
        this.config = config;
        this.pos = 0;
        this.entries = [];
        this.bibDB = {};
        this.currentKey = false;
        this.currentEntry = false;
        this.currentType = "";
        this.errors = [];
        this.warnings = [];
        // These variables are expected to be defined by some bibtex sources.
        this.variables = {
            JAN: "January",
            FEB: "February",
            MAR: "March",
            APR: "April",
            MAY: "May",
            JUN: "June",
            JUL: "July",
            AUG: "August",
            SEP: "September",
            OCT: "October",
            NOV: "November",
            DEC: "December"
        };
    }

    (0, _createClass3.default)(BibLatexParser, [{
        key: "isWhitespace",
        value: function isWhitespace(s) {
            return s == ' ' || s == '\r' || s == '\t' || s == '\n';
        }
    }, {
        key: "match",
        value: function match(s) {
            this.skipWhitespace();
            if (this.input.substring(this.pos, this.pos + s.length) == s) {
                this.pos += s.length;
            } else {

                this.errors.push({
                    type: 'token_mismatch',
                    expected: s,
                    found: this.input.substring(this.pos, this.pos + s.length)
                });
            }
            this.skipWhitespace();
        }
    }, {
        key: "tryMatch",
        value: function tryMatch(s) {
            this.skipWhitespace();
            if (this.input.substring(this.pos, this.pos + s.length) == s) {
                return true;
            } else {
                return false;
            }
            this.skipWhitespace();
        }
    }, {
        key: "skipWhitespace",
        value: function skipWhitespace() {
            while (this.isWhitespace(this.input[this.pos])) {
                this.pos++;
            }
            if (this.input[this.pos] == "%") {
                while (this.input[this.pos] != "\n") {
                    this.pos++;
                }
                this.skipWhitespace();
            }
        }
    }, {
        key: "skipToNext",
        value: function skipToNext() {
            while (this.input.length > this.pos && this.input[this.pos] != "@") {
                this.pos++;
            }
            if (this.input.length == this.pos) {
                return false;
            } else {
                return true;
            }
        }
    }, {
        key: "valueBraces",
        value: function valueBraces() {
            var bracecount = 0;
            this.match("{");
            var start = this.pos;
            while (true) {
                if (this.input[this.pos] == '}' && this.input[this.pos - 1] != '\\') {
                    if (bracecount > 0) {
                        bracecount--;
                    } else {
                        var end = this.pos;
                        this.match("}");
                        return this.input.substring(start, end);
                    }
                } else if (this.input[this.pos] == '{' && this.input[this.pos - 1] != '\\') {
                    bracecount++;
                } else if (this.pos == this.input.length - 1) {
                    this.errors.push({ type: 'unexpected_eof' });
                }
                this.pos++;
            }
        }
    }, {
        key: "valueQuotes",
        value: function valueQuotes() {
            this.match('"');
            var start = this.pos;
            while (this.pos < this.input.length) {
                if (this.input[this.pos] === '"' && this.input[this.pos - 1] != '\\') {
                    var end = this.pos;
                    this.match('"');
                    return this.input.substring(start, end);
                } else if (this.pos == this.input.length - 1) {
                    this.errors.push({
                        type: 'unterminated_value',
                        value: this.input.substring(start)
                    });
                }
                this.pos++;
            }
        }
    }, {
        key: "singleValue",
        value: function singleValue() {
            var start = this.pos;
            if (this.tryMatch("{")) {
                return this.valueBraces();
            } else if (this.tryMatch('"')) {
                return this.valueQuotes();
            } else {
                var k = this.key();
                if (this.variables[k.toUpperCase()]) {
                    return this.variables[k.toUpperCase()];
                } else if (k.match("^[0-9]+$")) {
                    return k;
                } else {
                    this.warnings.push({
                        type: 'undefined_variable',
                        entry: this.currentEntry['entry_key'],
                        key: this.currentKey,
                        variable: k
                    });
                    return "%" + k + "%"; // Using % as a delimiter for variables as they cannot be used in regular latex code.
                }
            }
        }
    }, {
        key: "value",
        value: function value() {
            var values = [];
            values.push(this.singleValue());
            while (this.tryMatch("#")) {
                this.match("#");
                values.push(this.singleValue());
            }
            return values.join("");
        }
    }, {
        key: "key",
        value: function key(optional) {
            var start = this.pos;
            while (true) {
                if (this.pos == this.input.length) {
                    this.errors.push({ type: 'runaway_key' });
                    return;
                }
                if ([',', '{', '}', ' ', '='].includes(this.input[this.pos])) {
                    if (optional && this.input[this.pos] != ',') {
                        this.pos = start;
                        return null;
                    }
                    return this.input.substring(start, this.pos);
                } else {
                    this.pos++;
                }
            }
        }
    }, {
        key: "keyEqualsValue",
        value: function keyEqualsValue() {
            var key = this.key();
            if (!key) {
                this.errors.push({
                    type: 'cut_off_citation',
                    entry: this.currentEntry['entry_key']
                });
                // The citation is not full, we remove the existing parts.
                this.currentEntry['incomplete'] = true;
                return;
            }
            this.currentKey = key.toLowerCase();
            if (this.tryMatch("=")) {
                this.match("=");
                var val = this.value();
                return [this.currentKey, val];
            } else {
                this.errors.push({
                    type: 'missing_equal_sign',
                    key: this.currentKey,
                    entry: this.currentEntry['entry_key']
                });
            }
        }
    }, {
        key: "keyValueList",
        value: function keyValueList() {
            var kv = this.keyEqualsValue();
            if (typeof kv === 'undefined') {
                // Entry has no fields, so we delete it.
                // It was the last one pushed, so we remove the last one
                this.entries.pop();
                return;
            }
            var rawFields = this.currentRawFields;
            rawFields[kv[0]] = kv[1];
            while (this.tryMatch(",")) {
                this.match(",");
                //fixes problems with commas at the end of a list
                if (this.tryMatch("}")) {
                    break;
                }
                kv = this.keyEqualsValue();
                if (typeof kv === 'undefined') {
                    this.errors.push({
                        type: 'key_value_error',
                        entry: this.currentEntry['entry_key']
                    });
                    break;
                }
                rawFields[kv[0]] = kv[1];
            }
        }
    }, {
        key: "processFields",
        value: function processFields() {
            var _this = this;

            var that = this;
            var rawFields = this.currentRawFields;
            var fields = this.currentEntry['fields'];

            // date may come either as year, year + month or as date field.
            // We therefore need to catch these hear and transform it to the
            // date field after evaluating all the fields.
            // All other date fields only come in the form of a date string.

            var date = void 0;
            if (rawFields.date) {
                // date string has precedence.
                date = rawFields.date;
            } else if (rawFields.year && rawFields.month) {
                date = rawFields.year + "-" + rawFields.month;
            } else if (rawFields.year) {
                date = "" + rawFields.year;
            }
            if (date) {
                if (this._checkDate(date)) {
                    fields['date'] = date;
                } else {
                    var fieldName = void 0,
                        value = void 0,
                        errorList = void 0;
                    if (rawFields.date) {
                        fieldName = 'date';
                        value = rawFields.date;
                        errorList = this.errors;
                    } else if (rawFields.year && rawFields.month) {
                        fieldName = 'year,month';
                        value = [rawFields.year, rawFields.month];
                        errorList = this.warnings;
                    } else {
                        fieldName = 'year';
                        value = rawFields.year;
                        errorList = this.warnings;
                    }
                    errorList.push({
                        type: 'unknown_date',
                        entry: this.currentEntry['entry_key'],
                        field_name: fieldName,
                        value: value
                    });
                }
            }
            // Check for English language. If the citation is in English language,
            // titles may use case preservation.
            var langEnglish = true; // By default we assume everything to be written in English.
            if (rawFields.langid && rawFields.langid.length) {
                (function () {
                    var langString = rawFields.langid.toLowerCase().trim();
                    var englishOptions = ['english', 'american', 'british', 'usenglish', 'ukenglish', 'canadian', 'australian', 'newzealand'];
                    if (!englishOptions.some(function (option) {
                        return langString === option;
                    })) {
                        langEnglish = false;
                    }
                })();
            } else if (rawFields.language) {
                // langid and language. The two mean different things, see discussion https://forums.zotero.org/discussion/33960/biblatex-import-export-csl-language-biblatex-langid
                // but in bibtex, language is often used for what is essentially langid.
                // If there is no langid, but a language, and the language happens to be
                // a known langid, set the langid to be equal to the language.
                var langid = this._reformKey(rawFields.language, 'langid');
                if (langid) {
                    fields['langid'] = langid;
                    if (!['usenglish', 'ukenglish', 'caenglish', 'auenglish', 'nzenglish'].includes(langid)) {
                        langEnglish = false;
                    }
                }
            }

            var _loop = function _loop(bKey) {

                if (bKey === 'date' || ['year', 'month'].includes(bKey) && !_this.config.processUnknown) {
                    // Handled above
                    return "continue|iterateFields";
                }

                // Replace alias fields with their main term.
                var aliasKey = _const2.BiblatexFieldAliasTypes[bKey],
                    fKey = void 0;
                if (aliasKey) {
                    if (rawFields[aliasKey]) {
                        _this.warnings.push({
                            type: 'alias_creates_duplicate_field',
                            entry: _this.currentEntry['entry_key'],
                            field: bKey,
                            alias_of: aliasKey,
                            value: rawFields[bKey],
                            alias_of_value: rawFields[aliasKey]
                        });
                        return "continue|iterateFields";
                    }

                    fKey = (0, _keys2.default)(_const.BibFieldTypes).find(function (ft) {
                        return _const.BibFieldTypes[ft].biblatex === aliasKey;
                    });
                } else {
                    fKey = (0, _keys2.default)(_const.BibFieldTypes).find(function (ft) {
                        return _const.BibFieldTypes[ft].biblatex === bKey;
                    });
                }

                var oFields = void 0,
                    fType = void 0;
                var bType = _const.BibTypes[_this.currentEntry['bib_type']];

                if ('undefined' == typeof fKey) {
                    _this.warnings.push({
                        type: 'unknown_field',
                        entry: _this.currentEntry['entry_key'],
                        field_name: bKey
                    });
                    if (!_this.config.processUnknown) {
                        return "continue|iterateFields";
                    }
                    if (!_this.currentEntry['unknown_fields']) {
                        _this.currentEntry['unknown_fields'] = {};
                    }
                    oFields = _this.currentEntry['unknown_fields'];
                    fType = _this.config.processUnknown[bKey] ? _this.config.processUnknown[bKey] : 'f_literal';
                    fKey = bKey;
                } else if (bType['required'].includes(fKey) || bType['optional'].includes(fKey) || bType['eitheror'].includes(fKey)) {
                    oFields = fields;
                    fType = _const.BibFieldTypes[fKey]['type'];
                } else {
                    _this.warnings.push({
                        type: 'unexpected_field',
                        entry: _this.currentEntry['entry_key'],
                        field_name: bKey
                    });
                    if (!_this.config.processUnexpected) {
                        return "continue|iterateFields";
                    }
                    if (!_this.currentEntry['unexpected_fields']) {
                        _this.currentEntry['unexpected_fields'] = {};
                    }
                    oFields = _this.currentEntry['unexpected_fields'];
                    fType = _const.BibFieldTypes[fKey]['type'];
                }

                var fValue = rawFields[bKey];
                switch (fType) {
                    case 'f_date':
                        if (_this._checkDate(fValue)) {
                            oFields[fKey] = fValue;
                        } else {
                            _this.errors.push({
                                type: 'unknown_date',
                                entry: _this.currentEntry['entry_key'],
                                field_name: fKey,
                                value: fValue
                            });
                        }
                        break;
                    case 'f_integer':
                        oFields[fKey] = _this._reformLiteral(fValue);
                        break;
                    case 'f_key':
                        var reformedKey = _this._reformKey(fValue, fKey);
                        if (reformedKey !== false) {
                            oFields[fKey] = reformedKey;
                        }
                        break;
                    case 'f_literal':
                    case 'f_long_literal':
                        oFields[fKey] = _this._reformLiteral(fValue);
                        break;
                    case 'l_range':
                        oFields[fKey] = _this._reformRange(fValue);
                        break;
                    case 'f_title':
                        oFields[fKey] = _this._reformLiteral(fValue, langEnglish);
                        break;
                    case 'f_uri':
                        if (_this._checkURI(fValue)) {
                            oFields[fKey] = fValue;
                        } else {
                            _this.errors.push({
                                type: 'unknown_uri',
                                entry: _this.currentEntry['entry_key'],
                                field_name: fKey,
                                value: fValue
                            });
                        }
                        break;
                    case 'f_verbatim':
                        oFields[fKey] = fValue;
                        break;
                    case 'l_key':
                        oFields[fKey] = (0, _tools.splitTeXString)(fValue).map(function (keyField) {
                            return that._reformKey(keyField, fKey);
                        });
                        break;
                    case 'l_tag':
                        oFields[fKey] = fValue.split(',').map(function (string) {
                            return string.trim();
                        });
                        break;
                    case 'l_literal':
                        var items = (0, _tools.splitTeXString)(fValue);
                        oFields[fKey] = [];
                        items.forEach(function (item) {
                            oFields[fKey].push(_this._reformLiteral(item));
                        });
                        break;
                    case 'l_name':
                        oFields[fKey] = _this._reformNameList(fValue);
                        break;
                    default:
                        // Something must be wrong in the code.
                        console.warn("Unrecognized type: " + fType + "!");
                }
            };

            iterateFields: for (var bKey in rawFields) {
                var _ret2 = _loop(bKey);

                if (_ret2 === "continue|iterateFields") continue iterateFields;
            }
        }
    }, {
        key: "_reformKey",
        value: function _reformKey(keyString, fKey) {
            var keyValue = keyString.trim().toLowerCase();
            var fieldType = _const.BibFieldTypes[fKey];
            if (_const2.BiblatexAliasOptions[fKey] && _const2.BiblatexAliasOptions[fKey][keyValue]) {
                keyValue = _const2.BiblatexAliasOptions[fKey][keyValue];
            }
            if (fieldType['options']) {
                if (Array.isArray(fieldType['options'])) {
                    if (fieldType['options'].includes(keyValue)) {
                        return keyValue;
                    }
                } else {
                    var optionValue = (0, _keys2.default)(fieldType['options']).find(function (key) {
                        return fieldType['options'][key]['biblatex'] === keyValue;
                    });
                    if (optionValue) {
                        return optionValue;
                    }
                }
            }
            if (fieldType.strict) {
                this.warnings.push({
                    type: 'unknown_key',
                    entry: this.currentEntry['entry_key'],
                    field_name: fKey,
                    value: keyString
                });
                return false;
            }
            return this._reformLiteral(keyString);
        }
    }, {
        key: "_checkURI",
        value: function _checkURI(uriString) {
            /* Copyright (c) 2010-2013 Diego Perini, MIT licensed
               https://gist.github.com/dperini/729294
             */
            return (/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(uriString)
            );
        }
    }, {
        key: "_reformNameList",
        value: function _reformNameList(nameString) {
            var people = (0, _tools.splitTeXString)(nameString);
            return people.map(function (person) {
                var nameParser = new _nameParser.BibLatexNameParser(person);
                return nameParser.output;
            });
        }
    }, {
        key: "_reformRange",
        value: function _reformRange(rangeString) {
            var _this2 = this;

            return rangeString.split(',').map(function (string) {
                var parts = string.split('-');
                if (parts.length > 1) {
                    return [_this2._reformLiteral(parts.shift().trim()), _this2._reformLiteral(parts.pop().trim())];
                } else {
                    return [_this2._reformLiteral(string.trim())];
                }
            });
        }
    }, {
        key: "_checkDate",
        value: function _checkDate(dateStr) {
            return (0, _edtf.edtfCheck)(dateStr);
        }
    }, {
        key: "_reformLiteral",
        value: function _reformLiteral(theValue, cpMode) {
            var parser = new _literalParser.BibLatexLiteralParser(theValue, cpMode);
            return parser.output;
        }
    }, {
        key: "bibType",
        value: function bibType() {
            var biblatexType = this.currentType;
            if (_const2.BiblatexAliasTypes[biblatexType]) {
                biblatexType = _const2.BiblatexAliasTypes[biblatexType];
            }

            var bibType = (0, _keys2.default)(_const.BibTypes).find(function (bType) {
                return _const.BibTypes[bType]['biblatex'] === biblatexType;
            });

            if (typeof bibType === 'undefined') {
                this.warnings.push({
                    type: 'unknown_type',
                    type_name: biblatexType
                });
                bibType = 'misc';
            }

            return bibType;
        }
    }, {
        key: "createNewEntry",
        value: function createNewEntry() {
            this.currentEntry = {
                'bib_type': this.bibType(),
                'entry_key': this.key(true),
                'fields': {}
            };
            this.currentRawFields = {};
            if (this.config.rawFields) {
                this.currentEntry['raw_fields'] = this.currentRawFields;
            }
            this.entries.push(this.currentEntry);
            if (this.currentEntry['entry_key'] !== null) {
                this.match(",");
            }
            this.keyValueList();
            if (this.currentEntry['entry_key'] === null) {
                this.currentEntry['entry_key'] = '';
            }
            this.processFields();
        }
    }, {
        key: "directive",
        value: function directive() {
            this.match("@");
            this.currentType = this.key().toLowerCase();
            return "@" + this.currentType;
        }
    }, {
        key: "string",
        value: function string() {
            var kv = this.keyEqualsValue();
            this.variables[kv[0].toUpperCase()] = kv[1];
        }
    }, {
        key: "preamble",
        value: function preamble() {
            this.value();
        }
    }, {
        key: "replaceTeXChars",
        value: function replaceTeXChars() {
            var value = this.input;
            var len = _const2.TeXSpecialChars.length;
            for (var i = 0; i < len; i++) {
                var texChar = _const2.TeXSpecialChars[i];
                var texCharRe = new RegExp("{(" + texChar[0] + ")}|" + texChar[0], 'g');
                value = value.replace(texCharRe, texChar[1]);
            }
            // Delete multiple spaces
            this.input = value.replace(/ +(?= )/g, '');
            return;
        }
    }, {
        key: "stepThroughBibtex",
        value: function stepThroughBibtex() {
            while (this.skipToNext()) {
                var d = this.directive();
                this.match("{");
                if (d == "@string") {
                    this.string();
                } else if (d == "@preamble") {
                    this.preamble();
                } else if (d == "@comment") {
                    this.parseGroups();
                } else {
                    this.createNewEntry();
                }
                this.match("}");
            }
        }
    }, {
        key: "parseGroups",
        value: function parseGroups() {
            var _this3 = this;

            var prefix = 'jabref-meta: groupstree:';
            var pos = this.input.indexOf(prefix, this.pos);
            if (pos < 0) {
                return;
            }
            this.pos = pos + prefix.length;

            /*  The JabRef Groups format is... interesting. To parse it, you must:
                1. Unwrap the lines (just remove the newlines)
                2. Split the lines on ';' (but not on '\;')
                3. Each line is a group which is formatted as follows:
                   <level> <type>:<name>\;<intersect>\;<citekey1>\;<citekey2>\;....
                 Each level can interact with the level it is nested under; either no interaction (intersect = 0), intersection
                (intersect = 1) or union (intersect = 2).
                 There are several group types: root-level (all references are implicitly available on the root level),
                ExplicitGroup (the citation keys are listed in the group line) or query-type groups. I have only implemented
                explicit groups.
            */

            // skip any whitespace after the identifying string */
            while (this.input.length > this.pos && '\r\n '.indexOf(this.input[this.pos]) >= 0) {
                this.pos++;
            }

            var start = this.pos;
            var braces = 1;
            while (this.input.length > this.pos && braces > 0) {
                switch (this.input[this.pos]) {
                    case '{':
                        braces += 1;
                        break;
                    case '}':
                        braces -= 1;
                }
                this.pos++;
            }

            // no ending brace found
            if (braces !== 0) {
                return;
            }

            // leave the ending brace for the main parser to pick up
            this.pos--;

            // simplify parsing by taking the whole comment, throw away newlines, replace the escaped separators with tabs, and
            // then split on the remaining non-secaped separators
            // I use \u2004 to protect \; and \u2005 to protect \\\; (the escaped version of ';') when splitting lines at ;
            var lines = this.input.substring(start, this.pos).replace(/[\r\n]/g, '').replace(/\\\\\\;/g, "\u2005").replace(/\\;/g, "\u2004").split(';');
            lines = lines.map(function (line) {
                return line.replace(/\u2005/g, ';');
            });
            var levels = { '0': { references: [], groups: [] } };
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop2 = function _loop2() {
                    var line = _step.value;

                    if (line === '') {
                        return "continue";
                    }
                    var match = line.match(/^([0-9])\s+([^:]+):(.*)/);
                    if (!match) {
                        return {
                            v: void 0
                        };
                    }
                    var level = parseInt(match[1]);
                    var type = match[2];
                    var references = match[3];
                    references = references ? references.split("\u2004").filter(function (key) {
                        return key;
                    }) : [];
                    var name = references.shift();
                    var intersection = references.shift(); // 0 = independent, 1 = intersection, 2 = union

                    // ignore root level, has no refs anyway in the comment
                    if (level === 0) {
                        return "continue";
                    }

                    // remember this group as the current `level` level, so that any following `level + 1` levels can find it
                    levels[level] = { name: name, groups: [], references: references };
                    // and add it to its parent
                    levels[level - 1].groups.push(levels[level]);

                    // treat all groups as explicit
                    if (type != 'ExplicitGroup') {
                        _this3.warnings.push({
                            type: 'unsupported_jabref_group',
                            group_type: type
                        });
                    }

                    switch (intersection) {
                        case '0':
                            // do nothing more
                            break;
                        case '1':
                            // intersect with parent. Hardly ever used.
                            levels[level].references = levels[level].references.filter(function (key) {
                                return levels[level - 1].references.includes(key);
                            });
                            break;
                        case '2':
                            // union with parent
                            levels[level].references = [].concat((0, _toConsumableArray3.default)(new _set2.default([].concat((0, _toConsumableArray3.default)(levels[level].references), (0, _toConsumableArray3.default)(levels[level - 1].references)))));
                            break;
                    }
                };

                for (var _iterator = (0, _getIterator3.default)(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ret3 = _loop2();

                    switch (_ret3) {
                        case "continue":
                            continue;

                        default:
                            if ((typeof _ret3 === "undefined" ? "undefined" : (0, _typeof3.default)(_ret3)) === "object") return _ret3.v;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.groups = levels['0'].groups;
        }
    }, {
        key: "createBibDB",
        value: function createBibDB() {
            var that = this;
            this.entries.forEach(function (entry, index) {
                that.bibDB[index] = entry;
            });
        }
    }, {
        key: "output",
        get: function get() {
            this.replaceTeXChars();
            this.stepThroughBibtex();
            this.createBibDB();
            return this.bibDB;
        }
    }]);
    return BibLatexParser;
}();
},{"../const":31,"../edtf":32,"./const":41,"./literal-parser":42,"./name-parser":43,"./tools":44,"babel-runtime/core-js/get-iterator":17,"babel-runtime/core-js/object/keys":21,"babel-runtime/core-js/set":22,"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26,"babel-runtime/helpers/toConsumableArray":29,"babel-runtime/helpers/typeof":30}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/** A list of all field aliases and what they refer to. */
var BiblatexFieldAliasTypes = exports.BiblatexFieldAliasTypes = {
    'address': 'location',
    'annote': 'annotation',
    'archiveprefix': 'eprinttype',
    'journal': 'journaltitle',
    'pdf': 'file',
    'primaryclass': 'eprintclass',
    'school': 'institution'
};

/** A list of all bibentry aliases and what they refer to. */
var BiblatexAliasTypes = exports.BiblatexAliasTypes = {
    'conference': 'inproceedings',
    'electronic': 'online',
    'mastersthesis': 'thesis',
    'phdthesis': 'thesis',
    'techreport': 'thesis',
    'www': 'online'
};

var langidAliases = {
    'english': 'usenglish',
    'american': 'usenglish',
    'en': 'usenglish',
    'eng': 'usenglish',
    'en-US': 'usenglish',
    'anglais': 'usenglish',
    'british': 'ukenglish',
    'en-GB': 'ukenglish',
    'francais': 'french',
    'austrian': 'naustrian',
    'german': 'ngerman',
    'germanb': 'ngerman',
    'polutonikogreek': 'greek',
    'brazil': 'brazilian',
    'portugues': 'portuguese',
    'chinese': 'pinyin'
};

var languageAliases = {
    "langamerican": "american",
    "langbrazilian": "brazilian",
    "langcatalan": "catalan",
    "langcroation": "croation",
    "langczech": "czech",
    "langdanish": "danish",
    "langdutch": "dutch",
    "langenglish": "english",
    "langfinnish": "finnish",
    "langfrench": "french",
    "langgerman": "german",
    "langgreek": "greek",
    "langitalian": "italian",
    "langlatin": "latin",
    "langnorwegian": "norwegian",
    "langpolish": "polish",
    "langportuguese": "portuguese",
    "langrussian": "russian",
    "langslovene": "slovene",
    "langspanish": "spanish",
    "langswedish": "swedish"
};

/** A list of aliases for options known by biblatex/babel/polyglosia and what they refer to. */
var BiblatexAliasOptions = exports.BiblatexAliasOptions = {
    'language': languageAliases,
    'origlanguage': languageAliases,
    'langid': langidAliases
};

/** A list of special chars in Tex and their unicode equivalent. */

/* The copyright holder of the below composition is Emiliano Heyns, and it is made available under the MIT license.

Data sources for the composition are:

http://milde.users.sourceforge.net/LUCR/Math/data/unimathsymbols.txt
http://www.w3.org/2003/entities/2007xml/unicode.xml
http://www.w3.org/Math/characters/unicode.xml
*/
var TeXSpecialChars = exports.TeXSpecialChars = [["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char220\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char220", '\u033C'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char225\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char225", '\u0361'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char201\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char201", '\u013F'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char218\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char218", '\u033A'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char202\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char202", '\u0140'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char207\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char207", '\u032F'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char203\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char203", '\u032B'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char185\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char185", '\u0319'], ["\\{\\\\fontencoding\\{LEIP\\}\\\\selectfont\\\\char202\\}|\\\\fontencoding\\{LEIP\\}\\\\selectfont\\\\char202", '\u027F'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char184\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char184", '\u0318'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char177\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char177", '\u0311'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char195\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char195", '\u01BA'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char215\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char215", '\u0337'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char216\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char216", '\u0338'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char219\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char219", '\u033B'], ["\\{\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char221\\}|\\\\fontencoding\\{LECO\\}\\\\selectfont\\\\char221", '\u033D'], ["\\{\\\\fontencoding\\{LEIP\\}\\\\selectfont\\\\char61\\}|\\\\fontencoding\\{LEIP\\}\\\\selectfont\\\\char61", '\u0258'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char63\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char63", '\u0167'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char91\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char91", '\u0138'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char40\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char40", '\u0126'], ["\\{\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char47\\}|\\\\fontencoding\\{LELA\\}\\\\selectfont\\\\char47", '\u0166'], ["\\\\mathbin\\{\\{:\\}\\\\!\\\\!\\{\\-\\}\\\\!\\\\!\\{:\\}\\}", '\u223A'], ["\\\\cyrchar\\\\cyrhundredthousands", '\u0488'], ['\\\\acute\\{\\\\ddot\\{\\\\upsilon\\}\\}', '\u03B0'], ["\\\\Pisymbol\\{ppi020\\}\\{105\\}", '\u2A9E'], ["\\\\acute\\{\\\\ddot\\{\\\\iota\\}\\}", '\u0390'], ["\\\\Pisymbol\\{ppi020\\}\\{117\\}", '\u2A9D'], ["\\\\mathsfbfsl\\{\\\\varkappa\\}", '\uD835\uDFC6'], ["\\\\barleftarrowrightarrowba", '\u21B9'], ["\\\\mathsfbfsl\\{\\\\vartheta\\}", '\uD835\uDF97'], ["\\\\not\\\\kern\\-0\\.3em\\\\times", '\u226D'], ["\\\\leftarrowshortrightarrow", '\u2943'], ["\\\\mathsfbfsl\\{\\\\varsigma\\}", '\uD835\uDFBB'], ["\\\\Pisymbol\\{ppi022\\}\\{87\\}", '\u03D0'], ["\\\\concavediamondtickright", '\u27E3'], ["\\\\invwhiteupperhalfcircle", '\u25DA'], ['\\\\mathsfbfsl\\{\\\\Upsilon\\}', '\uD835\uDFA4'], ["\\\\nvtwoheadrightarrowtail", '\u2917'], ["\\\\nVtwoheadrightarrowtail", '\u2918'], ["\\\\invwhitelowerhalfcircle", '\u25DB'], ["\\\\leftrightarrowtriangle", '\u21FF'], ["\\\\partialmeetcontraction", '\u2AA3'], ['\\\\updownharpoonleftright', '\u294D'], ["\\\\ensuremath\\{\\\\Elzpes\\}", '\u20A7'], ["\\\\texteuro|\\{\\\\mbox\\{\\\\texteuro\\}\\}|\\\\mbox\\{\\\\texteuro\\}", '\u20AC'], ["\\\\cyrchar\\\\CYROMEGATITLO", '\u047C'], ["\\\\mathsfbfsl\\{\\\\varrho\\}", '\uD835\uDFC8'], ["\\\\cyrchar\\\\cyromegatitlo", '\u047D'], ["\\\\nVtwoheadleftarrowtail", '\u2B3D'], ["\\\\concavediamondtickleft", '\u27E2'], ['\\\\updownharpoonrightleft', '\u294C'], ["\\\\blackcircleulquadwhite", '\u25D5'], ["\\\\mathsfbfsl\\{\\\\Lambda\\}", '\uD835\uDF9A'], ["\\\\mathsfbf\\{\\\\varsigma\\}", '\uD835\uDF81'], ["\\\\mathsfbf\\{\\\\varkappa\\}", '\uD835\uDF8C'], ["\\\\nvtwoheadleftarrowtail", '\u2B3C'], ["\\\\mathsfbf\\{\\\\vartheta\\}", '\uD835\uDF67'], ["\\\\downtrianglerightblack", '\u29E9'], ["\\\\ElsevierGlyph\\{E838\\}", '\u233D'], ["\\\\ElsevierGlyph\\{2129\\}", '\u2129'], ["\\\\ElsevierGlyph\\{E219\\}", '\u2937'], ["\\\\rangledownzigzagarrow", '\u237C'], ["\\\\mathsfbfsl\\{\\\\Omega\\}", '\uD835\uDFA8'], ["\\\\mathrm\\{\\\\ddot\\{Y\\}\\}", '\u03AB'], ["\\\\mathsfbfsl\\{\\\\nabla\\}", '\uD835\uDFA9'], ["\\\\mathrm\\{\\\\ddot\\{I\\}\\}", '\u03AA'], ["\\\\mathsfbfsl\\{\\\\Gamma\\}", '\uD835\uDF92'], ["\\\\ElsevierGlyph\\{2275\\}", '\u2275'], ["\\\\ElsevierGlyph\\{E21A\\}", '\u2936'], ["\\\\ElsevierGlyph\\{E214\\}", '\u297C'], ["\\\\ElsevierGlyph\\{E215\\}", '\u297D'], ["\\\\ElsevierGlyph\\{2274\\}", '\u2274'], ["\\\\ElsevierGlyph\\{2232\\}", '\u2232'], ["\\\\ElsevierGlyph\\{E212\\}", '\u2905'], ["\\\\ElsevierGlyph\\{2233\\}", '\u2233'], ["\\\\ElsevierGlyph\\{3018\\}", '\u2985'], ["\\\\sim\\\\joinrel\\\\leadsto", '\u27FF'], ["\\\\ElsevierGlyph\\{2238\\}", '\u2238'], ["\\\\ElsevierGlyph\\{E291\\}", '\u2994'], ["\\\\ElsevierGlyph\\{E21C\\}", '\u2933'], ['\\\\underrightharpoondown', '\u20EC'], ["\\\\ElsevierGlyph\\{2242\\}", '\u2242'], ["\\\\ElsevierGlyph\\{E260\\}", '\u29B5'], ["\\\\ElsevierGlyph\\{E61B\\}", '\u29B6'], ["\\\\cyrchar\\\\cyrsemisftsn", '\u048D'], ["\\\\cyrchar\\\\CYRSEMISFTSN", '\u048C'], ["\\\\cyrchar\\\\cyrthousands", '\u0482'], ["\\\\ElsevierGlyph\\{3019\\}", '\u3019'], ["\\\\ElsevierGlyph\\{300B\\}", '\u300B'], ["\\\\leftrightharpoonsdown", '\u2967'], ["\\\\rightleftharpoonsdown", '\u2969'], ["\\\\ElsevierGlyph\\{E210\\}", '\u292A'], ["\\\\ElsevierGlyph\\{300A\\}", '\u300A'], ["\\\\ElsevierGlyph\\{E372\\}", '\u29DC'], ["\\\\ElsevierGlyph\\{22C0\\}", '\u22C0'], ["\\\\downtriangleleftblack", '\u29E8'], ["\\\\blackdiamonddownarrow", '\u29EA'], ["\\\\ElsevierGlyph\\{E20F\\}", '\u2929'], ["\\\\ElsevierGlyph\\{E20E\\}", '\u2928'], ["\\\\ElsevierGlyph\\{E211\\}", '\u2927'], ["\\\\ElsevierGlyph\\{E20A\\}", '\u2926'], ["\\\\ElsevierGlyph\\{225A\\}", '\u225A'], ["\\\\ElsevierGlyph\\{225F\\}", '\u225F'], ["\\\\ElsevierGlyph\\{E20B\\}", '\u2925'], ["\\\\ElsevierGlyph\\{E20D\\}", '\u2924'], ['\\\\mathsfbf\\{\\\\Upsilon\\}', '\uD835\uDF6A'], ["\\\\ElsevierGlyph\\{22C1\\}", '\u22C1'], ["\\\\mathbit\\{\\\\varkappa\\}", '\uD835\uDF52'], ["\\\\mathbit\\{\\\\vartheta\\}", '\uD835\uDF51'], ["\\\\mathbit\\{\\\\varsigma\\}", '\uD835\uDF47'], ["\\\\ElsevierGlyph\\{E20C\\}", '\u2923'], ["\\\\ElsevierGlyph\\{E395\\}", '\u2A10'], ["\\\\ElsevierGlyph\\{E25A\\}", '\u2A25'], ["\\\\ElsevierGlyph\\{21B3\\}", '\u21B3'], ["\\\\ElsevierGlyph\\{E25B\\}", '\u2A2A'], ["\\\\ElsevierGlyph\\{E25C\\}", '\u2A2D'], ["\\\\ElsevierGlyph\\{E25D\\}", '\u2A2E'], ["\\\\ElsevierGlyph\\{E25E\\}", '\u2A34'], ["\\\\ElsevierGlyph\\{E259\\}", '\u2A3C'], ["\\\\ElsevierGlyph\\{E381\\}", '\u25B1'], ["\\\\closedvarcupsmashprod", '\u2A50'], ["\\\\ElsevierGlyph\\{E36E\\}", '\u2A55'], ["\\\\barovernorthwestarrow", '\u21B8'], ["\\\\mathsfbfsl\\{\\\\Delta\\}", '\uD835\uDF93'], ["\\\\ElsevierGlyph\\{E30D\\}", '\u2AEB'], ["\\\\mathsfbfsl\\{\\\\Sigma\\}", '\uD835\uDFA2'], ["\\\\mathsfbfsl\\{\\\\varpi\\}", '\uD835\uDFC9'], ['\\\\mathbit\\{\\\\Upsilon\\}', '\uD835\uDF30'], ["\\\\whiteinwhitetriangle", '\u27C1'], ["\\\\cyrchar\\\\cyromegarnd", '\u047B'], ["\\\\cyrchar\\\\CYRABHCHDSC", '\u04BE'], ["\\\\cyrchar\\\\CYROMEGARND", '\u047A'], ["\\\\twoheadleftarrowtail", '\u2B3B'], ["\\\\mathsl\\{\\\\varkappa\\}", '\uD835\uDF18'], ["\\\\mathsl\\{\\\\varsigma\\}", '\uD835\uDF0D'], ["\\\\cyrchar\\\\cyrabhchdsc", '\u04BF'], ["\\\\cyrchar\\\\CYRpalochka", '\u04C0'], ["\\\\mathbf\\{\\\\varkappa\\}", '\uD835\uDEDE'], ["\\\\CapitalDifferentialD", '\u2145'], ["\\\\mathbf\\{\\\\varsigma\\}", '\uD835\uDED3'], ["\\\\mathsfbf\\{\\\\varrho\\}", '\uD835\uDF8E'], ["\\\\twoheaduparrowcircle", '\u2949'], ["\\\\rightarrowbackapprox", '\u2B48'], ["\\\\curvearrowrightminus", '\u293C'], ["\\\\barrightarrowdiamond", '\u2920'], ["\\\\leftrightarrowcircle", '\u2948'], ["\\\\downrightcurvedarrow", '\u2935'], ["\\\\NestedGreaterGreater", '\u2AA2'], ["\\\\cyrchar\\{\\\\'\\\\CYRK\\}", '\u040C'], ["\\\\mathsl\\{\\\\vartheta\\}", '\uD835\uDEF3'], ["\\\\mathsfbf\\{\\\\Lambda\\}", '\uD835\uDF60'], ['\\\\underleftharpoondown', '\u20ED'], ["\\\\mathbf\\{\\\\vartheta\\}", '\uD835\uDEB9'], ["\\\\cyrchar\\{\\\\'\\\\cyrk\\}", '\u045C'], ["\\\\blackcircledrightdot", '\u2688'], ["\\\\whitesquaretickright", '\u27E5'], ["\\\\cyrchar\\{\\\\'\\\\cyrg\\}", '\u0453'], ["\\\\cyrchar\\{\\\\'\\\\CYRG\\}", '\u0403'], ["\\\\cyrchar\\\\cyrmillions", '\u0489'], ["\\\\ReverseUpEquilibrium", '\u296F'], ["\\\\blackcircledownarrow", '\u29ED'], ["\\\\int\\\\!\\\\int\\\\!\\\\int", '\u222D'], ["\\\\leftrightsquigarrow", '\u21AD'], ["\\\\leftarrowbackapprox", '\u2B42'], ["\\\\mathbit\\{\\\\Lambda\\}", '\uD835\uDF26'], ["\\\\mathsfbfsl\\{\\\\phi\\}", '\uD835\uDFC7'], ["\\\\blockthreeqtrshaded", '\u2593'], ["\\\\whitesquaretickleft", '\u27E4'], ["\\\\blackcircledtwodots", '\u2689'], ["\\\\stackrel\\{\\*\\}\\{=\\}", '\u2A6E'], ["\\\\whitearrowupfrombar", '\u21EA'], ["\\\\mathsfbfsl\\{\\\\Phi\\}", '\uD835\uDFA5'], ["\\\\mathsfbf\\{\\\\Theta\\}", '\uD835\uDF5D'], ["\\\\leftrightharpoonsup", '\u2966'], ["\\\\mathsfbf\\{\\\\varpi\\}", '\uD835\uDF8F'], ["\\\\blackinwhitediamond", '\u25C8'], ["\\\\cyrchar\\\\cyriotbyus", '\u046D'], ["\\\\mathsfbf\\{\\\\Omega\\}", '\uD835\uDF6E'], ["\\\\cyrchar\\\\CYRIOTBYUS", '\u046C'], ['\\\\mathbf\\{\\\\Upsilon\\}', '\uD835\uDEBC'], ["\\\\mathsfbf\\{\\\\Delta\\}", '\uD835\uDF59'], ["\\\\mathsfbfsl\\{\\\\Psi\\}", '\uD835\uDFA7'], ["\\\\DownLeftRightVector", '\u2950'], ["\\\\cyrchar\\\\textnumero", '\u2116'], ["\\\\twoheadleftdbkarrow", '\u2B37'], ["\\\\mathsfbf\\{\\\\Gamma\\}", '\uD835\uDF58'], ["\\\\rightleftharpoonsup", '\u2968'], ['\\\\mathsl\\{\\\\Upsilon\\}', '\uD835\uDEF6'], ["\\\\cyrchar\\\\cyriotlyus", '\u0469'], ["\\\\nVtwoheadrightarrow", '\u2901'], ["\\\\mathbit\\{\\\\varrho\\}", '\uD835\uDF54'], ["\\\\mathsfbf\\{\\\\nabla\\}", '\uD835\uDF6F'], ["\\\\mathsfbf\\{\\\\Sigma\\}", '\uD835\uDF68'], ["\\\\cyrchar\\\\CYRIOTLYUS", '\u0468'], ["\\\\diamondleftarrowbar", '\u291F'], ["\\\\cyrchar\\\\CYRCHLDSC", '\u04CB'], ["\\\\longleftsquigarrow", '\u2B33'], ["\\\\textfrac\\{2\\}\\{5\\}", '\u2156'], ["\\\\RightDownTeeVector", '\u295D'], ["\\\\textfrac\\{7\\}\\{8\\}", '\u215E'], ["\\\\DownRightVectorBar", '\u2957'], ["\\\\mathrm\\{'\\\\Omega\\}", '\u038F'], ["\\\\textfrac\\{5\\}\\{8\\}", '\u215D'], ["\\\\rightpentagonblack", '\u2B53'], ["\\\\rightarrowbsimilar", '\u2B4C'], ["\\\\textfrac\\{3\\}\\{8\\}", '\u215C'], ["\\\\blackinwhitesquare", '\u25A3'], ["\\\\bsimilarrightarrow", '\u2B47'], ["\\\\textfrac\\{1\\}\\{8\\}", '\u215B'], ["\\\\textfrac\\{5\\}\\{6\\}", '\u215A'], ["\\\\errbarblackdiamond", '\u29F1'], ["\\\\mathbf\\{\\\\varrho\\}", '\uD835\uDEE0'], ["\\\\textfrac\\{1\\}\\{6\\}", '\u2159'], ["\\\\parallelogramblack", '\u25B0'], ["\\\\precedesnotsimilar", '\u22E8'], ["\\\\ccwundercurvearrow", '\u293F'], ["\\\\textfrac\\{4\\}\\{5\\}", '\u2158'], ["\\\\inversewhitecircle", '\u25D9'], ["\\\\textfrac\\{3\\}\\{5\\}", '\u2157'], ["\\\\textfrac\\{1\\}\\{5\\}", '\u2155'], ["\\\\mathbit\\{\\\\varpi\\}", '\uD835\uDF55'], ["\\\\DownRightTeeVector", '\u295F'], ["\\{\\{/\\}\\\\!\\\\!\\{/\\}\\}", '\u2AFD'], ["\\\\textfrac\\{1\\}\\{3\\}", '\u2153'], ["\\\\mathbit\\{\\\\nabla\\}", '\uD835\uDF35'], ["\\\\mathbit\\{\\\\Omega\\}", '\uD835\uDF34'], ["\\\\overleftrightarrow", '\u20E1'], ["\\\\acute\\{\\\\epsilon\\}", '\u03AD'], ["\\\\mathbit\\{\\\\Sigma\\}", '\uD835\uDF2E'], ["\\\\mathbf\\{\\\\Lambda\\}", '\uD835\uDEB2'], ['\\\\acute\\{\\\\upsilon\\}', '\u03CD'], ["\\\\mathbit\\{\\\\Theta\\}", '\uD835\uDF23'], ["\\\\mathbit\\{\\\\Delta\\}", '\uD835\uDF1F'], ["\\\\mathbit\\{\\\\Gamma\\}", '\uD835\uDF1E'], ["\\\\mathsfbfsl\\{\\\\Xi\\}", '\uD835\uDF9D'], ["\\\\mathsl\\{\\\\varrho\\}", '\uD835\uDF1A'], ["\\\\RightDownVectorBar", '\u2955'], ["\\\\textperiodcentered", '\u02D9'], ["\\\\textfrac\\{2\\}\\{3\\}", '\u2154'], ["\\\\hspace\\{0\\.166em\\}", '\u2006'], ["\\\\,|\\\\hspace\\{0\\.167em\\}", '\u2009'], ["\\\\circletophalfblack", '\u25D3'], ["\\\\rule\\{1em\\}\\{1pt\\}", '\u2015'], ["\\\\curvearrowleftplus", '\u293D'], ["\\\\rightarrowtriangle", '\u21FE'], ["\\\\Longleftrightarrow", '\u27FA'], ["\\\\cyrchar\\\\cyrabhdze", '\u04E1'], ["\\\\longleftrightarrow", '\u27F7'], ["\\\\blacktriangleright", '\u25B8'], ["\\\\circleonrightarrow", '\u21F4'], ["\\\\cyrchar\\\\CYRABHDZE", '\u04E0'], ["\\\\nVtwoheadleftarrow", '\u2B35'], ["\\\\rightrightharpoons", '\u2964'], ["\\\\cyrchar\\\\CYRCHRDSC", '\u04B6'], ["\\\\trianglerightblack", '\u25EE'], ["\\\\cyrchar\\\\cyrchldsc", '\u04CC'], ["\\\\cyrchar\\\\cyrchrdsc", '\u04B7'], ["\\\\mathsfbfsl\\{\\\\Pi\\}", '\uD835\uDF9F'], ["\\\\nvtwoheadleftarrow", '\u2B34'], ["\\\\textpertenthousand", '\u2031'], ["\\\\circledwhitebullet", '\u29BE'], ["\\\\cyrchar\\\\CYRCHVCRS", '\u04B8'], ["\\\\cyrchar\\\\cyrchvcrs", '\u04B9'], ["\\\\mathsl\\{\\\\Lambda\\}", '\uD835\uDEEC'], ["\\\\blacktriangleleft", '\u25C2'], ["\\\\mathsl\\{\\\\Theta\\}", '\uD835\uDEE9'], ["\\\\blacktriangledown", '\u25BE'], ["\\\\mathsl\\{\\\\Delta\\}", '\uD835\uDEE5'], ["\\\\whitepointerright", '\u25BB'], ["\\\\blackpointerright", '\u25BA'], ["\\\\mathsl\\{\\\\Gamma\\}", '\uD835\uDEE4'], ["\\\\mathbf\\{\\\\Gamma\\}", '\uD835\uDEAA'], ["\\\\mathbf\\{\\\\varpi\\}", '\uD835\uDEE1'], ["\\\\mathbf\\{\\\\Delta\\}", '\uD835\uDEAB'], ["\\\\mathbf\\{\\\\Theta\\}", '\uD835\uDEAF'], ["\\\\mathbf\\{\\\\theta\\}", '\uD835\uDEC9'], ["\\\\mathbf\\{\\\\nabla\\}", '\uD835\uDEC1'], ["\\\\mathbf\\{\\\\Omega\\}", '\uD835\uDEC0'], ['\\\\uprightcurvearrow', '\u2934'], ["\\\\mathbf\\{\\\\Sigma\\}", '\uD835\uDEBA'], ["\\\\similarrightarrow", '\u2972'], ["\\\\rightarrowdiamond", '\u291E'], ["\\\\rightarrowsimilar", '\u2974'], ["\\\\cyrchar\\\\CYRKBEAK", '\u04A0'], ["\\\\LeftDownVectorBar", '\u2959'], ["\\\\cyrchar\\\\CYRABHHA", '\u04A8'], ["\\\\cyrchar\\\\cyrabhha", '\u04A9'], ["\\\\cyrchar\\\\cyrkhcrs", '\u049F'], ["\\\\cyrchar\\\\CYRKHCRS", '\u049E'], ["\\\\cyrchar\\\\cyrkvcrs", '\u049D'], ["\\\\downslopeellipsis", '\u22F1'], ["\\\\cyrchar\\\\CYRKVCRS", '\u049C'], ["\\\\cyrchar\\\\cyrzhdsc", '\u0497'], ["\\\\cyrchar\\\\CYRZHDSC", '\u0496'], ["\\\\cyrchar\\\\cyrghcrs", '\u0493'], ["\\\\cyrchar\\\\CYRGHCRS", '\u0492'], ["\\\\rightarrowonoplus", '\u27F4'], ["\\\\acwgapcirclearrow", '\u27F2'], ["\\\\measuredangleleft", '\u299B'], ["\\\\cyrchar\\\\CYRYHCRS", '\u04B0'], ["\\\\cyrchar\\\\cyryhcrs", '\u04B1'], ["\\\\cyrchar\\\\CYRTETSE", '\u04B4'], ["\\\\cyrchar\\\\cyrtetse", '\u04B5'], ["\\\\cyrchar\\\\cyrrtick", '\u048F'], ["\\\\cyrchar\\\\CYRRTICK", '\u048E'], ["\\\\cyrchar\\\\CYRABHCH", '\u04BC'], ["\\\\cyrchar\\\\cyrabhch", '\u04BD'], ["\\\\cyrchar\\\\cyrkoppa", '\u0481'], ["\\\\cyrchar\\\\CYRKOPPA", '\u0480'], ["\\\\RightUpDownVector", '\u294F'], ["\\\\errbarblacksquare", '\u29EF'], ["\\\\errbarblackcircle", '\u29F3'], ["\\\\cyrchar\\\\cyromega", '\u0461'], ["\\\\cyrchar\\\\CYROMEGA", '\u0460'], ["\\\\mathsfbf\\{\\\\Psi\\}", '\uD835\uDF6D'], ["\\\\mathsfbf\\{\\\\Phi\\}", '\uD835\uDF6B'], ["\\\\mathsl\\{\\\\varpi\\}", '\uD835\uDF1B'], ["\\\\mathsl\\{\\\\nabla\\}", '\uD835\uDEFB'], ["\\\\mathsl\\{\\\\Omega\\}", '\uD835\uDEFA'], ["\\\\mathsl\\{\\\\Sigma\\}", '\uD835\uDEF4'], ["\\\\cyrchar\\\\cyrkbeak", '\u04A1'], ["\\\\cyrchar\\\\cyrushrt", '\u045E'], ["\\\\cyrchar\\\\cyrsftsn", '\u044C'], ["\\\\cyrchar\\\\cyrhrdsn", '\u044A'], ["\\\\cyrchar\\\\cyrishrt", '\u0439'], ["\\\\cyrchar\\\\CYRSFTSN", '\u042C'], ["\\\\cyrchar\\\\CYRHRDSN", '\u042A'], ["\\\\twoheadrightarrow", '\u21A0'], ["\\\\cyrchar\\\\CYRISHRT", '\u0419'], ["\\\\cyrchar\\\\CYRUSHRT", '\u040E'], ["\\\\varhexagonlrbonds", '\u232C'], ["\\\\DownLeftTeeVector", '\u295E'], ["\\\\mathbb\\{\\\\Gamma\\}", '\u213E'], ["\\\\mathbb\\{\\\\gamma\\}", '\u213D'], ['\\\\ddot\\{\\\\upsilon\\}', '\u03CB'], ["\\\\varcarriagereturn", '\u23CE'], ["\\\\cyrchar\\\\CYRSCHWA", '\u04D8'], ["\\\\cyrchar\\\\cyrschwa", '\u04D9'], ["\\\\hspace\\{0\\.33em\\}", '\u2004'], ["\\\\hspace\\{0\\.25em\\}", '\u2005'], ["\\\\textquotedblright", '\u201D'], ["\\\\textthreequarters", '\xBE'], ["\\\\textasciidieresis", '\xA8'], ["\\\\diamondrightblack", '\u2B17'], ["\\\\circleonleftarrow", '\u2B30'], ["\\\\bsimilarleftarrow", '\u2B41'], ["\\\\LeftDownTeeVector", '\u2961'], ["\\\\leftarrowbsimilar", '\u2B4B'], ["\\\\triangleleftblack", '\u25ED'], ["\\\\leftrightharpoons", '\u21CB'], ["\\\\cwundercurvearrow", '\u293E'], ["\\\\DownLeftVectorBar", '\u2956'], ["\\\\rightleftharpoons", '\u21CC'], ["\\\\circleurquadblack", '\u25D4'], ["\\\\mathsfbf\\{\\\\phi\\}", '\uD835\uDF8D'], ["\\\\leftarrowtriangle", '\u21FD'], ["\\\\mathbb\\{\\\\Sigma\\}", '\u2140'], ["\\\\textordmasculine", '\xBA'], ["\\\\nvleftrightarrow", '\u21F9'], ["\\\\twoheadleftarrow", '\u219E'], ["\\\\diamondleftblack", '\u2B16'], ["\\\\cyrchar\\\\CYRSHCH", '\u0429'], ["\\\\leftarrowsimilar", '\u2973'], ["\\\\cyrchar\\\\CYREREV", '\u042D'], ["\\\\downdownharpoons", '\u2965'], ["\\\\leftarrowonoplus", '\u2B32'], ["\\\\cyrchar\\\\cyrshch", '\u0449'], ["\\\\cyrchar\\\\cyrerev", '\u044D'], ["\\\\cyrchar\\\\cyrtshe", '\u045B'], ["\\\\leftrightharpoon", '\u294A'], ["\\\\rightleftharpoon", '\u294B'], ["\\\\mathbit\\{\\\\Phi\\}", '\uD835\uDF31'], ["\\\\mathbit\\{\\\\Psi\\}", '\uD835\uDF33'], ["\\\\mathbit\\{\\\\phi\\}", '\uD835\uDF53'], ["\\\\cyrchar\\\\cyrdzhe", '\u045F'], ["\\\\mathsfbf\\{\\\\Xi\\}", '\uD835\uDF63'], ["\\\\leftleftharpoons", '\u2962'], ["\\\\RightUpVectorBar", '\u2954'], ["\\\\mathsfbf\\{\\\\Pi\\}", '\uD835\uDF65'], ["\\\\rightrightarrows", '\u21C9'], ["\\\\cyrchar\\\\CYRIOTE", '\u0464'], ["\\\\rightarrowsupset", '\u2B44'], ["\\\\cyrchar\\\\cyriote", '\u0465'], ["\\\\cyrchar\\\\CYRLYUS", '\u0466'], ["\\\\cyrchar\\\\cyrlyus", '\u0467'], ["\\\\cyrchar\\\\CYRBYUS", '\u046A'], ["\\\\similarleftarrow", '\u2B49'], ["\\\\DownArrowUpArrow", '\u21F5'], ["\\\\cyrchar\\\\CYRFITA", '\u0472'], ["\\\\RightTriangleBar", '\u29D0'], ["\\\\twoheaddownarrow", '\u21A1'], ["\\\\cyrchar\\\\cyrshha", '\u04BB'], ["\\\\cyrchar\\\\CYRSHHA", '\u04BA'], ["\\\\openbracketright", '\u301B'], ["\\\\sphericalangleup", '\u29A1'], ["\\\\whitepointerleft", '\u25C5'], ["\\\\cyrchar\\\\cyrhdsc", '\u04B3'], ["\\\\cyrchar\\\\CYRHDSC", '\u04B2'], ["\\\\cwgapcirclearrow", '\u27F3'], ["\\\\blackpointerleft", '\u25C4'], ["<\\\\kern\\-0\\.58em\\(", '\u2993'], ["\\\\rightthreearrows", '\u21F6'], ["\\\\ntrianglerighteq", '\u22ED'], ["\\\\cyrchar\\\\CYRZDSC", '\u0498'], ["\\\\cyrchar\\\\cyrzdsc", '\u0499'], ["\\\\acwunderarcarrow", '\u293B'], ["\\\\nVleftrightarrow", '\u21FC'], ["\\\\cyrchar\\\\CYRKDSC", '\u049A'], ["\\\\nvLeftrightarrow", '\u2904'], ["\\\\cyrchar\\\\cyrkdsc", '\u049B'], ["\\\\cyrchar\\\\cyrtdsc", '\u04AD'], ["\\\\cyrchar\\\\CYRTDSC", '\u04AC'], ["\\\\cyrchar\\\\cyrsdsc", '\u04AB'], ["\\\\cyrchar\\\\CYRSDSC", '\u04AA'], ["\\\\LeftUpDownVector", '\u2951'], ["\\\\RightUpTeeVector", '\u295C'], ["\\\\rightarrowapprox", '\u2975'], ["\\\\hermitconjmatrix", '\u22B9'], ["\\\\downharpoonright", '\u21C2'], ["\\\\rightharpoondown", '\u21C1'], ["\\\\hspace\\{0\\.6em\\}", '\u2002'], ["\\\\cyrchar\\\\cyrotld", '\u04E9'], ["\\\\cyrchar\\\\CYROTLD", '\u04E8'], ["\\\\circlearrowright", '\u21BB'], ["\\\\textquotedblleft", '\u201C'], ["\\\\vartriangleright", '\u22B3'], ["\\\\cyrchar\\\\CYRNDSC", '\u04A2'], ["\\\\acute\\{\\\\omega\\}", '\u03CE'], ["\\\\textvisiblespace", '\u2423'], ["\\\\cyrchar\\\\cyrndsc", '\u04A3'], ["\\\\APLrightarrowbox", '\u2348'], ["\\\\cyrchar\\\\CYRTSHE", '\u040B'], ["\\\\textquestiondown", '\xBF'], ["\\\\diamondleftarrow", '\u291D'], ["\\\\cyrchar\\\\CYRDZHE", '\u040F'], ["\\\\LeftRightVector", '\u294E'], ["\\\\acwoverarcarrow", '\u293A'], ["\\\\acwleftarcarrow", '\u2939'], ["\\\\cwrightarcarrow", '\u2938'], ["\\\\cyrchar\\\\CYRPHK", '\u04A6'], ["\\\\cyrchar\\\\cyrphk", '\u04A7'], ['\\\\upslopeellipsis', '\u22F0'], ["\\\\downarrowbarred", '\u2908'], ["\\\\cyrchar\\\\CYRKHK", '\u04C3'], ["\\\\cyrchar\\\\cyrkhk", '\u04C4'], ["\\\\mathbit\\{\\\\Pi\\}", '\uD835\uDF2B'], ["\\\\mathbit\\{\\\\Xi\\}", '\uD835\uDF29'], ["\\\\mathsl\\{\\\\phi\\}", '\uD835\uDF19'], ["\\\\mathsl\\{\\\\Psi\\}", '\uD835\uDEF9'], ["\\\\mathsl\\{\\\\Phi\\}", '\uD835\uDEF7'], ["\\\\cyrchar\\\\CYRNHK", '\u04C7'], ["\\\\cyrchar\\\\cyrnhk", '\u04C8'], ["\\\\perspcorrespond", '\u2306'], ["\\\\APLleftarrowbox", '\u2347'], ["\\\\APLdownarrowbox", '\u2357'], ["\\\\circledrightdot", '\u2686'], ["\\\\textperthousand", '\u2030'], ["\\\\enclosetriangle", '\u20E4'], ["\\\\widebridgeabove", '\u20E9'], ["\\\\blockhalfshaded", '\u2592'], ['\\\\underrightarrow', '\u20EF'], ['\\\\urblacktriangle', '\u25E5'], ['\\\\ulblacktriangle', '\u25E4'], ["\\\\llblacktriangle", '\u25E3'], ["\\\\lrblacktriangle", '\u25E2'], ["\\\\bigtriangledown", '\u25BD'], ["\\\\mathbf\\{\\\\phi\\}", '\uD835\uDEDF'], ["\\\\vrectangleblack", '\u25AE'], ["\\\\hrectangleblack", '\u25AC'], ["\\\\squarecrossfill", '\u25A9'], ["\\\\mathbf\\{\\\\Psi\\}", '\uD835\uDEBF'], ["\\\\mathbf\\{\\\\Phi\\}", '\uD835\uDEBD'], ["\\\\rightsquigarrow", '\u21DD'], ["\\\\vartriangleleft", '\u22B2'], ["\\\\trianglerighteq", '\u22B5'], ["\\\\nLeftrightarrow", '\u21CE'], ["\\\\greaterequivlnt", '\u2273'], ["\\\\rightwhitearrow", '\u21E8'], ["\\\\mathsfbfsl\\{z\\}", '\uD835\uDE6F'], ["\\\\mathsfbfsl\\{y\\}", '\uD835\uDE6E'], ["\\\\mathsfbfsl\\{x\\}", '\uD835\uDE6D'], ["\\\\mathsfbfsl\\{w\\}", '\uD835\uDE6C'], ["\\\\mathsfbfsl\\{v\\}", '\uD835\uDE6B'], ["\\\\mathsfbfsl\\{u\\}", '\uD835\uDE6A'], ["\\\\mathsfbfsl\\{t\\}", '\uD835\uDE69'], ["\\\\mathsfbfsl\\{s\\}", '\uD835\uDE68'], ["\\\\mathsfbfsl\\{r\\}", '\uD835\uDE67'], ["\\\\mathsfbfsl\\{q\\}", '\uD835\uDE66'], ["\\\\mathsfbfsl\\{p\\}", '\uD835\uDE65'], ["\\\\mathsfbfsl\\{o\\}", '\uD835\uDE64'], ["\\\\mathsfbfsl\\{n\\}", '\uD835\uDE63'], ["\\\\mathsfbfsl\\{m\\}", '\uD835\uDE62'], ["\\\\mathsfbfsl\\{l\\}", '\uD835\uDE61'], ["\\\\mathsfbfsl\\{k\\}", '\uD835\uDE60'], ["\\\\mathsfbfsl\\{j\\}", '\uD835\uDE5F'], ["\\\\mathsfbfsl\\{i\\}", '\uD835\uDE5E'], ["\\\\mathsfbfsl\\{h\\}", '\uD835\uDE5D'], ["\\\\mathsfbfsl\\{g\\}", '\uD835\uDE5C'], ["\\\\mathsfbfsl\\{f\\}", '\uD835\uDE5B'], ["\\\\mathsfbfsl\\{e\\}", '\uD835\uDE5A'], ["\\\\mathsfbfsl\\{d\\}", '\uD835\uDE59'], ["\\\\mathsfbfsl\\{c\\}", '\uD835\uDE58'], ["\\\\mathsfbfsl\\{b\\}", '\uD835\uDE57'], ["\\\\mathsfbfsl\\{a\\}", '\uD835\uDE56'], ["\\\\mathsfbfsl\\{Z\\}", '\uD835\uDE55'], ["\\\\mathsfbfsl\\{Y\\}", '\uD835\uDE54'], ["\\\\mathsfbfsl\\{X\\}", '\uD835\uDE53'], ["\\\\mathsfbfsl\\{W\\}", '\uD835\uDE52'], ["\\\\mathsfbfsl\\{V\\}", '\uD835\uDE51'], ["\\\\mathsfbfsl\\{U\\}", '\uD835\uDE50'], ["\\\\mathsfbfsl\\{T\\}", '\uD835\uDE4F'], ["\\\\mathsfbfsl\\{S\\}", '\uD835\uDE4E'], ["\\\\mathsfbfsl\\{R\\}", '\uD835\uDE4D'], ["\\\\mathsfbfsl\\{Q\\}", '\uD835\uDE4C'], ["\\\\mathsfbfsl\\{P\\}", '\uD835\uDE4B'], ["\\\\mathsfbfsl\\{O\\}", '\uD835\uDE4A'], ["\\\\mathsfbfsl\\{N\\}", '\uD835\uDE49'], ["\\\\mathsfbfsl\\{M\\}", '\uD835\uDE48'], ["\\\\mathsfbfsl\\{L\\}", '\uD835\uDE47'], ["\\\\mathsfbfsl\\{K\\}", '\uD835\uDE46'], ["\\\\mathsfbfsl\\{J\\}", '\uD835\uDE45'], ["\\\\mathsfbfsl\\{I\\}", '\uD835\uDE44'], ["\\\\mathsfbfsl\\{H\\}", '\uD835\uDE43'], ["\\\\mathsfbfsl\\{G\\}", '\uD835\uDE42'], ["\\\\mathsfbfsl\\{F\\}", '\uD835\uDE41'], ["\\\\mathsfbfsl\\{E\\}", '\uD835\uDE40'], ["\\\\mathsfbfsl\\{D\\}", '\uD835\uDE3F'], ["\\\\mathsfbfsl\\{C\\}", '\uD835\uDE3E'], ["\\\\mathsfbfsl\\{B\\}", '\uD835\uDE3D'], ["\\\\mathsfbfsl\\{A\\}", '\uD835\uDE3C'], ["\\\\textquotesingle", "'"], ["\\\\openbracketleft", '\u301A'], ["\\\\leftarrowapprox", '\u2B4A'], ["\\\\leftcurvedarrow", '\u2B3F'], ["\\\\nVleftarrowtail", '\u2B3A'], ["\\\\nvleftarrowtail", '\u2B39'], ["\\\\twoheadmapsfrom", '\u2B36'], ["\\\\leftthreearrows", '\u2B31'], ["\\\\varhexagonblack", '\u2B22'], ["\\\\diamondbotblack", '\u2B19'], ["\\\\diamondtopblack", '\u2B18'], ["\\\\leftrightarrows", '\u21C6'], ["\\\\textordfeminine", '\xAA'], ["\\\\textasciimacron", '\xAF'], ["\\\\rightleftarrows", '\u21C4'], ["\\\\downharpoonleft", '\u21C3'], ["\\\\rightthreetimes", '\u22CC'], ["\\\\leftharpoondown", '\u21BD'], ["\\\\acute\\{\\\\iota\\}", '\u03AF'], ["\\\\circlearrowleft", '\u21BA'], ["\\\\cyrchar\\\\CYRDJE", '\u0402'], ["\\\\cyrchar\\\\CYRDZE", '\u0405'], ["\\\\verymuchgreater", '\u22D9'], ["\\\\cyrchar\\\\CYRLJE", '\u0409'], ["\\\\cyrchar\\\\CYRNJE", '\u040A'], ["\\\\cyrchar\\\\CYRERY", '\u042B'], ["\\\\curvearrowright", '\u21B7'], ["\\\\not\\\\sqsubseteq", '\u22E2'], ["\\\\not\\\\sqsupseteq", '\u22E3'], ["\\\\bigtriangleleft", '\u2A1E'], ["\\\\cyrchar\\\\cyrery", '\u044B'], ["\\\\cyrchar\\\\cyrdje", '\u0452'], ["\\\\cyrchar\\\\cyrdze", '\u0455'], ["\\\\cyrchar\\\\cyrlje", '\u0459'], ["\\\\cyrchar\\\\cyrnje", '\u045A'], ["\\\\nleftrightarrow", '\u21AE'], ["\\\\cyrchar\\\\CYRYAT", '\u0462'], ["\\\\circledownarrow", '\u29EC'], ["\\\\cyrchar\\\\CYRKSI", '\u046E'], ["\\\\cyrchar\\\\cyrksi", '\u046F'], ["\\\\cyrchar\\\\CYRPSI", '\u0470'], ["\\\\cyrchar\\\\cyrpsi", '\u0471'], ["\\\\cyrchar\\\\CYRIZH", '\u0474'], ["\\\\LeftTriangleBar", '\u29CF'], ['\\\\uparrowoncircle', '\u29BD'], ["\\\\circledparallel", '\u29B7'], ["\\\\measangledltosw", '\u29AF'], ["\\\\measangledrtose", '\u29AE'], ["\\\\measangleultonw", '\u29AD'], ["\\\\measangleurtone", '\u29AC'], ["\\\\measangleldtosw", '\u29AB'], ["\\\\measanglerdtose", '\u29AA'], ["\\\\measanglelutonw", '\u29A9'], ["\\\\measanglerutone", '\u29A8'], ["\\\\cyrchar\\\\CYRGUP", '\u0490'], ["\\\\cyrchar\\\\cyrgup", '\u0491'], ["\\\\ntrianglelefteq", '\u22EC'], ["\\\\cyrchar\\\\CYRGHK", '\u0494'], ["\\\\cyrchar\\\\cyrghk", '\u0495'], ["\\\\leftarrowsubset", '\u297A'], ["\\\\equalrightarrow", '\u2971'], ["\\\\barrightharpoon", '\u296D'], ["\\\\rightbarharpoon", '\u296C'], ["\\\\LeftUpTeeVector", '\u2960'], ["\\\\LeftUpVectorBar", '\u2958'], ["\\\\notgreaterless", '\u2279'], ["\\\\rightouterjoin", '\u27D6'], ["\\\\mathbf\\{\\\\Pi\\}", '\uD835\uDEB7'], ["\\\\rightarrowtail", '\u21A3'], ["\\\\cyrchar\\\\cyrot", '\u047F'], ["\\\\cyrchar\\\\CYRUK", '\u0478'], ["\\\\cyrchar\\\\CYROT", '\u047E'], ['\\\\underleftarrow', '\u20EE'], ["\\\\triangleserifs", '\u29CD'], ["\\\\blackhourglass", '\u29D7'], ["\\\\downdownarrows", '\u21CA'], ["\\\\approxnotequal", '\u2246'], ["\\\\leftsquigarrow", '\u21DC'], ["\\\\mathsl\\{\\\\Pi\\}", '\uD835\uDEF1'], ["\\\\mathsl\\{\\\\Xi\\}", '\uD835\uDEEF'], ["\\\\cyrchar\\\\cyrje", '\u0458'], ["\\\\cyrchar\\\\cyryi", '\u0457'], ["\\\\cyrchar\\\\cyrii", '\u0456'], ["\\\\cyrchar\\\\cyrie", '\u0454'], ["\\\\cyrchar\\\\cyryo", '\u0451'], ["\\\\cyrchar\\\\cyrya", '\u044F'], ["\\\\cyrchar\\\\cyryu", '\u044E'], ["\\\\cyrchar\\\\cyrsh", '\u0448'], ["\\\\cyrchar\\\\cyrch", '\u0447'], ["\\\\carriagereturn", '\u21B5'], ["\\\\cyrchar\\\\cyrzh", '\u0436'], ["\\\\cyrchar\\\\CYRYA", '\u042F'], ["\\\\cyrchar\\\\CYRYU", '\u042E'], ["\\\\curvearrowleft", '\u21B6'], ["\\\\cyrchar\\\\CYRSH", '\u0428'], ["\\\\cyrchar\\\\CYRCH", '\u0427'], ["\\\\bigslopedwedge", '\u2A58'], ["\\\\wedgedoublebar", '\u2A60'], ["\\\\twoheaduparrow", '\u219F'], ["\\\\arrowwaveleft|\\\\arrowwaveright", '\u219C'], ["\\\\cyrchar\\\\CYRZH", '\u0416'], ["\\\\leftrightarrow", '\u2194'], ["\\\\cyrchar\\\\CYRJE", '\u0408'], ["\\\\cyrchar\\\\CYRYI", '\u0407'], ["\\\\cyrchar\\\\CYRII", '\u0406'], ["\\\\cyrchar\\\\CYRIE", '\u0404'], ["\\\\mathbb\\{\\\\Pi\\}", '\u213F'], ["\\\\cyrchar\\\\CYRYO", '\u0401'], ["\\\\APLboxquestion", '\u2370'], ["\\\\ddot\\{\\\\iota\\}", '\u03CA'], ["\\\\mathbb\\{\\\\pi\\}", '\u213C'], ["\\\\hookrightarrow", '\u21AA'], ["\\\\lparenextender", '\u239C'], ["\\\\rparenextender", '\u239F'], ["\\\\acute\\{\\\\eta\\}", '\u03AE'], ["\\\\lbrackextender", '\u23A2'], ["\\\\NestedLessLess", '\u2AA1'], ["\\\\rbrackextender", '\u23A5'], ["\\\\vbraceextender", '\u23AA'], ["\\\\harrowextender", '\u23AF'], ["\\\\cyrchar\\\\CYRAE", '\u04D4'], ["\\\\cyrchar\\\\cyrae", '\u04D5'], ["\\\\circledtwodots", '\u2687'], ['\\\\upharpoonright', '\u21BE'], ["\\\\ocommatopright", '\u0315'], ["\\\\rightharpoonup", '\u21C0'], ["\\\\leftthreetimes", '\u22CB'], ["\\\\rightarrowplus", '\u2945'], ["\\\\textasciibreve", '\u02D8'], ["\\\\textasciicaron", '\u02C7'], ["\\\\textdoublepipe", '\u01C2'], ["\\\\textonequarter", '\xBC'], ["\\\\guillemotright", '\xBB'], ["\\\\mathrm\\{\\\\mu\\}", '\xB5'], ["\\\\textasciiacute", '\xB4'], ["\\\\guilsinglright", '\u203A'], ["\\\\cyrchar\\\\CYRNG", '\u04A4'], ["\\\\looparrowright", '\u21AC'], ["\\\\textregistered", '\xAE'], ["\\\\dblarrowupdown", '\u21C5'], ["\\\\textexclamdown", '\xA1'], ["\\\\squaretopblack", '\u2B12'], ["\\\\squarebotblack", '\u2B13'], ["\\\\textasciigrave", '`'], ["\\\\leftleftarrows", '\u21C7'], ["\\\\enclosediamond", '\u20DF'], ["\\\\Longrightarrow", '\u27F9'], ["\\\\equalleftarrow", '\u2B40'], ["\\\\blockrighthalf", '\u2590'], ["\\\\blockqtrshaded", '\u2591'], ["\\\\RightVectorBar", '\u2953'], ["\\\\ntriangleright", '\u22EB'], ["\\\\longrightarrow", '\u27F6'], ['\\\\updownarrowbar', '\u21A8'], ["\\\\cyrchar\\\\cyrng", '\u04A5'], ["\\\\rightanglemdot", '\u299D'], ["\\\\concavediamond", '\u27E1'], ["\\\\rdiagovsearrow", '\u2930'], ["\\\\fdiagovnearrow", '\u292F'], ["\\\\leftbarharpoon", '\u296A'], ["\\\\trianglelefteq", '\u22B4'], ["\\\\circlevertfill", '\u25CD'], ["\\\\barleftharpoon", '\u296B'], ["\\\\dashrightarrow", '\u21E2'], ["\\\\RightTeeVector", '\u295B'], ["\\\\cyrchar\\\\cyruk", '\u0479'], ["\\\\downwhitearrow", '\u21E9'], ["\\\\squarenwsefill", '\u25A7'], ["\\\\Leftrightarrow", '\u21D4'], ["\\\\squareneswfill", '\u25A8'], ["\\\\leftwhitearrow", '\u21E6'], ["\\\\mathbf\\{\\\\Xi\\}", '\uD835\uDEB5'], ["\\\\sphericalangle", '\u2222'], ["\\\\notlessgreater", '\u2278'], ["\\\\downdasharrow", '\u21E3'], ["\\\\mathsfbf\\{R\\}", '\uD835\uDDE5'], ["\\\\mathslbb\\{D\\}", '\uD835\uDD6F'], ["\\\\mathfrak\\{H\\}", '\u210C'], ["\\\\mathslbb\\{E\\}", '\uD835\uDD70'], ["\\\\RightArrowBar", '\u21E5'], ["\\\\measuredangle", '\u2221'], ["\\\\mathslbb\\{F\\}", '\uD835\uDD71'], ["\\\\mathsfbf\\{S\\}", '\uD835\uDDE6'], ["\\\\mathslbb\\{O\\}", '\uD835\uDD7A'], ["\\\\biginterleave", '\u2AFC'], ["\\\\mathsfsl\\{Y\\}", '\uD835\uDE20'], ["\\\\mathsfsl\\{X\\}", '\uD835\uDE1F'], ["\\\\textbrokenbar", '\xA6'], ["\\\\mathsfsl\\{W\\}", '\uD835\uDE1E'], ["\\\\textcopyright", '\xA9'], ["\\\\guillemotleft", '\xAB'], ["\\\\textparagraph", '\xB6'], ["\\\\guilsinglleft", '\u2039'], ["\\\\mathsfsl\\{V\\}", '\uD835\uDE1D'], ["\\\\mathslbb\\{P\\}", '\uD835\uDD7B'], ["\\\\mathslbb\\{Q\\}", '\uD835\uDD7C'], ["\\\\mathfrak\\{Z\\}", '\u2128'], ["\\\\mathsfsl\\{U\\}", '\uD835\uDE1C'], ["\\\\shortdowntack", '\u2ADF'], ["\\\\shortlefttack", '\u2ADE'], ["\\\\textdaggerdbl", '\u2021'], ["\\\\mathfrak\\{C\\}", '\u212D'], ["\\\\mathslbb\\{R\\}", '\uD835\uDD7D'], ["\\\\mathslbb\\{S\\}", '\uD835\uDD7E'], ["\\\\mathslbb\\{T\\}", '\uD835\uDD7F'], ["\\\\divideontimes", '\u22C7'], ["\\\\mathslbb\\{U\\}", '\uD835\uDD80'], ["\\\\mathslbb\\{V\\}", '\uD835\uDD81'], ["\\\\mathslbb\\{W\\}", '\uD835\uDD82'], ["\\\\hookleftarrow", '\u21A9'], ["\\\\mathslbb\\{X\\}", '\uD835\uDD83'], ["\\\\mathsfsl\\{T\\}", '\uD835\uDE1B'], ["\\\\mathsfsl\\{S\\}", '\uD835\uDE1A'], ['\\\\upharpoonleft', '\u21BF'], ["\\\\mathslbb\\{Y\\}", '\uD835\uDD84'], ["\\\\mathsfsl\\{R\\}", '\uD835\uDE19'], ["\\\\mathsfsl\\{Q\\}", '\uD835\uDE18'], ["\\\\mathslbb\\{Z\\}", '\uD835\uDD85'], ["\\\\hphantom\\{,\\}", '\u2008'], ["\\\\mathsfsl\\{P\\}", '\uD835\uDE17'], ["\\\\mathsfsl\\{O\\}", '\uD835\uDE16'], ["\\\\sixteenthnote", '\u266C'], ["\\\\hphantom\\{0\\}", '\u2007'], ["\\\\hspace\\{1em\\}", '\u2003'], ["\\\\Hermaphrodite", '\u26A5'], ["\\\\mathslbb\\{a\\}", '\uD835\uDD86'], ["\\\\mdsmwhtcircle", '\u26AC'], ["\\\\leftharpoonup", '\u21BC'], ["\\\\mathsfsl\\{N\\}", '\uD835\uDE15'], ["\\\\mathsfsl\\{M\\}", '\uD835\uDE14'], ["\\\\cyrchar\\\\cyry", '\u04AF'], ["\\\\mathsfsl\\{L\\}", '\uD835\uDE13'], ["\\\\APLboxupcaret", '\u2353'], ["\\\\APLuparrowbox", '\u2350'], ["\\\\mathsfsl\\{K\\}", '\uD835\uDE12'], ["\\\\mathsfbf\\{b\\}", '\uD835\uDDEF'], ["\\\\sansLmirrored", '\u2143'], ["\\\\mathsfsl\\{J\\}", '\uD835\uDE11'], ["\\\\mathsfbf\\{l\\}", '\uD835\uDDF9'], ["\\\\cyrchar\\\\CYRY", '\u04AE'], ['\\\\uparrowbarred', '\u2909'], ["\\\\DifferentialD", '\u2146'], ["\\\\mathchar\"2208", '\u2316'], ["\\\\cyrchar\\\\CYRA", '\u0410'], ["\\\\cyrchar\\\\CYRB", '\u0411'], ["\\\\cyrchar\\\\CYRV", '\u0412'], ["\\\\cyrchar\\\\CYRG", '\u0413'], ["\\\\cyrchar\\\\CYRD", '\u0414'], ["\\\\cyrchar\\\\CYRE", '\u0415'], ["\\\\cyrchar\\\\CYRZ", '\u0417'], ["\\\\cyrchar\\\\CYRI", '\u0418'], ["\\\\cyrchar\\\\CYRK", '\u041A'], ["\\\\cyrchar\\\\CYRL", '\u041B'], ["\\\\cyrchar\\\\CYRM", '\u041C'], ["\\\\mathsfsl\\{I\\}", '\uD835\uDE10'], ["\\\\mathsfsl\\{H\\}", '\uD835\uDE0F'], ["\\\\cyrchar\\\\CYRN", '\u041D'], ["\\\\mathsfsl\\{G\\}", '\uD835\uDE0E'], ["\\\\cyrchar\\\\CYRO", '\u041E'], ["\\\\cyrchar\\\\CYRP", '\u041F'], ["\\\\mathslbb\\{b\\}", '\uD835\uDD87'], ["\\\\mathsfbf\\{9\\}", '\uD835\uDFF5'], ["\\\\cyrchar\\\\CYRR", '\u0420'], ["\\\\cyrchar\\\\CYRS", '\u0421'], ["\\\\cyrchar\\\\CYRT", '\u0422'], ["\\\\cyrchar\\\\CYRU", '\u0423'], ["\\\\mathsfbf\\{8\\}", '\uD835\uDFF4'], ["\\\\mathsfbf\\{7\\}", '\uD835\uDFF3'], ["\\\\mathsfbf\\{6\\}", '\uD835\uDFF2'], ["\\\\mathslbb\\{c\\}", '\uD835\uDD88'], ["\\\\mathslbb\\{d\\}", '\uD835\uDD89'], ["\\\\cyrchar\\\\CYRF", '\u0424'], ["\\\\mathslbb\\{e\\}", '\uD835\uDD8A'], ["\\\\cyrchar\\\\CYRH", '\u0425'], ["\\\\cyrchar\\\\CYRC", '\u0426'], ["\\\\mathsfbf\\{5\\}", '\uD835\uDFF1'], ["\\\\mathslbb\\{f\\}", '\uD835\uDD8B'], ["\\\\mathslbb\\{g\\}", '\uD835\uDD8C'], ["\\\\mathslbb\\{h\\}", '\uD835\uDD8D'], ["\\\\mathsfbf\\{4\\}", '\uD835\uDFF0'], ["\\\\mathsfbf\\{3\\}", '\uD835\uDFEF'], ["\\\\looparrowleft", '\u21AB'], ["\\\\mathslbb\\{i\\}", '\uD835\uDD8E'], ["\\\\mathslbb\\{j\\}", '\uD835\uDD8F'], ["\\\\cyrchar\\\\cyra", '\u0430'], ["\\\\cyrchar\\\\cyrb", '\u0431'], ["\\\\cyrchar\\\\cyrv", '\u0432'], ["\\\\cyrchar\\\\cyrg", '\u0433'], ["\\\\cyrchar\\\\cyrd", '\u0434'], ["\\\\mathslbb\\{k\\}", '\uD835\uDD90'], ["\\\\triangletimes", '\u2A3B'], ["\\\\triangleminus", '\u2A3A'], ["\\\\cyrchar\\\\cyre", '\u0435'], ["\\\\mathsfbf\\{2\\}", '\uD835\uDFEE'], ["\\\\mathslbb\\{l\\}", '\uD835\uDD91'], ["\\\\cyrchar\\\\cyrz", '\u0437'], ["\\\\cyrchar\\\\cyri", '\u0438'], ["\\\\mathslbb\\{m\\}", '\uD835\uDD92'], ["\\\\cyrchar\\\\cyrk", '\u043A'], ["\\\\mathslbb\\{n\\}", '\uD835\uDD93'], ["\\\\mathslbb\\{o\\}", '\uD835\uDD94'], ["\\\\mathsfbf\\{c\\}", '\uD835\uDDF0'], ["\\\\mathslbb\\{p\\}", '\uD835\uDD95'], ["\\\\mathslbb\\{q\\}", '\uD835\uDD96'], ["\\\\cyrchar\\\\cyrl", '\u043B'], ["\\\\mathslbb\\{r\\}", '\uD835\uDD97'], ["\\\\cyrchar\\\\cyrm", '\u043C'], ["\\\\mathslbb\\{s\\}", '\uD835\uDD98'], ["\\\\cyrchar\\\\cyrn", '\u043D'], ["\\\\cyrchar\\\\cyro", '\u043E'], ["\\\\cyrchar\\\\cyrp", '\u043F'], ["\\\\cyrchar\\\\cyrr", '\u0440'], ["\\\\cyrchar\\\\cyrs", '\u0441'], ["\\\\cyrchar\\\\cyrt", '\u0442'], ["\\\\cyrchar\\\\cyru", '\u0443'], ["\\\\cyrchar\\\\cyrf", '\u0444'], ["\\\\cyrchar\\\\cyrh", '\u0445'], ["\\\\cyrchar\\\\cyrc", '\u0446'], ["\\\\mathslbb\\{t\\}", '\uD835\uDD99'], ["\\\\mathslbb\\{u\\}", '\uD835\uDD9A'], ["\\\\leftarrowplus", '\u2946'], ["\\\\mathslbb\\{v\\}", '\uD835\uDD9B'], ["\\\\mathslbb\\{w\\}", '\uD835\uDD9C'], ["\\\\mathslbb\\{x\\}", '\uD835\uDD9D'], ["\\\\mathsfbf\\{1\\}", '\uD835\uDFED'], ["\\\\rightdotarrow", '\u2911'], ["\\\\mathslbb\\{y\\}", '\uD835\uDD9E'], ["\\\\mathsfbf\\{0\\}", '\uD835\uDFEC'], ["\\\\leftarrowless", '\u2977'], ["\\\\mathsfbf\\{d\\}", '\uD835\uDDF1'], ["\\\\mathsfsl\\{E\\}", '\uD835\uDE0C'], ["\\\\mathsfsl\\{D\\}", '\uD835\uDE0B'], ["\\\\mathslbb\\{z\\}", '\uD835\uDD9F'], ["\\\\mathsfsl\\{C\\}", '\uD835\uDE0A'], ["\\\\mathsfsl\\{B\\}", '\uD835\uDE09'], ["\\\\mathsfbf\\{e\\}", '\uD835\uDDF2'], ["\\\\fallingdotseq", '\u2252'], ["\\\\mathsfsl\\{A\\}", '\uD835\uDE08'], ["\\\\mathsfbf\\{A\\}", '\uD835\uDDD4'], ["\\\\errbardiamond", '\u29F0'], ["\\\\mathsfbf\\{B\\}", '\uD835\uDDD5'], ["\\\\mathsfbf\\{C\\}", '\uD835\uDDD6'], ["\\\\mathsfbf\\{f\\}", '\uD835\uDDF3'], ["\\\\mathsfbf\\{D\\}", '\uD835\uDDD7'], ["\\\\mathsfbf\\{E\\}", '\uD835\uDDD8'], ["\\\\mathsfbf\\{F\\}", '\uD835\uDDD9'], ["\\\\mathsfbf\\{G\\}", '\uD835\uDDDA'], ["\\\\mathsfbf\\{z\\}", '\uD835\uDE07'], ["\\\\mathsfbf\\{H\\}", '\uD835\uDDDB'], ["\\\\mathsfbf\\{I\\}", '\uD835\uDDDC'], ["\\\\mathsfbf\\{J\\}", '\uD835\uDDDD'], ["\\\\mathsfbf\\{K\\}", '\uD835\uDDDE'], ["\\\\mathsfbf\\{L\\}", '\uD835\uDDDF'], ["\\\\mathsfbf\\{M\\}", '\uD835\uDDE0'], ["\\\\mathsfbf\\{N\\}", '\uD835\uDDE1'], ["\\\\mathsfbf\\{O\\}", '\uD835\uDDE2'], ["\\\\mathsfbf\\{g\\}", '\uD835\uDDF4'], ["\\\\LeftVectorBar", '\u2952'], ["\\\\mathsfbf\\{y\\}", '\uD835\uDE06'], ["\\\\mathsfbf\\{P\\}", '\uD835\uDDE3'], ['\\\\UpEquilibrium', '\u296E'], ["\\\\bigtriangleup", '\u25B3'], ["\\\\blacktriangle", '\u25B4'], ["\\\\rightanglearc", '\u22BE'], ["\\\\dashleftarrow", '\u21E0'], ["\\\\triangleright", '\u25B9'], ["\\\\mathslbb\\{A\\}", '\uD835\uDD6C'], ["\\\\mathsfbf\\{Q\\}", '\uD835\uDDE4'], ["\\\\mathfrak\\{I\\}", '\u2111'], ["\\\\mathslbb\\{B\\}", '\uD835\uDD6D'], ["\\\\not\\\\supseteq", '\u2289'], ["\\\\not\\\\subseteq", '\u2288'], ["\\\\mathslbb\\{C\\}", '\uD835\uDD6E'], ["\\\\mathfrak\\{z\\}", '\uD835\uDD37'], ["\\\\mathfrak\\{y\\}", '\uD835\uDD36'], ["\\\\mathfrak\\{x\\}", '\uD835\uDD35'], ["\\\\mathfrak\\{w\\}", '\uD835\uDD34'], ["\\\\mathfrak\\{v\\}", '\uD835\uDD33'], ["\\\\mathfrak\\{u\\}", '\uD835\uDD32'], ["\\\\mathfrak\\{t\\}", '\uD835\uDD31'], ["\\\\mathfrak\\{s\\}", '\uD835\uDD30'], ["\\\\mathfrak\\{r\\}", '\uD835\uDD2F'], ["\\\\mathfrak\\{q\\}", '\uD835\uDD2E'], ["\\\\mathfrak\\{p\\}", '\uD835\uDD2D'], ["\\\\mathfrak\\{o\\}", '\uD835\uDD2C'], ["\\\\mathfrak\\{n\\}", '\uD835\uDD2B'], ["\\\\mathfrak\\{m\\}", '\uD835\uDD2A'], ["\\\\mathfrak\\{l\\}", '\uD835\uDD29'], ["\\\\mathfrak\\{k\\}", '\uD835\uDD28'], ["\\\\mathfrak\\{j\\}", '\uD835\uDD27'], ["\\\\mathfrak\\{i\\}", '\uD835\uDD26'], ["\\\\mathfrak\\{h\\}", '\uD835\uDD25'], ["\\\\mathfrak\\{g\\}", '\uD835\uDD24'], ["\\\\mathfrak\\{f\\}", '\uD835\uDD23'], ["\\\\mathfrak\\{e\\}", '\uD835\uDD22'], ["\\\\mathfrak\\{d\\}", '\uD835\uDD21'], ["\\\\mathfrak\\{c\\}", '\uD835\uDD20'], ["\\\\mathfrak\\{b\\}", '\uD835\uDD1F'], ["\\\\mathfrak\\{a\\}", '\uD835\uDD1E'], ["\\\\mathfrak\\{Y\\}", '\uD835\uDD1C'], ["\\\\mathfrak\\{X\\}", '\uD835\uDD1B'], ["\\\\mathfrak\\{W\\}", '\uD835\uDD1A'], ["\\\\mathfrak\\{V\\}", '\uD835\uDD19'], ["\\\\mathfrak\\{U\\}", '\uD835\uDD18'], ["\\\\mathfrak\\{T\\}", '\uD835\uDD17'], ["\\\\mathfrak\\{S\\}", '\uD835\uDD16'], ["\\\\mathfrak\\{Q\\}", '\uD835\uDD14'], ["\\\\mathfrak\\{P\\}", '\uD835\uDD13'], ["\\\\mathfrak\\{O\\}", '\uD835\uDD12'], ["\\\\mathfrak\\{N\\}", '\uD835\uDD11'], ["\\\\mathfrak\\{M\\}", '\uD835\uDD10'], ["\\\\mathfrak\\{L\\}", '\uD835\uDD0F'], ["\\\\mathfrak\\{K\\}", '\uD835\uDD0E'], ["\\\\mathfrak\\{J\\}", '\uD835\uDD0D'], ["\\\\mathfrak\\{G\\}", '\uD835\uDD0A'], ["\\\\mathfrak\\{F\\}", '\uD835\uDD09'], ["\\\\mathfrak\\{E\\}", '\uD835\uDD08'], ["\\\\mathfrak\\{D\\}", '\uD835\uDD07'], ["\\\\mathfrak\\{B\\}", '\uD835\uDD05'], ["\\\\mathfrak\\{A\\}", '\uD835\uDD04'], ["\\\\mathsfsl\\{F\\}", '\uD835\uDE0D'], ["\\\\mathslbb\\{G\\}", '\uD835\uDD72'], ["\\\\mathslbb\\{H\\}", '\uD835\uDD73'], ["\\\\topsemicircle", '\u25E0'], ["\\\\botsemicircle", '\u25E1'], ["\\\\mathslbb\\{I\\}", '\uD835\uDD74'], ["\\\\squareulblack", '\u25E9'], ["\\\\mathsfbf\\{x\\}", '\uD835\uDE05'], ["\\\\mathsfbf\\{T\\}", '\uD835\uDDE7'], ["\\\\leftarrowtail", '\u21A2'], ["\\\\mathsfbf\\{w\\}", '\uD835\uDE04'], ["\\\\mathsfbf\\{v\\}", '\uD835\uDE03'], ["\\\\leftouterjoin", '\u27D5'], ["\\\\fullouterjoin", '\u27D7'], ["\\\\mathsfbf\\{u\\}", '\uD835\uDE02'], ["\\\\circledbullet", '\u29BF'], ["\\\\mathsfbf\\{U\\}", '\uD835\uDDE8'], ["\\\\LeftTeeVector", '\u295A'], ["\\\\mathsfbf\\{V\\}", '\uD835\uDDE9'], ["\\\\mathsfbf\\{W\\}", '\uD835\uDDEA'], ["\\\\mathsfbf\\{X\\}", '\uD835\uDDEB'], ["\\\\circledbslash", '\u29B8'], ["\\\\mathsfbf\\{Y\\}", '\uD835\uDDEC'], ["\\\\emptysetoarrl", '\u29B4'], ["\\\\emptysetocirc", '\u29B2'], ["\\\\mathsfbf\\{t\\}", '\uD835\uDE01'], ["\\\\mathsfbf\\{h\\}", '\uD835\uDDF5'], ["\\\\mathsfbf\\{i\\}", '\uD835\uDDF6'], ["\\\\mathsfbf\\{j\\}", '\uD835\uDDF7'], ["\\\\mathsfbf\\{s\\}", '\uD835\uDE00'], ["\\\\wideangledown", '\u29A6'], ["\\\\mathsfbf\\{r\\}", '\uD835\uDDFF'], ["\\\\mathsfbf\\{q\\}", '\uD835\uDDFE'], ["\\\\mathsfbf\\{Z\\}", '\uD835\uDDED'], ["\\\\mathsfbf\\{p\\}", '\uD835\uDDFD'], ["\\\\mathsfbf\\{a\\}", '\uD835\uDDEE'], ["\\\\mathsfbf\\{k\\}", '\uD835\uDDF8'], ["\\\\longleftarrow", '\u27F5'], ["\\\\mathsfsl\\{z\\}", '\uD835\uDE3B'], ["\\\\mathsfsl\\{y\\}", '\uD835\uDE3A'], ["\\\\mathsfsl\\{x\\}", '\uD835\uDE39'], ["\\\\mathsfsl\\{w\\}", '\uD835\uDE38'], ["\\\\mathsfsl\\{v\\}", '\uD835\uDE37'], ["\\\\mathsfsl\\{u\\}", '\uD835\uDE36'], ["\\\\mathsfsl\\{t\\}", '\uD835\uDE35'], ["\\\\mathsfsl\\{s\\}", '\uD835\uDE34'], ["\\\\mathsfsl\\{r\\}", '\uD835\uDE33'], ["\\\\mathsfsl\\{q\\}", '\uD835\uDE32'], ["\\\\mathsfsl\\{p\\}", '\uD835\uDE31'], ["\\\\mathsfsl\\{o\\}", '\uD835\uDE30'], ["\\\\mathsfsl\\{n\\}", '\uD835\uDE2F'], ["\\\\mathsfsl\\{m\\}", '\uD835\uDE2E'], ["\\\\mathsfsl\\{l\\}", '\uD835\uDE2D'], ["\\\\mathsfsl\\{k\\}", '\uD835\uDE2C'], ["\\\\mathsfsl\\{j\\}", '\uD835\uDE2B'], ["\\\\mathsfsl\\{i\\}", '\uD835\uDE2A'], ["\\\\mathsfsl\\{h\\}", '\uD835\uDE29'], ["\\\\mathsfsl\\{g\\}", '\uD835\uDE28'], ["\\\\ntriangleleft", '\u22EA'], ["\\\\backslash|\\\\textbackslash", '\\'], ["\\\\varlrtriangle", '\u22BF'], ["\\\\rightpentagon", '\u2B54'], ["\\\\mathsfsl\\{f\\}", '\uD835\uDE27'], ["\\\\mathfrak\\{R\\}", '\u211C'], ["\\\\mathsfsl\\{e\\}", '\uD835\uDE26'], ["\\\\mdsmwhtsquare", '\u25FD'], ["\\\\mdsmblksquare", '\u25FE'], ["\\\\rightarrowgtr", '\u2B43'], ["\\\\mathsfbf\\{o\\}", '\uD835\uDDFC'], ["\\\\threeunderdot", '\u20E8'], ["\\\\blocklefthalf", '\u258C'], ["\\\\texttrademark", '\u2122'], ["\\\\Longleftarrow", '\u27F8'], ["\\\\mathsfbf\\{n\\}", '\uD835\uDDFB'], ["\\\\enclosesquare", '\u20DE'], ["\\\\mathslbb\\{J\\}", '\uD835\uDD75'], ["\\\\mathslbb\\{K\\}", '\uD835\uDD76'], ["\\\\enclosecircle", '\u20DD'], ["\\\\mathsfbf\\{m\\}", '\uD835\uDDFA'], ["\\\\mathslbb\\{L\\}", '\uD835\uDD77'], ["\\\\mathsfsl\\{d\\}", '\uD835\uDE25'], ["\\\\mathsfsl\\{c\\}", '\uD835\uDE24'], ["\\\\mathsfsl\\{b\\}", '\uD835\uDE23'], ["\\\\mathsfsl\\{a\\}", '\uD835\uDE22'], ["\\\\mathsfsl\\{Z\\}", '\uD835\uDE21'], ["\\\\pentagonblack", '\u2B1F'], ["\\\\vysmwhtsquare", '\u2B1E'], ["\\\\vysmblksquare", '\u2B1D'], ["\\\\mathslbb\\{M\\}", '\uD835\uDD78'], ["\\\\mathslbb\\{N\\}", '\uD835\uDD79'], ["\\\\squarellblack", '\u2B15'], ["\\\\squareurblack", '\u2B14'], ["\\\\bigtalloblong", '\u2AFF'], ["\\\\mathscr\\{c\\}", '\uD835\uDCB8'], ["\\\\'\\$\\\\alpha\\$", '\u03AC'], ["\\\\mathbit\\{q\\}", '\uD835\uDC92'], ["\\\\mathbit\\{r\\}", '\uD835\uDC93'], ["\\\\mathbit\\{s\\}", '\uD835\uDC94'], ["\\\\surfintegral", '\u222F'], ["\\\\mathbit\\{t\\}", '\uD835\uDC95'], ["\\\\trianglecdot", '\u25EC'], ["\\\\mathbit\\{u\\}", '\uD835\uDC96'], ["\\\\mathbit\\{v\\}", '\uD835\uDC97'], ["\\\\mathbit\\{w\\}", '\uD835\uDC98'], ["\\\\lessequivlnt", '\u2272'], ["\\\\mathscr\\{g\\}", '\u210A'], ["\\\\mathscr\\{d\\}", '\uD835\uDCB9'], ["\\\\longdivision", '\u27CC'], ["\\\\eqqslantless", '\u2A9B'], ["\\\\mathscr\\{H\\}", '\u210B'], ["\\\\mathbit\\{x\\}", '\uD835\uDC99'], ['\\\\upwhitearrow', '\u21E7'], ["\\\\mathbit\\{y\\}", '\uD835\uDC9A'], ["\\\\mathbit\\{z\\}", '\uD835\uDC9B'], ["\\\\mathscr\\{A\\}", '\uD835\uDC9C'], ["\\\\dottedcircle", '\u25CC'], ["\\\\mathmit\\{D\\}", '\uD835\uDCD3'], ["\\\\odotslashdot", '\u29BC'], ["\\\\cupleftarrow", '\u228C'], ["\\\\mathscr\\{I\\}", '\u2110'], ["\\\\notbackslash", '\u2340'], ["\\\\textvartheta", '\u03D1'], ["\\\\LeftArrowBar", '\u21E4'], ["\\\\mathmit\\{I\\}", '\uD835\uDCD8'], ["\\\\lozengeminus", '\u27E0'], ["\\\\mathscr\\{C\\}", '\uD835\uDC9E'], ["\\\\emptysetoarr", '\u29B3'], ["\\\\mathscr\\{f\\}", '\uD835\uDCBB'], ["\\\\emptysetobar", '\u29B1'], ["\\\\mathscr\\{D\\}", '\uD835\uDC9F'], ["\\\\mathbit\\{A\\}", '\uD835\uDC68'], ["\\\\fdiagovrdiag", '\u292C'], ["\\\\mathscr\\{h\\}", '\uD835\uDCBD'], ["\\\\verymuchless", '\u22D8'], ["\\\\mathbit\\{B\\}", '\uD835\uDC69'], ["\\\\mathbit\\{C\\}", '\uD835\uDC6A'], ["\\\\mathscr\\{G\\}", '\uD835\uDCA2'], ['\\\\upupharpoons', '\u2963'], ["\\\\nvRightarrow", '\u2903'], ["\\\\mathscr\\{J\\}", '\uD835\uDCA5'], ["\\\\revangleubar", '\u29A5'], ["\\\\mathscr\\{K\\}", '\uD835\uDCA6'], ["\\\\mathbit\\{D\\}", '\uD835\uDC6B'], ["\\\\mathmit\\{H\\}", '\uD835\uDCD7'], ["\\\\mathmit\\{G\\}", '\uD835\uDCD6'], ["\\\\mathscr\\{N\\}", '\uD835\uDCA9'], ["\\\\mathscr\\{i\\}", '\uD835\uDCBE'], ["\\\\mathmit\\{F\\}", '\uD835\uDCD5'], ["\\\\mathbit\\{E\\}", '\uD835\uDC6C'], ["\\\\mathbit\\{F\\}", '\uD835\uDC6D'], ["\\\\mathbit\\{G\\}", '\uD835\uDC6E'], ["\\\\mathmit\\{z\\}", '\uD835\uDD03'], ["\\\\mathbit\\{H\\}", '\uD835\uDC6F'], ["\\\\PropertyLine", '\u214A'], ["\\\\mathscr\\{j\\}", '\uD835\uDCBF'], ["\\\\mathscr\\{O\\}", '\uD835\uDCAA'], ["\\\\mathmit\\{y\\}", '\uD835\uDD02'], ["\\\\DownArrowBar", '\u2913'], ["\\\\mathscr\\{k\\}", '\uD835\uDCC0'], ["\\\\mathscr\\{m\\}", '\uD835\uDCC2'], ["\\\\mathscr\\{n\\}", '\uD835\uDCC3'], ["\\\\mathmit\\{x\\}", '\uD835\uDD01'], ["\\\\mathscr\\{P\\}", '\uD835\uDCAB'], ["\\\\mathmit\\{w\\}", '\uD835\uDD00'], ["\\\\mathmit\\{v\\}", '\uD835\uDCFF'], ["\\\\mathscr\\{Q\\}", '\uD835\uDCAC'], ["\\\\mathmit\\{u\\}", '\uD835\uDCFE'], ["\\\\mathmit\\{t\\}", '\uD835\uDCFD'], ["\\\\mathscr\\{p\\}", '\uD835\uDCC5'], ["\\\\mathscr\\{q\\}", '\uD835\uDCC6'], ["\\\\mathscr\\{r\\}", '\uD835\uDCC7'], ["\\\\mathscr\\{S\\}", '\uD835\uDCAE'], ["\\\\mathmit\\{s\\}", '\uD835\uDCFC'], ["\\\\mathmit\\{r\\}", '\uD835\uDCFB'], ["\\\\mathmit\\{q\\}", '\uD835\uDCFA'], ["\\\\squareulquad", '\u25F0'], ["\\\\mathbit\\{I\\}", '\uD835\uDC70'], ["\\\\squarellquad", '\u25F1'], ["\\\\risingdotseq", '\u2253'], ["\\\\squarelrquad", '\u25F2'], ["\\\\squareurquad", '\u25F3'], ["\\\\mathmit\\{p\\}", '\uD835\uDCF9'], ["\\\\circleulquad", '\u25F4'], ["\\\\circledequal", '\u229C'], ["\\\\medblackstar", '\u2B51'], ["\\\\medwhitestar", '\u2B50'], ["\\\\circlellquad", '\u25F5'], ["\\\\circlelrquad", '\u25F6'], ["\\\\mathbit\\{J\\}", '\uD835\uDC71'], ["\\\\circleurquad", '\u25F7'], ["\\\\squarehvfill", '\u25A6'], ["\\\\rightdbltail", '\u291C'], ["\\\\mathscr\\{s\\}", '\uD835\uDCC8'], ["\\\\mathmit\\{o\\}", '\uD835\uDCF8'], ["\\\\mathscr\\{t\\}", '\uD835\uDCC9'], ["\\\\doublebarvee", '\u2A62'], ["\\\\mathbit\\{K\\}", '\uD835\uDC72'], ["\\\\mathbit\\{L\\}", '\uD835\uDC73'], ["\\\\mathbit\\{M\\}", '\uD835\uDC74'], ["\\\\errbarcircle", '\u29F2'], ["\\\\mathscr\\{T\\}", '\uD835\uDCAF'], ["\\\\mathmit\\{n\\}", '\uD835\uDCF7'], ["\\\\blocklowhalf", '\u2584'], ["\\\\mathmit\\{m\\}", '\uD835\uDCF6'], ["\\\\mathmit\\{E\\}", '\uD835\uDCD4'], ["\\\\mathbit\\{N\\}", '\uD835\uDC75'], ["\\\\leftdotarrow", '\u2B38'], ["\\\\mathbit\\{O\\}", '\uD835\uDC76'], ["\\\\mathmit\\{l\\}", '\uD835\uDCF5'], ["\\\\wedgemidvert", '\u2A5A'], ["\\\\errbarsquare", '\u29EE'], ["\\\\mathscr\\{U\\}", '\uD835\uDCB0'], ["\\\\bigslopedvee", '\u2A57'], ["\\\\mathmit\\{k\\}", '\uD835\uDCF4'], ["\\\\mathmit\\{j\\}", '\uD835\uDCF3'], ["\\\\blacklozenge", '\u29EB'], ["\\\\mathmit\\{i\\}", '\uD835\uDCF2'], ["\\\\mathscr\\{V\\}", '\uD835\uDCB1'], ["\\\\mathmit\\{h\\}", '\uD835\uDCF1'], ["\\\\smwhtlozenge", '\u2B2B'], ["\\\\smblklozenge", '\u2B2A'], ["\\\\smblkdiamond", '\u2B29'], ["\\\\mdwhtlozenge", '\u2B28'], ["\\\\mdblklozenge", '\u2B27'], ["\\\\mdwhtdiamond", '\u2B26'], ["\\\\mdblkdiamond", '\u2B25'], ["\\\\mathmit\\{g\\}", '\uD835\uDCF0'], ["\\\\hexagonblack", '\u2B23'], ["\\\\rbrackurtick", '\u2990'], ["\\\\mathbit\\{P\\}", '\uD835\uDC77'], ["\\\\mathbit\\{Q\\}", '\uD835\uDC78'], ["\\\\mathscr\\{W\\}", '\uD835\uDCB2'], ["\\\\mathmit\\{f\\}", '\uD835\uDCEF'], ["\\\\closedvarcap", '\u2A4D'], ["\\\\dottedsquare", '\u2B1A'], ["\\\\lbracklltick", '\u298F'], ["\\\\rbracklrtick", '\u298E'], ["\\\\closedvarcup", '\u2A4C'], ["\\\\mathmit\\{e\\}", '\uD835\uDCEE'], ["\\\\downfishtail", '\u297F'], ["\\\\mathmit\\{d\\}", '\uD835\uDCED'], ["\\\\mathbit\\{R\\}", '\uD835\uDC79'], ["\\\\mathbit\\{S\\}", '\uD835\uDC7A'], ["\\\\mathmit\\{c\\}", '\uD835\uDCEC'], ["\\\\lbrackultick", '\u298D'], ["\\\\mathmit\\{b\\}", '\uD835\uDCEB'], ["\\\\mathscr\\{X\\}", '\uD835\uDCB3'], ["\\\\mathbit\\{T\\}", '\uD835\uDC7B'], ["\\\\mathmit\\{a\\}", '\uD835\uDCEA'], ["\\\\lrtriangleeq", '\u29E1'], ["\\\\mathbit\\{U\\}", '\uD835\uDC7C'], ["\\\\textsterling", '\xA3'], ["\\\\textcurrency", '\xA4'], ["\\\\mathscr\\{Y\\}", '\uD835\uDCB4'], ["\\\\mathbit\\{V\\}", '\uD835\uDC7D'], ["\\\\mathscr\\{Z\\}", '\uD835\uDCB5'], ["\\\\hyphenbullet", '\u2043'], ["\\\\mathmit\\{Z\\}", '\uD835\uDCE9'], ["\\\\longmapsfrom", '\u27FB'], ["\\\\multimapboth", '\u29DF'], ["\\\\mathbit\\{W\\}", '\uD835\uDC7E'], ["\\\\mathbit\\{X\\}", '\uD835\uDC7F'], ["\\\\mathbit\\{Y\\}", '\uD835\uDC80'], ["\\\\mathbit\\{Z\\}", '\uD835\uDC81'], ["\\\\mathbit\\{a\\}", '\uD835\uDC82'], ["\\\\mathbit\\{b\\}", '\uD835\uDC83'], ["\\\\mathmit\\{Y\\}", '\uD835\uDCE8'], ["\\\\mathmit\\{X\\}", '\uD835\uDCE7'], ["\\\\mathbit\\{c\\}", '\uD835\uDC84'], ["\\\\mathbit\\{d\\}", '\uD835\uDC85'], ["\\\\mathmit\\{W\\}", '\uD835\uDCE6'], ["\\\\mathmit\\{V\\}", '\uD835\uDCE5'], ["\\\\mathmit\\{U\\}", '\uD835\uDCE4'], ["\\\\RoundImplies", '\u2970'], ["\\\\triangleplus", '\u2A39'], ["\\\\rdiagovfdiag", '\u292B'], ["\\\\mathscr\\{a\\}", '\uD835\uDCB6'], ["\\\\mathscr\\{u\\}", '\uD835\uDCCA'], ["\\\\mathscr\\{B\\}", '\u212C'], ["\\\\mathmit\\{T\\}", '\uD835\uDCE3'], ["\\\\mathscr\\{b\\}", '\uD835\uDCB7'], ["\\\\mathmit\\{S\\}", '\uD835\uDCE2'], ["\\\\mathscr\\{e\\}", '\u212F'], ["\\\\mathbit\\{e\\}", '\uD835\uDC86'], ["\\\\mathmit\\{R\\}", '\uD835\uDCE1'], ["\\\\mathscr\\{v\\}", '\uD835\uDCCB'], ["\\\\mathscr\\{w\\}", '\uD835\uDCCC'], ["\\\\mathbit\\{f\\}", '\uD835\uDC87'], ["\\\\mathbit\\{g\\}", '\uD835\uDC88'], ["\\\\mathscr\\{x\\}", '\uD835\uDCCD'], ["\\\\texttildelow", '\u02DC'], ["\\\\mathbit\\{h\\}", '\uD835\uDC89'], ["\\\\varspadesuit", '\u2664'], ["\\\\mathscr\\{y\\}", '\uD835\uDCCE'], ["\\\\mathbit\\{i\\}", '\uD835\uDC8A'], ["\\\\mathmit\\{Q\\}", '\uD835\uDCE0'], ["\\\\supsetapprox", '\u2ACA'], ["\\\\subsetapprox", '\u2AC9'], ["\\\\rightbkarrow", '\u290D'], ["\\\\mathbit\\{j\\}", '\uD835\uDC8B'], ["\\\\mathmit\\{P\\}", '\uD835\uDCDF'], ["\\\\mathscr\\{R\\}", '\u211B'], ["\\\\mathmit\\{O\\}", '\uD835\uDCDE'], ["\\\\mathscr\\{z\\}", '\uD835\uDCCF'], ["\\\\oturnedcomma", '\u0312'], ["\\\\mathbit\\{k\\}", '\uD835\uDC8C'], ["\\\\mathbit\\{l\\}", '\uD835\uDC8D'], ["\\\\Longmapsfrom", '\u27FD'], ["\\\\mathmit\\{N\\}", '\uD835\uDCDD'], ["\\\\mathmit\\{A\\}", '\uD835\uDCD0'], ["\\\\mathmit\\{M\\}", '\uD835\uDCDC'], ["\\\\triangledown", '\u25BF'], ["\\\\triangleleft", '\u25C3'], ["\\\\mathmit\\{L\\}", '\uD835\uDCDB'], ["\\\\mathmit\\{B\\}", '\uD835\uDCD1'], ["\\\\mathscr\\{l\\}", '\u2113'], ["\\\\leftdbkarrow", '\u290E'], ["\\\\mathbit\\{m\\}", '\uD835\uDC8E'], ["\\\\mathbit\\{n\\}", '\uD835\uDC8F'], ["\\\\mathbit\\{o\\}", '\uD835\uDC90'], ["\\\\mathmit\\{K\\}", '\uD835\uDCDA'], ["\\\\mathscr\\{L\\}", '\u2112'], ["\\\\mathmit\\{C\\}", '\uD835\uDCD2'], ["\\\\mathmit\\{J\\}", '\uD835\uDCD9'], ["\\\\mathscr\\{E\\}", '\u2130'], ["\\\\mathrm\\{'Y\\}", '\u038E'], ["\\\\mathscr\\{F\\}", '\u2131'], ["\\\\mathscr\\{M\\}", '\u2133'], ['\\\\underbracket', '\u23B5'], ["\\\\mathscr\\{o\\}", '\u2134'], ["\\\\mathbit\\{p\\}", '\uD835\uDC91'], ["\\\\nHdownarrow", '\u21DF'], ["\\\\forcesextra", '\u22A8'], ['\\\\updasharrow', '\u21E1'], ["\\\\circleddash", '\u229D'], ["\\\\circledcirc", '\u229A'], ["\\\\nvleftarrow", '\u21F7'], ["\\\\nVleftarrow", '\u21FA'], ["\\\\not\\\\supset", '\u2285'], ["\\\\not\\\\subset", '\u2284'], ["\\\\succcurlyeq", '\u227D'], ["\\\\preccurlyeq", '\u227C'], ["\\\\int\\\\!\\\\int", '\u222C'], ["\\\\volintegral", '\u2230'], ["\\\\clwintegral", '\u2231'], ["\\\\not\\\\approx", '\u2249'], ["\\\\mathtt\\{z\\}", '\uD835\uDEA3'], ["\\\\mathtt\\{y\\}", '\uD835\uDEA2'], ["\\\\mathtt\\{x\\}", '\uD835\uDEA1'], ["\\\\mathtt\\{w\\}", '\uD835\uDEA0'], ["\\\\mathtt\\{v\\}", '\uD835\uDE9F'], ["\\\\mathtt\\{u\\}", '\uD835\uDE9E'], ["\\\\mathtt\\{t\\}", '\uD835\uDE9D'], ["\\\\mathtt\\{s\\}", '\uD835\uDE9C'], ["\\\\mathtt\\{r\\}", '\uD835\uDE9B'], ["\\\\mathtt\\{q\\}", '\uD835\uDE9A'], ["\\\\mathtt\\{p\\}", '\uD835\uDE99'], ["\\\\mathtt\\{o\\}", '\uD835\uDE98'], ["\\\\mathtt\\{n\\}", '\uD835\uDE97'], ["\\\\mathtt\\{m\\}", '\uD835\uDE96'], ["\\\\mathtt\\{l\\}", '\uD835\uDE95'], ["\\\\mathtt\\{k\\}", '\uD835\uDE94'], ["\\\\mathtt\\{j\\}", '\uD835\uDE93'], ["\\\\mathtt\\{i\\}", '\uD835\uDE92'], ["\\\\mathtt\\{h\\}", '\uD835\uDE91'], ["\\\\mathtt\\{g\\}", '\uD835\uDE90'], ["\\\\mathtt\\{f\\}", '\uD835\uDE8F'], ["\\\\mathtt\\{e\\}", '\uD835\uDE8E'], ["\\\\mathtt\\{d\\}", '\uD835\uDE8D'], ["\\\\mathtt\\{c\\}", '\uD835\uDE8C'], ["\\\\mathtt\\{b\\}", '\uD835\uDE8B'], ["\\\\mathtt\\{a\\}", '\uD835\uDE8A'], ["\\\\mathtt\\{Z\\}", '\uD835\uDE89'], ["\\\\mathtt\\{Y\\}", '\uD835\uDE88'], ["\\\\mathtt\\{X\\}", '\uD835\uDE87'], ["\\\\mathtt\\{W\\}", '\uD835\uDE86'], ["\\\\mathtt\\{V\\}", '\uD835\uDE85'], ["\\\\mathtt\\{U\\}", '\uD835\uDE84'], ["\\\\mathtt\\{T\\}", '\uD835\uDE83'], ["\\\\mathtt\\{S\\}", '\uD835\uDE82'], ["\\\\mathtt\\{R\\}", '\uD835\uDE81'], ["\\\\mathtt\\{Q\\}", '\uD835\uDE80'], ["\\\\mathtt\\{P\\}", '\uD835\uDE7F'], ["\\\\mathtt\\{O\\}", '\uD835\uDE7E'], ["\\\\mathtt\\{N\\}", '\uD835\uDE7D'], ["\\\\mathtt\\{M\\}", '\uD835\uDE7C'], ["\\\\mathtt\\{L\\}", '\uD835\uDE7B'], ["\\\\mathtt\\{K\\}", '\uD835\uDE7A'], ["\\\\mathtt\\{J\\}", '\uD835\uDE79'], ["\\\\mathtt\\{I\\}", '\uD835\uDE78'], ["\\\\mathtt\\{H\\}", '\uD835\uDE77'], ["\\\\mathtt\\{G\\}", '\uD835\uDE76'], ["\\\\mathtt\\{F\\}", '\uD835\uDE75'], ["\\\\mathtt\\{E\\}", '\uD835\uDE74'], ["\\\\mathtt\\{D\\}", '\uD835\uDE73'], ["\\\\mathtt\\{C\\}", '\uD835\uDE72'], ["\\\\mathtt\\{B\\}", '\uD835\uDE71'], ["\\\\mathtt\\{A\\}", '\uD835\uDE70'], ["\\\\mathsf\\{z\\}", '\uD835\uDDD3'], ["\\\\mathsf\\{y\\}", '\uD835\uDDD2'], ["\\\\mathsf\\{x\\}", '\uD835\uDDD1'], ["\\\\mathsf\\{w\\}", '\uD835\uDDD0'], ["\\\\mathsf\\{v\\}", '\uD835\uDDCF'], ["\\\\mathsf\\{u\\}", '\uD835\uDDCE'], ["\\\\mathsf\\{t\\}", '\uD835\uDDCD'], ["\\\\mathsf\\{s\\}", '\uD835\uDDCC'], ["\\\\mathsf\\{r\\}", '\uD835\uDDCB'], ["\\\\mathsf\\{q\\}", '\uD835\uDDCA'], ["\\\\mathsf\\{p\\}", '\uD835\uDDC9'], ["\\\\mathsf\\{o\\}", '\uD835\uDDC8'], ["\\\\mathsf\\{n\\}", '\uD835\uDDC7'], ["\\\\mathsf\\{m\\}", '\uD835\uDDC6'], ["\\\\mathsf\\{l\\}", '\uD835\uDDC5'], ["\\\\mathsf\\{k\\}", '\uD835\uDDC4'], ["\\\\mathsf\\{j\\}", '\uD835\uDDC3'], ["\\\\mathsf\\{i\\}", '\uD835\uDDC2'], ["\\\\mathsf\\{h\\}", '\uD835\uDDC1'], ["\\\\mathsf\\{g\\}", '\uD835\uDDC0'], ["\\\\mathsf\\{f\\}", '\uD835\uDDBF'], ["\\\\mathsf\\{e\\}", '\uD835\uDDBE'], ["\\\\mathsf\\{d\\}", '\uD835\uDDBD'], ["\\\\mathsf\\{c\\}", '\uD835\uDDBC'], ["\\\\mathsf\\{b\\}", '\uD835\uDDBB'], ["\\\\mathsf\\{a\\}", '\uD835\uDDBA'], ["\\\\mathsf\\{Z\\}", '\uD835\uDDB9'], ["\\\\mathsf\\{Y\\}", '\uD835\uDDB8'], ["\\\\mathsf\\{X\\}", '\uD835\uDDB7'], ["\\\\mathsf\\{W\\}", '\uD835\uDDB6'], ["\\\\mathsf\\{V\\}", '\uD835\uDDB5'], ["\\\\mathsf\\{U\\}", '\uD835\uDDB4'], ["\\\\mathsf\\{T\\}", '\uD835\uDDB3'], ["\\\\mathsf\\{S\\}", '\uD835\uDDB2'], ["\\\\mathsf\\{R\\}", '\uD835\uDDB1'], ["\\\\mathsf\\{Q\\}", '\uD835\uDDB0'], ["\\\\mathsf\\{P\\}", '\uD835\uDDAF'], ["\\\\mathsf\\{O\\}", '\uD835\uDDAE'], ["\\\\mathsf\\{N\\}", '\uD835\uDDAD'], ["\\\\mathsf\\{M\\}", '\uD835\uDDAC'], ["\\\\mathsf\\{L\\}", '\uD835\uDDAB'], ["\\\\mathsf\\{K\\}", '\uD835\uDDAA'], ["\\\\mathsf\\{J\\}", '\uD835\uDDA9'], ["\\\\mathsf\\{I\\}", '\uD835\uDDA8'], ["\\\\mathsf\\{H\\}", '\uD835\uDDA7'], ["\\\\mathsf\\{G\\}", '\uD835\uDDA6'], ["\\\\mathsf\\{F\\}", '\uD835\uDDA5'], ["\\\\mathsf\\{E\\}", '\uD835\uDDA4'], ["\\\\mathsf\\{D\\}", '\uD835\uDDA3'], ["\\\\mathsf\\{C\\}", '\uD835\uDDA2'], ["\\\\mathsf\\{B\\}", '\uD835\uDDA1'], ["\\\\mathsf\\{A\\}", '\uD835\uDDA0'], ["\\\\mathbb\\{z\\}", '\uD835\uDD6B'], ["\\\\mathbb\\{y\\}", '\uD835\uDD6A'], ["\\\\mathbb\\{x\\}", '\uD835\uDD69'], ["\\\\mathbb\\{w\\}", '\uD835\uDD68'], ["\\\\mathbb\\{v\\}", '\uD835\uDD67'], ["\\\\mathbb\\{u\\}", '\uD835\uDD66'], ["\\\\mathbb\\{t\\}", '\uD835\uDD65'], ["\\\\mathbb\\{s\\}", '\uD835\uDD64'], ["\\\\mathbb\\{r\\}", '\uD835\uDD63'], ["\\\\mathbb\\{q\\}", '\uD835\uDD62'], ["\\\\mathbb\\{p\\}", '\uD835\uDD61'], ["\\\\mathbb\\{o\\}", '\uD835\uDD60'], ["\\\\mathbb\\{n\\}", '\uD835\uDD5F'], ["\\\\mathbb\\{m\\}", '\uD835\uDD5E'], ["\\\\mathbb\\{l\\}", '\uD835\uDD5D'], ["\\\\mathbb\\{k\\}", '\uD835\uDD5C'], ["\\\\mathbb\\{j\\}", '\uD835\uDD5B'], ["\\\\mathbb\\{i\\}", '\uD835\uDD5A'], ["\\\\mathbb\\{h\\}", '\uD835\uDD59'], ["\\\\mathbb\\{g\\}", '\uD835\uDD58'], ["\\\\mathbb\\{f\\}", '\uD835\uDD57'], ["\\\\mathbb\\{e\\}", '\uD835\uDD56'], ["\\\\mathbb\\{d\\}", '\uD835\uDD55'], ["\\\\mathbb\\{c\\}", '\uD835\uDD54'], ["\\\\mathbb\\{b\\}", '\uD835\uDD53'], ["\\\\mathbb\\{a\\}", '\uD835\uDD52'], ["\\\\mathbb\\{Y\\}", '\uD835\uDD50'], ["\\\\mathbb\\{X\\}", '\uD835\uDD4F'], ["\\\\mathbb\\{W\\}", '\uD835\uDD4E'], ["\\\\mathbb\\{V\\}", '\uD835\uDD4D'], ["\\\\mathbb\\{U\\}", '\uD835\uDD4C'], ["\\\\mathbb\\{T\\}", '\uD835\uDD4B'], ["\\\\mathbb\\{S\\}", '\uD835\uDD4A'], ["\\\\mathbb\\{O\\}", '\uD835\uDD46'], ["\\\\mathbb\\{M\\}", '\uD835\uDD44'], ["\\\\mathbb\\{L\\}", '\uD835\uDD43'], ["\\\\mathbb\\{K\\}", '\uD835\uDD42'], ["\\\\mathbb\\{J\\}", '\uD835\uDD41'], ["\\\\mathbb\\{I\\}", '\uD835\uDD40'], ["\\\\mathbb\\{G\\}", '\uD835\uDD3E'], ["\\\\mathbb\\{F\\}", '\uD835\uDD3D'], ["\\\\mathbb\\{E\\}", '\uD835\uDD3C'], ["\\\\mathbb\\{D\\}", '\uD835\uDD3B'], ["\\\\mathbb\\{B\\}", '\uD835\uDD39'], ["\\\\mathbb\\{A\\}", '\uD835\uDD38'], ["\\\\mathsl\\{z\\}", '\uD835\uDC67'], ["\\\\mathsl\\{y\\}", '\uD835\uDC66'], ["\\\\mathsl\\{x\\}", '\uD835\uDC65'], ["\\\\mathsl\\{w\\}", '\uD835\uDC64'], ["\\\\mathsl\\{v\\}", '\uD835\uDC63'], ["\\\\mathsl\\{u\\}", '\uD835\uDC62'], ["\\\\mathsl\\{t\\}", '\uD835\uDC61'], ["\\\\mathsl\\{s\\}", '\uD835\uDC60'], ["\\\\mathsl\\{r\\}", '\uD835\uDC5F'], ["\\\\mathsl\\{q\\}", '\uD835\uDC5E'], ["\\\\mathsl\\{p\\}", '\uD835\uDC5D'], ["\\\\mathsl\\{o\\}", '\uD835\uDC5C'], ["\\\\mathsl\\{n\\}", '\uD835\uDC5B'], ["\\\\mathsl\\{m\\}", '\uD835\uDC5A'], ["\\\\mathsl\\{l\\}", '\uD835\uDC59'], ["\\\\mathsl\\{k\\}", '\uD835\uDC58'], ["\\\\mathsl\\{j\\}", '\uD835\uDC57'], ["\\\\mathsl\\{i\\}", '\uD835\uDC56'], ["\\\\mathsl\\{g\\}", '\uD835\uDC54'], ["\\\\mathsl\\{f\\}", '\uD835\uDC53'], ["\\\\mathsl\\{e\\}", '\uD835\uDC52'], ["\\\\mathsl\\{d\\}", '\uD835\uDC51'], ["\\\\mathsl\\{c\\}", '\uD835\uDC50'], ["\\\\mathsl\\{b\\}", '\uD835\uDC4F'], ["\\\\mathsl\\{a\\}", '\uD835\uDC4E'], ["\\\\mathsl\\{Z\\}", '\uD835\uDC4D'], ["\\\\mathsl\\{Y\\}", '\uD835\uDC4C'], ["\\\\mathsl\\{X\\}", '\uD835\uDC4B'], ["\\\\mathsl\\{W\\}", '\uD835\uDC4A'], ["\\\\mathsl\\{V\\}", '\uD835\uDC49'], ["\\\\mathsl\\{U\\}", '\uD835\uDC48'], ["\\\\mathsl\\{T\\}", '\uD835\uDC47'], ["\\\\mathsl\\{S\\}", '\uD835\uDC46'], ["\\\\mathsl\\{R\\}", '\uD835\uDC45'], ["\\\\mathsl\\{Q\\}", '\uD835\uDC44'], ["\\\\mathsl\\{P\\}", '\uD835\uDC43'], ["\\\\mathsl\\{O\\}", '\uD835\uDC42'], ["\\\\mathsl\\{N\\}", '\uD835\uDC41'], ["\\\\mathsl\\{M\\}", '\uD835\uDC40'], ["\\\\mathsl\\{L\\}", '\uD835\uDC3F'], ["\\\\mathsl\\{K\\}", '\uD835\uDC3E'], ["\\\\mathsl\\{J\\}", '\uD835\uDC3D'], ["\\\\mathsl\\{I\\}", '\uD835\uDC3C'], ["\\\\mathsl\\{H\\}", '\uD835\uDC3B'], ["\\\\mathsl\\{G\\}", '\uD835\uDC3A'], ["\\\\mathsl\\{F\\}", '\uD835\uDC39'], ["\\\\mathsl\\{E\\}", '\uD835\uDC38'], ["\\\\mathsl\\{D\\}", '\uD835\uDC37'], ["\\\\mathsl\\{C\\}", '\uD835\uDC36'], ["\\\\mathsl\\{B\\}", '\uD835\uDC35'], ["\\\\mathsl\\{A\\}", '\uD835\uDC34'], ["\\\\mathbf\\{z\\}", '\uD835\uDC33'], ["\\\\mathbf\\{y\\}", '\uD835\uDC32'], ["\\\\mathbf\\{x\\}", '\uD835\uDC31'], ["\\\\mathbf\\{w\\}", '\uD835\uDC30'], ["\\\\mathbf\\{v\\}", '\uD835\uDC2F'], ["\\\\mathbf\\{u\\}", '\uD835\uDC2E'], ["\\\\mathbf\\{t\\}", '\uD835\uDC2D'], ["\\\\mathbf\\{s\\}", '\uD835\uDC2C'], ["\\\\mathbf\\{r\\}", '\uD835\uDC2B'], ["\\\\mathbf\\{q\\}", '\uD835\uDC2A'], ["\\\\mathbf\\{p\\}", '\uD835\uDC29'], ["\\\\mathbf\\{o\\}", '\uD835\uDC28'], ["\\\\mathbf\\{n\\}", '\uD835\uDC27'], ["\\\\mathbf\\{m\\}", '\uD835\uDC26'], ["\\\\mathbf\\{l\\}", '\uD835\uDC25'], ["\\\\mathbf\\{k\\}", '\uD835\uDC24'], ["\\\\mathbf\\{j\\}", '\uD835\uDC23'], ["\\\\mathbf\\{i\\}", '\uD835\uDC22'], ["\\\\mathbf\\{h\\}", '\uD835\uDC21'], ["\\\\mathbf\\{g\\}", '\uD835\uDC20'], ["\\\\mathbf\\{f\\}", '\uD835\uDC1F'], ["\\\\mathbf\\{e\\}", '\uD835\uDC1E'], ["\\\\mathbf\\{d\\}", '\uD835\uDC1D'], ["\\\\mathbf\\{c\\}", '\uD835\uDC1C'], ["\\\\mathbf\\{b\\}", '\uD835\uDC1B'], ["\\\\mathbf\\{a\\}", '\uD835\uDC1A'], ["\\\\mathbf\\{Z\\}", '\uD835\uDC19'], ["\\\\mathbf\\{Y\\}", '\uD835\uDC18'], ["\\\\mathbf\\{X\\}", '\uD835\uDC17'], ["\\\\mathbf\\{W\\}", '\uD835\uDC16'], ["\\\\mathbf\\{V\\}", '\uD835\uDC15'], ["\\\\mathbf\\{U\\}", '\uD835\uDC14'], ["\\\\mathbf\\{T\\}", '\uD835\uDC13'], ["\\\\mathbf\\{S\\}", '\uD835\uDC12'], ["\\\\mathbf\\{R\\}", '\uD835\uDC11'], ["\\\\mathbf\\{Q\\}", '\uD835\uDC10'], ["\\\\mathbf\\{P\\}", '\uD835\uDC0F'], ["\\\\mathbf\\{O\\}", '\uD835\uDC0E'], ["\\\\mathbf\\{N\\}", '\uD835\uDC0D'], ["\\\\mathbf\\{M\\}", '\uD835\uDC0C'], ["\\\\mathbf\\{L\\}", '\uD835\uDC0B'], ["\\\\mathbf\\{K\\}", '\uD835\uDC0A'], ["\\\\mathbf\\{J\\}", '\uD835\uDC09'], ["\\\\mathbf\\{I\\}", '\uD835\uDC08'], ["\\\\mathbf\\{H\\}", '\uD835\uDC07'], ["\\\\mathbf\\{G\\}", '\uD835\uDC06'], ["\\\\mathbf\\{F\\}", '\uD835\uDC05'], ["\\\\mathbf\\{E\\}", '\uD835\uDC04'], ["\\\\mathbf\\{D\\}", '\uD835\uDC03'], ["\\\\mathbf\\{C\\}", '\uD835\uDC02'], ["\\\\mathbf\\{B\\}", '\uD835\uDC01'], ["\\\\mathbf\\{A\\}", '\uD835\uDC00'], ["\\\\smwhitestar", '\u2B52'], ["\\\\RRightarrow", '\u2B46'], ["\\\\whtvertoval", '\u2B2F'], ["\\\\blkvertoval", '\u2B2E'], ["\\\\whthorzoval", '\u2B2D'], ["\\\\blkhorzoval", '\u2B2C'], ["\\\\lgblkcircle", '\u2B24'], ["\\\\mathtt\\{9\\}", '\uD835\uDFFF'], ["\\\\mathtt\\{8\\}", '\uD835\uDFFE'], ["\\\\textsection", '\xA7'], ["\\\\textonehalf", '\xBD'], ["\\\\shortuptack", '\u2AE0'], ["\\\\mathtt\\{7\\}", '\uD835\uDFFD'], ["\\\\mathtt\\{6\\}", '\uD835\uDFFC'], ["\\\\mathtt\\{5\\}", '\uD835\uDFFB'], ["\\\\mathtt\\{4\\}", '\uD835\uDFFA'], ["\\\\succnapprox", '\u2ABA'], ["\\\\precnapprox", '\u2AB9'], ["\\\\mathtt\\{3\\}", '\uD835\uDFF9'], ["\\\\eqqslantgtr", '\u2A9C'], ["\\\\eqslantless", '\u2A95'], ["\\\\backepsilon", '\u03F6'], ["\\\\mathtt\\{2\\}", '\uD835\uDFF8'], ["\\\\mathtt\\{1\\}", '\uD835\uDFF7'], ["\\\\mathtt\\{0\\}", '\uD835\uDFF6'], ["\\\\simminussim", '\u2A6C'], ["\\\\midbarwedge", '\u2A5C'], ["\\\\mathsf\\{9\\}", '\uD835\uDFEB'], ["\\\\mathsf\\{8\\}", '\uD835\uDFEA'], ["\\\\rcurvyangle", '\u29FD'], ["\\\\lcurvyangle", '\u29FC'], ["\\\\RuleDelayed", '\u29F4'], ["\\\\gleichstark", '\u29E6'], ["\\\\mathsf\\{7\\}", '\uD835\uDFE9'], ["\\\\mathsf\\{6\\}", '\uD835\uDFE8'], ["\\\\mathsf\\{5\\}", '\uD835\uDFE7'], ["\\\\mathsf\\{4\\}", '\uD835\uDFE6'], ["\\\\circledless", '\u29C0'], ["\\\\revemptyset", '\u29B0'], ["\\\\wideangleup", '\u29A7'], ["\\\\mathsf\\{3\\}", '\uD835\uDFE5'], ["\\\\mathsf\\{2\\}", '\uD835\uDFE4'], ["\\\\mathsf\\{1\\}", '\uD835\uDFE3'], ["\\\\mathsf\\{0\\}", '\uD835\uDFE2'], ["\\\\mathbb\\{9\\}", '\uD835\uDFE1'], ["\\\\mathbb\\{8\\}", '\uD835\uDFE0'], ["\\\\mathbb\\{7\\}", '\uD835\uDFDF'], ["\\\\nwovnearrow", '\u2932'], ["\\\\neovnwarrow", '\u2931'], ["\\\\neovsearrow", '\u292E'], ["\\\\seovnearrow", '\u292D'], ["\\\\mathbb\\{6\\}", '\uD835\uDFDE'], ["\\\\mathbb\\{5\\}", '\uD835\uDFDD'], ["\\\\leftdbltail", '\u291B'], ["\\\\mathbb\\{4\\}", '\uD835\uDFDC'], ["\\\\leftbkarrow", '\u290C'], ["\\\\nvLeftarrow", '\u2902'], ["\\\\mathbb\\{3\\}", '\uD835\uDFDB'], ["\\\\mathbb\\{2\\}", '\uD835\uDFDA'], ["\\\\mathbb\\{1\\}", '\uD835\uDFD9'], ["\\\\mathbb\\{0\\}", '\uD835\uDFD8'], ["\\\\multimapinv", '\u27DC'], ["\\\\mathbf\\{9\\}", '\uD835\uDFD7'], ["\\\\mathbf\\{8\\}", '\uD835\uDFD6'], ["\\\\threedangle", '\u27C0'], ["\\\\ding\\{254\\}", '\u27BE'], ["\\\\ding\\{253\\}", '\u27BD'], ["\\\\ding\\{252\\}", '\u27BC'], ["\\\\ding\\{251\\}", '\u27BB'], ["\\\\ding\\{250\\}", '\u27BA'], ["\\\\ding\\{249\\}", '\u27B9'], ["\\\\ding\\{248\\}", '\u27B8'], ["\\\\ding\\{247\\}", '\u27B7'], ["\\\\ding\\{246\\}", '\u27B6'], ["\\\\ding\\{245\\}", '\u27B5'], ["\\\\ding\\{244\\}", '\u27B4'], ["\\\\ding\\{243\\}", '\u27B3'], ["\\\\ding\\{242\\}", '\u27B2'], ["\\\\ding\\{241\\}", '\u27B1'], ["\\\\ding\\{239\\}", '\u27AF'], ["\\\\ding\\{238\\}", '\u27AE'], ["\\\\ding\\{237\\}", '\u27AD'], ["\\\\ding\\{236\\}", '\u27AC'], ["\\\\ding\\{235\\}", '\u27AB'], ["\\\\ding\\{234\\}", '\u27AA'], ["\\\\ding\\{233\\}", '\u27A9'], ["\\\\ding\\{232\\}", '\u27A8'], ["\\\\ding\\{231\\}", '\u27A7'], ["\\\\ding\\{230\\}", '\u27A6'], ["\\\\ding\\{229\\}", '\u27A5'], ["\\\\ding\\{228\\}", '\u27A4'], ["\\\\ding\\{227\\}", '\u27A3'], ["\\\\ding\\{226\\}", '\u27A2'], ["\\\\ding\\{225\\}", '\u27A1'], ["\\\\ding\\{224\\}", '\u27A0'], ["\\\\ding\\{223\\}", '\u279F'], ["\\\\ding\\{222\\}", '\u279E'], ["\\\\ding\\{221\\}", '\u279D'], ["\\\\ding\\{220\\}", '\u279C'], ["\\\\ding\\{219\\}", '\u279B'], ["\\\\ding\\{218\\}", '\u279A'], ["\\\\ding\\{216\\}", '\u2798'], ["\\\\ding\\{212\\}", '\u2794'], ["\\\\ding\\{211\\}", '\u2793'], ["\\\\ding\\{210\\}", '\u2792'], ["\\\\ding\\{209\\}", '\u2791'], ["\\\\ding\\{208\\}", '\u2790'], ["\\\\ding\\{207\\}", '\u278F'], ["\\\\ding\\{206\\}", '\u278E'], ["\\\\ding\\{205\\}", '\u278D'], ["\\\\ding\\{204\\}", '\u278C'], ["\\\\ding\\{203\\}", '\u278B'], ["\\\\ding\\{202\\}", '\u278A'], ["\\\\ding\\{201\\}", '\u2789'], ["\\\\ding\\{200\\}", '\u2788'], ["\\\\ding\\{199\\}", '\u2787'], ["\\\\ding\\{198\\}", '\u2786'], ["\\\\ding\\{197\\}", '\u2785'], ["\\\\ding\\{196\\}", '\u2784'], ["\\\\ding\\{195\\}", '\u2783'], ["\\\\ding\\{194\\}", '\u2782'], ["\\\\ding\\{193\\}", '\u2781'], ["\\\\ding\\{192\\}", '\u2780'], ["\\\\ding\\{191\\}", '\u277F'], ["\\\\ding\\{190\\}", '\u277E'], ["\\\\ding\\{189\\}", '\u277D'], ["\\\\ding\\{188\\}", '\u277C'], ["\\\\ding\\{187\\}", '\u277B'], ["\\\\ding\\{186\\}", '\u277A'], ["\\\\ding\\{185\\}", '\u2779'], ["\\\\ding\\{184\\}", '\u2778'], ["\\\\ding\\{183\\}", '\u2777'], ["\\\\ding\\{182\\}", '\u2776'], ["\\\\ding\\{167\\}", '\u2767'], ["\\\\ding\\{166\\}", '\u2766'], ["\\\\ding\\{165\\}", '\u2765'], ["\\\\ding\\{164\\}", '\u2764'], ["\\\\ding\\{163\\}", '\u2763'], ["\\\\ding\\{162\\}", '\u2762'], ["\\\\ding\\{161\\}", '\u2761'], ["\\\\ding\\{126\\}", '\u275E'], ["\\\\ding\\{125\\}", '\u275D'], ["\\\\ding\\{124\\}", '\u275C'], ["\\\\ding\\{123\\}", '\u275B'], ["\\\\ding\\{122\\}", '\u275A'], ["\\\\ding\\{121\\}", '\u2759'], ["\\\\ding\\{120\\}", '\u2758'], ["\\\\ding\\{118\\}", '\u2756'], ["\\\\ding\\{114\\}", '\u2752'], ["\\\\ding\\{113\\}", '\u2751'], ["\\\\ding\\{112\\}", '\u2750'], ["\\\\ding\\{111\\}", '\u274F'], ["\\\\ding\\{109\\}", '\u274D'], ["\\\\ding\\{107\\}", '\u274B'], ["\\\\ding\\{106\\}", '\u274A'], ["\\\\ding\\{105\\}", '\u2749'], ["\\\\ding\\{104\\}", '\u2748'], ["\\\\ding\\{103\\}", '\u2747'], ["\\\\ding\\{102\\}", '\u2746'], ["\\\\ding\\{101\\}", '\u2745'], ["\\\\ding\\{100\\}", '\u2744'], ["\\\\mathbf\\{7\\}", '\uD835\uDFD5'], ["\\\\quarternote", '\u2669'], ["\\\\varclubsuit", '\u2667'], ["\\\\ding\\{169\\}", '\u2666'], ["\\\\ding\\{170\\}", '\u2665'], ["\\\\ding\\{168\\}", '\u2663'], ["\\\\mathbf\\{6\\}", '\uD835\uDFD4'], ["\\\\ding\\{171\\}", '\u2660'], ["\\\\capricornus", '\u2651'], ["\\\\sagittarius", '\u2650'], ["\\\\backtrprime", '\u2037'], ["\\\\caretinsert", '\u2038'], ["\\\\nolinebreak", '\u2060'], ["\\\\mathbf\\{5\\}", '\uD835\uDFD3'], ["\\\\blacksmiley", '\u263B'], ["\\\\vertoverlay", '\u20D2'], ["\\\\mathbf\\{4\\}", '\uD835\uDFD2'], ["\\\\mathbf\\{3\\}", '\uD835\uDFD1'], ["\\\\smwhtcircle", '\u25E6'], ["\\\\asteraccent", '\u20F0'], ["\\\\mathbb\\{C\\}", '\u2102'], ["\\\\mathbf\\{2\\}", '\uD835\uDFD0'], ["\\\\ding\\{119\\}", '\u25D7'], ["\\\\mathbb\\{H\\}", '\u210D'], ["\\\\Planckconst", '\u210E'], ["\\\\ding\\{108\\}", '\u25CF'], ["\\\\mathbb\\{N\\}", '\u2115'], ["\\\\ding\\{117\\}", '\u25C6'], ["\\\\mathbb\\{P\\}", '\u2119'], ["\\\\ding\\{116\\}", '\u25BC'], ["\\\\mathbb\\{Q\\}", '\u211A'], ["\\\\vartriangle", '\u25B5'], ["\\\\ding\\{115\\}", '\u25B2'], ["\\\\mathbf\\{1\\}", '\uD835\uDFCF'], ["\\\\smwhtsquare", '\u25AB'], ["\\\\blacksquare", '\u25AA'], ["\\\\squarevfill", '\u25A5'], ["\\\\squarehfill", '\u25A4'], ["\\\\mathbb\\{R\\}", '\u211D'], ["\\\\ding\\{110\\}", '\u25A0'], ["\\\\mathbf\\{0\\}", '\uD835\uDFCE'], ["\\\\blockuphalf", '\u2580'], ["\\\\mathbb\\{Z\\}", '\u2124'], ["\\\\ding\\{181\\}", '\u2469'], ["\\\\ding\\{180\\}", '\u2468'], ["\\\\ding\\{179\\}", '\u2467'], ["\\\\ding\\{178\\}", '\u2466'], ["\\\\ding\\{177\\}", '\u2465'], ["\\\\ding\\{176\\}", '\u2464'], ["\\\\ding\\{175\\}", '\u2463'], ["\\\\ding\\{174\\}", '\u2462'], ["\\\\ding\\{173\\}", '\u2461'], ["\\\\ding\\{172\\}", '\u2460'], ["\\\\overbracket", '\u23B4'], ["\\\\intextender", '\u23AE'], ["\\\\sansLturned", '\u2142'], ["\\\\ExponetialE", '\u2147'], ["\\\\wasylozenge", '\u2311'], ['\\\\updownarrow', '\u2195'], ["\\\\nrightarrow", '\u219B'], ["\\\\sqsubsetneq", '\u22E4'], ["\\\\curlyeqsucc", '\u22DF'], ["\\\\curlyeqprec", '\u22DE'], ["\\\\nRightarrow", '\u21CF'], ['\\\\Updownarrow', '\u21D5'], ["\\\\Rrightarrow", '\u21DB'], ["\\\\ding\\{217\\}", '\u2799'], ["\\\\precapprox", '\u227E'], ["\\\\textdagger", '\u2020'], ["\\\\mbfDigamma", '\uD835\uDFCA'], ["\\\\twolowline", '\u2017'], ["\\\\textemdash", '\u2014'], ["\\\\textendash", '\u2013'], ["\\\\eighthnote", '\u266A'], ["\\\\ding\\{33\\}", '\u2701'], ["\\\\ding\\{34\\}", '\u2702'], ['\\\\underbrace', '\u23DF'], ["\\\\ding\\{35\\}", '\u2703'], ['\\\\underparen', '\u23DD'], ["\\\\ding\\{36\\}", '\u2704'], ["\\\\ding\\{38\\}", '\u2706'], ["\\\\ding\\{39\\}", '\u2707'], ["\\\\ding\\{40\\}", '\u2708'], ["\\\\sqrtbottom", '\u23B7'], ["\\\\ding\\{41\\}", '\u2709'], ["\\\\ding\\{44\\}", '\u270C'], ["\\\\succapprox", '\u227F'], ["\\\\ding\\{45\\}", '\u270D'], ["\\\\ding\\{46\\}", '\u270E'], ["\\\\rmoustache", '\u23B1'], ["\\\\lmoustache", '\u23B0'], ["\\\\ding\\{47\\}", '\u270F'], ["\\\\nLeftarrow", '\u21CD'], ["\\\\rbracelend", '\u23AD'], ["\\\\ding\\{48\\}", '\u2710'], ["\\\\rbraceuend", '\u23AB'], ["\\\\ding\\{49\\}", '\u2711'], ["\\\\lbracelend", '\u23A9'], ["\\\\ding\\{50\\}", '\u2712'], ["\\\\lbraceuend", '\u23A7'], ["\\\\rbracklend", '\u23A6'], ["\\\\ding\\{51\\}", '\u2713'], ["\\\\rbrackuend", '\u23A4'], ["\\\\ding\\{52\\}", '\u2714'], ["\\\\ding\\{53\\}", '\u2715'], ["\\\\lbrackuend", '\u23A1'], ["\\\\rparenlend", '\u23A0'], ["\\\\ding\\{54\\}", '\u2716'], ["\\\\rparenuend", '\u239E'], ["\\\\lparenlend", '\u239D'], ["\\\\ding\\{55\\}", '\u2717'], ["\\\\lparenuend", '\u239B'], ["\\\\ding\\{56\\}", '\u2718'], ["\\\\ding\\{57\\}", '\u2719'], ["\\\\ding\\{58\\}", '\u271A'], ["\\\\ding\\{59\\}", '\u271B'], ["\\\\ding\\{60\\}", '\u271C'], ["\\\\APLcomment", '\u235D'], ["\\\\ding\\{61\\}", '\u271D'], ["\\\\ding\\{62\\}", '\u271E'], ["\\\\ding\\{63\\}", '\u271F'], ["\\\\ding\\{64\\}", '\u2720'], ["\\\\ding\\{65\\}", '\u2721'], ["\\\\ding\\{66\\}", '\u2722'], ["\\\\ding\\{67\\}", '\u2723'], ["\\\\ding\\{68\\}", '\u2724'], ["\\\\ding\\{69\\}", '\u2725'], ["\\\\rightangle", '\u221F'], ["\\\\conictaper", '\u2332'], ["\\\\ding\\{70\\}", '\u2726'], ["\\\\ding\\{71\\}", '\u2727'], ["\\\\ding\\{74\\}", '\u272A'], ["\\\\ding\\{75\\}", '\u272B'], ["\\\\varnothing", '\u2205'], ["\\\\ding\\{76\\}", '\u272C'], ["\\\\ding\\{77\\}", '\u272D'], ["\\\\ding\\{78\\}", '\u272E'], ["\\\\ding\\{79\\}", '\u272F'], ["\\\\ding\\{80\\}", '\u2730'], ["\\\\ding\\{81\\}", '\u2731'], ["\\\\ding\\{82\\}", '\u2732'], ["\\\\ding\\{83\\}", '\u2733'], ["\\\\ding\\{84\\}", '\u2734'], ["\\\\ding\\{85\\}", '\u2735'], ["\\\\ding\\{86\\}", '\u2736'], ["\\\\ding\\{87\\}", '\u2737'], ["\\\\complement", '\u2201'], ["\\\\ding\\{88\\}", '\u2738'], ["\\\\ding\\{89\\}", '\u2739'], ["\\\\ding\\{90\\}", '\u273A'], ["\\\\ding\\{91\\}", '\u273B'], ["\\\\rightarrow", '\u2192'], ["\\\\ding\\{92\\}", '\u273C'], ["\\\\ding\\{93\\}", '\u273D'], ["\\\\sqsubseteq", '\u2291'], ["\\\\ding\\{94\\}", '\u273E'], ["\\\\nleftarrow", '\u219A'], ["\\\\ding\\{95\\}", '\u273F'], ["\\\\sqsupseteq", '\u2292'], ["\\\\ding\\{96\\}", '\u2740'], ["\\\\ding\\{97\\}", '\u2741'], ["\\\\ding\\{98\\}", '\u2742'], ["\\\\ding\\{99\\}", '\u2743'], ["\\\\subsetcirc", '\u27C3'], ["\\\\supsetcirc", '\u27C4'], ["\\\\Diamonddot", '\u27D0'], ["\\\\DDownarrow", '\u27F1'], ["\\\\longmapsto", '\u27FC'], ["\\\\Longmapsto", '\u27FE'], ["\\\\Ddownarrow", '\u290B'], ['\\\\UpArrowBar', '\u2912'], ['\\\\upfishtail', '\u297E'], ["\\\\lbrackubar", '\u298B'], ["\\\\rbrackubar", '\u298C'], ["\\\\Rparenless", '\u2996'], ["\\\\lblkbrbrak", '\u2997'], ["\\\\rblkbrbrak", '\u2998'], ["\\\\circledgtr", '\u29C1'], ["\\\\doubleplus", '\u29FA'], ["\\\\tripleplus", '\u29FB'], ["\\\\plussubtwo", '\u2A27'], ["\\\\commaminus", '\u2A29'], ["\\\\Lleftarrow", '\u21DA'], ["\\\\minusfdots", '\u2A2B'], ["\\\\minusrdots", '\u2A2C'], ["\\\\smashtimes", '\u2A33'], ["\\\\cupovercap", '\u2A46'], ["\\\\Rightarrow", '\u21D2'], ["\\\\circledast", '\u229B'], ["\\\\capovercup", '\u2A47'], ["\\\\veeonwedge", '\u2A59'], ["\\\\veemidvert", '\u2A5B'], ["\\\\equivVvert", '\u2A69'], ["\\\\lessapprox", '\u2A85'], ["\\\\lesseqqgtr", '\u2A8B'], ["\\\\gtreqqless", '\u2A8C'], ["\\\\eqslantgtr", '\u2A96'], ["\\\\rightslice", '\u2AA7'], ["\\{\\\\'\\{\\}O\\}|\\\\'\\{\\}O", '\u038C'], ["\\\\'\\{\\}\\{I\\}", '\u038A'], ["\\\\subsetplus", '\u2ABF'], ["\\\\supsetplus", '\u2AC0'], ["\\\\cyrchar\\\\C", '\u030F'], ["\\\\curlywedge", '\u22CF'], ["\\\\tone\\{11\\}", '\u02E9'], ["\\\\tone\\{22\\}", '\u02E8'], ["\\\\subsetneqq", '\u2ACB'], ["\\\\supsetneqq", '\u2ACC'], ["\\\\fbox\\{~~\\}", '\u25AD'], ["\\\\LEFTCIRCLE", '\u25D6'], ['\\\\ultriangle', '\u25F8'], ["\\\\tone\\{33\\}", '\u02E7'], ["\\\\tone\\{44\\}", '\u02E6'], ['\\\\urtriangle', '\u25F9'], ["\\\\lltriangle", '\u25FA'], ["\\\\tone\\{55\\}", '\u02E5'], ["\\\\varepsilon", '\u025B'], ["\\\\lrtriangle", '\u25FF'], ["\\\\ding\\{72\\}", '\u2605'], ["\\\\ding\\{73\\}", '\u2606'], ["\\\\ding\\{37\\}", '\u260E'], ["\\\\CheckedBox", '\u2611'], ["\\^\\\\circ|\\\\textdegree", '\xB0'], ["\\\\ding\\{42\\}", '\u261B'], ["\\\\interleave", '\u2AF4'], ["\\\\ding\\{43\\}", '\u261E'], ["\\\\talloblong", '\u2AFE'], ["\\\\mbfdigamma", '\uD835\uDFCB'], ["\\\\backdprime", '\u2036'], ["\\\\varhexagon", '\u2B21'], ["\\\\leftarrowx", '\u2B3E'], ["\\\\LLeftarrow", '\u2B45'], ["\\\\postalmark", '\u3012'], ["\\\\textdollar", '\\$'], ['\\\\upuparrows', '\u21C8'], ["\\\\not\\\\equiv", '\u2262'], ["\\\\not\\\\simeq", '\u2244'], ["\\\\homothetic", '\u223B'], ["\\\\textbullet", '\u2022'], ["\\\\geqqslant", '\u2AFA'], ["\\\\leqqslant", '\u2AF9'], ["\\\\supseteqq", '\u2AC6'], ["\\\\subseteqq", '\u2AC5'], ["\\\\supsetdot", '\u2ABE'], ["\\\\subsetdot", '\u2ABD'], ["\\\\leftslice", '\u2AA6'], ["\\\\gtrapprox", '\u2A86'], ["\\\\approxeqq", '\u2A70'], ["\\\\hatapprox", '\u2A6F'], ["\\\\equivVert", '\u2A68'], ["\\\\varveebar", '\u2A61'], ["\\\\Elzminhat", '\u2A5F'], ["\\\\midbarvee", '\u2A5D'], ["\\\\wedgeodot", '\u2A51'], ["\\\\capbarcup", '\u2A49'], ["\\\\cupbarcap", '\u2A48'], ["\\\\otimeshat", '\u2A36'], ["\\\\clockoint", '\u2A0F'], ["\\\\modtwosum", '\u2A0A'], ["\\\\bigcupdot", '\u2A03'], ["\\\\bigotimes", '\u2A02'], ["\\\\hourglass", '\u29D6'], ["\\\\triangles", '\u29CC'], ["\\\\boxcircle", '\u29C7'], ["\\\\boxbslash", '\u29C5'], ["\\\\angleubar", '\u29A4'], ["\\\\turnangle", '\u29A2'], ["\\\\Elzlpargt", '\u29A0'], ["\\\\Lparengtr", '\u2995'], ["\\\\rangledot", '\u2992'], ["\\\\langledot", '\u2991'], ["\\\\typecolon", '\u2982'], ["\\\\neswarrow", '\u2922'], ["\\\\nwsearrow", '\u2921'], ["\\\\righttail", '\u291A'], ["\\\\rrbracket", '\u27E7'], ["\\\\llbracket", '\u27E6'], ["\\\\longdashv", '\u27DE'], ["\\\\vlongdash", '\u27DD'], ["\\\\dashVdash", '\u27DB'], ["\\\\DashVDash", '\u27DA'], ["\\\\medbullet", '\u26AB'], ["\\\\heartsuit", '\u2661'], ["\\\\rightmoon", '\u263D'], ["\\\\biohazard", '\u2623'], ["\\\\radiation", '\u2622'], ["\\\\Elzrvbull", '\u25D8'], ["\\\\Elzvrecto", '\u25AF'], ["\\\\blockfull", '\u2588'], ["\\\\Elzdshfnc", '\u2506'], ["\\\\accurrent", '\u23E6'], ["\\\\trapezium", '\u23E2'], ["\\\\overbrace", '\u23DE'], ["\\\\overparen", '\u23DC'], ["\\\\rvboxline", '\u23B9'], ["\\\\lvboxline", '\u23B8'], ["\\\\sumbottom", '\u23B3'], ["\\\\rbracemid", '\u23AC'], ["\\\\lbracemid", '\u23A8'], ["\\\\Elzdlcorn", '\u23A3'], ["\\\\intbottom", '\u2321'], ["\\\\turnednot", '\u2319'], ["\\\\bagmember", '\u22FF'], ["\\\\varniobar", '\u22FD'], ["\\\\Elzsqspne", '\u22E5'], ["\\\\gtreqless", '\u22DB'], ["\\\\lesseqgtr", '\u22DA'], ["\\\\pitchfork", '\u22D4'], ["\\\\backsimeq", '\u22CD'], ["\\\\truestate", '\u22A7'], ["\\\\supsetneq", '\u228B'], ["\\\\subsetneq", '\u228A'], ["\\\\not\\\\succ", '\u2281'], ["\\\\not\\\\prec", '\u2280'], ["\\\\triangleq", '\u225C'], ["\\\\starequal", '\u225B'], ["\\\\estimates", '\u2259'], ["\\\\tildetrpl", '\u224B'], ["\\\\not\\\\cong", '\u2247'], ["\\\\therefore", '\u2234'], ["\\\\nparallel", '\u2226'], ["\\\\sqrt\\[4\\]", '\u221C'], ["\\\\sqrt\\[3\\]", '\u221B'], ["\\\\increment", '\u2206'], ["\\\\nHuparrow", '\u21DE'], ["\\\\Downarrow", '\u21D3'], ["\\\\Leftarrow", '\u21D0'], ["\\\\lightning", '\u21AF'], ["\\\\downarrow", '\u2193'], ["\\\\leftarrow", '\u2190'], ["\\\\fracslash", '\u2044'], ["\\\\backprime", '\u2035'], ["\\\\Elzreapos", '\u201B'], ["\\\\textTheta", '\u03F4'], ['\\\\underline', '\u0332'], ["\\\\textturnk", '\u029E'], ["\\\\Elzinglst", '\u0296'], ["\\\\Elzreglst", '\u0295'], ["\\\\Elzpupsil", '\u028A'], ["\\\\Elzrttrnr", '\u027B'], ["\\\\Elzclomeg", '\u0277'], ["\\\\Elztrnmlr", '\u0270'], ["\\\\Elzpgamma", '\u0263'], ["\\\\textnrleg", '\u019E'], ["\\\\texthvlig", '\u0195'], ["\\\\texttimes", '\xD7'], ["\\\\texttheta", '\u03B8'], ["\\\\Elzpscrv", '\u028B'], ["\\\\succnsim", '\u22E9'], ["\\\\Elzsqfnw", '\u2519'], ["\\\\circledS", '\u24C8'], ["\\\\elinters", '\u23E7'], ["\\\\varisins", '\u22F3'], ["\\\\bbrktbrk", '\u23B6'], ["\\\\MapsDown", '\u21A7'], ["\\\\APLinput", '\u235E'], ["\\\\notslash", '\u233F'], ["\\\\mapsfrom", '\u21A4'], ["\\\\pentagon", '\u2B20'], ["\\\\ComplexI", '\u2148'], ["\\\\isinobar", '\u22F7'], ["\\\\ComplexJ", '\u2149'], ["\\\\lrcorner", '\u231F'], ["\\\\llcorner", '\u231E'], ['\\\\urcorner', '\u231D'], ['\\\\ulcorner', '\u231C'], ["\\\\viewdata", '\u2317'], ["\\\\Elzdyogh", '\u02A4'], ["\\\\Elzverts", '\u02C8'], ["\\\\Elzverti", '\u02CC'], ["\\\\Elzhlmrk", '\u02D1'], ["\\\\diameter", '\u2300'], ["\\\\recorder", '\u2315'], ["\\\\Elzsbrhr", '\u02D2'], ["\\\\profsurf", '\u2313'], ["\\\\Elzsblhr", '\u02D3'], ["\\\\Elztdcol", '\u2AF6'], ["\\\\profline", '\u2312'], ["\\\\overline", '\u0305'], ["\\\\Elzsbbrg", '\u032A'], ["\\\\succneqq", '\u2AB6'], ["\\\\precneqq", '\u2AB5'], ['\\\\underbar', '\u0331'], ["\\\\varsigma", '\u03C2'], ["\\\\setminus", '\u2216'], ["\\\\varkappa", '\u03F0'], ["\\\\not\\\\sim", '\u2241'], ["\\\\gnapprox", '\u2A8A'], ["\\\\lnapprox", '\u2A89'], ["\\\\gesdotol", '\u2A84'], ["\\\\lesdotor", '\u2A83'], ["\\\\geqslant", '\u2A7E'], ["\\\\approxeq", '\u224A'], ["\\\\lazysinv", '\u223E'], ["\\\\leqslant", '\u2A7D'], ["\\\\varVdash", '\u2AE6'], ["\\\\=\\{\\\\i\\}", '\u012B'], ["\\\\Coloneqq", '\u2A74'], ["\\\\simrdots", '\u2A6B'], ["\\\\dotequiv", '\u2A67'], ["\\\\capwedge", '\u2A44'], ["\\\\not\\\\leq", '\u2270'], ["\\\\intprodr", '\u2A3D'], ["\\\\not\\\\geq", '\u2271'], ["\\\\subseteq", '\u2286'], ["\\\\timesbar", '\u2A31'], ["\\\\supseteq", '\u2287'], ["\\\\dottimes", '\u2A30'], ["\\\\ElzTimes", '\u2A2F'], ["\\\\sqsubset", '\u228F'], ["\\\\plustrif", '\u2A28'], ["\\\\sqsupset", '\u2290'], ["\\\\ringplus", '\u2A22'], ["\\\\zproject", '\u2A21'], ["\\\\intlarhk", '\u2A17'], ["\\\\pointint", '\u2A15'], ["\\\\scpolint", '\u2A13'], ["\\\\rppolint", '\u2A12'], ["\\\\Elxsqcup", '\u2A06'], ["\\\\Elxuplus", '\u2A04'], ["\\\\forksnot", '\u2ADD'], ["\\\\boxminus", '\u229F'], ["\\\\boxtimes", '\u22A0'], ["\\\\bigoplus", '\u2A01'], ["\\\\eqvparsl", '\u29E5'], ["\\\\smeparsl", '\u29E4'], ["\\\\tieinfty", '\u29DD'], ["\\\\Rvzigzag", '\u29DB'], ["\\\\Lvzigzag", '\u29DA'], ["\\\\rvzigzag", '\u29D9'], ["\\\\lvzigzag", '\u29D8'], ["\\\\rfbowtie", '\u29D2'], ["\\\\lfbowtie", '\u29D1'], ["\\\\rtriltri", '\u29CE'], ["\\\\Elzdefas", '\u29CB'], ["\\\\allequal", '\u224C'], ["\\\\doteqdot", '\u2251'], ["\\\\Elztrnsa", '\u0252'], ["\\\\Elzopeno", '\u0254'], ["\\\\boxonbox", '\u29C9'], ["\\\\boxslash", '\u29C4'], ["\\\\revangle", '\u29A3'], ["\\\\Elzddfnc", '\u2999'], ["\\\\Elzschwa", '\u0259'], ["\\\\Elzrarrx", '\u2947'], ["\\\\ElzrLarr", '\u2944'], ["\\\\original", '\u22B6'], ["\\\\ElzRlarr", '\u2942'], ["\\\\multimap", '\u22B8'], ["\\\\intercal", '\u22BA'], ["\\\\lefttail", '\u2919'], ["\\\\barwedge", '\u22BC'], ["\\\\drbkarow", '\u2910'], ['\\\\Uuparrow', '\u290A'], ["\\\\Mapsfrom", '\u2906'], ["\\\\Elzpbgam", '\u0264'], ['\\\\UUparrow', '\u27F0'], ["\\\\pullback", '\u27D3'], ["\\\\wedgedot", '\u27D1'], ["\\\\bsolhsub", '\u27C8'], ["\\\\curlyvee", '\u22CE'], ["\\\\acidfree", '\u267E'], ["\\\\twonotes", '\u266B'], ["\\\\mkern1mu", '\u200A'], ["\\\\aquarius", '\u2652'], ["\\\\textcent", '\xA2'], ["\\\\Elzltlmr", '\u0271'], ["\\\\Question", '\u2047'], ["\\\\:|\\\\mkern4mu", '\u205F'], ["\\\\steaming", '\u2615'], ["\\\\Elztrnrl", '\u027A'], ["\\\\parallel", '\u2225'], ["\\\\linefeed", '\u21B4'], ["\\\\Elzsqfse", '\u25EA'], ["\\\\Elzcirfb", '\u25D2'], ["\\\\Elzcirfr", '\u25D1'], ["\\\\Elzcirfl", '\u25D0'], ["\\\\bullseye", '\u25CE'], ["\\\\vphantom\\\\{", ''], ["\\\\eqcolon", '\u2239'], ["\\\\because", '\u2235'], ["\\\\revnmid", '\u2AEE'], ["\\\\between", '\u226C'], ["\\\\lessgtr", '\u2276'], ["\\\\gtrless", '\u2277'], ["\\\\dotplus", '\u2214'], ["\\\\smallni", '\u220D'], ["\\\\not\\\\ni", '\u220C'], ["\\\\smallin", '\u220A'], ["\\\\not\\\\in", '\u2209'], ["\\\\nexists", '\u2204'], ["\\\\partial", '\u2202'], ["\\\\boxplus", '\u229E'], ["\\\\Swarrow", '\u21D9'], ["\\\\Searrow", '\u21D8'], ["\\\\Nearrow", '\u21D7'], ["\\\\Nwarrow", '\u21D6'], ['\\\\Uparrow', '\u21D1'], ["\\\\diamond", '\u22C4'], ["\\\\lessdot", '\u22D6'], ["\\\\npreceq", '\u22E0'], ["\\\\nsucceq", '\u22E1'], ["\\\\nhVvert", '\u2AF5'], ["\\\\isindot", '\u22F5'], ["\\\\swarrow", '\u2199'], ["\\\\searrow", '\u2198'], ["\\\\nearrow", '\u2197'], ["\\\\nwarrow", '\u2196'], ["\\\\textyen", '\xA5'], ['\\\\uparrow', '\u2191'], ["\\\\hexagon", '\u2394'], ["\\\\obrbrak", '\u23E0'], ['\\\\ubrbrak', '\u23E1'], ["\\\\benzenr", '\u23E3'], ["\\\\Elzxrat", '\u211E'], ["\\\\squoval", '\u25A2'], ["\\\\Diamond", '\u25C7'], ["\\\\fisheye", '\u25C9'], ["\\\\lozenge", '\u25CA'], ["\\\\bigcirc", '\u25CB'], ["\\\\Elzsqfl", '\u25E7'], ["\\\\Elzsqfr", '\u25E8'], ["\\\\annuity", '\u20E7'], ["\\\\yinyang", '\u262F'], ["\\\\frownie", '\u2639'], ["\\\\mercury", '\u263F'], ["\\\\closure", '\u2050'], ["\\\\lllnest", '\u2AF7'], ["\\\\jupiter", '\u2643'], ["\\\\neptune", '\u2646'], ["\\\\gggnest", '\u2AF8'], ["\\\\scorpio", '\u264F'], ["\\\\natural", '\u266E'], ["\\\\recycle", '\u267B'], ["\\\\diceiii", '\u2682'], ["\\\\warning", '\u26A0'], ["\\\\medcirc", '\u26AA'], ["\\\\lbrbrak", '\u2772'], ["\\\\rbrbrak", '\u2773'], ["\\\\suphsol", '\u27C9'], ["\\\\pushout", '\u27D4'], ["\\\\Lbrbrak", '\u27EC'], ["\\\\Rbrbrak", '\u27ED'], ["\\\\dbkarow", '\u290F'], ["\\\\Elolarr", '\u2940'], ["\\\\Elorarr", '\u2941'], ["\\\\subrarr", '\u2979'], ["\\\\suplarr", '\u297B'], ["\\\\Elztfnc", '\u2980'], ["\\\\Elroang", '\u2986'], ["\\\\vzigzag", '\u299A'], ["\\\\olcross", '\u29BB'], ["\\\\cirscir", '\u29C2'], ["\\\\fbowtie", '\u29D3'], ["\\\\lftimes", '\u29D4'], ["\\\\rftimes", '\u29D5'], ["\\\\nvinfty", '\u29DE'], ["\\\\shuffle", '\u29E2'], ["\\\\thermod", '\u29E7'], ["\\\\rsolbar", '\u29F7'], ["\\\\bigodot", '\u2A00'], ["\\\\varprod", '\u2A09'], ["\\\\ElzCint", '\u2A0D'], ["\\\\npolint", '\u2A14'], ["\\\\plushat", '\u2A23'], ["\\\\simplus", '\u2A24'], ["\\\\plussim", '\u2A26'], ["\\\\twocups", '\u2A4A'], ["\\\\twocaps", '\u2A4B'], ["\\\\veeodot", '\u2A52'], ["\\\\congdot", '\u2A6D'], ["\\\\eqqplus", '\u2A71'], ["\\\\pluseqq", '\u2A72'], ["\\\\ddotseq", '\u2A77'], ["\\\\equivDD", '\u2A78'], ["\\\\ltquest", '\u2A7B'], ["\\\\gtquest", '\u2A7C'], ["\\\\lesdoto", '\u2A81'], ["\\\\gesdoto", '\u2A82'], ["\\\\digamma", '\u03DD'], ["\\\\Digamma", '\u03DC'], ['\\\\upsilon', '\u03C5'], ["\\\\epsilon", '\u03B5'], ["\\\\eqqless", '\u2A99'], ['\\\\Upsilon', '\u03A5'], ["\\\\bumpeqq", '\u2AAE'], ["\\\\backsim", '\u223D'], ["\\\\succneq", '\u2AB2'], ["\\\\preceqq", '\u2AB3'], ["\\\\succeqq", '\u2AB4'], ["\\\\trslash", '\u2AFB'], ["\\\\Elzpalh", '\u0321'], ["\\\\llcurly", '\u2ABB'], ["\\\\ggcurly", '\u2ABC'], ["\\\\submult", '\u2AC1'], ["\\\\supmult", '\u2AC2'], ["\\\\subedot", '\u2AC3'], ["\\\\supedot", '\u2AC4'], ["\\\\lsqhook", '\u2ACD'], ["\\\\rsqhook", '\u2ACE'], ["\\\\Elzrais", '\u02D4'], ["\\\\Elzlmrk", '\u02D0'], ["\\\\Elztesh", '\u02A7'], ["\\\\Elzglst", '\u0294'], ["\\\\Elzyogh", '\u0292'], ["\\\\Elzrtlz", '\u0290'], ["\\\\Elztrny", '\u028E'], ["\\\\Elzinvw", '\u028D'], ["\\\\Elzinvv", '\u028C'], ["\\\\Elzrtlt", '\u0288'], ["\\\\Elztrnt", '\u0287'], ["\\\\Elzrtls", '\u0282'], ["\\\\Elzrtlr", '\u027D'], ["\\\\Elztrnr", '\u0279'], ["\\\\textphi", '\u0278'], ["\\\\hzigzag", '\u3030'], ["\\\\Elzrtln", '\u0273'], ["\\\\Elzltln", '\u0272'], ["\\\\Elztrnm", '\u026F'], ["\\\\Elzrtll", '\u026D'], ["\\\\Elzbtdl", '\u026C'], ["\\\\Elztrnh", '\u0265'], ["\\\\Elzrtld", '\u0256'], ["\\\\Elztrna", '\u0250'], ["\\\\suphsub", '\u2AD7'], ["\\\\supdsub", '\u2AD8'], ["\\\\\\.z|\\\\\\.\\{z\\}", '\u017C'], ["\\\\\\.Z|\\\\\\.\\{Z\\}", '\u017B'], ["\\\\\\^y|\\\\\\^\\{y\\}", '\u0177'], ["\\\\\\^Y|\\\\\\^\\{Y\\}", '\u0176'], ["\\\\\\^w|\\\\\\^\\{w\\}", '\u0175'], ["\\\\\\^W|\\\\\\^\\{W\\}", '\u0174'], ["\\\\topfork", '\u2ADA'], ["\\\\\\^s|\\\\\\^\\{s\\}", '\u015D'], ["\\\\\\^S|\\\\\\^\\{S\\}", '\u015C'], ["\\\\\\^J|\\\\\\^\\{J\\}", '\u0134'], ["\\\\\\.I|\\\\\\.\\{I\\}", '\u0130'], ["\\\\\\^h|\\\\\\^\\{h\\}", '\u0125'], ["\\\\\\^H|\\\\\\^\\{H\\}", '\u0124'], ["\\\\\\.g|\\\\\\.\\{g\\}", '\u0121'], ["\\\\\\.G|\\\\\\.\\{G\\}", '\u0120'], ["\\\\\\^g|\\\\\\^\\{g\\}", '\u011D'], ["\\\\\\^G|\\\\\\^\\{G\\}", '\u011C'], ["\\\\\\.e|\\\\\\.\\{e\\}", '\u0117'], ["\\\\\\.E|\\\\\\.\\{E\\}", '\u0116'], ["\\\\\\.c|\\\\\\.\\{c\\}", '\u010B'], ["\\\\\\.C|\\\\\\.\\{C\\}", '\u010A'], ["\\\\\\^c|\\\\\\^\\{c\\}", '\u0109'], ["\\\\\\^C|\\\\\\^\\{C\\}", '\u0108'], ["\\\\\\^u|\\\\\\^\\{u\\}", '\xFB'], ["\\\\\\^o|\\\\\\^\\{o\\}", '\xF4'], ["\\\\\\^e|\\\\\\^\\{e\\}", '\xEA'], ["\\\\\\^a|\\\\\\^\\{a\\}", '\xE2'], ["\\\\\\^U|\\\\\\^\\{U\\}", '\xDB'], ["\\\\\\^O|\\\\\\^\\{O\\}", '\xD4'], ["\\\\\\^I|\\\\\\^\\{I\\}", '\xCE'], ["\\\\\\^E|\\\\\\^\\{E\\}", '\xCA'], ["\\\\\\^A|\\\\\\^\\{A\\}", '\xC2'], ["\\\\precneq", '\u2AB1'], ["\\\\bigtop", '\u27D9'], ["\\\\lgroup", '\u27EE'], ["\\\\rgroup", '\u27EF'], ["\\\\bigcup", '\u22C3'], ["\\\\Mapsto", '\u2907'], ["\\\\bigcap", '\u22C2'], ["\\\\approx", '\u2248'], ["\\\\barvee", '\u22BD'], ["\\\\veebar", '\u22BB'], ["\\\\'c|\\\\'\\{c\\}", '\u0107'], ["\\\\scurel", '\u22B1'], ["\\\\parsim", '\u2AF3'], ["\\\\ltlarr", '\u2976'], ["\\\\gtrarr", '\u2978'], ["\\\\'C|\\\\'\\{C\\}", '\u0106'], ["\\\\k\\{a\\}", '\u0105'], ["\\\\k\\{A\\}", '\u0104'], ["\\\\lBrace", '\u2983'], ["\\\\rBrace", '\u2984'], ["\\\\prurel", '\u22B0'], ["\\\\angles", '\u299E'], ["\\\\angdnr", '\u299F'], ["\\\\=a|\\\\=\\{a\\}", '\u0101'], ["\\\\=A|\\\\=\\{A\\}", '\u0100'], ["\\\\nVDash", '\u22AF'], ["\\\\boxast", '\u29C6'], ["\\\\boxbox", '\u29C8'], ["\\\\nVdash", '\u22AE'], ["\\\\ElzLap", '\u29CA'], ["\\\\nvDash", '\u22AD'], ["\\\\nvdash", '\u22AC'], ["\\\\Vvdash", '\u22AA'], ["\\\\\"y|\\\\\"\\{y\\}", '\xFF'], ["\\\\'y|\\\\'\\{y\\}", '\xFD'], ["\\\\topcir", '\u2AF1'], ["\\\\assert", '\u22A6'], ["\\\\\"u|\\\\\"\\{u\\}", '\xFC'], ["\\\\laplac", '\u29E0'], ["\\\\eparsl", '\u29E3'], ["\\\\'u|\\\\'\\{u\\}", '\xFA'], ["\\\\`u|\\\\`\\{u\\}", '\xF9'], ["\\\\tminus", '\u29FF'], ["\\\\boxdot", '\u22A1'], ["\\\\ElzThr", '\u2A05'], ["\\\\oslash", '\u2298'], ["\\\\ElzInf", '\u2A07'], ["\\\\ElzSup", '\u2A08'], ["\\\\sumint", '\u2A0B'], ["\\\\iiiint", '\u2A0C'], ["\\\\\"o|\\\\\"\\{o\\}", '\xF6'], ["\\\\intBar", '\u2A0E'], ["\\\\otimes", '\u2297'], ["\\\\ominus", '\u2296'], ["\\\\~o|\\\\~\\{o\\}", '\xF5'], ["\\\\sqrint", '\u2A16'], ["\\\\intcap", '\u2A19'], ["\\\\intcup", '\u2A1A'], ["\\\\lowint", '\u2A1C'], ["\\\\'o|\\\\'\\{o\\}", '\xF3'], ["\\\\`o|\\\\`\\{o\\}", '\xF2'], ["\\\\cupdot", '\u228D'], ["\\\\forall", '\u2200'], ["\\\\btimes", '\u2A32'], ["\\\\Otimes", '\u2A37'], ["\\\\exists", '\u2203'], ["\\\\capdot", '\u2A40'], ['\\\\uminus', '\u2A41'], ["\\\\barcup", '\u2A42'], ["\\\\barcap", '\u2A43'], ["\\\\supset", '\u2283'], ["\\\\cupvee", '\u2A45'], ["\\\\~n|\\\\~\\{n\\}", '\xF1'], ["\\\\ElzAnd", '\u2A53'], ["\\\\midcir", '\u2AF0'], ["\\\\dotsim", '\u2A6A'], ["\\\\eqqsim", '\u2A73'], ["\\\\\"e|\\\\\"\\{e\\}", '\xEB'], ["\\\\'e|\\\\'\\{e\\}", '\xE9'], ["\\\\`e|\\\\`\\{e\\}", '\xE8'], ["\\\\lesdot", '\u2A7F'], ["\\\\gesdot", '\u2A80'], ["\\\\coprod", '\u2210'], ["\\\\varrho", '\u03F1'], ["\\\\\"a|\\\\\"\\{a\\}", '\xE4'], ["\\\\stigma", '\u03DB'], ["\\\\Stigma", '\u03DA'], ["\\\\lesges", '\u2A93'], ["\\\\gesles", '\u2A94'], ["\\\\elsdot", '\u2A97'], ["\\\\egsdot", '\u2A98'], ["\\\\varphi", '\u03C6'], ["\\\\~a|\\\\~\\{a\\}", '\xE3'], ["\\\\lambda", '\u03BB'], ["\\\\'a|\\\\'\\{a\\}", '\xE1'], ["\\\\eqqgtr", '\u2A9A'], ["\\\\`a|\\\\`\\{a\\}", '\xE0'], ["\\\\Pi|\\\\P\\{i\\}", '\u03A0'], ["\\\\Xi|\\\\X\\{i\\}", '\u039E'], ["\\\\Lambda", '\u039B'], ["\\\\'H|\\\\'\\{H\\}", '\u0389'], ["\\\\preceq", '\u2AAF'], ["\\\\succeq", '\u2AB0'], ["\\\\TH|\\\\T\\{H\\}", '\xDE'], ["\\\\'Y|\\\\'\\{Y\\}", '\xDD'], ["\\\\\"U|\\\\\"\\{U\\}", '\xDC'], ["\\\\Elzbar", '\u0336'], ["\\\\'U|\\\\'\\{U\\}", '\xDA'], ['\\\\utilde', '\u0330'], ["\\\\bullet", '\u2219'], ["\\\\cirmid", '\u2AEF'], ["\\\\`U|\\\\`\\{U\\}", '\xD9'], ["\\\\droang", '\u031A'], ["\\\\\"O|\\\\\"\\{O\\}", '\xD6'], ["\\\\~O|\\\\~\\{O\\}", '\xD5'], ["\\\\candra", '\u0310'], ["\\\\'O|\\\\'\\{O\\}", '\xD3'], ["\\\\ovhook", '\u0309'], ["\\\\subsim", '\u2AC7'], ["\\\\supsim", '\u2AC8'], ["\\\\`O|\\\\`\\{O\\}", '\xD2'], ["\\\\~N|\\\\~\\{N\\}", '\xD1'], ["\\\\Elzlow", '\u02D5'], ["\\\\DH|\\\\D\\{H\\}", '\xD0'], ["\\\\propto", '\u221D'], ["\\\\subset", '\u2282'], ["\\\\\"I|\\\\\"\\{I\\}", '\xCF'], ["\\\\subsup", '\u2AD3'], ["\\\\rbrace", '\\}'], ["\\\\lbrace", '\\{'], ["\\\\'I|\\\\'\\{I\\}", '\xCD'], ["\\\\`I|\\\\`\\{I\\}", '\xCC'], ["\\\\\"E|\\\\\"\\{E\\}", '\xCB'], ["\\\\AC|\\\\A\\{C\\}", '\u223F'], ["\\\\'E|\\\\'\\{E\\}", '\xC9'], ["\\\\`E|\\\\`\\{E\\}", '\xC8'], ["\\\\AE|\\\\A\\{E\\}", '\xC6'], ["\\\\Elzesh", '\u0283'], ["\\\\AA|\\\\A\\{A\\}", '\xC5'], ["\\\\supsub", '\u2AD4'], ["\\\\Elzfhr", '\u027E'], ["\\\\\"A|\\\\\"\\{A\\}", '\xC4'], ["\\\\~A|\\\\~\\{A\\}", '\xC3'], ["\\\\'A|\\\\'\\{A\\}", '\xC1'], ["\\\\`A|\\\\`\\{A\\}", '\xC0'], ["\\\\vDdash", '\u2AE2'], ["\\\\subsub", '\u2AD5'], ["\\\\supsup", '\u2AD6'], ["\\\\'g|\\\\'\\{g\\}", '\u01F5'], ["\\\\not\\ =", '\u2260'], ["\\\\measeq", '\u225E'], ["\\\\'z|\\\\'\\{z\\}", '\u017A'], ["\\\\'Z|\\\\'\\{Z\\}", '\u0179'], ["\\\\\"Y|\\\\\"\\{Y\\}", '\u0178'], ["\\\\k\\{u\\}", '\u0173'], ["\\\\k\\{U\\}", '\u0172'], ["\\\\r\\{u\\}", '\u016F'], ["\\\\r\\{U\\}", '\u016E'], ["\\\\=u|\\\\=\\{u\\}", '\u016B'], ["\\\\=U|\\\\=\\{U\\}", '\u016A'], ["\\\\~u|\\\\~\\{u\\}", '\u0169'], ["\\\\~U|\\\\~\\{U\\}", '\u0168'], ["\\\\circeq", '\u2257'], ["\\\\'s|\\\\'\\{s\\}", '\u015B'], ["\\\\'S|\\\\'\\{S\\}", '\u015A'], ["\\\\'r|\\\\'\\{r\\}", '\u0155'], ["\\\\'R|\\\\'\\{R\\}", '\u0154'], ["\\\\OE|\\\\O\\{E\\}", '\u0152'], ["\\\\=o|\\\\=\\{o\\}", '\u014D'], ["\\\\=O|\\\\=\\{O\\}", '\u014C'], ["\\\\NG|\\\\N\\{G\\}", '\u014A'], ["\\\\'n|\\\\'\\{n\\}", '\u0144'], ["\\\\'N|\\\\'\\{N\\}", '\u0143'], ["\\\\'l|\\\\'\\{l\\}", '\u013A'], ["\\\\'L|\\\\'\\{L\\}", '\u0139'], ["\\\\eqcirc", '\u2256'], ["\\\\k\\{i\\}", '\u012F'], ["\\\\k\\{I\\}", '\u012E'], ['\\\\u\\ \\\\i', '\u012D'], ["\\\\lfloor", '\u230A'], ["\\\\rfloor", '\u230B'], ["\\\\invneg", '\u2310'], ["\\\\niobar", '\u22FE'], ["\\\\varnis", '\u22FB'], ["\\\\invamp", '\u214B'], ["\\\\inttop", '\u2320'], ["\\\\isinvb", '\u22F8'], ["\\\\langle", '\u2329'], ["\\\\rangle", '\u232A'], ["\\\\topbot", '\u2336'], ["\\\\APLinv", '\u2339'], ["\\\\MapsUp", '\u21A5'], ["\\\\mapsto", '\u21A6'], ["\\\\APLlog", '\u235F'], ["\\\\=I|\\\\=\\{I\\}", '\u012A'], ["\\\\daleth", '\u2138'], ["\\\\sumtop", '\u23B2'], ["\\\\~I|\\\\~\\{I\\}", '\u0128'], ["\\\\diagup", '\u2571'], ["\\\\square", '\u25A1'], ["\\\\hslash", '\u210F'], ["\\\\bumpeq", '\u224F'], ["\\\\boxbar", '\u25EB'], ["\\\\Square", '\u2610'], ["\\\\danger", '\u2621'], ["\\\\Bumpeq", '\u224E'], ["\\\\ddddot", '\u20DC'], ["\\\\smiley", '\u263A'], ["\\\\eqless", '\u22DC'], ["\\\\gtrdot", '\u22D7'], ["\\\\k\\{e\\}", '\u0119'], ["\\\\Exclam", '\u203C'], ["\\\\k\\{E\\}", '\u0118'], ["\\\\saturn", '\u2644'], ['\\\\uranus', '\u2645'], ["\\\\taurus", '\u2649'], ["\\\\gemini", '\u264A'], ["\\\\cancer", '\u264B'], ["\\\\pisces", '\u2653'], ["\\\\Supset", '\u22D1'], ["\\\\=e|\\\\=\\{e\\}", '\u0113'], ["\\\\Subset", '\u22D0'], ["\\\\diceii", '\u2681'], ["\\\\=E|\\\\=\\{E\\}", '\u0112'], ["\\\\diceiv", '\u2683'], ["\\\\dicevi", '\u2685'], ["\\\\anchor", '\u2693'], ["\\\\swords", '\u2694'], ["\\\\DJ|\\\\D\\{J\\}", '\u0110'], ["\\\\neuter", '\u26B2'], ["\\\\veedot", '\u27C7'], ["\\\\rtimes", '\u22CA'], ["\\\\ltimes", '\u22C9'], ["\\\\bowtie", '\u22C8'], ["\\\\bigbot", '\u27D8'], ["\\\\cirbot", '\u27DF'], ["\\\\LaTeX", 'L$^A$T$_E$X'], ["\\\\delta", '\u03B4'], ["\\\\image", '\u22B7'], ["\\\\llarc", '\u25DF'], ["\\\\simeq", '\u2243'], ["\\\\eqdef", '\u225D'], ["\\\\vBarv", '\u2AE9'], ["\\\\ElzOr", '\u2A54'], ["\\\\equiv", '\u2261'], ["\\\\space", ' '], ["\\\\isins", '\u22F4'], ["\\\\lnsim", '\u22E6'], ["\\\\Elzxl", '\u0335'], ["\\\\Theta", '\u0398'], ["\\\\barin", '\u22F6'], ["\\\\kappa", '\u03BA'], ["\\\\lblot", '\u2989'], ["\\\\rblot", '\u298A'], ["\\\\frown", '\u2322'], ["\\\\earth", '\u2641'], ["\\\\Angle", '\u299C'], ["\\\\Sqcup", '\u2A4F'], ["\\\\Sqcap", '\u2A4E'], ["\\\\nhpar", '\u2AF2'], ["\\\\operp", '\u29B9'], ["\\\\sigma", '\u03C3'], ["\\\\csube", '\u2AD1'], ["\\\\csupe", '\u2AD2'], ["\\\\house", '\u2302'], ["\\\\forks", '\u2ADC'], ["\\\\Elzxh", '\u0127'], ["\\\\strns", '\u23E4'], ["\\\\eqgtr", '\u22DD'], ["\\\\forkv", '\u2AD9'], ["\\\\amalg", '\u2A3F'], ["\\\\infty", '\u221E'], ["\\\\VDash", '\u22AB'], ["\\\\fltns", '\u23E5'], ["\\\\disin", '\u22F2'], ['\\\\uplus', '\u228E'], ["\\\\angle", '\u2220'], ["\\\\pluto", '\u2647'], ["\\\\Vdash", '\u22A9'], ["\\\\cdots", '\u22EF'], ["\\\\lceil", '\u2308'], ["\\\\sqcap", '\u2293'], ["\\\\smile", '\u2323'], ["\\\\omega", '\u03C9'], ["\\\\vdots", '\u22EE'], ["\\\\arceq", '\u2258'], ["\\\\dashv", '\u22A3'], ["\\\\vdash", '\u22A2'], ["\\\\skull", '\u2620'], ["\\\\rceil", '\u2309'], ["\\\\virgo", '\u264D'], ["\\\\perps", '\u2AE1'], ["\\\\zhide", '\u29F9'], ["\\\\tplus", '\u29FE'], ["\\\\ldots", '\u2026'], ["\\\\zpipe", '\u2A20'], ["\\\\dicei", '\u2680'], ["\\\\venus", '\u2640'], ["\\\\varpi", '\u03D6'], ["\\\\Elzrh", '\u0322'], ["\\\\Qoppa", '\u03D8'], ["\\\\aries", '\u2648'], ['\\\\upint', '\u2A1B'], ["\\\\dddot", '\u20DB'], ["\\\\sqcup", '\u2294'], ["\\\\qoppa", '\u03D9'], ["\\\\Koppa", '\u03DE'], ["\\\\awint", '\u2A11'], ["\\\\koppa", '\u03DF'], ["\\\\Colon", '\u2237'], ["\\\\gescc", '\u2AA9'], ["\\\\oplus", '\u2295'], ["\\\\asymp", '\u224D'], ["\\\\isinE", '\u22F9'], ["\\\\Elzrl", '\u027C'], ["\\\\Sampi", '\u03E0'], ["\\\\sampi", '\u03E1'], ["\\\\doteq", '\u2250'], ["\\\\slash", '\u2215'], ["\\\\gnsim", '\u22E7'], ["\\\\libra", '\u264E'], ["\\\\gsiml", '\u2A90'], ["\\\\wedge", '\u2227'], ["\\\\dbend", '\uFFFD'], ["\\\\dashV", '\u2AE3'], ["\\\\Dashv", '\u2AE4'], ["\\\\DashV", '\u2AE5'], ["\\\\Sigma", '\u03A3'], ["\\\\lsimg", '\u2A8F'], ["\\\\gsime", '\u2A8E'], ["\\\\lsime", '\u2A8D'], ["\\\\Equiv", '\u2263'], ["\\\\dicev", '\u2684'], ["\\\\Gamma", '\u0393'], ["\\\\\\^\\\\j", '\u0135'], ["\\\\gtcir", '\u2A7A'], ["\\\\ltcir", '\u2A79'], ["\\\\jmath", '\u0237'], ['\\\\ularc', '\u25DC'], ["\\\\gneqq", '\u2269'], ["\\\\gimel", '\u2137'], ["\\\\lneqq", '\u2268'], ["\\\\Omega", '\u03A9'], ["\\\\Equal", '\u2A75'], ["\\\\\\^\\\\i", '\xEE'], ["\\\\aleph", '\u2135'], ["\\\\nabla", '\u2207'], ["\\\\lescc", '\u2AA8'], ["\\\\simgE", '\u2AA0'], ["\\\\sharp", '\u266F'], ["\\\\imath", '\uD835\uDEA4'], ["\\\\simlE", '\u2A9F'], ["\\\\Delta", '\u0394'], ['\\\\urarc', '\u25DD'], ["\\\\alpha", '\u03B1'], ["\\\\gamma", '\u03B3'], ["\\\\eqdot", '\u2A66'], ["\\\\Euler", '\u2107'], ["\\\\lrarc", '\u25DE'], ["\\\\late", '\u2AAD'], ["\\\\v\\ d", '\u010F'], ["\\\\hash", '\u22D5'], ["\\\\circ", '\u2218'], ["\\\\Game", '\u2141'], ["\\\\surd", '\u221A'], ["\\\\v\\ D", '\u010E'], ["\\\\Lbag", '\u27C5'], ["\\\\beth", '\u2136'], ["\\\\lnot", '\xAC'], ["\\\\Finv", '\u2132'], ["\\\\~\\\\i", '\u0129'], ["\\\\csub", '\u2ACF'], ["\\\\csup", '\u2AD0'], ["\\\\succ", '\u227B'], ["\\\\prec", '\u227A'], ["\\\\Vert", '\u2016'], ["\\\\nmid", '\u2224'], ["\\\\c\\ C", '\xC7'], ["\\\\c\\ g", '\u0123'], ["\\\\c\\ G", '\u0122'], ["\\\\not<", '\u226E'], ["\\\\dlsh", '\u21B2'], ["\\\\Barv", '\u2AE7'], ["\\\\cdot", '\xB7'], ["\\\\vBar", '\u2AE8'], ["\\\\lang", '\u27EA'], ["\\\\rang", '\u27EB'], ["\\\\Zbar", '\u01B5'], ["\\\\star", '\u22C6'], ["\\\\psur", '\u2900'], ["\\\\v\\ z", '\u017E'], ["\\\\v\\ Z", '\u017D'], ["\\\\pinj", '\u2914'], ["\\\\finj", '\u2915'], ["\\\\bNot", '\u2AED'], ['\\\\u\\ e', '\u0115'], ['\\\\u\\ g', '\u011F'], ["\\\\spot", '\u2981'], ["\\\\H\\ u", '\u0171'], ['\\\\u\\ a', '\u0103'], ["\\\\limg", '\u2987'], ["\\\\rimg", '\u2988'], ["\\\\H\\ U", '\u0170'], ['\\\\u\\ A', '\u0102'], ["\\\\obot", '\u29BA'], ['\\\\u\\ u', '\u016D'], ['\\\\u\\ U', '\u016C'], ["\\\\cirE", '\u29C3'], ['\\\\u\\ G', '\u011E'], ["\\\\XBox", '\u2612'], ["\\\\v\\ t", '\u0165'], ["\\\\v\\ T", '\u0164'], ["\\\\c\\ t", '\u0163'], ["\\\\c\\ T", '\u0162'], ["\\\\v\\ s", '\u0161'], ["\\\\v\\ S", '\u0160'], ["\\\\perp", '\u22A5'], ["\\\\c\\ s", '\u015F'], ["\\\\c\\ S", '\u015E'], ["\\\\leqq", '\u2266'], ["\\\\dsol", '\u29F6'], ["\\\\Rbag", '\u27C6'], ["\\\\xsol", '\u29F8'], ["\\\\v\\ C", '\u010C'], ["\\\\v\\ r", '\u0159'], ["\\\\odot", '\u2299'], ["\\\\v\\ R", '\u0158'], ["\\\\c\\ r", '\u0157'], ["\\\\c\\ R", '\u0156'], ["\\\\flat", '\u266D'], ["\\\\LVec", '\u20D6'], ["\\\\H\\ o", '\u0151'], ["\\\\H\\ O", '\u0150'], ['\\\\u\\ o', '\u014F'], ['\\\\u\\ O', '\u014E'], ["\\\\intx", '\u2A18'], ["\\\\lvec", '\u20D0'], ["\\\\Join", '\u2A1D'], ["\\\\zcmp", '\u2A1F'], ["\\\\pfun", '\u21F8'], ["\\\\cong", '\u2245'], ["\\\\smte", '\u2AAC'], ["\\\\v\\ N", '\u0147'], ["\\\\ffun", '\u21FB'], ["\\\\c\\ n", '\u0146'], ["\\\\c\\ N", '\u0145'], ['\\\\u\\ E', '\u0114'], ["\\\\odiv", '\u2A38'], ["\\\\fcmp", '\u2A3E'], ["\\\\mlcp", '\u2ADB'], ["\\\\v\\ l", '\u013E'], ["\\\\v\\ L", '\u013D'], ["\\\\c\\ l", '\u013C'], ["\\\\c\\ L", '\u013B'], ["\\\\\"\\\\i", '\xEF'], ["\\\\v\\ e", '\u011B'], ["\\\\ElOr", '\u2A56'], ["\\\\dsub", '\u2A64'], ["\\\\rsub", '\u2A65'], ["\\\\oint", '\u222E'], ["\\\\'\\\\i", '\xED'], ["\\\\`\\\\i", '\xEC'], ["\\\\c\\ k", '\u0137'], ["\\\\Same", '\u2A76'], ["\\\\c\\ K", '\u0136'], ["\\\\geqq", '\u2267'], ["\\\\c\\ c", '\xE7'], ["\\\\prod", '\u220F'], ["\\\\v\\ E", '\u011A'], ["\\\\lneq", '\u2A87'], ["\\\\gneq", '\u2A88'], ['\\\\upin', '\u27D2'], ['\\\\u\\ I', '\u012C'], ["\\\\not>", '\u226F'], ["_\\\\ast", '\u2217'], ["\\\\iota", '\u03B9'], ["\\\\zeta", '\u03B6'], ["\\\\beta", '\u03B2'], ["\\\\male", '\u2642'], ["\\\\nisd", '\u22FA'], ["\\\\quad", '\u2001'], ["\\\\v\\ c", '\u010D'], ["\\\\v\\ n", '\u0148'], ["\\\\glj", '\u2AA4'], ["\\\\int", '\u222B'], ["\\\\cup", '\u222A'], ["\\\\QED", '\u220E'], ["\\\\cap", '\u2229'], ["\\\\gla", '\u2AA5'], ["\\\\Psi", '\u03A8'], ["\\\\Phi", '\u03A6'], ["\\\\sum", '\u2211'], ["\\\\Rsh", '\u21B1'], ["\\\\vee", '\u2228'], ["\\\\Lsh", '\u21B0'], ["\\\\sim", '\u223C'], ["\\\\lhd", '\u25C1'], ["\\\\LHD", '\u25C0'], ["\\\\rhd", '\u25B7'], ["\\\\phi", '\u03D5'], ["\\\\lgE", '\u2A91'], ["\\\\glE", '\u2A92'], ["\\\\RHD", '\u25B6'], ["\\\\cat", '\u2040'], ["\\\\Yup", '\u2144'], ["\\\\vec", '\u20D1'], ["\\\\div", '\xF7'], ["\\\\mid", '\u2223'], ["\\\\mho", '\u2127'], ["\\\\psi", '\u03C8'], ["\\\\chi", '\u03C7'], ["\\\\top", '\u22A4'], ["\\\\Not", '\u2AEC'], ["\\\\tau", '\u03C4'], ["\\\\smt", '\u2AAA'], ["\\\\rho", '\u03C1'], ["\\\\sun", '\u263C'], ["\\\\Cap", '\u22D2'], ["\\\\lat", '\u2AAB'], ["\\\\leo", '\u264C'], ["\\\\Sun", '\u2609'], ["\\\\Cup", '\u22D3'], ["\\\\eta", '\u03B7'], ["\\\\Top", '\u2AEA'], ["\\\\bij", '\u2916'], ["\\\\eth", '\u01AA'], ["\\\\geq", '\u2265'], ["\\\\nis", '\u22FC'], ["\\\\leq", '\u2264'], ["\\\\ll", '\u226A'], ["\\\\dj", '\u0111'], ["\\\\in", '\u2208'], ["\\\\\\-", '\xAD'], ["\\\\th", '\xFE'], ["\\\\wp", '\u2118'], ["\\\\aa", '\xE5'], ["\\\\ss", '\xDF'], ["\\\\ae", '\xE6'], ["\\\\ng", '\u014B'], ["\\\\mu", '\u03BC'], ["''''", '\u2057'], ["\\\\pi", '\u03C0'], ["\\\\gg", '\u226B'], ["\\\\xi", '\u03BE'], ["\\\\ni", '\u220B'], ["\\\\nu", '\u03BD'], ["\\\\pm", '\xB1'], ["\\\\mp", '\u2213'], ["\\\\wr", '\u2240'], ["\\\\\\.", '\u0307'], ["\\\\dh", '\xF0'], ["\\\\oe", '\u0153'], ['\\\\url', '\\XXurl'], ['\\\\u', '\u0306'], ["\\\\XXurl", '\\url'], ["\\\\L", '\u0141'], ["\\\\c", '\xB8'], ["\\\\i", '\u0131'], ["\\\\k", '\u02DB'], ["\\\\H", '\u02DD'], ["\\\\\"", '\u0308'], ["\\\\v", '\u030C'], ["\\\\o", '\xF8'], ["\\\\`", '\u0300'], ["\\\\'", '\u0301'], ["\\\\~", '\u0303'], ["\\\\r", '\u02DA'], ["\\\\O", '\xD8'], ["\\\\=", '\u0304'], ["\\\\l", '\u0142'], ["'''", '\u2034'], ["\\\\textasciitilde", '\\~']];
},{}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibLatexLiteralParser = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LATEX_COMMANDS = [// commands that can can contain richtext.
['\\textbf{', 'strong'], ['\\mkbibbold{', 'strong'], ['\\mkbibitalic{', 'em'], ['\\mkbibemph{', 'em'], ['\\textit{', 'em'], ['\\emph{', 'em'], ['\\textsc{', 'smallcaps'], ['\\enquote{', 'enquote'], ['\\textsubscript{', 'sub'], ['\\textsuperscript{', 'sup']];

var LATEX_VERBATIM_COMMANDS = [// commands that can only contain plaintext.
['\\url{', 'url']];

var LATEX_SPECIAL_CHARS = {
    '&': '&',
    '%': '%',
    '$': '$',
    '#': '#',
    '_': '_',
    '{': '{',
    '}': '}',
    ',': ',',
    '~': '~',
    '^': '^',
    '\'': '\'',
    ';': '\u2004'
};

var BibLatexLiteralParser = exports.BibLatexLiteralParser = function () {
    function BibLatexLiteralParser(string) {
        var cpMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        (0, _classCallCheck3.default)(this, BibLatexLiteralParser);

        this.string = string;
        this.cpMode = cpMode; // Whether to consider case preservation.
        this.braceLevel = 0;
        this.slen = string.length;
        this.si = 0; // string index
        this.json = [];
        this.braceClosings = [];
        this.currentMarks = [];
        this.inCasePreserve = false;
        this.textNode = false;
    }

    // If the last text node has no content, remove it.


    (0, _createClass3.default)(BibLatexLiteralParser, [{
        key: 'removeIfEmptyTextNode',
        value: function removeIfEmptyTextNode() {
            if (this.textNode.text.length === 0) {
                this.json.pop();
            }
        }
    }, {
        key: 'checkAndAddNewTextNode',
        value: function checkAndAddNewTextNode() {
            if (this.textNode.text.length > 0) {
                // We have text in the last node already,
                // so we need to start a new text node.
                this.addNewTextNode();
            }
        }
    }, {
        key: 'addNewTextNode',
        value: function addNewTextNode() {
            this.textNode = { type: 'text', text: '' };
            this.json.push(this.textNode);
        }
    }, {
        key: 'stringParser',
        value: function stringParser() {
            this.addNewTextNode();

            parseString: while (this.si < this.slen) {
                switch (this.string[this.si]) {
                    case '\\':
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = (0, _getIterator3.default)(LATEX_COMMANDS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var command = _step.value;

                                if (this.string.substring(this.si, this.si + command[0].length) === command[0]) {
                                    this.braceLevel++;
                                    this.si += command[0].length;
                                    this.checkAndAddNewTextNode();
                                    if (this.cpMode) {
                                        // If immediately inside a brace that added case protection, remove case protection. See
                                        // http://tex.stackexchange.com/questions/276943/biblatex-how-to-emphasize-but-not-caps-protect
                                        if (this.inCasePreserve === this.braceLevel - 1 && this.string[this.si - 1] === '{' && this.currentMarks[this.currentMarks.length - 1].type === 'nocase') {
                                            this.currentMarks.pop();
                                            this.inCasePreserve = false;
                                        } else {
                                            // Of not immediately inside a brace, any styling also
                                            // adds case protection.
                                            this.currentMarks.push({ type: 'nocase' });
                                            this.inCasePreserve = this.braceLevel;
                                        }
                                    }
                                    this.currentMarks.push({ type: command[1] });
                                    this.textNode.marks = this.currentMarks.slice();
                                    this.braceClosings.push(true);
                                    continue parseString;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = (0, _getIterator3.default)(LATEX_VERBATIM_COMMANDS), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var _command = _step2.value;

                                if (this.string.substring(this.si, this.si + _command[0].length) === _command[0]) {
                                    this.checkAndAddNewTextNode();
                                    this.textNode.marks = this.currentMarks.slice();
                                    this.textNode.marks.push({ type: _command[1] });
                                    this.si += _command[0].length;
                                    var _sj = this.si;
                                    var internalBraceLevel = 0;
                                    while (_sj < this.slen && (this.string[_sj] !== '}' || internalBraceLevel > 0)) {
                                        switch (this.string[_sj]) {
                                            case '{':
                                                internalBraceLevel++;
                                                break;
                                            case '}':
                                                internalBraceLevel--;
                                                break;
                                        }
                                        _sj++;
                                    }
                                    this.textNode.text = this.string.substring(this.si, _sj);
                                    this.addNewTextNode();
                                    this.si = _sj + 1;
                                    continue parseString;
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        if (LATEX_SPECIAL_CHARS[this.string[this.si + 1]]) {
                            this.textNode.text += LATEX_SPECIAL_CHARS[this.string[this.si + 1]];
                            this.si += 2;
                        } else {
                            // We don't know the command and skip it.
                            this.si++;
                            while (this.si < this.slen && this.string[this.si].match("[a-zA-Z0-9]")) {
                                this.si++;
                            }
                            // If there is a brace at the end of the command,
                            // increase brace level but ignore brace.
                            if (this.string[this.si] === "{") {
                                this.braceLevel++;
                                this.braceClosings.push(false);
                                this.si++;
                            }
                        }
                        break;
                    case '_':
                        switch (this.string[this.si + 1]) {
                            case '{':
                                this.checkAndAddNewTextNode();
                                this.braceLevel++;
                                this.si += 2;
                                this.currentMarks.push({ type: 'sub' });
                                this.textNode.marks = this.currentMarks.slice();
                                this.braceClosings.push(true);
                                break;
                            case '\\':
                                // There is a command following directly. Ignore the sub symbol.
                                this.si++;
                                break;
                            default:
                                // We only add the next character to a sub node.
                                this.checkAndAddNewTextNode();
                                this.textNode.marks = this.currentMarks.slice();
                                this.textNode.marks.push({ type: 'sub' });
                                this.textNode.text = this.string[this.si + 1];
                                this.addNewTextNode();
                                this.si += 2;
                        }
                        break;
                    case '^':
                        switch (this.string[this.si + 1]) {
                            case '{':
                                this.checkAndAddNewTextNode();
                                this.braceLevel++;
                                this.si += 2;
                                this.currentMarks.push({ type: 'sup' });
                                this.textNode.marks = this.currentMarks.slice();
                                this.braceClosings.push(true);
                                break;
                            case '\\':
                                // There is a command following directly. Ignore the sup symbol.
                                this.si++;
                                break;
                            default:
                                // We only add the next character to a sup node.
                                this.checkAndAddNewTextNode();
                                this.textNode.marks = this.currentMarks.slice();
                                this.textNode.marks.push({ type: 'sup' });
                                this.textNode.text = this.string[this.si + 1];
                                this.addNewTextNode();
                                this.si += 2;
                        }
                        break;
                    case '{':
                        this.braceLevel++;
                        if (this.inCasePreserve || !this.cpMode) {
                            // If already inside case preservation, do not add a second
                            this.braceClosings.push(false);
                        } else {
                            this.inCasePreserve = this.braceLevel;
                            this.checkAndAddNewTextNode();
                            this.currentMarks.push({ type: 'nocase' });
                            this.textNode.marks = this.currentMarks.slice();
                            this.braceClosings.push(true);
                        }
                        this.si++;
                        break;
                    case '}':
                        this.braceLevel--;
                        if (this.braceLevel > -1) {
                            var closeBrace = this.braceClosings.pop();
                            if (closeBrace) {
                                this.checkAndAddNewTextNode();
                                var lastMark = this.currentMarks.pop();
                                if (this.inCasePreserve === this.braceLevel + 1) {
                                    this.inCasePreserve = false;
                                    // The last tag may have added more tags. The
                                    // lowest level will be the case preserving one.
                                    while (lastMark.type !== 'nocase' && this.currentMarks.length) {
                                        lastMark = this.currentMarks.pop();
                                    }
                                }
                                if (this.currentMarks.length) {
                                    this.textNode.marks = this.currentMarks.slice();
                                }
                            }
                            this.si++;
                            continue parseString;
                        } else {
                            // A brace was closed before it was opened. Abort and return the original string.
                            return [{ type: 'text', text: this.string }];
                        }
                        break;
                    case '$':
                        // math env, just remove
                        this.si++;
                        break;
                    case '~':
                        // a non-breakable space
                        this.textNode.text += '\xA0';
                        this.si++;
                        break;
                    case '%':
                        // An undefined variable.
                        this.removeIfEmptyTextNode();
                        var sj = this.si + 1;
                        while (sj < this.slen && this.string[sj] !== '%') {
                            sj++;
                        }
                        var variable = this.string.substring(this.si + 1, sj);
                        this.json.push({ type: 'variable', attrs: { variable: variable } });
                        this.addNewTextNode();
                        this.si = sj + 1;
                        break;
                    case '\r':
                        this.si++;
                        break;
                    case '\n':
                        if (['\r', '\n'].includes(this.string[this.si + 1]) || this.textNode.text.length && this.textNode.text[this.textNode.text.length - 1] === '\n') {
                            this.textNode.text += '\n';
                        } else {
                            this.textNode.text += ' ';
                        }
                        this.si++;
                        break;
                    default:
                        this.textNode.text += this.string[this.si];
                        this.si++;
                }
            }

            if (this.braceLevel > 0) {
                // Too many opening braces, we return the original string.
                return [{ type: 'text', text: this.string }];
            }

            this.removeIfEmptyTextNode();

            // Braces were accurate.
            return this.json;
        }
    }, {
        key: 'output',
        get: function get() {
            return this.stringParser();
        }
    }]);
    return BibLatexLiteralParser;
}();
},{"babel-runtime/core-js/get-iterator":17,"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibLatexNameParser = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _literalParser = require('./literal-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BibLatexNameParser = exports.BibLatexNameParser = function () {
    function BibLatexNameParser(nameString) {
        (0, _classCallCheck3.default)(this, BibLatexNameParser);

        this.nameString = nameString;
        this.nameDict = {};
        this._particle = [];
        this._suffix = [];
    }

    (0, _createClass3.default)(BibLatexNameParser, [{
        key: 'parseName',
        value: function parseName() {
            var parts = this.splitTexString(this.nameString, ',');
            if (parts.length > 1 && this.nameString.includes('=')) {
                // extended name detected.
                this.parseExtendedName(parts);
            } else if (parts.length === 3) {
                // von Last, Jr, First
                this.processVonLast(this.splitTexString(parts[0]), this.splitTexString(parts[1]));
                this.processFirstMiddle(this.splitTexString(parts[2]));
            } else if (parts.length === 2) {
                // von Last, First
                this.processVonLast(this.splitTexString(parts[0]));
                this.processFirstMiddle(this.splitTexString(parts[1]));
            } else if (parts.length === 1) {
                // First von Last
                var spacedParts = this.splitTexString(this.nameString);
                if (spacedParts.length === 1) {
                    this.nameDict['literal'] = this._reformLiteral(spacedParts[0].trim());
                } else {
                    var split = this.splitAt(spacedParts);
                    var firstMiddle = split[0];
                    var vonLast = split[1];
                    if (vonLast.length === 0 && firstMiddle.length > 1) {
                        var last = firstMiddle.pop();
                        vonLast.push(last);
                    }
                    this.processFirstMiddle(firstMiddle);
                    this.processVonLast(vonLast);
                }
            } else {
                this.nameDict['literal'] = this._reformLiteral(this.nameString.trim());
            }
        }
    }, {
        key: 'parseExtendedName',
        value: function parseExtendedName(parts) {
            var _this = this;

            var that = this;
            parts.forEach(function (part) {
                var attrParts = part.trim().replace(/^\"|\"$/g, '').split('=');
                var attrName = attrParts.shift().trim().toLowerCase();
                if (['family', 'given', 'prefix', 'suffix'].includes(attrName)) {
                    _this.nameDict[attrName] = that._reformLiteral(attrParts.join('=').trim());
                } else if (attrName === 'useprefix') {
                    if (attrParts.join('').trim().toLowerCase() === 'true') {
                        _this.nameDict['useprefix'] = true;
                    } else {
                        _this.nameDict['useprefix'] = false;
                    }
                }
            });
        }
    }, {
        key: 'splitTexString',
        value: function splitTexString(string) {
            var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '[\\s~]+';

            var braceLevel = 0;
            var inQuotes = false;
            var nameStart = 0;
            var result = [];
            var stringLen = string.length;
            var pos = 0;
            while (pos < stringLen) {
                var char = string.charAt(pos);
                switch (char) {
                    case '{':
                        braceLevel += 1;
                        break;
                    case '}':
                        braceLevel -= 1;
                        break;
                    case '"':
                        inQuotes = !inQuotes;
                        break;
                    case '\\':
                        // skip next
                        pos++;
                        break;
                    default:
                        if (braceLevel === 0 && inQuotes === false && pos > 0) {
                            var match = string.slice(pos).match(RegExp('^' + sep));
                            if (match) {
                                var sepLen = match[0].length;
                                if (pos + sepLen < stringLen) {
                                    result.push(string.slice(nameStart, pos));
                                    nameStart = pos + sepLen;
                                }
                            }
                        }
                }

                pos++;
            }
            if (nameStart < stringLen) {
                result.push(string.slice(nameStart));
            }
            return result;
        }
    }, {
        key: 'processFirstMiddle',
        value: function processFirstMiddle(parts) {
            this.nameDict['given'] = this._reformLiteral(parts.join(' ').trim());
        }
    }, {
        key: 'processVonLast',
        value: function processVonLast(parts) {
            var lineage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var rSplit = this.rsplitAt(parts);
            var von = rSplit[0];
            var last = rSplit[1];
            if (von && !last) {
                last.push(von.pop());
            }
            if (von.length) {
                this.nameDict['prefix'] = this._reformLiteral(von.join(' ').trim());
                this.nameDict['useprefix'] = true; // The info at hand is not clear, so we guess.
            }
            if (lineage.length) {
                this.nameDict['suffix'] = this._reformLiteral(lineage.join(' ').trim());
            }
            this.nameDict['family'] = this._reformLiteral(last.join(' ').trim());
        }
    }, {
        key: 'findFirstLowerCaseWord',
        value: function findFirstLowerCaseWord(lst) {
            // return index of first lowercase word in lst. Else return length of lst.
            for (var i = 0; i < lst.length; i++) {
                var word = lst[i];
                if (word === word.toLowerCase()) {
                    return i;
                }
            }
            return lst.length;
        }
    }, {
        key: 'splitAt',
        value: function splitAt(lst) {
            // Split the given list into two parts.
            // The second part starts with the first lowercase word.
            var pos = this.findFirstLowerCaseWord(lst);
            return [lst.slice(0, pos), lst.slice(pos)];
        }
    }, {
        key: 'rsplitAt',
        value: function rsplitAt(lst) {
            var rpos = this.findFirstLowerCaseWord(lst.slice().reverse());
            var pos = lst.length - rpos;
            return [lst.slice(0, pos), lst.slice(pos)];
        }
    }, {
        key: '_reformLiteral',
        value: function _reformLiteral(litString) {
            var parser = new _literalParser.BibLatexLiteralParser(litString);
            return parser.output;
        }
    }, {
        key: 'output',
        get: function get() {
            this.parseName();
            return this.nameDict;
        }
    }]);
    return BibLatexNameParser;
}();
},{"./literal-parser":42,"babel-runtime/helpers/classCallCheck":25,"babel-runtime/helpers/createClass":26}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.splitTeXString = splitTeXString;
// split at each occurence of splitToken, but only if no braces are currently open.
function splitTeXString(texString) {
    var splitToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'and';

    var output = [];
    var tokenRe = /([^\s{}]+|\s|{|})/g;
    var j = 0;
    var k = 0;
    var item = void 0;
    while ((item = tokenRe.exec(texString)) !== null) {
        var token = item[0];
        if (k === output.length) {
            output.push('');
        }
        switch (token) {
            case '{':
                j += 1;
                break;
            case '}':
                j -= 1;
                break;
            case splitToken:
                if (0 === j) {
                    k++;
                } else {
                    output[k] += token;
                }
                break;
            default:
                output[k] += token;
        }
    }
    return output;
}
},{}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _biblatex = require("./import/biblatex");

Object.defineProperty(exports, "BibLatexParser", {
  enumerable: true,
  get: function get() {
    return _biblatex.BibLatexParser;
  }
});

var _biblatex2 = require("./export/biblatex");

Object.defineProperty(exports, "BibLatexExporter", {
  enumerable: true,
  get: function get() {
    return _biblatex2.BibLatexExporter;
  }
});

var _csl = require("./export/csl");

Object.defineProperty(exports, "CSLExporter", {
  enumerable: true,
  get: function get() {
    return _csl.CSLExporter;
  }
});

var _const = require("./const");

Object.defineProperty(exports, "BibFieldTypes", {
  enumerable: true,
  get: function get() {
    return _const.BibFieldTypes;
  }
});
Object.defineProperty(exports, "BibTypes", {
  enumerable: true,
  get: function get() {
    return _const.BibTypes;
  }
});

var _edtf = require("./edtf");

Object.defineProperty(exports, "edtfParse", {
  enumerable: true,
  get: function get() {
    return _edtf.edtfParse;
  }
});
Object.defineProperty(exports, "edtfCheck", {
  enumerable: true,
  get: function get() {
    return _edtf.edtfCheck;
  }
});
},{"./const":31,"./edtf":32,"./export/biblatex":37,"./export/csl":39,"./import/biblatex":40}],46:[function(require,module,exports){
(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    module.exports = mod()
  else if (typeof define == "function" && define.amd) // AMD
    return define([], mod)
  else // Plain browser env
    (this || window).browserKeymap = mod()
})(function() {
  "use strict"

  var mac = typeof navigator != "undefined" ? /Mac/.test(navigator.platform)
          : typeof os != "undefined" ? os.platform() == "darwin" : false

  // :: Object<string>
  // A map from key codes to key names.
  var keyNames = {
    3: "Enter", 8: "Backspace", 9: "Tab", 13: "Enter", 16: "Shift", 17: "Ctrl", 18: "Alt",
    19: "Pause", 20: "CapsLock", 27: "Esc", 32: "Space", 33: "PageUp", 34: "PageDown", 35: "End",
    36: "Home", 37: "Left", 38: "Up", 39: "Right", 40: "Down", 44: "PrintScrn", 45: "Insert",
    46: "Delete", 59: ";", 61: "=", 91: "Mod", 92: "Mod", 93: "Mod",
    106: "*", 107: "=", 109: "-", 110: ".", 111: "/", 127: "Delete",
    173: "-", 186: ";", 187: "=", 188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\",
    221: "]", 222: "'", 63232: "Up", 63233: "Down", 63234: "Left", 63235: "Right", 63272: "Delete",
    63273: "Home", 63275: "End", 63276: "PageUp", 63277: "PageDown", 63302: "Insert"
  }

  // Number keys
  for (var i = 0; i < 10; i++) keyNames[i + 48] = keyNames[i + 96] = String(i)
  // Alphabetic keys
  for (var i = 65; i <= 90; i++) keyNames[i] = String.fromCharCode(i)
  // Function keys
  for (var i = 1; i <= 12; i++) keyNames[i + 111] = keyNames[i + 63235] = "F" + i

  // :: (KeyboardEvent) → ?string
  // Find a name for the given keydown event. If the keycode in the
  // event is not known, this will return `null`. Otherwise, it will
  // return a string like `"Shift-Cmd-Ctrl-Alt-Home"`. The parts before
  // the dashes give the modifiers (always in that order, if present),
  // and the last word gives the key name, which one of the names in
  // `keyNames`.
  //
  // The convention for keypress events is to use the pressed character
  // between single quotes. Due to limitations in the browser API,
  // keypress events can not have modifiers.
  function keyName(event) {
    if (event.type == "keypress") return "'" + String.fromCharCode(event.charCode) + "'"

    var base = keyNames[event.keyCode], name = base
    if (name == null || event.altGraphKey) return null

    if (event.altKey && base != "Alt") name = "Alt-" + name
    if (event.ctrlKey && base != "Ctrl") name = "Ctrl-" + name
    if (event.metaKey && base != "Cmd") name = "Cmd-" + name
    if (event.shiftKey && base != "Shift") name = "Shift-" + name
    return name
  }

  // :: (string) → bool
  // Test whether the given key name refers to a modifier key.
  function isModifierKey(name) {
    name = /[^-]*$/.exec(name)[0]
    return name == "Ctrl" || name == "Alt" || name == "Shift" || name == "Mod"
  }

  // :: (string) → string
  // Normalize a sloppy key name, which may have modifiers in the wrong
  // order or use shorthands for modifiers, to a properly formed key
  // name. Used to normalize names provided in keymaps.
  //
  // Note that the modifier `mod` is a shorthand for `Cmd` on Mac, and
  // `Ctrl` on other platforms.
  function normalizeKeyName(name) {
    var parts = name.split(/-(?!'?$)/), result = parts[parts.length - 1]
    var alt, ctrl, shift, cmd
    for (var i = 0; i < parts.length - 1; i++) {
      var mod = parts[i]
      if (/^(cmd|meta|m)$/i.test(mod)) cmd = true
      else if (/^a(lt)?$/i.test(mod)) alt = true
      else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true
      else if (/^s(hift)?$/i.test(mod)) shift = true
      else if (/^mod$/i.test(mod)) { if (mac) cmd = true; else ctrl = true }
      else throw new Error("Unrecognized modifier name: " + mod)
    }
    if (alt) result = "Alt-" + result
    if (ctrl) result = "Ctrl-" + result
    if (cmd) result = "Cmd-" + result
    if (shift) result = "Shift-" + result
    return result
  }

  // :: (Object, ?Object)
  // A keymap binds a set of [key names](#keyName) to commands names
  // or functions.
  //
  // Construct a keymap using the bindings in `keys`, whose properties
  // should be [key names](#keyName) or space-separated sequences of
  // key names. In the second case, the binding will be for a
  // multi-stroke key combination.
  //
  // When `options` has a property `call`, this will be a programmatic
  // keymap, meaning that instead of looking keys up in its set of
  // bindings, it will pass the key name to `options.call`, and use
  // the return value of that calls as the resolved binding.
  //
  // `options.name` can be used to give the keymap a name, making it
  // easier to [remove](#ProseMirror.removeKeymap) from an editor.
  function Keymap(keys, options) {
    this.options = options || {}
    this.bindings = Object.create(null)
    if (keys) this.addBindings(keys)
  }

  Keymap.prototype = {
    normalize: function(name) {
      return this.options.multi !== false ? name.split(/ +(?!\'$)/).map(normalizeKeyName) : [normalizeKeyName(name)]
    },

    // :: (string, any)
    // Add a binding for the given key or key sequence.
    addBinding: function(keyname, value) {
      var keys = this.normalize(keyname)
      for (var i = 0; i < keys.length; i++) {
        var name = keys.slice(0, i + 1).join(" ")
        var val = i == keys.length - 1 ? value : "..."
        var prev = this.bindings[name]
        if (!prev) this.bindings[name] = val
        else if (prev != val) throw new Error("Inconsistent bindings for " + name)
      }
    },

    // :: (Object<any>)
    // Add all the bindings in the given object to the keymap.
    addBindings: function(bindings) {
      for (var keyname in bindings) if (Object.prototype.hasOwnProperty.call(bindings, keyname))
        this.addBinding(keyname, bindings[keyname])
    },

    // :: (string)
    // Remove the binding for the given key or key sequence.
    removeBinding: function(keyname) {
      var keys = this.normalize(keyname)
      for (var i = keys.length - 1; i >= 0; i--) {
        var name = keys.slice(0, i).join(" ")
        var val = this.bindings[name]
        if (val == "..." && !this.unusedMulti(name))
          break
        else if (val)
          delete this.bindings[name]
      }
    },

    unusedMulti: function(name) {
      for (var binding in this.bindings)
        if (binding.length > name && binding.indexOf(name) == 0 && binding.charAt(name.length) == " ")
          return false
      return true
    },

    // :: (string, ?any) → any
    // Looks up the given key or key sequence in this keymap. Returns
    // the value the key is bound to (which may be undefined if it is
    // not bound), or the string `"..."` if the key is a prefix of a
    // multi-key sequence that is bound by this keymap.
    lookup: function(key, context) {
      return this.options.call ? this.options.call(key, context) : this.bindings[key]
    },

    // :: (any) → ?string
    reverseLookup: function(value) {
      for (var keyname in this.bindings)
        if (this.bindings[keyname] == value) return keyname
    },

    constructor: Keymap
  }

  Keymap.keyName = keyName
  Keymap.isModifierKey = isModifierKey
  Keymap.normalizeKeyName = normalizeKeyName

  return Keymap
})

},{}],47:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;
},{"../../modules/_core":70,"../../modules/es6.array.from":133,"../../modules/es6.string.iterator":140}],48:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');
},{"../modules/core.get-iterator":131,"../modules/es6.string.iterator":140,"../modules/web.dom.iterable":145}],49:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');
},{"../modules/core.is-iterable":132,"../modules/es6.string.iterator":140,"../modules/web.dom.iterable":145}],50:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":70,"../../modules/es6.object.assign":135}],51:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":70,"../../modules/es6.object.define-property":136}],52:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":70,"../../modules/es6.object.keys":137}],53:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.set');
require('../modules/es7.set.to-json');
module.exports = require('../modules/_core').Set;
},{"../modules/_core":70,"../modules/es6.object.to-string":138,"../modules/es6.set":139,"../modules/es6.string.iterator":140,"../modules/es7.set.to-json":142,"../modules/web.dom.iterable":145}],54:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":70,"../../modules/es6.object.to-string":138,"../../modules/es6.symbol":141,"../../modules/es7.symbol.async-iterator":143,"../../modules/es7.symbol.observable":144}],55:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":128,"../../modules/es6.string.iterator":140,"../../modules/web.dom.iterable":145}],56:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],57:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],58:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],59:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":89}],60:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":80}],61:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":120,"./_to-iobject":122,"./_to-length":123}],62:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":64,"./_ctx":72,"./_iobject":86,"./_to-length":123,"./_to-object":124}],63:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":88,"./_is-object":89,"./_wks":129}],64:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":63}],65:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":66,"./_wks":129}],66:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],67:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":58,"./_ctx":72,"./_defined":73,"./_descriptors":74,"./_for-of":80,"./_iter-define":92,"./_iter-step":94,"./_meta":98,"./_object-create":100,"./_object-dp":101,"./_redefine-all":113,"./_set-species":115}],68:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":60,"./_classof":65}],69:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , $export        = require('./_export')
  , meta           = require('./_meta')
  , fails          = require('./_fails')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , forOf          = require('./_for-of')
  , anInstance     = require('./_an-instance')
  , isObject       = require('./_is-object')
  , setToStringTag = require('./_set-to-string-tag')
  , dP             = require('./_object-dp').f
  , each           = require('./_array-methods')(0)
  , DESCRIPTORS    = require('./_descriptors');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function(target, iterable){
      anInstance(target, C, NAME, '_c');
      target._c = new Base;
      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
        anInstance(this, C, KEY);
        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)dP(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":58,"./_array-methods":62,"./_descriptors":74,"./_export":78,"./_fails":79,"./_for-of":80,"./_global":81,"./_hide":83,"./_is-object":89,"./_meta":98,"./_object-dp":101,"./_redefine-all":113,"./_set-to-string-tag":116}],70:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],71:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":101,"./_property-desc":112}],72:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":56}],73:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],74:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":79}],75:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":81,"./_is-object":89}],76:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],77:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":106,"./_object-keys":109,"./_object-pie":110}],78:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":70,"./_ctx":72,"./_global":81,"./_hide":83}],79:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],80:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":59,"./_ctx":72,"./_is-array-iter":87,"./_iter-call":90,"./_to-length":123,"./core.get-iterator-method":130}],81:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],82:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],83:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":74,"./_object-dp":101,"./_property-desc":112}],84:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":81}],85:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":74,"./_dom-create":75,"./_fails":79}],86:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":66}],87:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":95,"./_wks":129}],88:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":66}],89:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],90:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":59}],91:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":83,"./_object-create":100,"./_property-desc":112,"./_set-to-string-tag":116,"./_wks":129}],92:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":78,"./_has":82,"./_hide":83,"./_iter-create":91,"./_iterators":95,"./_library":97,"./_object-gpo":107,"./_redefine":114,"./_set-to-string-tag":116,"./_wks":129}],93:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":129}],94:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],95:[function(require,module,exports){
module.exports = {};
},{}],96:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":109,"./_to-iobject":122}],97:[function(require,module,exports){
module.exports = true;
},{}],98:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":79,"./_has":82,"./_is-object":89,"./_object-dp":101,"./_uid":126}],99:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":79,"./_iobject":86,"./_object-gops":106,"./_object-keys":109,"./_object-pie":110,"./_to-object":124}],100:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":59,"./_dom-create":75,"./_enum-bug-keys":76,"./_html":84,"./_object-dps":102,"./_shared-key":117}],101:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":59,"./_descriptors":74,"./_ie8-dom-define":85,"./_to-primitive":125}],102:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":59,"./_descriptors":74,"./_object-dp":101,"./_object-keys":109}],103:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":74,"./_has":82,"./_ie8-dom-define":85,"./_object-pie":110,"./_property-desc":112,"./_to-iobject":122,"./_to-primitive":125}],104:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":105,"./_to-iobject":122}],105:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":76,"./_object-keys-internal":108}],106:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],107:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":82,"./_shared-key":117,"./_to-object":124}],108:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":61,"./_has":82,"./_shared-key":117,"./_to-iobject":122}],109:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":76,"./_object-keys-internal":108}],110:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],111:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":70,"./_export":78,"./_fails":79}],112:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],113:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":83}],114:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":83}],115:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":70,"./_descriptors":74,"./_global":81,"./_object-dp":101,"./_wks":129}],116:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":82,"./_object-dp":101,"./_wks":129}],117:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":118,"./_uid":126}],118:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":81}],119:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":73,"./_to-integer":121}],120:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":121}],121:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],122:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":73,"./_iobject":86}],123:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":121}],124:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":73}],125:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":89}],126:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],127:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":70,"./_global":81,"./_library":97,"./_object-dp":101,"./_wks-ext":128}],128:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":129}],129:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":81,"./_shared":118,"./_uid":126}],130:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":65,"./_core":70,"./_iterators":95,"./_wks":129}],131:[function(require,module,exports){
var anObject = require('./_an-object')
  , get      = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};
},{"./_an-object":59,"./_core":70,"./core.get-iterator-method":130}],132:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};
},{"./_classof":65,"./_core":70,"./_iterators":95,"./_wks":129}],133:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":71,"./_ctx":72,"./_export":78,"./_is-array-iter":87,"./_iter-call":90,"./_iter-detect":93,"./_to-length":123,"./_to-object":124,"./core.get-iterator-method":130}],134:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":57,"./_iter-define":92,"./_iter-step":94,"./_iterators":95,"./_to-iobject":122}],135:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":78,"./_object-assign":99}],136:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":74,"./_export":78,"./_object-dp":101}],137:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":109,"./_object-sap":111,"./_to-object":124}],138:[function(require,module,exports){

},{}],139:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":69,"./_collection-strong":67}],140:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":92,"./_string-at":119}],141:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":59,"./_descriptors":74,"./_enum-keys":77,"./_export":78,"./_fails":79,"./_global":81,"./_has":82,"./_hide":83,"./_is-array":88,"./_keyof":96,"./_library":97,"./_meta":98,"./_object-create":100,"./_object-dp":101,"./_object-gopd":103,"./_object-gopn":105,"./_object-gopn-ext":104,"./_object-gops":106,"./_object-keys":109,"./_object-pie":110,"./_property-desc":112,"./_redefine":114,"./_set-to-string-tag":116,"./_shared":118,"./_to-iobject":122,"./_to-primitive":125,"./_uid":126,"./_wks":129,"./_wks-define":127,"./_wks-ext":128}],142:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":68,"./_export":78}],143:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":127}],144:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":127}],145:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":81,"./_hide":83,"./_iterators":95,"./_wks":129,"./es6.array.iterator":134}],146:[function(require,module,exports){
/* eslint no-console:0 */
/**
 * This is the main entry point for KaTeX. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from KaTeX are
 * errors in the expression, or errors in javascript handling.
 */

var ParseError = require("./src/ParseError");
var Settings = require("./src/Settings");

var buildTree = require("./src/buildTree");
var parseTree = require("./src/parseTree");
var utils = require("./src/utils");

/**
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */
var render = function(expression, baseNode, options) {
    utils.clearNode(baseNode);

    var settings = new Settings(options);

    var tree = parseTree(expression, settings);
    var node = buildTree(tree, expression, settings).toNode();

    baseNode.appendChild(node);
};

// KaTeX's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.
if (typeof document !== "undefined") {
    if (document.compatMode !== "CSS1Compat") {
        typeof console !== "undefined" && console.warn(
            "Warning: KaTeX doesn't work in quirks mode. Make sure your " +
                "website has a suitable doctype.");

        render = function() {
            throw new ParseError("KaTeX doesn't work in quirks mode.");
        };
    }
}

/**
 * Parse and build an expression, and return the markup for that.
 */
var renderToString = function(expression, options) {
    var settings = new Settings(options);

    var tree = parseTree(expression, settings);
    return buildTree(tree, expression, settings).toMarkup();
};

/**
 * Parse an expression and return the parse tree.
 */
var generateParseTree = function(expression, options) {
    var settings = new Settings(options);
    return parseTree(expression, settings);
};

module.exports = {
    render: render,
    renderToString: renderToString,
    /**
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __parse: generateParseTree,
    ParseError: ParseError,
};

},{"./src/ParseError":149,"./src/Settings":151,"./src/buildTree":156,"./src/parseTree":165,"./src/utils":167}],147:[function(require,module,exports){
/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 */

var matchAt = require("match-at");

var ParseError = require("./ParseError");

// The main lexer class
function Lexer(input) {
    this._input = input;
}

// The resulting token returned from `lex`.
function Token(text, data, position) {
    this.text = text;
    this.data = data;
    this.position = position;
}

/* The following tokenRegex
 * - matches typical whitespace (but not NBSP etc.) using its first group
 * - matches symbol combinations which result in a single output character
 * - does not match any control character \x00-\x1f except whitespace
 * - does not match a bare backslash
 * - matches any ASCII character except those just mentioned
 * - does not match the BMP private use area \uE000-\uF8FF
 * - does not match bare surrogate code units
 * - matches any BMP character except for those just described
 * - matches any valid Unicode surrogate pair
 * - matches a backslash followed by one or more letters
 * - matches a backslash followed by any BMP character, including newline
 * Just because the Lexer matches something doesn't mean it's valid input:
 * If there is no matching function or symbol definition, the Parser will
 * still reject the input.
 */
var tokenRegex = new RegExp(
    "([ \r\n\t]+)|(" +                                // whitespace
    "---?" +                                          // special combinations
    "|[!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" +  // single codepoint
    "|[\uD800-\uDBFF][\uDC00-\uDFFF]" +               // surrogate pair
    "|\\\\(?:[a-zA-Z]+|[^\uD800-\uDFFF])" +           // function name
    ")"
);

var whitespaceRegex = /\s*/;

/**
 * This function lexes a single normal token. It takes a position and
 * whether it should completely ignore whitespace or not.
 */
Lexer.prototype._innerLex = function(pos, ignoreWhitespace) {
    var input = this._input;
    if (pos === input.length) {
        return new Token("EOF", null, pos);
    }
    var match = matchAt(tokenRegex, input, pos);
    if (match === null) {
        throw new ParseError(
            "Unexpected character: '" + input[pos] + "'",
            this, pos);
    } else if (match[2]) { // matched non-whitespace
        return new Token(match[2], null, pos + match[2].length);
    } else if (ignoreWhitespace) {
        return this._innerLex(pos + match[1].length, true);
    } else { // concatenate whitespace to a single space
        return new Token(" ", null, pos + match[1].length);
    }
};

// A regex to match a CSS color (like #ffffff or BlueViolet)
var cssColor = /#[a-z0-9]+|[a-z]+/i;

/**
 * This function lexes a CSS color.
 */
Lexer.prototype._innerLexColor = function(pos) {
    var input = this._input;

    // Ignore whitespace
    var whitespace = matchAt(whitespaceRegex, input, pos)[0];
    pos += whitespace.length;

    var match;
    if ((match = matchAt(cssColor, input, pos))) {
        // If we look like a color, return a color
        return new Token(match[0], null, pos + match[0].length);
    } else {
        throw new ParseError("Invalid color", this, pos);
    }
};

// A regex to match a dimension. Dimensions look like
// "1.2em" or ".4pt" or "1 ex"
var sizeRegex = /(-?)\s*(\d+(?:\.\d*)?|\.\d+)\s*([a-z]{2})/;

/**
 * This function lexes a dimension.
 */
Lexer.prototype._innerLexSize = function(pos) {
    var input = this._input;

    // Ignore whitespace
    var whitespace = matchAt(whitespaceRegex, input, pos)[0];
    pos += whitespace.length;

    var match;
    if ((match = matchAt(sizeRegex, input, pos))) {
        var unit = match[3];
        // We only currently handle "em" and "ex" units
        if (unit !== "em" && unit !== "ex") {
            throw new ParseError("Invalid unit: '" + unit + "'", this, pos);
        }
        return new Token(match[0], {
            number: +(match[1] + match[2]),
            unit: unit,
        }, pos + match[0].length);
    }

    throw new ParseError("Invalid size", this, pos);
};

/**
 * This function lexes a string of whitespace.
 */
Lexer.prototype._innerLexWhitespace = function(pos) {
    var input = this._input;

    var whitespace = matchAt(whitespaceRegex, input, pos)[0];
    pos += whitespace.length;

    return new Token(whitespace[0], null, pos);
};

/**
 * This function lexes a single token starting at `pos` and of the given mode.
 * Based on the mode, we defer to one of the `_innerLex` functions.
 */
Lexer.prototype.lex = function(pos, mode) {
    if (mode === "math") {
        return this._innerLex(pos, true);
    } else if (mode === "text") {
        return this._innerLex(pos, false);
    } else if (mode === "color") {
        return this._innerLexColor(pos);
    } else if (mode === "size") {
        return this._innerLexSize(pos);
    } else if (mode === "whitespace") {
        return this._innerLexWhitespace(pos);
    }
};

module.exports = Lexer;

},{"./ParseError":149,"match-at":168}],148:[function(require,module,exports){
/**
 * This file contains information about the options that the Parser carries
 * around with it while parsing. Data is held in an `Options` object, and when
 * recursing, a new `Options` object can be created with the `.with*` and
 * `.reset` functions.
 */

/**
 * This is the main options class. It contains the style, size, color, and font
 * of the current parse level. It also contains the style and size of the parent
 * parse level, so size changes can be handled efficiently.
 *
 * Each of the `.with*` and `.reset` functions passes its current style and size
 * as the parentStyle and parentSize of the new options class, so parent
 * handling is taken care of automatically.
 */
function Options(data) {
    this.style = data.style;
    this.color = data.color;
    this.size = data.size;
    this.phantom = data.phantom;
    this.font = data.font;

    if (data.parentStyle === undefined) {
        this.parentStyle = data.style;
    } else {
        this.parentStyle = data.parentStyle;
    }

    if (data.parentSize === undefined) {
        this.parentSize = data.size;
    } else {
        this.parentSize = data.parentSize;
    }
}

/**
 * Returns a new options object with the same properties as "this".  Properties
 * from "extension" will be copied to the new options object.
 */
Options.prototype.extend = function(extension) {
    var data = {
        style: this.style,
        size: this.size,
        color: this.color,
        parentStyle: this.style,
        parentSize: this.size,
        phantom: this.phantom,
        font: this.font,
    };

    for (var key in extension) {
        if (extension.hasOwnProperty(key)) {
            data[key] = extension[key];
        }
    }

    return new Options(data);
};

/**
 * Create a new options object with the given style.
 */
Options.prototype.withStyle = function(style) {
    return this.extend({
        style: style,
    });
};

/**
 * Create a new options object with the given size.
 */
Options.prototype.withSize = function(size) {
    return this.extend({
        size: size,
    });
};

/**
 * Create a new options object with the given color.
 */
Options.prototype.withColor = function(color) {
    return this.extend({
        color: color,
    });
};

/**
 * Create a new options object with "phantom" set to true.
 */
Options.prototype.withPhantom = function() {
    return this.extend({
        phantom: true,
    });
};

/**
 * Create a new options objects with the give font.
 */
Options.prototype.withFont = function(font) {
    return this.extend({
        font: font,
    });
};

/**
 * Create a new options object with the same style, size, and color. This is
 * used so that parent style and size changes are handled correctly.
 */
Options.prototype.reset = function() {
    return this.extend({});
};

/**
 * A map of color names to CSS colors.
 * TODO(emily): Remove this when we have real macros
 */
var colorMap = {
    "katex-blue": "#6495ed",
    "katex-orange": "#ffa500",
    "katex-pink": "#ff00af",
    "katex-red": "#df0030",
    "katex-green": "#28ae7b",
    "katex-gray": "gray",
    "katex-purple": "#9d38bd",
    "katex-blueA": "#c7e9f1",
    "katex-blueB": "#9cdceb",
    "katex-blueC": "#58c4dd",
    "katex-blueD": "#29abca",
    "katex-blueE": "#1c758a",
    "katex-tealA": "#acead7",
    "katex-tealB": "#76ddc0",
    "katex-tealC": "#5cd0b3",
    "katex-tealD": "#55c1a7",
    "katex-tealE": "#49a88f",
    "katex-greenA": "#c9e2ae",
    "katex-greenB": "#a6cf8c",
    "katex-greenC": "#83c167",
    "katex-greenD": "#77b05d",
    "katex-greenE": "#699c52",
    "katex-goldA": "#f7c797",
    "katex-goldB": "#f9b775",
    "katex-goldC": "#f0ac5f",
    "katex-goldD": "#e1a158",
    "katex-goldE": "#c78d46",
    "katex-redA": "#f7a1a3",
    "katex-redB": "#ff8080",
    "katex-redC": "#fc6255",
    "katex-redD": "#e65a4c",
    "katex-redE": "#cf5044",
    "katex-maroonA": "#ecabc1",
    "katex-maroonB": "#ec92ab",
    "katex-maroonC": "#c55f73",
    "katex-maroonD": "#a24d61",
    "katex-maroonE": "#94424f",
    "katex-purpleA": "#caa3e8",
    "katex-purpleB": "#b189c6",
    "katex-purpleC": "#9a72ac",
    "katex-purpleD": "#715582",
    "katex-purpleE": "#644172",
    "katex-mintA": "#f5f9e8",
    "katex-mintB": "#edf2df",
    "katex-mintC": "#e0e5cc",
    "katex-grayA": "#fdfdfd",
    "katex-grayB": "#f7f7f7",
    "katex-grayC": "#eeeeee",
    "katex-grayD": "#dddddd",
    "katex-grayE": "#cccccc",
    "katex-grayF": "#aaaaaa",
    "katex-grayG": "#999999",
    "katex-grayH": "#555555",
    "katex-grayI": "#333333",
    "katex-kaBlue": "#314453",
    "katex-kaGreen": "#639b24",
};

/**
 * Gets the CSS color of the current options object, accounting for the
 * `colorMap`.
 */
Options.prototype.getColor = function() {
    if (this.phantom) {
        return "transparent";
    } else {
        return colorMap[this.color] || this.color;
    }
};

module.exports = Options;

},{}],149:[function(require,module,exports){
/**
 * This is the ParseError class, which is the main error thrown by KaTeX
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 */
function ParseError(message, lexer, position) {
    var error = "KaTeX parse error: " + message;

    if (lexer !== undefined && position !== undefined) {
        // If we have the input and a position, make the error a bit fancier

        // Prepend some information
        error += " at position " + position + ": ";

        // Get the input
        var input = lexer._input;
        // Insert a combining underscore at the correct position
        input = input.slice(0, position) + "\u0332" +
            input.slice(position);

        // Extract some context from the input and add it to the error
        var begin = Math.max(0, position - 15);
        var end = position + 15;
        error += input.slice(begin, end);
    }

    // Some hackery to make ParseError a prototype of Error
    // See http://stackoverflow.com/a/8460753
    var self = new Error(error);
    self.name = "ParseError";
    self.__proto__ = ParseError.prototype;

    self.position = position;
    return self;
}

// More hackery
ParseError.prototype.__proto__ = Error.prototype;

module.exports = ParseError;

},{}],150:[function(require,module,exports){
/* eslint no-constant-condition:0 */
var functions = require("./functions");
var environments = require("./environments");
var Lexer = require("./Lexer");
var symbols = require("./symbols");
var utils = require("./utils");

var parseData = require("./parseData");
var ParseError = require("./ParseError");

/**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The parser has a property called "mode" indicating the mode that
 * the parser is currently in. Currently it has to be one of "math" or
 * "text", which denotes whether the current environment is a math-y
 * one or a text-y one (e.g. inside \text). Currently, this serves to
 * limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The earlier functions return ParseNodes.
 * The later functions (which are called deeper in the parse) sometimes return
 * ParseFuncOrArgument, which contain a ParseNode as well as some data about
 * whether the parsed object is a function which is missing some arguments, or a
 * standalone object which can be used as an argument to another function.
 */

/**
 * Main Parser class
 */
function Parser(input, settings) {
    // Make a new lexer
    this.lexer = new Lexer(input);
    // Store the settings for use in parsing
    this.settings = settings;
}

var ParseNode = parseData.ParseNode;

/**
 * An initial function (without its arguments), or an argument to a function.
 * The `result` argument should be a ParseNode.
 */
function ParseFuncOrArgument(result, isFunction) {
    this.result = result;
    // Is this a function (i.e. is it something defined in functions.js)?
    this.isFunction = isFunction;
}

/**
 * Checks a result to make sure it has the right type, and throws an
 * appropriate error otherwise.
 *
 * @param {boolean=} consume whether to consume the expected token,
 *                           defaults to true
 */
Parser.prototype.expect = function(text, consume) {
    if (this.nextToken.text !== text) {
        throw new ParseError(
            "Expected '" + text + "', got '" + this.nextToken.text + "'",
            this.lexer, this.nextToken.position
        );
    }
    if (consume !== false) {
        this.consume();
    }
};

/**
 * Considers the current look ahead token as consumed,
 * and fetches the one after that as the new look ahead.
 */
Parser.prototype.consume = function() {
    this.pos = this.nextToken.position;
    this.nextToken = this.lexer.lex(this.pos, this.mode);
};

/**
 * Main parsing function, which parses an entire input.
 *
 * @return {?Array.<ParseNode>}
 */
Parser.prototype.parse = function() {
    // Try to parse the input
    this.mode = "math";
    this.pos = 0;
    this.nextToken = this.lexer.lex(this.pos, this.mode);
    var parse = this.parseInput();
    return parse;
};

/**
 * Parses an entire input tree.
 */
Parser.prototype.parseInput = function() {
    // Parse an expression
    var expression = this.parseExpression(false);
    // If we succeeded, make sure there's an EOF at the end
    this.expect("EOF", false);
    return expression;
};

var endOfExpression = ["}", "\\end", "\\right", "&", "\\\\", "\\cr"];

/**
 * Parses an "expression", which is a list of atoms.
 *
 * @param {boolean} breakOnInfix Should the parsing stop when we hit infix
 *                  nodes? This happens when functions have higher precendence
 *                  than infix nodes in implicit parses.
 *
 * @param {?string} breakOnToken The token that the expression should end with,
 *                  or `null` if something else should end the expression.
 *
 * @return {ParseNode}
 */
Parser.prototype.parseExpression = function(breakOnInfix, breakOnToken) {
    var body = [];
    // Keep adding atoms to the body until we can't parse any more atoms (either
    // we reached the end, a }, or a \right)
    while (true) {
        var lex = this.nextToken;
        var pos = this.pos;
        if (endOfExpression.indexOf(lex.text) !== -1) {
            break;
        }
        if (breakOnToken && lex.text === breakOnToken) {
            break;
        }
        var atom = this.parseAtom();
        if (!atom) {
            if (!this.settings.throwOnError && lex.text[0] === "\\") {
                var errorNode = this.handleUnsupportedCmd();
                body.push(errorNode);

                pos = lex.position;
                continue;
            }

            break;
        }
        if (breakOnInfix && atom.type === "infix") {
            // rewind so we can parse the infix atom again
            this.pos = pos;
            this.nextToken = lex;
            break;
        }
        body.push(atom);
    }
    return this.handleInfixNodes(body);
};

/**
 * Rewrites infix operators such as \over with corresponding commands such
 * as \frac.
 *
 * There can only be one infix operator per group.  If there's more than one
 * then the expression is ambiguous.  This can be resolved by adding {}.
 *
 * @returns {Array}
 */
Parser.prototype.handleInfixNodes = function(body) {
    var overIndex = -1;
    var funcName;

    for (var i = 0; i < body.length; i++) {
        var node = body[i];
        if (node.type === "infix") {
            if (overIndex !== -1) {
                throw new ParseError("only one infix operator per group",
                    this.lexer, -1);
            }
            overIndex = i;
            funcName = node.value.replaceWith;
        }
    }

    if (overIndex !== -1) {
        var numerNode;
        var denomNode;

        var numerBody = body.slice(0, overIndex);
        var denomBody = body.slice(overIndex + 1);

        if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
            numerNode = numerBody[0];
        } else {
            numerNode = new ParseNode("ordgroup", numerBody, this.mode);
        }

        if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
            denomNode = denomBody[0];
        } else {
            denomNode = new ParseNode("ordgroup", denomBody, this.mode);
        }

        var value = this.callFunction(
            funcName, [numerNode, denomNode], null);
        return [new ParseNode(value.type, value, this.mode)];
    } else {
        return body;
    }
};

// The greediness of a superscript or subscript
var SUPSUB_GREEDINESS = 1;

/**
 * Handle a subscript or superscript with nice errors.
 */
Parser.prototype.handleSupSubscript = function(name) {
    var symbol = this.nextToken.text;
    var symPos = this.pos;
    this.consume();
    var group = this.parseGroup();

    if (!group) {
        if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {
            return this.handleUnsupportedCmd();
        } else {
            throw new ParseError(
                "Expected group after '" + symbol + "'",
                this.lexer,
                symPos + 1
            );
        }
    } else if (group.isFunction) {
        // ^ and _ have a greediness, so handle interactions with functions'
        // greediness
        var funcGreediness = functions[group.result].greediness;
        if (funcGreediness > SUPSUB_GREEDINESS) {
            return this.parseFunction(group);
        } else {
            throw new ParseError(
                "Got function '" + group.result + "' with no arguments " +
                    "as " + name,
                this.lexer, symPos + 1);
        }
    } else {
        return group.result;
    }
};

/**
 * Converts the textual input of an unsupported command into a text node
 * contained within a color node whose color is determined by errorColor
 */
Parser.prototype.handleUnsupportedCmd = function() {
    var text = this.nextToken.text;
    var textordArray = [];

    for (var i = 0; i < text.length; i++) {
        textordArray.push(new ParseNode("textord", text[i], "text"));
    }

    var textNode = new ParseNode(
        "text",
        {
            body: textordArray,
            type: "text",
        },
        this.mode);

    var colorNode = new ParseNode(
        "color",
        {
            color: this.settings.errorColor,
            value: [textNode],
            type: "color",
        },
        this.mode);

    this.consume();
    return colorNode;
};

/**
 * Parses a group with optional super/subscripts.
 *
 * @return {?ParseNode}
 */
Parser.prototype.parseAtom = function() {
    // The body of an atom is an implicit group, so that things like
    // \left(x\right)^2 work correctly.
    var base = this.parseImplicitGroup();

    // In text mode, we don't have superscripts or subscripts
    if (this.mode === "text") {
        return base;
    }

    // Note that base may be empty (i.e. null) at this point.

    var superscript;
    var subscript;
    while (true) {
        // Lex the first token
        var lex = this.nextToken;

        if (lex.text === "\\limits" || lex.text === "\\nolimits") {
            // We got a limit control
            if (!base || base.type !== "op") {
                throw new ParseError(
                    "Limit controls must follow a math operator",
                    this.lexer, this.pos);
            } else {
                var limits = lex.text === "\\limits";
                base.value.limits = limits;
                base.value.alwaysHandleSupSub = true;
            }
            this.consume();
        } else if (lex.text === "^") {
            // We got a superscript start
            if (superscript) {
                throw new ParseError(
                    "Double superscript", this.lexer, this.pos);
            }
            superscript = this.handleSupSubscript("superscript");
        } else if (lex.text === "_") {
            // We got a subscript start
            if (subscript) {
                throw new ParseError(
                    "Double subscript", this.lexer, this.pos);
            }
            subscript = this.handleSupSubscript("subscript");
        } else if (lex.text === "'") {
            // We got a prime
            var prime = new ParseNode("textord", "\\prime", this.mode);

            // Many primes can be grouped together, so we handle this here
            var primes = [prime];
            this.consume();
            // Keep lexing tokens until we get something that's not a prime
            while (this.nextToken.text === "'") {
                // For each one, add another prime to the list
                primes.push(prime);
                this.consume();
            }
            // Put them into an ordgroup as the superscript
            superscript = new ParseNode("ordgroup", primes, this.mode);
        } else {
            // If it wasn't ^, _, or ', stop parsing super/subscripts
            break;
        }
    }

    if (superscript || subscript) {
        // If we got either a superscript or subscript, create a supsub
        return new ParseNode("supsub", {
            base: base,
            sup: superscript,
            sub: subscript,
        }, this.mode);
    } else {
        // Otherwise return the original body
        return base;
    }
};

// A list of the size-changing functions, for use in parseImplicitGroup
var sizeFuncs = [
    "\\tiny", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize",
    "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge",
];

// A list of the style-changing functions, for use in parseImplicitGroup
var styleFuncs = [
    "\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle",
];

/**
 * Parses an implicit group, which is a group that starts at the end of a
 * specified, and ends right before a higher explicit group ends, or at EOL. It
 * is used for functions that appear to affect the current style, like \Large or
 * \textrm, where instead of keeping a style we just pretend that there is an
 * implicit grouping after it until the end of the group. E.g.
 *   small text {\Large large text} small text again
 * It is also used for \left and \right to get the correct grouping.
 *
 * @return {?ParseNode}
 */
Parser.prototype.parseImplicitGroup = function() {
    var start = this.parseSymbol();

    if (start == null) {
        // If we didn't get anything we handle, fall back to parseFunction
        return this.parseFunction();
    }

    var func = start.result;
    var body;

    if (func === "\\left") {
        // If we see a left:
        // Parse the entire left function (including the delimiter)
        var left = this.parseFunction(start);
        // Parse out the implicit body
        body = this.parseExpression(false);
        // Check the next token
        this.expect("\\right", false);
        var right = this.parseFunction();
        return new ParseNode("leftright", {
            body: body,
            left: left.value.value,
            right: right.value.value,
        }, this.mode);
    } else if (func === "\\begin") {
        // begin...end is similar to left...right
        var begin = this.parseFunction(start);
        var envName = begin.value.name;
        if (!environments.hasOwnProperty(envName)) {
            throw new ParseError(
                "No such environment: " + envName,
                this.lexer, begin.value.namepos);
        }
        // Build the environment object. Arguments and other information will
        // be made available to the begin and end methods using properties.
        var env = environments[envName];
        var args = this.parseArguments("\\begin{" + envName + "}", env);
        var context = {
            mode: this.mode,
            envName: envName,
            parser: this,
            lexer: this.lexer,
            positions: args.pop(),
        };
        var result = env.handler(context, args);
        this.expect("\\end", false);
        var end = this.parseFunction();
        if (end.value.name !== envName) {
            throw new ParseError(
                "Mismatch: \\begin{" + envName + "} matched " +
                "by \\end{" + end.value.name + "}",
                this.lexer /* , end.value.namepos */);
            // TODO: Add position to the above line and adjust test case,
            // requires #385 to get merged first
        }
        result.position = end.position;
        return result;
    } else if (utils.contains(sizeFuncs, func)) {
        // If we see a sizing function, parse out the implict body
        body = this.parseExpression(false);
        return new ParseNode("sizing", {
            // Figure out what size to use based on the list of functions above
            size: "size" + (utils.indexOf(sizeFuncs, func) + 1),
            value: body,
        }, this.mode);
    } else if (utils.contains(styleFuncs, func)) {
        // If we see a styling function, parse out the implict body
        body = this.parseExpression(true);
        return new ParseNode("styling", {
            // Figure out what style to use by pulling out the style from
            // the function name
            style: func.slice(1, func.length - 5),
            value: body,
        }, this.mode);
    } else {
        // Defer to parseFunction if it's not a function we handle
        return this.parseFunction(start);
    }
};

/**
 * Parses an entire function, including its base and all of its arguments.
 * The base might either have been parsed already, in which case
 * it is provided as an argument, or it's the next group in the input.
 *
 * @param {ParseFuncOrArgument=} baseGroup optional as described above
 * @return {?ParseNode}
 */
Parser.prototype.parseFunction = function(baseGroup) {
    if (!baseGroup) {
        baseGroup = this.parseGroup();
    }

    if (baseGroup) {
        if (baseGroup.isFunction) {
            var func = baseGroup.result;
            var funcData = functions[func];
            if (this.mode === "text" && !funcData.allowedInText) {
                throw new ParseError(
                    "Can't use function '" + func + "' in text mode",
                    this.lexer, baseGroup.position);
            }

            var args = this.parseArguments(func, funcData);
            var result = this.callFunction(func, args, args.pop());
            return new ParseNode(result.type, result, this.mode);
        } else {
            return baseGroup.result;
        }
    } else {
        return null;
    }
};

/**
 * Call a function handler with a suitable context and arguments.
 */
Parser.prototype.callFunction = function(name, args, positions) {
    var context = {
        funcName: name,
        parser: this,
        lexer: this.lexer,
        positions: positions,
    };
    return functions[name].handler(context, args);
};

/**
 * Parses the arguments of a function or environment
 *
 * @param {string} func  "\name" or "\begin{name}"
 * @param {{numArgs:number,numOptionalArgs:number|undefined}} funcData
 * @return the array of arguments, with the list of positions as last element
 */
Parser.prototype.parseArguments = function(func, funcData) {
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;
    if (totalArgs === 0) {
        return [[this.pos]];
    }

    var baseGreediness = funcData.greediness;
    var positions = [this.pos];
    var args = [];

    for (var i = 0; i < totalArgs; i++) {
        var argType = funcData.argTypes && funcData.argTypes[i];
        var arg;
        if (i < funcData.numOptionalArgs) {
            if (argType) {
                arg = this.parseSpecialGroup(argType, true);
            } else {
                arg = this.parseOptionalGroup();
            }
            if (!arg) {
                args.push(null);
                positions.push(this.pos);
                continue;
            }
        } else {
            if (argType) {
                arg = this.parseSpecialGroup(argType);
            } else {
                arg = this.parseGroup();
            }
            if (!arg) {
                if (!this.settings.throwOnError &&
                    this.nextToken.text[0] === "\\") {
                    arg = new ParseFuncOrArgument(
                        this.handleUnsupportedCmd(this.nextToken.text),
                        false);
                } else {
                    throw new ParseError(
                        "Expected group after '" + func + "'",
                        this.lexer, this.pos);
                }
            }
        }
        var argNode;
        if (arg.isFunction) {
            var argGreediness =
                functions[arg.result].greediness;
            if (argGreediness > baseGreediness) {
                argNode = this.parseFunction(arg);
            } else {
                throw new ParseError(
                    "Got function '" + arg.result + "' as " +
                    "argument to '" + func + "'",
                    this.lexer, this.pos - 1);
            }
        } else {
            argNode = arg.result;
        }
        args.push(argNode);
        positions.push(this.pos);
    }

    args.push(positions);

    return args;
};


/**
 * Parses a group when the mode is changing. Takes a position, a new mode, and
 * an outer mode that is used to parse the outside.
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseSpecialGroup = function(innerMode, optional) {
    var outerMode = this.mode;
    // Handle `original` argTypes
    if (innerMode === "original") {
        innerMode = outerMode;
    }

    if (innerMode === "color" || innerMode === "size") {
        // color and size modes are special because they should have braces and
        // should only lex a single symbol inside
        var openBrace = this.nextToken;
        if (optional && openBrace.text !== "[") {
            // optional arguments should return null if they don't exist
            return null;
        }
        // The call to expect will lex the token after the '{' in inner mode
        this.mode = innerMode;
        this.expect(optional ? "[" : "{");
        var inner = this.nextToken;
        this.mode = outerMode;
        var data;
        if (innerMode === "color") {
            data = inner.text;
        } else {
            data = inner.data;
        }
        this.consume(); // consume the token stored in inner
        this.expect(optional ? "]" : "}");
        return new ParseFuncOrArgument(
            new ParseNode(innerMode, data, outerMode),
            false);
    } else if (innerMode === "text") {
        // text mode is special because it should ignore the whitespace before
        // it
        var whitespace = this.lexer.lex(this.pos, "whitespace");
        this.pos = whitespace.position;
    }

    // By the time we get here, innerMode is one of "text" or "math".
    // We switch the mode of the parser, recurse, then restore the old mode.
    this.mode = innerMode;
    this.nextToken = this.lexer.lex(this.pos, innerMode);
    var res;
    if (optional) {
        res = this.parseOptionalGroup();
    } else {
        res = this.parseGroup();
    }
    this.mode = outerMode;
    this.nextToken = this.lexer.lex(this.pos, outerMode);
    return res;
};

/**
 * Parses a group, which is either a single nucleus (like "x") or an expression
 * in braces (like "{x+y}")
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseGroup = function() {
    // Try to parse an open brace
    if (this.nextToken.text === "{") {
        // If we get a brace, parse an expression
        this.consume();
        var expression = this.parseExpression(false);
        // Make sure we get a close brace
        this.expect("}");
        return new ParseFuncOrArgument(
            new ParseNode("ordgroup", expression, this.mode),
            false);
    } else {
        // Otherwise, just return a nucleus
        return this.parseSymbol();
    }
};

/**
 * Parses a group, which is an expression in brackets (like "[x+y]")
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseOptionalGroup = function() {
    // Try to parse an open bracket
    if (this.nextToken.text === "[") {
        // If we get a brace, parse an expression
        this.consume();
        var expression = this.parseExpression(false, "]");
        // Make sure we get a close bracket
        this.expect("]");
        return new ParseFuncOrArgument(
            new ParseNode("ordgroup", expression, this.mode),
            false);
    } else {
        // Otherwise, return null,
        return null;
    }
};

/**
 * Parse a single symbol out of the string. Here, we handle both the functions
 * we have defined, as well as the single character symbols
 *
 * @return {?ParseFuncOrArgument}
 */
Parser.prototype.parseSymbol = function() {
    var nucleus = this.nextToken;

    if (functions[nucleus.text]) {
        this.consume();
        // If there exists a function with this name, we return the function and
        // say that it is a function.
        return new ParseFuncOrArgument(
            nucleus.text,
            true);
    } else if (symbols[this.mode][nucleus.text]) {
        this.consume();
        // Otherwise if this is a no-argument function, find the type it
        // corresponds to in the symbols map
        return new ParseFuncOrArgument(
            new ParseNode(symbols[this.mode][nucleus.text].group,
                          nucleus.text, this.mode),
            false);
    } else {
        return null;
    }
};

Parser.prototype.ParseNode = ParseNode;

module.exports = Parser;

},{"./Lexer":147,"./ParseError":149,"./environments":159,"./functions":162,"./parseData":164,"./symbols":166,"./utils":167}],151:[function(require,module,exports){
/**
 * This is a module for storing settings passed into KaTeX. It correctly handles
 * default settings.
 */

/**
 * Helper function for getting a default value if the value is undefined
 */
function get(option, defaultValue) {
    return option === undefined ? defaultValue : option;
}

/**
 * The main Settings object
 *
 * The current options stored are:
 *  - displayMode: Whether the expression should be typeset by default in
 *                 textstyle or displaystyle (default false)
 */
function Settings(options) {
    // allow null options
    options = options || {};
    this.displayMode = get(options.displayMode, false);
    this.throwOnError = get(options.throwOnError, true);
    this.errorColor = get(options.errorColor, "#cc0000");
}

module.exports = Settings;

},{}],152:[function(require,module,exports){
/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX. It provides a generic `Style` class, which holds information
 * about a specific style. It then provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 */

/**
 * The main style class. Contains a unique id for the style, a size (which is
 * the same for cramped and uncramped version of a style), a cramped flag, and a
 * size multiplier, which gives the size difference between a style and
 * textstyle.
 */
function Style(id, size, multiplier, cramped) {
    this.id = id;
    this.size = size;
    this.cramped = cramped;
    this.sizeMultiplier = multiplier;
}

/**
 * Get the style of a superscript given a base in the current style.
 */
Style.prototype.sup = function() {
    return styles[sup[this.id]];
};

/**
 * Get the style of a subscript given a base in the current style.
 */
Style.prototype.sub = function() {
    return styles[sub[this.id]];
};

/**
 * Get the style of a fraction numerator given the fraction in the current
 * style.
 */
Style.prototype.fracNum = function() {
    return styles[fracNum[this.id]];
};

/**
 * Get the style of a fraction denominator given the fraction in the current
 * style.
 */
Style.prototype.fracDen = function() {
    return styles[fracDen[this.id]];
};

/**
 * Get the cramped version of a style (in particular, cramping a cramped style
 * doesn't change the style).
 */
Style.prototype.cramp = function() {
    return styles[cramp[this.id]];
};

/**
 * HTML class name, like "displaystyle cramped"
 */
Style.prototype.cls = function() {
    return sizeNames[this.size] + (this.cramped ? " cramped" : " uncramped");
};

/**
 * HTML Reset class name, like "reset-textstyle"
 */
Style.prototype.reset = function() {
    return resetNames[this.size];
};

// IDs of the different styles
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7;

// String names for the different sizes
var sizeNames = [
    "displaystyle textstyle",
    "textstyle",
    "scriptstyle",
    "scriptscriptstyle",
];

// Reset names for the different sizes
var resetNames = [
    "reset-textstyle",
    "reset-textstyle",
    "reset-scriptstyle",
    "reset-scriptscriptstyle",
];

// Instances of the different styles
var styles = [
    new Style(D, 0, 1.0, false),
    new Style(Dc, 0, 1.0, true),
    new Style(T, 1, 1.0, false),
    new Style(Tc, 1, 1.0, true),
    new Style(S, 2, 0.7, false),
    new Style(Sc, 2, 0.7, true),
    new Style(SS, 3, 0.5, false),
    new Style(SSc, 3, 0.5, true),
];

// Lookup tables for switching from one style to another
var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];

// We only export some of the styles. Also, we don't export the `Style` class so
// no more styles can be generated.
module.exports = {
    DISPLAY: styles[D],
    TEXT: styles[T],
    SCRIPT: styles[S],
    SCRIPTSCRIPT: styles[SS],
};

},{}],153:[function(require,module,exports){
/* eslint no-console:0 */
/**
 * This module contains general functions that can be used for building
 * different kinds of domTree nodes in a consistent manner.
 */

var domTree = require("./domTree");
var fontMetrics = require("./fontMetrics");
var symbols = require("./symbols");
var utils = require("./utils");

var greekCapitals = [
    "\\Gamma",
    "\\Delta",
    "\\Theta",
    "\\Lambda",
    "\\Xi",
    "\\Pi",
    "\\Sigma",
    "\\Upsilon",
    "\\Phi",
    "\\Psi",
    "\\Omega",
];

var dotlessLetters = [
    "\u0131",   // dotless i, \imath
    "\u0237",   // dotless j, \jmath
];

/**
 * Makes a symbolNode after translation via the list of symbols in symbols.js.
 * Correctly pulls out metrics for the character, and optionally takes a list of
 * classes to be attached to the node.
 */
var makeSymbol = function(value, style, mode, color, classes) {
    // Replace the value with its replaced value from symbol.js
    if (symbols[mode][value] && symbols[mode][value].replace) {
        value = symbols[mode][value].replace;
    }

    var metrics = fontMetrics.getCharacterMetrics(value, style);

    var symbolNode;
    if (metrics) {
        symbolNode = new domTree.symbolNode(
            value, metrics.height, metrics.depth, metrics.italic, metrics.skew,
            classes);
    } else {
        // TODO(emily): Figure out a good way to only print this in development
        typeof console !== "undefined" && console.warn(
            "No character metrics for '" + value + "' in style '" +
                style + "'");
        symbolNode = new domTree.symbolNode(value, 0, 0, 0, 0, classes);
    }

    if (color) {
        symbolNode.style.color = color;
    }

    return symbolNode;
};

/**
 * Makes a symbol in Main-Regular or AMS-Regular.
 * Used for rel, bin, open, close, inner, and punct.
 */
var mathsym = function(value, mode, color, classes) {
    // Decide what font to render the symbol in by its entry in the symbols
    // table.
    // Have a special case for when the value = \ because the \ is used as a
    // textord in unsupported command errors but cannot be parsed as a regular
    // text ordinal and is therefore not present as a symbol in the symbols
    // table for text
    if (value === "\\" || symbols[mode][value].font === "main") {
        return makeSymbol(value, "Main-Regular", mode, color, classes);
    } else {
        return makeSymbol(
            value, "AMS-Regular", mode, color, classes.concat(["amsrm"]));
    }
};

/**
 * Makes a symbol in the default font for mathords and textords.
 */
var mathDefault = function(value, mode, color, classes, type) {
    if (type === "mathord") {
        return mathit(value, mode, color, classes);
    } else if (type === "textord") {
        return makeSymbol(
            value, "Main-Regular", mode, color, classes.concat(["mathrm"]));
    } else {
        throw new Error("unexpected type: " + type + " in mathDefault");
    }
};

/**
 * Makes a symbol in the italic math font.
 */
var mathit = function(value, mode, color, classes) {
    if (/[0-9]/.test(value.charAt(0)) ||
            // glyphs for \imath and \jmath do not exist in Math-Italic so we
            // need to use Main-Italic instead
            utils.contains(dotlessLetters, value) ||
            utils.contains(greekCapitals, value)) {
        return makeSymbol(
            value, "Main-Italic", mode, color, classes.concat(["mainit"]));
    } else {
        return makeSymbol(
            value, "Math-Italic", mode, color, classes.concat(["mathit"]));
    }
};

/**
 * Makes either a mathord or textord in the correct font and color.
 */
var makeOrd = function(group, options, type) {
    var mode = group.mode;
    var value = group.value;
    if (symbols[mode][value] && symbols[mode][value].replace) {
        value = symbols[mode][value].replace;
    }

    var classes = ["mord"];
    var color = options.getColor();

    var font = options.font;
    if (font) {
        if (font === "mathit" || utils.contains(dotlessLetters, value)) {
            return mathit(value, mode, color, classes);
        } else {
            var fontName = fontMap[font].fontName;
            if (fontMetrics.getCharacterMetrics(value, fontName)) {
                return makeSymbol(
                    value, fontName, mode, color, classes.concat([font]));
            } else {
                return mathDefault(value, mode, color, classes, type);
            }
        }
    } else {
        return mathDefault(value, mode, color, classes, type);
    }
};

/**
 * Calculate the height, depth, and maxFontSize of an element based on its
 * children.
 */
var sizeElementFromChildren = function(elem) {
    var height = 0;
    var depth = 0;
    var maxFontSize = 0;

    if (elem.children) {
        for (var i = 0; i < elem.children.length; i++) {
            if (elem.children[i].height > height) {
                height = elem.children[i].height;
            }
            if (elem.children[i].depth > depth) {
                depth = elem.children[i].depth;
            }
            if (elem.children[i].maxFontSize > maxFontSize) {
                maxFontSize = elem.children[i].maxFontSize;
            }
        }
    }

    elem.height = height;
    elem.depth = depth;
    elem.maxFontSize = maxFontSize;
};

/**
 * Makes a span with the given list of classes, list of children, and color.
 */
var makeSpan = function(classes, children, color) {
    var span = new domTree.span(classes, children);

    sizeElementFromChildren(span);

    if (color) {
        span.style.color = color;
    }

    return span;
};

/**
 * Makes a document fragment with the given list of children.
 */
var makeFragment = function(children) {
    var fragment = new domTree.documentFragment(children);

    sizeElementFromChildren(fragment);

    return fragment;
};

/**
 * Makes an element placed in each of the vlist elements to ensure that each
 * element has the same max font size. To do this, we create a zero-width space
 * with the correct font size.
 */
var makeFontSizer = function(options, fontSize) {
    var fontSizeInner = makeSpan([], [new domTree.symbolNode("\u200b")]);
    fontSizeInner.style.fontSize =
        (fontSize / options.style.sizeMultiplier) + "em";

    var fontSizer = makeSpan(
        ["fontsize-ensurer", "reset-" + options.size, "size5"],
        [fontSizeInner]);

    return fontSizer;
};

/**
 * Makes a vertical list by stacking elements and kerns on top of each other.
 * Allows for many different ways of specifying the positioning method.
 *
 * Arguments:
 *  - children: A list of child or kern nodes to be stacked on top of each other
 *              (i.e. the first element will be at the bottom, and the last at
 *              the top). Element nodes are specified as
 *                {type: "elem", elem: node}
 *              while kern nodes are specified as
 *                {type: "kern", size: size}
 *  - positionType: The method by which the vlist should be positioned. Valid
 *                  values are:
 *                   - "individualShift": The children list only contains elem
 *                                        nodes, and each node contains an extra
 *                                        "shift" value of how much it should be
 *                                        shifted (note that shifting is always
 *                                        moving downwards). positionData is
 *                                        ignored.
 *                   - "top": The positionData specifies the topmost point of
 *                            the vlist (note this is expected to be a height,
 *                            so positive values move up)
 *                   - "bottom": The positionData specifies the bottommost point
 *                               of the vlist (note this is expected to be a
 *                               depth, so positive values move down
 *                   - "shift": The vlist will be positioned such that its
 *                              baseline is positionData away from the baseline
 *                              of the first child. Positive values move
 *                              downwards.
 *                   - "firstBaseline": The vlist will be positioned such that
 *                                      its baseline is aligned with the
 *                                      baseline of the first child.
 *                                      positionData is ignored. (this is
 *                                      equivalent to "shift" with
 *                                      positionData=0)
 *  - positionData: Data used in different ways depending on positionType
 *  - options: An Options object
 *
 */
var makeVList = function(children, positionType, positionData, options) {
    var depth;
    var currPos;
    var i;
    if (positionType === "individualShift") {
        var oldChildren = children;
        children = [oldChildren[0]];

        // Add in kerns to the list of children to get each element to be
        // shifted to the correct specified shift
        depth = -oldChildren[0].shift - oldChildren[0].elem.depth;
        currPos = depth;
        for (i = 1; i < oldChildren.length; i++) {
            var diff = -oldChildren[i].shift - currPos -
                oldChildren[i].elem.depth;
            var size = diff -
                (oldChildren[i - 1].elem.height +
                 oldChildren[i - 1].elem.depth);

            currPos = currPos + diff;

            children.push({type: "kern", size: size});
            children.push(oldChildren[i]);
        }
    } else if (positionType === "top") {
        // We always start at the bottom, so calculate the bottom by adding up
        // all the sizes
        var bottom = positionData;
        for (i = 0; i < children.length; i++) {
            if (children[i].type === "kern") {
                bottom -= children[i].size;
            } else {
                bottom -= children[i].elem.height + children[i].elem.depth;
            }
        }
        depth = bottom;
    } else if (positionType === "bottom") {
        depth = -positionData;
    } else if (positionType === "shift") {
        depth = -children[0].elem.depth - positionData;
    } else if (positionType === "firstBaseline") {
        depth = -children[0].elem.depth;
    } else {
        depth = 0;
    }

    // Make the fontSizer
    var maxFontSize = 0;
    for (i = 0; i < children.length; i++) {
        if (children[i].type === "elem") {
            maxFontSize = Math.max(maxFontSize, children[i].elem.maxFontSize);
        }
    }
    var fontSizer = makeFontSizer(options, maxFontSize);

    // Create a new list of actual children at the correct offsets
    var realChildren = [];
    currPos = depth;
    for (i = 0; i < children.length; i++) {
        if (children[i].type === "kern") {
            currPos += children[i].size;
        } else {
            var child = children[i].elem;

            var shift = -child.depth - currPos;
            currPos += child.height + child.depth;

            var childWrap = makeSpan([], [fontSizer, child]);
            childWrap.height -= shift;
            childWrap.depth += shift;
            childWrap.style.top = shift + "em";

            realChildren.push(childWrap);
        }
    }

    // Add in an element at the end with no offset to fix the calculation of
    // baselines in some browsers (namely IE, sometimes safari)
    var baselineFix = makeSpan(
        ["baseline-fix"], [fontSizer, new domTree.symbolNode("\u200b")]);
    realChildren.push(baselineFix);

    var vlist = makeSpan(["vlist"], realChildren);
    // Fix the final height and depth, in case there were kerns at the ends
    // since the makeSpan calculation won't take that in to account.
    vlist.height = Math.max(currPos, vlist.height);
    vlist.depth = Math.max(-depth, vlist.depth);
    return vlist;
};

// A table of size -> font size for the different sizing functions
var sizingMultiplier = {
    size1: 0.5,
    size2: 0.7,
    size3: 0.8,
    size4: 0.9,
    size5: 1.0,
    size6: 1.2,
    size7: 1.44,
    size8: 1.73,
    size9: 2.07,
    size10: 2.49,
};

// A map of spacing functions to their attributes, like size and corresponding
// CSS class
var spacingFunctions = {
    "\\qquad": {
        size: "2em",
        className: "qquad",
    },
    "\\quad": {
        size: "1em",
        className: "quad",
    },
    "\\enspace": {
        size: "0.5em",
        className: "enspace",
    },
    "\\;": {
        size: "0.277778em",
        className: "thickspace",
    },
    "\\:": {
        size: "0.22222em",
        className: "mediumspace",
    },
    "\\,": {
        size: "0.16667em",
        className: "thinspace",
    },
    "\\!": {
        size: "-0.16667em",
        className: "negativethinspace",
    },
};

/**
 * Maps TeX font commands to objects containing:
 * - variant: string used for "mathvariant" attribute in buildMathML.js
 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
 */
// A map between tex font commands an MathML mathvariant attribute values
var fontMap = {
    // styles
    "mathbf": {
        variant: "bold",
        fontName: "Main-Bold",
    },
    "mathrm": {
        variant: "normal",
        fontName: "Main-Regular",
    },

    // "mathit" is missing because it requires the use of two fonts: Main-Italic
    // and Math-Italic.  This is handled by a special case in makeOrd which ends
    // up calling mathit.

    // families
    "mathbb": {
        variant: "double-struck",
        fontName: "AMS-Regular",
    },
    "mathcal": {
        variant: "script",
        fontName: "Caligraphic-Regular",
    },
    "mathfrak": {
        variant: "fraktur",
        fontName: "Fraktur-Regular",
    },
    "mathscr": {
        variant: "script",
        fontName: "Script-Regular",
    },
    "mathsf": {
        variant: "sans-serif",
        fontName: "SansSerif-Regular",
    },
    "mathtt": {
        variant: "monospace",
        fontName: "Typewriter-Regular",
    },
};

module.exports = {
    fontMap: fontMap,
    makeSymbol: makeSymbol,
    mathsym: mathsym,
    makeSpan: makeSpan,
    makeFragment: makeFragment,
    makeVList: makeVList,
    makeOrd: makeOrd,
    sizingMultiplier: sizingMultiplier,
    spacingFunctions: spacingFunctions,
};

},{"./domTree":158,"./fontMetrics":160,"./symbols":166,"./utils":167}],154:[function(require,module,exports){
/* eslint no-console:0 */
/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupTypes functions are
 * called, to produce a final HTML tree.
 */

var ParseError = require("./ParseError");
var Style = require("./Style");

var buildCommon = require("./buildCommon");
var delimiter = require("./delimiter");
var domTree = require("./domTree");
var fontMetrics = require("./fontMetrics");
var utils = require("./utils");

var makeSpan = buildCommon.makeSpan;

/**
 * Take a list of nodes, build them in order, and return a list of the built
 * nodes. This function handles the `prev` node correctly, and passes the
 * previous element from the list as the prev of the next element.
 */
var buildExpression = function(expression, options, prev) {
    var groups = [];
    for (var i = 0; i < expression.length; i++) {
        var group = expression[i];
        groups.push(buildGroup(group, options, prev));
        prev = group;
    }
    return groups;
};

// List of types used by getTypeOfGroup,
// see https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types
var groupToType = {
    mathord: "mord",
    textord: "mord",
    bin: "mbin",
    rel: "mrel",
    text: "mord",
    open: "mopen",
    close: "mclose",
    inner: "minner",
    genfrac: "mord",
    array: "mord",
    spacing: "mord",
    punct: "mpunct",
    ordgroup: "mord",
    op: "mop",
    katex: "mord",
    overline: "mord",
    underline: "mord",
    rule: "mord",
    leftright: "minner",
    sqrt: "mord",
    accent: "mord",
};

/**
 * Gets the final math type of an expression, given its group type. This type is
 * used to determine spacing between elements, and affects bin elements by
 * causing them to change depending on what types are around them. This type
 * must be attached to the outermost node of an element as a CSS class so that
 * spacing with its surrounding elements works correctly.
 *
 * Some elements can be mapped one-to-one from group type to math type, and
 * those are listed in the `groupToType` table.
 *
 * Others (usually elements that wrap around other elements) often have
 * recursive definitions, and thus call `getTypeOfGroup` on their inner
 * elements.
 */
var getTypeOfGroup = function(group) {
    if (group == null) {
        // Like when typesetting $^3$
        return groupToType.mathord;
    } else if (group.type === "supsub") {
        return getTypeOfGroup(group.value.base);
    } else if (group.type === "llap" || group.type === "rlap") {
        return getTypeOfGroup(group.value);
    } else if (group.type === "color") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "sizing") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "styling") {
        return getTypeOfGroup(group.value.value);
    } else if (group.type === "delimsizing") {
        return groupToType[group.value.delimType];
    } else {
        return groupToType[group.type];
    }
};

/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */
var shouldHandleSupSub = function(group, options) {
    if (!group) {
        return false;
    } else if (group.type === "op") {
        // Operators handle supsubs differently when they have limits
        // (e.g. `\displaystyle\sum_2^3`)
        return group.value.limits &&
            (options.style.size === Style.DISPLAY.size ||
            group.value.alwaysHandleSupSub);
    } else if (group.type === "accent") {
        return isCharacterBox(group.value.base);
    } else {
        return null;
    }
};

/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */
var getBaseElem = function(group) {
    if (!group) {
        return false;
    } else if (group.type === "ordgroup") {
        if (group.value.length === 1) {
            return getBaseElem(group.value[0]);
        } else {
            return group;
        }
    } else if (group.type === "color") {
        if (group.value.value.length === 1) {
            return getBaseElem(group.value.value[0]);
        } else {
            return group;
        }
    } else {
        return group;
    }
};

/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */
var isCharacterBox = function(group) {
    var baseElem = getBaseElem(group);

    // These are all they types of groups which hold single characters
    return baseElem.type === "mathord" ||
        baseElem.type === "textord" ||
        baseElem.type === "bin" ||
        baseElem.type === "rel" ||
        baseElem.type === "inner" ||
        baseElem.type === "open" ||
        baseElem.type === "close" ||
        baseElem.type === "punct";
};

var makeNullDelimiter = function(options) {
    return makeSpan([
        "sizing", "reset-" + options.size, "size5",
        options.style.reset(), Style.TEXT.cls(),
        "nulldelimiter",
    ]);
};

/**
 * This is a map of group types to the function used to handle that type.
 * Simpler types come at the beginning, while complicated types come afterwards.
 */
var groupTypes = {};

groupTypes.mathord = function(group, options, prev) {
    return buildCommon.makeOrd(group, options, "mathord");
};

groupTypes.textord = function(group, options, prev) {
    return buildCommon.makeOrd(group, options, "textord");
};

groupTypes.bin = function(group, options, prev) {
    var className = "mbin";
    // Pull out the most recent element. Do some special handling to find
    // things at the end of a \color group. Note that we don't use the same
    // logic for ordgroups (which count as ords).
    var prevAtom = prev;
    while (prevAtom && prevAtom.type === "color") {
        var atoms = prevAtom.value.value;
        prevAtom = atoms[atoms.length - 1];
    }
    // See TeXbook pg. 442-446, Rules 5 and 6, and the text before Rule 19.
    // Here, we determine whether the bin should turn into an ord. We
    // currently only apply Rule 5.
    if (!prev || utils.contains(["mbin", "mopen", "mrel", "mop", "mpunct"],
            getTypeOfGroup(prevAtom))) {
        group.type = "textord";
        className = "mord";
    }

    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), [className]);
};

groupTypes.rel = function(group, options, prev) {
    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), ["mrel"]);
};

groupTypes.open = function(group, options, prev) {
    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), ["mopen"]);
};

groupTypes.close = function(group, options, prev) {
    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), ["mclose"]);
};

groupTypes.inner = function(group, options, prev) {
    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), ["minner"]);
};

groupTypes.punct = function(group, options, prev) {
    return buildCommon.mathsym(
        group.value, group.mode, options.getColor(), ["mpunct"]);
};

groupTypes.ordgroup = function(group, options, prev) {
    return makeSpan(
        ["mord", options.style.cls()],
        buildExpression(group.value, options.reset())
    );
};

groupTypes.text = function(group, options, prev) {
    return makeSpan(["text", "mord", options.style.cls()],
        buildExpression(group.value.body, options.reset()));
};

groupTypes.color = function(group, options, prev) {
    var elements = buildExpression(
        group.value.value,
        options.withColor(group.value.color),
        prev
    );

    // \color isn't supposed to affect the type of the elements it contains.
    // To accomplish this, we wrap the results in a fragment, so the inner
    // elements will be able to directly interact with their neighbors. For
    // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`
    return new buildCommon.makeFragment(elements);
};

groupTypes.supsub = function(group, options, prev) {
    // Superscript and subscripts are handled in the TeXbook on page
    // 445-446, rules 18(a-f).

    // Here is where we defer to the inner group if it should handle
    // superscripts and subscripts itself.
    if (shouldHandleSupSub(group.value.base, options)) {
        return groupTypes[group.value.base.type](group, options, prev);
    }

    var base = buildGroup(group.value.base, options.reset());
    var supmid;
    var submid;
    var sup;
    var sub;

    if (group.value.sup) {
        sup = buildGroup(group.value.sup,
                options.withStyle(options.style.sup()));
        supmid = makeSpan(
                [options.style.reset(), options.style.sup().cls()], [sup]);
    }

    if (group.value.sub) {
        sub = buildGroup(group.value.sub,
                options.withStyle(options.style.sub()));
        submid = makeSpan(
                [options.style.reset(), options.style.sub().cls()], [sub]);
    }

    // Rule 18a
    var supShift;
    var subShift;
    if (isCharacterBox(group.value.base)) {
        supShift = 0;
        subShift = 0;
    } else {
        supShift = base.height - fontMetrics.metrics.supDrop;
        subShift = base.depth + fontMetrics.metrics.subDrop;
    }

    // Rule 18c
    var minSupShift;
    if (options.style === Style.DISPLAY) {
        minSupShift = fontMetrics.metrics.sup1;
    } else if (options.style.cramped) {
        minSupShift = fontMetrics.metrics.sup3;
    } else {
        minSupShift = fontMetrics.metrics.sup2;
    }

    // scriptspace is a font-size-independent size, so scale it
    // appropriately
    var multiplier = Style.TEXT.sizeMultiplier *
            options.style.sizeMultiplier;
    var scriptspace =
        (0.5 / fontMetrics.metrics.ptPerEm) / multiplier + "em";

    var supsub;
    if (!group.value.sup) {
        // Rule 18b
        subShift = Math.max(
            subShift, fontMetrics.metrics.sub1,
            sub.height - 0.8 * fontMetrics.metrics.xHeight);

        supsub = buildCommon.makeVList([
            {type: "elem", elem: submid},
        ], "shift", subShift, options);

        supsub.children[0].style.marginRight = scriptspace;

        // Subscripts shouldn't be shifted by the base's italic correction.
        // Account for that by shifting the subscript back the appropriate
        // amount. Note we only do this when the base is a single symbol.
        if (base instanceof domTree.symbolNode) {
            supsub.children[0].style.marginLeft = -base.italic + "em";
        }
    } else if (!group.value.sub) {
        // Rule 18c, d
        supShift = Math.max(supShift, minSupShift,
            sup.depth + 0.25 * fontMetrics.metrics.xHeight);

        supsub = buildCommon.makeVList([
            {type: "elem", elem: supmid},
        ], "shift", -supShift, options);

        supsub.children[0].style.marginRight = scriptspace;
    } else {
        supShift = Math.max(
            supShift, minSupShift,
            sup.depth + 0.25 * fontMetrics.metrics.xHeight);
        subShift = Math.max(subShift, fontMetrics.metrics.sub2);

        var ruleWidth = fontMetrics.metrics.defaultRuleThickness;

        // Rule 18e
        if ((supShift - sup.depth) - (sub.height - subShift) <
                4 * ruleWidth) {
            subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;
            var psi = 0.8 * fontMetrics.metrics.xHeight -
                (supShift - sup.depth);
            if (psi > 0) {
                supShift += psi;
                subShift -= psi;
            }
        }

        supsub = buildCommon.makeVList([
            {type: "elem", elem: submid, shift: subShift},
            {type: "elem", elem: supmid, shift: -supShift},
        ], "individualShift", null, options);

        // See comment above about subscripts not being shifted
        if (base instanceof domTree.symbolNode) {
            supsub.children[0].style.marginLeft = -base.italic + "em";
        }

        supsub.children[0].style.marginRight = scriptspace;
        supsub.children[1].style.marginRight = scriptspace;
    }

    return makeSpan([getTypeOfGroup(group.value.base)],
        [base, supsub]);
};

groupTypes.genfrac = function(group, options, prev) {
    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
    // Figure out what style this fraction should be in based on the
    // function used
    var fstyle = options.style;
    if (group.value.size === "display") {
        fstyle = Style.DISPLAY;
    } else if (group.value.size === "text") {
        fstyle = Style.TEXT;
    }

    var nstyle = fstyle.fracNum();
    var dstyle = fstyle.fracDen();

    var numer = buildGroup(group.value.numer, options.withStyle(nstyle));
    var numerreset = makeSpan([fstyle.reset(), nstyle.cls()], [numer]);

    var denom = buildGroup(group.value.denom, options.withStyle(dstyle));
    var denomreset = makeSpan([fstyle.reset(), dstyle.cls()], [denom]);

    var ruleWidth;
    if (group.value.hasBarLine) {
        ruleWidth = fontMetrics.metrics.defaultRuleThickness /
            options.style.sizeMultiplier;
    } else {
        ruleWidth = 0;
    }

    // Rule 15b
    var numShift;
    var clearance;
    var denomShift;
    if (fstyle.size === Style.DISPLAY.size) {
        numShift = fontMetrics.metrics.num1;
        if (ruleWidth > 0) {
            clearance = 3 * ruleWidth;
        } else {
            clearance = 7 * fontMetrics.metrics.defaultRuleThickness;
        }
        denomShift = fontMetrics.metrics.denom1;
    } else {
        if (ruleWidth > 0) {
            numShift = fontMetrics.metrics.num2;
            clearance = ruleWidth;
        } else {
            numShift = fontMetrics.metrics.num3;
            clearance = 3 * fontMetrics.metrics.defaultRuleThickness;
        }
        denomShift = fontMetrics.metrics.denom2;
    }

    var frac;
    if (ruleWidth === 0) {
        // Rule 15c
        var candiateClearance =
            (numShift - numer.depth) - (denom.height - denomShift);
        if (candiateClearance < clearance) {
            numShift += 0.5 * (clearance - candiateClearance);
            denomShift += 0.5 * (clearance - candiateClearance);
        }

        frac = buildCommon.makeVList([
            {type: "elem", elem: denomreset, shift: denomShift},
            {type: "elem", elem: numerreset, shift: -numShift},
        ], "individualShift", null, options);
    } else {
        // Rule 15d
        var axisHeight = fontMetrics.metrics.axisHeight;

        if ((numShift - numer.depth) - (axisHeight + 0.5 * ruleWidth) <
                clearance) {
            numShift +=
                clearance - ((numShift - numer.depth) -
                             (axisHeight + 0.5 * ruleWidth));
        }

        if ((axisHeight - 0.5 * ruleWidth) - (denom.height - denomShift) <
                clearance) {
            denomShift +=
                clearance - ((axisHeight - 0.5 * ruleWidth) -
                             (denom.height - denomShift));
        }

        var mid = makeSpan(
            [options.style.reset(), Style.TEXT.cls(), "frac-line"]);
        // Manually set the height of the line because its height is
        // created in CSS
        mid.height = ruleWidth;

        var midShift = -(axisHeight - 0.5 * ruleWidth);

        frac = buildCommon.makeVList([
            {type: "elem", elem: denomreset, shift: denomShift},
            {type: "elem", elem: mid,        shift: midShift},
            {type: "elem", elem: numerreset, shift: -numShift},
        ], "individualShift", null, options);
    }

    // Since we manually change the style sometimes (with \dfrac or \tfrac),
    // account for the possible size change here.
    frac.height *= fstyle.sizeMultiplier / options.style.sizeMultiplier;
    frac.depth *= fstyle.sizeMultiplier / options.style.sizeMultiplier;

    // Rule 15e
    var delimSize;
    if (fstyle.size === Style.DISPLAY.size) {
        delimSize = fontMetrics.metrics.delim1;
    } else {
        delimSize = fontMetrics.metrics.getDelim2(fstyle);
    }

    var leftDelim;
    var rightDelim;
    if (group.value.leftDelim == null) {
        leftDelim = makeNullDelimiter(options);
    } else {
        leftDelim = delimiter.customSizedDelim(
            group.value.leftDelim, delimSize, true,
            options.withStyle(fstyle), group.mode);
    }
    if (group.value.rightDelim == null) {
        rightDelim = makeNullDelimiter(options);
    } else {
        rightDelim = delimiter.customSizedDelim(
            group.value.rightDelim, delimSize, true,
            options.withStyle(fstyle), group.mode);
    }

    return makeSpan(
        ["mord", options.style.reset(), fstyle.cls()],
        [leftDelim, makeSpan(["mfrac"], [frac]), rightDelim],
        options.getColor());
};

groupTypes.array = function(group, options, prev) {
    var r;
    var c;
    var nr = group.value.body.length;
    var nc = 0;
    var body = new Array(nr);

    // Horizontal spacing
    var pt = 1 / fontMetrics.metrics.ptPerEm;
    var arraycolsep = 5 * pt; // \arraycolsep in article.cls

    // Vertical spacing
    var baselineskip = 12 * pt; // see size10.clo
    // Default \arraystretch from lttab.dtx
    // TODO(gagern): may get redefined once we have user-defined macros
    var arraystretch = utils.deflt(group.value.arraystretch, 1);
    var arrayskip = arraystretch * baselineskip;
    var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and
    var arstrutDepth = 0.3 * arrayskip;  // \@arstrutbox in lttab.dtx

    var totalHeight = 0;
    for (r = 0; r < group.value.body.length; ++r) {
        var inrow = group.value.body[r];
        var height = arstrutHeight; // \@array adds an \@arstrut
        var depth = arstrutDepth;   // to each tow (via the template)

        if (nc < inrow.length) {
            nc = inrow.length;
        }

        var outrow = new Array(inrow.length);
        for (c = 0; c < inrow.length; ++c) {
            var elt = buildGroup(inrow[c], options);
            if (depth < elt.depth) {
                depth = elt.depth;
            }
            if (height < elt.height) {
                height = elt.height;
            }
            outrow[c] = elt;
        }

        var gap = 0;
        if (group.value.rowGaps[r]) {
            gap = group.value.rowGaps[r].value;
            switch (gap.unit) {
                case "em":
                    gap = gap.number;
                    break;
                case "ex":
                    gap = gap.number * fontMetrics.metrics.emPerEx;
                    break;
                default:
                    console.error("Can't handle unit " + gap.unit);
                    gap = 0;
            }
            if (gap > 0) { // \@argarraycr
                gap += arstrutDepth;
                if (depth < gap) {
                    depth = gap; // \@xargarraycr
                }
                gap = 0;
            }
        }

        outrow.height = height;
        outrow.depth = depth;
        totalHeight += height;
        outrow.pos = totalHeight;
        totalHeight += depth + gap; // \@yargarraycr
        body[r] = outrow;
    }

    var offset = totalHeight / 2 + fontMetrics.metrics.axisHeight;
    var colDescriptions = group.value.cols || [];
    var cols = [];
    var colSep;
    var colDescrNum;
    for (c = 0, colDescrNum = 0;
         // Continue while either there are more columns or more column
         // descriptions, so trailing separators don't get lost.
         c < nc || colDescrNum < colDescriptions.length;
         ++c, ++colDescrNum) {

        var colDescr = colDescriptions[colDescrNum] || {};

        var firstSeparator = true;
        while (colDescr.type === "separator") {
            // If there is more than one separator in a row, add a space
            // between them.
            if (!firstSeparator) {
                colSep = makeSpan(["arraycolsep"], []);
                colSep.style.width =
                    fontMetrics.metrics.doubleRuleSep + "em";
                cols.push(colSep);
            }

            if (colDescr.separator === "|") {
                var separator = makeSpan(
                    ["vertical-separator"],
                    []);
                separator.style.height = totalHeight + "em";
                separator.style.verticalAlign =
                    -(totalHeight - offset) + "em";

                cols.push(separator);
            } else {
                throw new ParseError(
                    "Invalid separator type: " + colDescr.separator);
            }

            colDescrNum++;
            colDescr = colDescriptions[colDescrNum] || {};
            firstSeparator = false;
        }

        if (c >= nc) {
            continue;
        }

        var sepwidth;
        if (c > 0 || group.value.hskipBeforeAndAfter) {
            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);
            if (sepwidth !== 0) {
                colSep = makeSpan(["arraycolsep"], []);
                colSep.style.width = sepwidth + "em";
                cols.push(colSep);
            }
        }

        var col = [];
        for (r = 0; r < nr; ++r) {
            var row = body[r];
            var elem = row[c];
            if (!elem) {
                continue;
            }
            var shift = row.pos - offset;
            elem.depth = row.depth;
            elem.height = row.height;
            col.push({type: "elem", elem: elem, shift: shift});
        }

        col = buildCommon.makeVList(col, "individualShift", null, options);
        col = makeSpan(
            ["col-align-" + (colDescr.align || "c")],
            [col]);
        cols.push(col);

        if (c < nc - 1 || group.value.hskipBeforeAndAfter) {
            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);
            if (sepwidth !== 0) {
                colSep = makeSpan(["arraycolsep"], []);
                colSep.style.width = sepwidth + "em";
                cols.push(colSep);
            }
        }
    }
    body = makeSpan(["mtable"], cols);
    return makeSpan(["mord"], [body], options.getColor());
};

groupTypes.spacing = function(group, options, prev) {
    if (group.value === "\\ " || group.value === "\\space" ||
        group.value === " " || group.value === "~") {
        // Spaces are generated by adding an actual space. Each of these
        // things has an entry in the symbols table, so these will be turned
        // into appropriate outputs.
        return makeSpan(
            ["mord", "mspace"],
            [buildCommon.mathsym(group.value, group.mode)]
        );
    } else {
        // Other kinds of spaces are of arbitrary width. We use CSS to
        // generate these.
        return makeSpan(
            ["mord", "mspace",
             buildCommon.spacingFunctions[group.value].className]);
    }
};

groupTypes.llap = function(group, options, prev) {
    var inner = makeSpan(
        ["inner"], [buildGroup(group.value.body, options.reset())]);
    var fix = makeSpan(["fix"], []);
    return makeSpan(
        ["llap", options.style.cls()], [inner, fix]);
};

groupTypes.rlap = function(group, options, prev) {
    var inner = makeSpan(
        ["inner"], [buildGroup(group.value.body, options.reset())]);
    var fix = makeSpan(["fix"], []);
    return makeSpan(
        ["rlap", options.style.cls()], [inner, fix]);
};

groupTypes.op = function(group, options, prev) {
    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
    var supGroup;
    var subGroup;
    var hasLimits = false;
    if (group.type === "supsub" ) {
        // If we have limits, supsub will pass us its group to handle. Pull
        // out the superscript and subscript and set the group to the op in
        // its base.
        supGroup = group.value.sup;
        subGroup = group.value.sub;
        group = group.value.base;
        hasLimits = true;
    }

    // Most operators have a large successor symbol, but these don't.
    var noSuccessor = [
        "\\smallint",
    ];

    var large = false;
    if (options.style.size === Style.DISPLAY.size &&
        group.value.symbol &&
        !utils.contains(noSuccessor, group.value.body)) {

        // Most symbol operators get larger in displaystyle (rule 13)
        large = true;
    }

    var base;
    var baseShift = 0;
    var slant = 0;
    if (group.value.symbol) {
        // If this is a symbol, create the symbol.
        var style = large ? "Size2-Regular" : "Size1-Regular";
        base = buildCommon.makeSymbol(
            group.value.body, style, "math", options.getColor(),
            ["op-symbol", large ? "large-op" : "small-op", "mop"]);

        // Shift the symbol so its center lies on the axis (rule 13). It
        // appears that our fonts have the centers of the symbols already
        // almost on the axis, so these numbers are very small. Note we
        // don't actually apply this here, but instead it is used either in
        // the vlist creation or separately when there are no limits.
        baseShift = (base.height - base.depth) / 2 -
            fontMetrics.metrics.axisHeight *
            options.style.sizeMultiplier;

        // The slant of the symbol is just its italic correction.
        slant = base.italic;
    } else {
        // Otherwise, this is a text operator. Build the text from the
        // operator's name.
        // TODO(emily): Add a space in the middle of some of these
        // operators, like \limsup
        var output = [];
        for (var i = 1; i < group.value.body.length; i++) {
            output.push(buildCommon.mathsym(group.value.body[i], group.mode));
        }
        base = makeSpan(["mop"], output, options.getColor());
    }

    if (hasLimits) {
        // IE 8 clips \int if it is in a display: inline-block. We wrap it
        // in a new span so it is an inline, and works.
        base = makeSpan([], [base]);

        var supmid;
        var supKern;
        var submid;
        var subKern;
        // We manually have to handle the superscripts and subscripts. This,
        // aside from the kern calculations, is copied from supsub.
        if (supGroup) {
            var sup = buildGroup(
                supGroup, options.withStyle(options.style.sup()));
            supmid = makeSpan(
                [options.style.reset(), options.style.sup().cls()], [sup]);

            supKern = Math.max(
                fontMetrics.metrics.bigOpSpacing1,
                fontMetrics.metrics.bigOpSpacing3 - sup.depth);
        }

        if (subGroup) {
            var sub = buildGroup(
                subGroup, options.withStyle(options.style.sub()));
            submid = makeSpan(
                [options.style.reset(), options.style.sub().cls()],
                [sub]);

            subKern = Math.max(
                fontMetrics.metrics.bigOpSpacing2,
                fontMetrics.metrics.bigOpSpacing4 - sub.height);
        }

        // Build the final group as a vlist of the possible subscript, base,
        // and possible superscript.
        var finalGroup;
        var top;
        var bottom;
        if (!supGroup) {
            top = base.height - baseShift;

            finalGroup = buildCommon.makeVList([
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
                {type: "elem", elem: submid},
                {type: "kern", size: subKern},
                {type: "elem", elem: base},
            ], "top", top, options);

            // Here, we shift the limits by the slant of the symbol. Note
            // that we are supposed to shift the limits by 1/2 of the slant,
            // but since we are centering the limits adding a full slant of
            // margin will shift by 1/2 that.
            finalGroup.children[0].style.marginLeft = -slant + "em";
        } else if (!subGroup) {
            bottom = base.depth + baseShift;

            finalGroup = buildCommon.makeVList([
                {type: "elem", elem: base},
                {type: "kern", size: supKern},
                {type: "elem", elem: supmid},
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
            ], "bottom", bottom, options);

            // See comment above about slants
            finalGroup.children[1].style.marginLeft = slant + "em";
        } else if (!supGroup && !subGroup) {
            // This case probably shouldn't occur (this would mean the
            // supsub was sending us a group with no superscript or
            // subscript) but be safe.
            return base;
        } else {
            bottom = fontMetrics.metrics.bigOpSpacing5 +
                submid.height + submid.depth +
                subKern +
                base.depth + baseShift;

            finalGroup = buildCommon.makeVList([
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
                {type: "elem", elem: submid},
                {type: "kern", size: subKern},
                {type: "elem", elem: base},
                {type: "kern", size: supKern},
                {type: "elem", elem: supmid},
                {type: "kern", size: fontMetrics.metrics.bigOpSpacing5},
            ], "bottom", bottom, options);

            // See comment above about slants
            finalGroup.children[0].style.marginLeft = -slant + "em";
            finalGroup.children[2].style.marginLeft = slant + "em";
        }

        return makeSpan(["mop", "op-limits"], [finalGroup]);
    } else {
        if (group.value.symbol) {
            base.style.top = baseShift + "em";
        }

        return base;
    }
};

groupTypes.katex = function(group, options, prev) {
    // The KaTeX logo. The offsets for the K and a were chosen to look
    // good, but the offsets for the T, E, and X were taken from the
    // definition of \TeX in TeX (see TeXbook pg. 356)
    var k = makeSpan(
        ["k"], [buildCommon.mathsym("K", group.mode)]);
    var a = makeSpan(
        ["a"], [buildCommon.mathsym("A", group.mode)]);

    a.height = (a.height + 0.2) * 0.75;
    a.depth = (a.height - 0.2) * 0.75;

    var t = makeSpan(
        ["t"], [buildCommon.mathsym("T", group.mode)]);
    var e = makeSpan(
        ["e"], [buildCommon.mathsym("E", group.mode)]);

    e.height = (e.height - 0.2155);
    e.depth = (e.depth + 0.2155);

    var x = makeSpan(
        ["x"], [buildCommon.mathsym("X", group.mode)]);

    return makeSpan(
        ["katex-logo", "mord"], [k, a, t, e, x], options.getColor());
};

groupTypes.overline = function(group, options, prev) {
    // Overlines are handled in the TeXbook pg 443, Rule 9.

    // Build the inner group in the cramped style.
    var innerGroup = buildGroup(group.value.body,
            options.withStyle(options.style.cramp()));

    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /
        options.style.sizeMultiplier;

    // Create the line above the body
    var line = makeSpan(
        [options.style.reset(), Style.TEXT.cls(), "overline-line"]);
    line.height = ruleWidth;
    line.maxFontSize = 1.0;

    // Generate the vlist, with the appropriate kerns
    var vlist = buildCommon.makeVList([
        {type: "elem", elem: innerGroup},
        {type: "kern", size: 3 * ruleWidth},
        {type: "elem", elem: line},
        {type: "kern", size: ruleWidth},
    ], "firstBaseline", null, options);

    return makeSpan(["overline", "mord"], [vlist], options.getColor());
};

groupTypes.underline = function(group, options, prev) {
    // Underlines are handled in the TeXbook pg 443, Rule 10.

    // Build the inner group.
    var innerGroup = buildGroup(group.value.body, options);

    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /
        options.style.sizeMultiplier;

    // Create the line above the body
    var line = makeSpan(
        [options.style.reset(), Style.TEXT.cls(), "underline-line"]);
    line.height = ruleWidth;
    line.maxFontSize = 1.0;

    // Generate the vlist, with the appropriate kerns
    var vlist = buildCommon.makeVList([
        {type: "kern", size: ruleWidth},
        {type: "elem", elem: line},
        {type: "kern", size: 3 * ruleWidth},
        {type: "elem", elem: innerGroup},
    ], "top", innerGroup.height, options);

    return makeSpan(["underline", "mord"], [vlist], options.getColor());
};

groupTypes.sqrt = function(group, options, prev) {
    // Square roots are handled in the TeXbook pg. 443, Rule 11.

    // First, we do the same steps as in overline to build the inner group
    // and line
    var inner = buildGroup(group.value.body,
            options.withStyle(options.style.cramp()));

    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /
        options.style.sizeMultiplier;

    var line = makeSpan(
        [options.style.reset(), Style.TEXT.cls(), "sqrt-line"], [],
        options.getColor());
    line.height = ruleWidth;
    line.maxFontSize = 1.0;

    var phi = ruleWidth;
    if (options.style.id < Style.TEXT.id) {
        phi = fontMetrics.metrics.xHeight;
    }

    // Calculate the clearance between the body and line
    var lineClearance = ruleWidth + phi / 4;

    var innerHeight =
        (inner.height + inner.depth) * options.style.sizeMultiplier;
    var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;

    // Create a \surd delimiter of the required minimum size
    var delim = makeSpan(["sqrt-sign"], [
        delimiter.customSizedDelim("\\surd", minDelimiterHeight,
                                   false, options, group.mode)],
                         options.getColor());

    var delimDepth = (delim.height + delim.depth) - ruleWidth;

    // Adjust the clearance based on the delimiter size
    if (delimDepth > inner.height + inner.depth + lineClearance) {
        lineClearance =
            (lineClearance + delimDepth - inner.height - inner.depth) / 2;
    }

    // Shift the delimiter so that its top lines up with the top of the line
    var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;
    delim.style.top = delimShift + "em";
    delim.height -= delimShift;
    delim.depth += delimShift;

    // We add a special case here, because even when `inner` is empty, we
    // still get a line. So, we use a simple heuristic to decide if we
    // should omit the body entirely. (note this doesn't work for something
    // like `\sqrt{\rlap{x}}`, but if someone is doing that they deserve for
    // it not to work.
    var body;
    if (inner.height === 0 && inner.depth === 0) {
        body = makeSpan();
    } else {
        body = buildCommon.makeVList([
            {type: "elem", elem: inner},
            {type: "kern", size: lineClearance},
            {type: "elem", elem: line},
            {type: "kern", size: ruleWidth},
        ], "firstBaseline", null, options);
    }

    if (!group.value.index) {
        return makeSpan(["sqrt", "mord"], [delim, body]);
    } else {
        // Handle the optional root index

        // The index is always in scriptscript style
        var root = buildGroup(
            group.value.index,
            options.withStyle(Style.SCRIPTSCRIPT));
        var rootWrap = makeSpan(
            [options.style.reset(), Style.SCRIPTSCRIPT.cls()],
            [root]);

        // Figure out the height and depth of the inner part
        var innerRootHeight = Math.max(delim.height, body.height);
        var innerRootDepth = Math.max(delim.depth, body.depth);

        // The amount the index is shifted by. This is taken from the TeX
        // source, in the definition of `\r@@t`.
        var toShift = 0.6 * (innerRootHeight - innerRootDepth);

        // Build a VList with the superscript shifted up correctly
        var rootVList = buildCommon.makeVList(
            [{type: "elem", elem: rootWrap}],
            "shift", -toShift, options);
        // Add a class surrounding it so we can add on the appropriate
        // kerning
        var rootVListWrap = makeSpan(["root"], [rootVList]);

        return makeSpan(["sqrt", "mord"], [rootVListWrap, delim, body]);
    }
};

groupTypes.sizing = function(group, options, prev) {
    // Handle sizing operators like \Huge. Real TeX doesn't actually allow
    // these functions inside of math expressions, so we do some special
    // handling.
    var inner = buildExpression(group.value.value,
            options.withSize(group.value.size), prev);

    var span = makeSpan(["mord"],
        [makeSpan(["sizing", "reset-" + options.size, group.value.size,
                   options.style.cls()],
                  inner)]);

    // Calculate the correct maxFontSize manually
    var fontSize = buildCommon.sizingMultiplier[group.value.size];
    span.maxFontSize = fontSize * options.style.sizeMultiplier;

    return span;
};

groupTypes.styling = function(group, options, prev) {
    // Style changes are handled in the TeXbook on pg. 442, Rule 3.

    // Figure out what style we're changing to.
    var style = {
        "display": Style.DISPLAY,
        "text": Style.TEXT,
        "script": Style.SCRIPT,
        "scriptscript": Style.SCRIPTSCRIPT,
    };

    var newStyle = style[group.value.style];

    // Build the inner expression in the new style.
    var inner = buildExpression(
        group.value.value, options.withStyle(newStyle), prev);

    return makeSpan([options.style.reset(), newStyle.cls()], inner);
};

groupTypes.font = function(group, options, prev) {
    var font = group.value.font;
    return buildGroup(group.value.body, options.withFont(font), prev);
};

groupTypes.delimsizing = function(group, options, prev) {
    var delim = group.value.value;

    if (delim === ".") {
        // Empty delimiters still count as elements, even though they don't
        // show anything.
        return makeSpan([groupToType[group.value.delimType]]);
    }

    // Use delimiter.sizedDelim to generate the delimiter.
    return makeSpan(
        [groupToType[group.value.delimType]],
        [delimiter.sizedDelim(
            delim, group.value.size, options, group.mode)]);
};

groupTypes.leftright = function(group, options, prev) {
    // Build the inner expression
    var inner = buildExpression(group.value.body, options.reset());

    var innerHeight = 0;
    var innerDepth = 0;

    // Calculate its height and depth
    for (var i = 0; i < inner.length; i++) {
        innerHeight = Math.max(inner[i].height, innerHeight);
        innerDepth = Math.max(inner[i].depth, innerDepth);
    }

    // The size of delimiters is the same, regardless of what style we are
    // in. Thus, to correctly calculate the size of delimiter we need around
    // a group, we scale down the inner size based on the size.
    innerHeight *= options.style.sizeMultiplier;
    innerDepth *= options.style.sizeMultiplier;

    var leftDelim;
    if (group.value.left === ".") {
        // Empty delimiters in \left and \right make null delimiter spaces.
        leftDelim = makeNullDelimiter(options);
    } else {
        // Otherwise, use leftRightDelim to generate the correct sized
        // delimiter.
        leftDelim = delimiter.leftRightDelim(
            group.value.left, innerHeight, innerDepth, options,
            group.mode);
    }
    // Add it to the beginning of the expression
    inner.unshift(leftDelim);

    var rightDelim;
    // Same for the right delimiter
    if (group.value.right === ".") {
        rightDelim = makeNullDelimiter(options);
    } else {
        rightDelim = delimiter.leftRightDelim(
            group.value.right, innerHeight, innerDepth, options,
            group.mode);
    }
    // Add it to the end of the expression.
    inner.push(rightDelim);

    return makeSpan(
        ["minner", options.style.cls()], inner, options.getColor());
};

groupTypes.rule = function(group, options, prev) {
    // Make an empty span for the rule
    var rule = makeSpan(["mord", "rule"], [], options.getColor());

    // Calculate the shift, width, and height of the rule, and account for units
    var shift = 0;
    if (group.value.shift) {
        shift = group.value.shift.number;
        if (group.value.shift.unit === "ex") {
            shift *= fontMetrics.metrics.xHeight;
        }
    }

    var width = group.value.width.number;
    if (group.value.width.unit === "ex") {
        width *= fontMetrics.metrics.xHeight;
    }

    var height = group.value.height.number;
    if (group.value.height.unit === "ex") {
        height *= fontMetrics.metrics.xHeight;
    }

    // The sizes of rules are absolute, so make it larger if we are in a
    // smaller style.
    shift /= options.style.sizeMultiplier;
    width /= options.style.sizeMultiplier;
    height /= options.style.sizeMultiplier;

    // Style the rule to the right size
    rule.style.borderRightWidth = width + "em";
    rule.style.borderTopWidth = height + "em";
    rule.style.bottom = shift + "em";

    // Record the height and width
    rule.width = width;
    rule.height = height + shift;
    rule.depth = -shift;

    return rule;
};

groupTypes.accent = function(group, options, prev) {
    // Accents are handled in the TeXbook pg. 443, rule 12.
    var base = group.value.base;

    var supsubGroup;
    if (group.type === "supsub") {
        // If our base is a character box, and we have superscripts and
        // subscripts, the supsub will defer to us. In particular, we want
        // to attach the superscripts and subscripts to the inner body (so
        // that the position of the superscripts and subscripts won't be
        // affected by the height of the accent). We accomplish this by
        // sticking the base of the accent into the base of the supsub, and
        // rendering that, while keeping track of where the accent is.

        // The supsub group is the group that was passed in
        var supsub = group;
        // The real accent group is the base of the supsub group
        group = supsub.value.base;
        // The character box is the base of the accent group
        base = group.value.base;
        // Stick the character box into the base of the supsub group
        supsub.value.base = base;

        // Rerender the supsub group with its new base, and store that
        // result.
        supsubGroup = buildGroup(
            supsub, options.reset(), prev);
    }

    // Build the base group
    var body = buildGroup(
        base, options.withStyle(options.style.cramp()));

    // Calculate the skew of the accent. This is based on the line "If the
    // nucleus is not a single character, let s = 0; otherwise set s to the
    // kern amount for the nucleus followed by the \skewchar of its font."
    // Note that our skew metrics are just the kern between each character
    // and the skewchar.
    var skew;
    if (isCharacterBox(base)) {
        // If the base is a character box, then we want the skew of the
        // innermost character. To do that, we find the innermost character:
        var baseChar = getBaseElem(base);
        // Then, we render its group to get the symbol inside it
        var baseGroup = buildGroup(
            baseChar, options.withStyle(options.style.cramp()));
        // Finally, we pull the skew off of the symbol.
        skew = baseGroup.skew;
        // Note that we now throw away baseGroup, because the layers we
        // removed with getBaseElem might contain things like \color which
        // we can't get rid of.
        // TODO(emily): Find a better way to get the skew
    } else {
        skew = 0;
    }

    // calculate the amount of space between the body and the accent
    var clearance = Math.min(body.height, fontMetrics.metrics.xHeight);

    // Build the accent
    var accent = buildCommon.makeSymbol(
        group.value.accent, "Main-Regular", "math", options.getColor());
    // Remove the italic correction of the accent, because it only serves to
    // shift the accent over to a place we don't want.
    accent.italic = 0;

    // The \vec character that the fonts use is a combining character, and
    // thus shows up much too far to the left. To account for this, we add a
    // specific class which shifts the accent over to where we want it.
    // TODO(emily): Fix this in a better way, like by changing the font
    var vecClass = group.value.accent === "\\vec" ? "accent-vec" : null;

    var accentBody = makeSpan(["accent-body", vecClass], [
        makeSpan([], [accent])]);

    accentBody = buildCommon.makeVList([
        {type: "elem", elem: body},
        {type: "kern", size: -clearance},
        {type: "elem", elem: accentBody},
    ], "firstBaseline", null, options);

    // Shift the accent over by the skew. Note we shift by twice the skew
    // because we are centering the accent, so by adding 2*skew to the left,
    // we shift it to the right by 1*skew.
    accentBody.children[1].style.marginLeft = 2 * skew + "em";

    var accentWrap = makeSpan(["mord", "accent"], [accentBody]);

    if (supsubGroup) {
        // Here, we replace the "base" child of the supsub with our newly
        // generated accent.
        supsubGroup.children[0] = accentWrap;

        // Since we don't rerun the height calculation after replacing the
        // accent, we manually recalculate height.
        supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);

        // Accents should always be ords, even when their innards are not.
        supsubGroup.classes[0] = "mord";

        return supsubGroup;
    } else {
        return accentWrap;
    }
};

groupTypes.phantom = function(group, options, prev) {
    var elements = buildExpression(
        group.value.value,
        options.withPhantom(),
        prev
    );

    // \phantom isn't supposed to affect the elements it contains.
    // See "color" for more details.
    return new buildCommon.makeFragment(elements);
};

/**
 * buildGroup is the function that takes a group and calls the correct groupType
 * function for it. It also handles the interaction of size and style changes
 * between parents and children.
 */
var buildGroup = function(group, options, prev) {
    if (!group) {
        return makeSpan();
    }

    if (groupTypes[group.type]) {
        // Call the groupTypes function
        var groupNode = groupTypes[group.type](group, options, prev);
        var multiplier;

        // If the style changed between the parent and the current group,
        // account for the size difference
        if (options.style !== options.parentStyle) {
            multiplier = options.style.sizeMultiplier /
                    options.parentStyle.sizeMultiplier;

            groupNode.height *= multiplier;
            groupNode.depth *= multiplier;
        }

        // If the size changed between the parent and the current group, account
        // for that size difference.
        if (options.size !== options.parentSize) {
            multiplier = buildCommon.sizingMultiplier[options.size] /
                    buildCommon.sizingMultiplier[options.parentSize];

            groupNode.height *= multiplier;
            groupNode.depth *= multiplier;
        }

        return groupNode;
    } else {
        throw new ParseError(
            "Got group of unknown type: '" + group.type + "'");
    }
};

/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */
var buildHTML = function(tree, options) {
    // buildExpression is destructive, so we need to make a clone
    // of the incoming tree so that it isn't accidentally changed
    tree = JSON.parse(JSON.stringify(tree));

    // Build the expression contained in the tree
    var expression = buildExpression(tree, options);
    var body = makeSpan(["base", options.style.cls()], expression);

    // Add struts, which ensure that the top of the HTML element falls at the
    // height of the expression, and the bottom of the HTML element falls at the
    // depth of the expression.
    var topStrut = makeSpan(["strut"]);
    var bottomStrut = makeSpan(["strut", "bottom"]);

    topStrut.style.height = body.height + "em";
    bottomStrut.style.height = (body.height + body.depth) + "em";
    // We'd like to use `vertical-align: top` but in IE 9 this lowers the
    // baseline of the box to the bottom of this strut (instead staying in the
    // normal place) so we use an absolute value for vertical-align instead
    bottomStrut.style.verticalAlign = -body.depth + "em";

    // Wrap the struts and body together
    var htmlNode = makeSpan(["katex-html"], [topStrut, bottomStrut, body]);

    htmlNode.setAttribute("aria-hidden", "true");

    return htmlNode;
};

module.exports = buildHTML;

},{"./ParseError":149,"./Style":152,"./buildCommon":153,"./delimiter":157,"./domTree":158,"./fontMetrics":160,"./utils":167}],155:[function(require,module,exports){
/**
 * This file converts a parse tree into a cooresponding MathML tree. The main
 * entry point is the `buildMathML` function, which takes a parse tree from the
 * parser.
 */

var buildCommon = require("./buildCommon");
var fontMetrics = require("./fontMetrics");
var mathMLTree = require("./mathMLTree");
var ParseError = require("./ParseError");
var symbols = require("./symbols");
var utils = require("./utils");

var makeSpan = buildCommon.makeSpan;
var fontMap = buildCommon.fontMap;

/**
 * Takes a symbol and converts it into a MathML text node after performing
 * optional replacement from symbols.js.
 */
var makeText = function(text, mode) {
    if (symbols[mode][text] && symbols[mode][text].replace) {
        text = symbols[mode][text].replace;
    }

    return new mathMLTree.TextNode(text);
};

/**
 * Returns the math variant as a string or null if none is required.
 */
var getVariant = function(group, options) {
    var font = options.font;
    if (!font) {
        return null;
    }

    var mode = group.mode;
    if (font === "mathit") {
        return "italic";
    }

    var value = group.value;
    if (utils.contains(["\\imath", "\\jmath"], value)) {
        return null;
    }

    if (symbols[mode][value] && symbols[mode][value].replace) {
        value = symbols[mode][value].replace;
    }

    var fontName = fontMap[font].fontName;
    if (fontMetrics.getCharacterMetrics(value, fontName)) {
        return fontMap[options.font].variant;
    }

    return null;
};

/**
 * Functions for handling the different types of groups found in the parse
 * tree. Each function should take a parse group and return a MathML node.
 */
var groupTypes = {};

groupTypes.mathord = function(group, options) {
    var node = new mathMLTree.MathNode(
        "mi",
        [makeText(group.value, group.mode)]);

    var variant = getVariant(group, options);
    if (variant) {
        node.setAttribute("mathvariant", variant);
    }
    return node;
};

groupTypes.textord = function(group, options) {
    var text = makeText(group.value, group.mode);

    var variant = getVariant(group, options) || "normal";

    var node;
    if (/[0-9]/.test(group.value)) {
        // TODO(kevinb) merge adjacent <mn> nodes
        // do it as a post processing step
        node = new mathMLTree.MathNode("mn", [text]);
        if (options.font) {
            node.setAttribute("mathvariant", variant);
        }
    } else {
        node = new mathMLTree.MathNode("mi", [text]);
        node.setAttribute("mathvariant", variant);
    }

    return node;
};

groupTypes.bin = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    return node;
};

groupTypes.rel = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    return node;
};

groupTypes.open = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    return node;
};

groupTypes.close = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    return node;
};

groupTypes.inner = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    return node;
};

groupTypes.punct = function(group) {
    var node = new mathMLTree.MathNode(
        "mo", [makeText(group.value, group.mode)]);

    node.setAttribute("separator", "true");

    return node;
};

groupTypes.ordgroup = function(group, options) {
    var inner = buildExpression(group.value, options);

    var node = new mathMLTree.MathNode("mrow", inner);

    return node;
};

groupTypes.text = function(group, options) {
    var inner = buildExpression(group.value.body, options);

    var node = new mathMLTree.MathNode("mtext", inner);

    return node;
};

groupTypes.color = function(group, options) {
    var inner = buildExpression(group.value.value, options);

    var node = new mathMLTree.MathNode("mstyle", inner);

    node.setAttribute("mathcolor", group.value.color);

    return node;
};

groupTypes.supsub = function(group, options) {
    var children = [buildGroup(group.value.base, options)];

    if (group.value.sub) {
        children.push(buildGroup(group.value.sub, options));
    }

    if (group.value.sup) {
        children.push(buildGroup(group.value.sup, options));
    }

    var nodeType;
    if (!group.value.sub) {
        nodeType = "msup";
    } else if (!group.value.sup) {
        nodeType = "msub";
    } else {
        nodeType = "msubsup";
    }

    var node = new mathMLTree.MathNode(nodeType, children);

    return node;
};

groupTypes.genfrac = function(group, options) {
    var node = new mathMLTree.MathNode(
        "mfrac",
        [buildGroup(group.value.numer, options),
         buildGroup(group.value.denom, options)]);

    if (!group.value.hasBarLine) {
        node.setAttribute("linethickness", "0px");
    }

    if (group.value.leftDelim != null || group.value.rightDelim != null) {
        var withDelims = [];

        if (group.value.leftDelim != null) {
            var leftOp = new mathMLTree.MathNode(
                "mo", [new mathMLTree.TextNode(group.value.leftDelim)]);

            leftOp.setAttribute("fence", "true");

            withDelims.push(leftOp);
        }

        withDelims.push(node);

        if (group.value.rightDelim != null) {
            var rightOp = new mathMLTree.MathNode(
                "mo", [new mathMLTree.TextNode(group.value.rightDelim)]);

            rightOp.setAttribute("fence", "true");

            withDelims.push(rightOp);
        }

        var outerNode = new mathMLTree.MathNode("mrow", withDelims);

        return outerNode;
    }

    return node;
};

groupTypes.array = function(group, options) {
    return new mathMLTree.MathNode(
        "mtable", group.value.body.map(function(row) {
            return new mathMLTree.MathNode(
                "mtr", row.map(function(cell) {
                    return new mathMLTree.MathNode(
                        "mtd", [buildGroup(cell, options)]);
                }));
        }));
};

groupTypes.sqrt = function(group, options) {
    var node;
    if (group.value.index) {
        node = new mathMLTree.MathNode(
            "mroot", [
                buildGroup(group.value.body, options),
                buildGroup(group.value.index, options),
            ]);
    } else {
        node = new mathMLTree.MathNode(
            "msqrt", [buildGroup(group.value.body, options)]);
    }

    return node;
};

groupTypes.leftright = function(group, options) {
    var inner = buildExpression(group.value.body, options);

    if (group.value.left !== ".") {
        var leftNode = new mathMLTree.MathNode(
            "mo", [makeText(group.value.left, group.mode)]);

        leftNode.setAttribute("fence", "true");

        inner.unshift(leftNode);
    }

    if (group.value.right !== ".") {
        var rightNode = new mathMLTree.MathNode(
            "mo", [makeText(group.value.right, group.mode)]);

        rightNode.setAttribute("fence", "true");

        inner.push(rightNode);
    }

    var outerNode = new mathMLTree.MathNode("mrow", inner);

    return outerNode;
};

groupTypes.accent = function(group, options) {
    var accentNode = new mathMLTree.MathNode(
        "mo", [makeText(group.value.accent, group.mode)]);

    var node = new mathMLTree.MathNode(
        "mover",
        [buildGroup(group.value.base, options),
         accentNode]);

    node.setAttribute("accent", "true");

    return node;
};

groupTypes.spacing = function(group) {
    var node;

    if (group.value === "\\ " || group.value === "\\space" ||
        group.value === " " || group.value === "~") {
        node = new mathMLTree.MathNode(
            "mtext", [new mathMLTree.TextNode("\u00a0")]);
    } else {
        node = new mathMLTree.MathNode("mspace");

        node.setAttribute(
            "width", buildCommon.spacingFunctions[group.value].size);
    }

    return node;
};

groupTypes.op = function(group) {
    var node;

    // TODO(emily): handle big operators using the `largeop` attribute

    if (group.value.symbol) {
        // This is a symbol. Just add the symbol.
        node = new mathMLTree.MathNode(
            "mo", [makeText(group.value.body, group.mode)]);
    } else {
        // This is a text operator. Add all of the characters from the
        // operator's name.
        // TODO(emily): Add a space in the middle of some of these
        // operators, like \limsup.
        node = new mathMLTree.MathNode(
            "mi", [new mathMLTree.TextNode(group.value.body.slice(1))]);
    }

    return node;
};

groupTypes.katex = function(group) {
    var node = new mathMLTree.MathNode(
        "mtext", [new mathMLTree.TextNode("KaTeX")]);

    return node;
};

groupTypes.font = function(group, options) {
    var font = group.value.font;
    return buildGroup(group.value.body, options.withFont(font));
};

groupTypes.delimsizing = function(group) {
    var children = [];

    if (group.value.value !== ".") {
        children.push(makeText(group.value.value, group.mode));
    }

    var node = new mathMLTree.MathNode("mo", children);

    if (group.value.delimType === "open" ||
        group.value.delimType === "close") {
        // Only some of the delimsizing functions act as fences, and they
        // return "open" or "close" delimTypes.
        node.setAttribute("fence", "true");
    } else {
        // Explicitly disable fencing if it's not a fence, to override the
        // defaults.
        node.setAttribute("fence", "false");
    }

    return node;
};

groupTypes.styling = function(group, options) {
    var inner = buildExpression(group.value.value, options);

    var node = new mathMLTree.MathNode("mstyle", inner);

    var styleAttributes = {
        "display": ["0", "true"],
        "text": ["0", "false"],
        "script": ["1", "false"],
        "scriptscript": ["2", "false"],
    };

    var attr = styleAttributes[group.value.style];

    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);

    return node;
};

groupTypes.sizing = function(group, options) {
    var inner = buildExpression(group.value.value, options);

    var node = new mathMLTree.MathNode("mstyle", inner);

    // TODO(emily): This doesn't produce the correct size for nested size
    // changes, because we don't keep state of what style we're currently
    // in, so we can't reset the size to normal before changing it.  Now
    // that we're passing an options parameter we should be able to fix
    // this.
    node.setAttribute(
        "mathsize", buildCommon.sizingMultiplier[group.value.size] + "em");

    return node;
};

groupTypes.overline = function(group, options) {
    var operator = new mathMLTree.MathNode(
        "mo", [new mathMLTree.TextNode("\u203e")]);
    operator.setAttribute("stretchy", "true");

    var node = new mathMLTree.MathNode(
        "mover",
        [buildGroup(group.value.body, options),
         operator]);
    node.setAttribute("accent", "true");

    return node;
};

groupTypes.underline = function(group, options) {
    var operator = new mathMLTree.MathNode(
        "mo", [new mathMLTree.TextNode("\u203e")]);
    operator.setAttribute("stretchy", "true");

    var node = new mathMLTree.MathNode(
        "munder",
        [buildGroup(group.value.body, options),
         operator]);
    node.setAttribute("accentunder", "true");

    return node;
};

groupTypes.rule = function(group) {
    // TODO(emily): Figure out if there's an actual way to draw black boxes
    // in MathML.
    var node = new mathMLTree.MathNode("mrow");

    return node;
};

groupTypes.llap = function(group, options) {
    var node = new mathMLTree.MathNode(
        "mpadded", [buildGroup(group.value.body, options)]);

    node.setAttribute("lspace", "-1width");
    node.setAttribute("width", "0px");

    return node;
};

groupTypes.rlap = function(group, options) {
    var node = new mathMLTree.MathNode(
        "mpadded", [buildGroup(group.value.body, options)]);

    node.setAttribute("width", "0px");

    return node;
};

groupTypes.phantom = function(group, options, prev) {
    var inner = buildExpression(group.value.value, options);
    return new mathMLTree.MathNode("mphantom", inner);
};

/**
 * Takes a list of nodes, builds them, and returns a list of the generated
 * MathML nodes. A little simpler than the HTML version because we don't do any
 * previous-node handling.
 */
var buildExpression = function(expression, options) {
    var groups = [];
    for (var i = 0; i < expression.length; i++) {
        var group = expression[i];
        groups.push(buildGroup(group, options));
    }
    return groups;
};

/**
 * Takes a group from the parser and calls the appropriate groupTypes function
 * on it to produce a MathML node.
 */
var buildGroup = function(group, options) {
    if (!group) {
        return new mathMLTree.MathNode("mrow");
    }

    if (groupTypes[group.type]) {
        // Call the groupTypes function
        return groupTypes[group.type](group, options);
    } else {
        throw new ParseError(
            "Got group of unknown type: '" + group.type + "'");
    }
};

/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */
var buildMathML = function(tree, texExpression, options) {
    var expression = buildExpression(tree, options);

    // Wrap up the expression in an mrow so it is presented in the semantics
    // tag correctly.
    var wrapper = new mathMLTree.MathNode("mrow", expression);

    // Build a TeX annotation of the source
    var annotation = new mathMLTree.MathNode(
        "annotation", [new mathMLTree.TextNode(texExpression)]);

    annotation.setAttribute("encoding", "application/x-tex");

    var semantics = new mathMLTree.MathNode(
        "semantics", [wrapper, annotation]);

    var math = new mathMLTree.MathNode("math", [semantics]);

    // You can't style <math> nodes, so we wrap the node in a span.
    return makeSpan(["katex-mathml"], [math]);
};

module.exports = buildMathML;

},{"./ParseError":149,"./buildCommon":153,"./fontMetrics":160,"./mathMLTree":163,"./symbols":166,"./utils":167}],156:[function(require,module,exports){
var buildHTML = require("./buildHTML");
var buildMathML = require("./buildMathML");
var buildCommon = require("./buildCommon");
var Options = require("./Options");
var Settings = require("./Settings");
var Style = require("./Style");

var makeSpan = buildCommon.makeSpan;

var buildTree = function(tree, expression, settings) {
    settings = settings || new Settings({});

    var startStyle = Style.TEXT;
    if (settings.displayMode) {
        startStyle = Style.DISPLAY;
    }

    // Setup the default options
    var options = new Options({
        style: startStyle,
        size: "size5",
    });

    // `buildHTML` sometimes messes with the parse tree (like turning bins ->
    // ords), so we build the MathML version first.
    var mathMLNode = buildMathML(tree, expression, options);
    var htmlNode = buildHTML(tree, options);

    var katexNode = makeSpan(["katex"], [
        mathMLNode, htmlNode,
    ]);

    if (settings.displayMode) {
        return makeSpan(["katex-display"], [katexNode]);
    } else {
        return katexNode;
    }
};

module.exports = buildTree;

},{"./Options":148,"./Settings":151,"./Style":152,"./buildCommon":153,"./buildHTML":154,"./buildMathML":155}],157:[function(require,module,exports){
/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */

var ParseError = require("./ParseError");
var Style = require("./Style");

var buildCommon = require("./buildCommon");
var fontMetrics = require("./fontMetrics");
var symbols = require("./symbols");
var utils = require("./utils");

var makeSpan = buildCommon.makeSpan;

/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */
var getMetrics = function(symbol, font) {
    if (symbols.math[symbol] && symbols.math[symbol].replace) {
        return fontMetrics.getCharacterMetrics(
            symbols.math[symbol].replace, font);
    } else {
        return fontMetrics.getCharacterMetrics(
            symbol, font);
    }
};

/**
 * Builds a symbol in the given font size (note size is an integer)
 */
var mathrmSize = function(value, size, mode) {
    return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode);
};

/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */
var styleWrap = function(delim, toStyle, options) {
    var span = makeSpan(
        ["style-wrap", options.style.reset(), toStyle.cls()], [delim]);

    var multiplier = toStyle.sizeMultiplier / options.style.sizeMultiplier;

    span.height *= multiplier;
    span.depth *= multiplier;
    span.maxFontSize = toStyle.sizeMultiplier;

    return span;
};

/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 */
var makeSmallDelim = function(delim, style, center, options, mode) {
    var text = buildCommon.makeSymbol(delim, "Main-Regular", mode);

    var span = styleWrap(text, style, options);

    if (center) {
        var shift =
            (1 - options.style.sizeMultiplier / style.sizeMultiplier) *
            fontMetrics.metrics.axisHeight;

        span.style.top = shift + "em";
        span.height -= shift;
        span.depth += shift;
    }

    return span;
};

/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 */
var makeLargeDelim = function(delim, size, center, options, mode) {
    var inner = mathrmSize(delim, size, mode);

    var span = styleWrap(
        makeSpan(["delimsizing", "size" + size],
                 [inner], options.getColor()),
        Style.TEXT, options);

    if (center) {
        var shift = (1 - options.style.sizeMultiplier) *
            fontMetrics.metrics.axisHeight;

        span.style.top = shift + "em";
        span.height -= shift;
        span.depth += shift;
    }

    return span;
};

/**
 * Make an inner span with the given offset and in the given font. This is used
 * in `makeStackedDelim` to make the stacking pieces for the delimiter.
 */
var makeInner = function(symbol, font, mode) {
    var sizeClass;
    // Apply the correct CSS class to choose the right font.
    if (font === "Size1-Regular") {
        sizeClass = "delim-size1";
    } else if (font === "Size4-Regular") {
        sizeClass = "delim-size4";
    }

    var inner = makeSpan(
        ["delimsizinginner", sizeClass],
        [makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);

    // Since this will be passed into `makeVList` in the end, wrap the element
    // in the appropriate tag that VList uses.
    return {type: "elem", elem: inner};
};

/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 */
var makeStackedDelim = function(delim, heightTotal, center, options, mode) {
    // There are four parts, the top, an optional middle, a repeated part, and a
    // bottom.
    var top;
    var middle;
    var repeat;
    var bottom;
    top = repeat = bottom = delim;
    middle = null;
    // Also keep track of what font the delimiters are in
    var font = "Size1-Regular";

    // We set the parts and font based on the symbol. Note that we use
    // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
    // repeats of the arrows
    if (delim === "\\uparrow") {
        repeat = bottom = "\u23d0";
    } else if (delim === "\\Uparrow") {
        repeat = bottom = "\u2016";
    } else if (delim === "\\downarrow") {
        top = repeat = "\u23d0";
    } else if (delim === "\\Downarrow") {
        top = repeat = "\u2016";
    } else if (delim === "\\updownarrow") {
        top = "\\uparrow";
        repeat = "\u23d0";
        bottom = "\\downarrow";
    } else if (delim === "\\Updownarrow") {
        top = "\\Uparrow";
        repeat = "\u2016";
        bottom = "\\Downarrow";
    } else if (delim === "[" || delim === "\\lbrack") {
        top = "\u23a1";
        repeat = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
    } else if (delim === "]" || delim === "\\rbrack") {
        top = "\u23a4";
        repeat = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
    } else if (delim === "\\lfloor") {
        repeat = top = "\u23a2";
        bottom = "\u23a3";
        font = "Size4-Regular";
    } else if (delim === "\\lceil") {
        top = "\u23a1";
        repeat = bottom = "\u23a2";
        font = "Size4-Regular";
    } else if (delim === "\\rfloor") {
        repeat = top = "\u23a5";
        bottom = "\u23a6";
        font = "Size4-Regular";
    } else if (delim === "\\rceil") {
        top = "\u23a4";
        repeat = bottom = "\u23a5";
        font = "Size4-Regular";
    } else if (delim === "(") {
        top = "\u239b";
        repeat = "\u239c";
        bottom = "\u239d";
        font = "Size4-Regular";
    } else if (delim === ")") {
        top = "\u239e";
        repeat = "\u239f";
        bottom = "\u23a0";
        font = "Size4-Regular";
    } else if (delim === "\\{" || delim === "\\lbrace") {
        top = "\u23a7";
        middle = "\u23a8";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\}" || delim === "\\rbrace") {
        top = "\u23ab";
        middle = "\u23ac";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\lgroup") {
        top = "\u23a7";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\rgroup") {
        top = "\u23ab";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\lmoustache") {
        top = "\u23a7";
        bottom = "\u23ad";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\rmoustache") {
        top = "\u23ab";
        bottom = "\u23a9";
        repeat = "\u23aa";
        font = "Size4-Regular";
    } else if (delim === "\\surd") {
        top = "\ue001";
        bottom = "\u23b7";
        repeat = "\ue000";
        font = "Size4-Regular";
    }

    // Get the metrics of the four sections
    var topMetrics = getMetrics(top, font);
    var topHeightTotal = topMetrics.height + topMetrics.depth;
    var repeatMetrics = getMetrics(repeat, font);
    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
    var bottomMetrics = getMetrics(bottom, font);
    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
    var middleHeightTotal = 0;
    var middleFactor = 1;
    if (middle !== null) {
        var middleMetrics = getMetrics(middle, font);
        middleHeightTotal = middleMetrics.height + middleMetrics.depth;
        middleFactor = 2; // repeat symmetrically above and below middle
    }

    // Calcuate the minimal height that the delimiter can have.
    // It is at least the size of the top, bottom, and optional middle combined.
    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;

    // Compute the number of copies of the repeat symbol we will need
    var repeatCount = Math.ceil(
        (heightTotal - minHeight) / (middleFactor * repeatHeightTotal));

    // Compute the total height of the delimiter including all the symbols
    var realHeightTotal =
        minHeight + repeatCount * middleFactor * repeatHeightTotal;

    // The center of the delimiter is placed at the center of the axis. Note
    // that in this context, "center" means that the delimiter should be
    // centered around the axis in the current style, while normally it is
    // centered around the axis in textstyle.
    var axisHeight = fontMetrics.metrics.axisHeight;
    if (center) {
        axisHeight *= options.style.sizeMultiplier;
    }
    // Calculate the depth
    var depth = realHeightTotal / 2 - axisHeight;

    // Now, we start building the pieces that will go into the vlist

    // Keep a list of the inner pieces
    var inners = [];

    // Add the bottom symbol
    inners.push(makeInner(bottom, font, mode));

    var i;
    if (middle === null) {
        // Add that many symbols
        for (i = 0; i < repeatCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }
    } else {
        // When there is a middle bit, we need the middle part and two repeated
        // sections
        for (i = 0; i < repeatCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }
        inners.push(makeInner(middle, font, mode));
        for (i = 0; i < repeatCount; i++) {
            inners.push(makeInner(repeat, font, mode));
        }
    }

    // Add the top symbol
    inners.push(makeInner(top, font, mode));

    // Finally, build the vlist
    var inner = buildCommon.makeVList(inners, "bottom", depth, options);

    return styleWrap(
        makeSpan(["delimsizing", "mult"], [inner], options.getColor()),
        Style.TEXT, options);
};

// There are three kinds of delimiters, delimiters that stack when they become
// too large
var stackLargeDelimiters = [
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",
    "\\{", "\\lbrace", "\\}", "\\rbrace",
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",
    "\\surd",
];

// delimiters that always stack
var stackAlwaysDelimiters = [
    "\\uparrow", "\\downarrow", "\\updownarrow",
    "\\Uparrow", "\\Downarrow", "\\Updownarrow",
    "|", "\\|", "\\vert", "\\Vert",
    "\\lvert", "\\rvert", "\\lVert", "\\rVert",
    "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache",
];

// and delimiters that never stack
var stackNeverDelimiters = [
    "<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt",
];

// Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];

/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 */
var makeSizedDelim = function(delim, size, options, mode) {
    // < and > turn into \langle and \rangle in delimiters
    if (delim === "<" || delim === "\\lt") {
        delim = "\\langle";
    } else if (delim === ">" || delim === "\\gt") {
        delim = "\\rangle";
    }

    // Sized delimiters are never centered.
    if (utils.contains(stackLargeDelimiters, delim) ||
        utils.contains(stackNeverDelimiters, delim)) {
        return makeLargeDelim(delim, size, false, options, mode);
    } else if (utils.contains(stackAlwaysDelimiters, delim)) {
        return makeStackedDelim(
            delim, sizeToMaxHeight[size], false, options, mode);
    } else {
        throw new ParseError("Illegal delimiter: '" + delim + "'");
    }
};

/**
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */

// Delimiters that never stack try small delimiters and large delimiters only
var stackNeverDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "large", size: 1},
    {type: "large", size: 2},
    {type: "large", size: 3},
    {type: "large", size: 4},
];

// Delimiters that always stack try the small delimiters first, then stack
var stackAlwaysDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "stack"},
];

// Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards
var stackLargeDelimiterSequence = [
    {type: "small", style: Style.SCRIPTSCRIPT},
    {type: "small", style: Style.SCRIPT},
    {type: "small", style: Style.TEXT},
    {type: "large", size: 1},
    {type: "large", size: 2},
    {type: "large", size: 3},
    {type: "large", size: 4},
    {type: "stack"},
];

/**
 * Get the font used in a delimiter based on what kind of delimiter it is.
 */
var delimTypeToFont = function(type) {
    if (type.type === "small") {
        return "Main-Regular";
    } else if (type.type === "large") {
        return "Size" + type.size + "-Regular";
    } else if (type.type === "stack") {
        return "Size4-Regular";
    }
};

/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 */
var traverseSequence = function(delim, height, sequence, options) {
    // Here, we choose the index we should start at in the sequences. In smaller
    // sizes (which correspond to larger numbers in style.size) we start earlier
    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
    var start = Math.min(2, 3 - options.style.size);
    for (var i = start; i < sequence.length; i++) {
        if (sequence[i].type === "stack") {
            // This is always the last delimiter, so we just break the loop now.
            break;
        }

        var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));
        var heightDepth = metrics.height + metrics.depth;

        // Small delimiters are scaled down versions of the same font, so we
        // account for the style change size.

        if (sequence[i].type === "small") {
            heightDepth *= sequence[i].style.sizeMultiplier;
        }

        // Check if the delimiter at this size works for the given height.
        if (heightDepth > height) {
            return sequence[i];
        }
    }

    // If we reached the end of the sequence, return the last sequence element.
    return sequence[sequence.length - 1];
};

/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 */
var makeCustomSizedDelim = function(delim, height, center, options, mode) {
    if (delim === "<" || delim === "\\lt") {
        delim = "\\langle";
    } else if (delim === ">" || delim === "\\gt") {
        delim = "\\rangle";
    }

    // Decide what sequence to use
    var sequence;
    if (utils.contains(stackNeverDelimiters, delim)) {
        sequence = stackNeverDelimiterSequence;
    } else if (utils.contains(stackLargeDelimiters, delim)) {
        sequence = stackLargeDelimiterSequence;
    } else {
        sequence = stackAlwaysDelimiterSequence;
    }

    // Look through the sequence
    var delimType = traverseSequence(delim, height, sequence, options);

    // Depending on the sequence element we decided on, call the appropriate
    // function.
    if (delimType.type === "small") {
        return makeSmallDelim(delim, delimType.style, center, options, mode);
    } else if (delimType.type === "large") {
        return makeLargeDelim(delim, delimType.size, center, options, mode);
    } else if (delimType.type === "stack") {
        return makeStackedDelim(delim, height, center, options, mode);
    }
};

/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 */
var makeLeftRightDelim = function(delim, height, depth, options, mode) {
    // We always center \left/\right delimiters, so the axis is always shifted
    var axisHeight =
        fontMetrics.metrics.axisHeight * options.style.sizeMultiplier;

    // Taken from TeX source, tex.web, function make_left_right
    var delimiterFactor = 901;
    var delimiterExtend = 5.0 / fontMetrics.metrics.ptPerEm;

    var maxDistFromAxis = Math.max(
        height - axisHeight, depth + axisHeight);

    var totalHeight = Math.max(
        // In real TeX, calculations are done using integral values which are
        // 65536 per pt, or 655360 per em. So, the division here truncates in
        // TeX but doesn't here, producing different results. If we wanted to
        // exactly match TeX's calculation, we could do
        //   Math.floor(655360 * maxDistFromAxis / 500) *
        //    delimiterFactor / 655360
        // (To see the difference, compare
        //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
        // in TeX and KaTeX)
        maxDistFromAxis / 500 * delimiterFactor,
        2 * maxDistFromAxis - delimiterExtend);

    // Finally, we defer to `makeCustomSizedDelim` with our calculated total
    // height
    return makeCustomSizedDelim(delim, totalHeight, true, options, mode);
};

module.exports = {
    sizedDelim: makeSizedDelim,
    customSizedDelim: makeCustomSizedDelim,
    leftRightDelim: makeLeftRightDelim,
};

},{"./ParseError":149,"./Style":152,"./buildCommon":153,"./fontMetrics":160,"./symbols":166,"./utils":167}],158:[function(require,module,exports){
/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
 * storing extra properties on the nodes, as well as providing a way to easily
 * work with the DOM.
 *
 * Similar functions for working with MathML nodes exist in mathMLTree.js.
 */

var utils = require("./utils");

/**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove null or empty classes.
 */
var createClass = function(classes) {
    classes = classes.slice();
    for (var i = classes.length - 1; i >= 0; i--) {
        if (!classes[i]) {
            classes.splice(i, 1);
        }
    }

    return classes.join(" ");
};

/**
 * This node represents a span node, with a className, a list of children, and
 * an inline style. It also contains information about its height, depth, and
 * maxFontSize.
 */
function span(classes, children, height, depth, maxFontSize, style) {
    this.classes = classes || [];
    this.children = children || [];
    this.height = height || 0;
    this.depth = depth || 0;
    this.maxFontSize = maxFontSize || 0;
    this.style = style || {};
    this.attributes = {};
}

/**
 * Sets an arbitrary attribute on the span. Warning: use this wisely. Not all
 * browsers support attributes the same, and having too many custom attributes
 * is probably bad.
 */
span.prototype.setAttribute = function(attribute, value) {
    this.attributes[attribute] = value;
};

/**
 * Convert the span into an HTML node
 */
span.prototype.toNode = function() {
    var span = document.createElement("span");

    // Apply the class
    span.className = createClass(this.classes);

    // Apply inline styles
    for (var style in this.style) {
        if (Object.prototype.hasOwnProperty.call(this.style, style)) {
            span.style[style] = this.style[style];
        }
    }

    // Apply attributes
    for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            span.setAttribute(attr, this.attributes[attr]);
        }
    }

    // Append the children, also as HTML nodes
    for (var i = 0; i < this.children.length; i++) {
        span.appendChild(this.children[i].toNode());
    }

    return span;
};

/**
 * Convert the span into an HTML markup string
 */
span.prototype.toMarkup = function() {
    var markup = "<span";

    // Add the class
    if (this.classes.length) {
        markup += " class=\"";
        markup += utils.escape(createClass(this.classes));
        markup += "\"";
    }

    var styles = "";

    // Add the styles, after hyphenation
    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
    }

    if (styles) {
        markup += " style=\"" + utils.escape(styles) + "\"";
    }

    // Add the attributes
    for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            markup += " " + attr + "=\"";
            markup += utils.escape(this.attributes[attr]);
            markup += "\"";
        }
    }

    markup += ">";

    // Add the markup of the children, also as markup
    for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
    }

    markup += "</span>";

    return markup;
};

/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. Thus, it only
 * contains children and doesn't have any HTML properties. It also keeps track
 * of a height, depth, and maxFontSize.
 */
function documentFragment(children, height, depth, maxFontSize) {
    this.children = children || [];
    this.height = height || 0;
    this.depth = depth || 0;
    this.maxFontSize = maxFontSize || 0;
}

/**
 * Convert the fragment into a node
 */
documentFragment.prototype.toNode = function() {
    // Create a fragment
    var frag = document.createDocumentFragment();

    // Append the children
    for (var i = 0; i < this.children.length; i++) {
        frag.appendChild(this.children[i].toNode());
    }

    return frag;
};

/**
 * Convert the fragment into HTML markup
 */
documentFragment.prototype.toMarkup = function() {
    var markup = "";

    // Simply concatenate the markup for the children together
    for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
    }

    return markup;
};

/**
 * A symbol node contains information about a single symbol. It either renders
 * to a single text node, or a span with a single text node in it, depending on
 * whether it has CSS classes, styles, or needs italic correction.
 */
function symbolNode(value, height, depth, italic, skew, classes, style) {
    this.value = value || "";
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0;
}

/**
 * Creates a text node or span from a symbol node. Note that a span is only
 * created if it is needed.
 */
symbolNode.prototype.toNode = function() {
    var node = document.createTextNode(this.value);
    var span = null;

    if (this.italic > 0) {
        span = document.createElement("span");
        span.style.marginRight = this.italic + "em";
    }

    if (this.classes.length > 0) {
        span = span || document.createElement("span");
        span.className = createClass(this.classes);
    }

    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            span = span || document.createElement("span");
            span.style[style] = this.style[style];
        }
    }

    if (span) {
        span.appendChild(node);
        return span;
    } else {
        return node;
    }
};

/**
 * Creates markup for a symbol node.
 */
symbolNode.prototype.toMarkup = function() {
    // TODO(alpert): More duplication than I'd like from
    // span.prototype.toMarkup and symbolNode.prototype.toNode...
    var needsSpan = false;

    var markup = "<span";

    if (this.classes.length) {
        needsSpan = true;
        markup += " class=\"";
        markup += utils.escape(createClass(this.classes));
        markup += "\"";
    }

    var styles = "";

    if (this.italic > 0) {
        styles += "margin-right:" + this.italic + "em;";
    }
    for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
            styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
    }

    if (styles) {
        needsSpan = true;
        markup += " style=\"" + utils.escape(styles) + "\"";
    }

    var escaped = utils.escape(this.value);
    if (needsSpan) {
        markup += ">";
        markup += escaped;
        markup += "</span>";
        return markup;
    } else {
        return escaped;
    }
};

module.exports = {
    span: span,
    documentFragment: documentFragment,
    symbolNode: symbolNode,
};

},{"./utils":167}],159:[function(require,module,exports){
/* eslint no-constant-condition:0 */
var fontMetrics = require("./fontMetrics");
var parseData = require("./parseData");
var ParseError = require("./ParseError");

var ParseNode = parseData.ParseNode;

/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.
 */
function parseArray(parser, result) {
    var row = [];
    var body = [row];
    var rowGaps = [];
    while (true) {
        var cell = parser.parseExpression(false, null);
        row.push(new ParseNode("ordgroup", cell, parser.mode));
        var next = parser.nextToken.text;
        if (next === "&") {
            parser.consume();
        } else if (next === "\\end") {
            break;
        } else if (next === "\\\\" || next === "\\cr") {
            var cr = parser.parseFunction();
            rowGaps.push(cr.value.size);
            row = [];
            body.push(row);
        } else {
            // TODO: Clean up the following hack once #385 got merged
            var pos = Math.min(parser.pos + 1, parser.lexer._input.length);
            throw new ParseError("Expected & or \\\\ or \\end",
                                 parser.lexer, pos);
        }
    }
    result.body = body;
    result.rowGaps = rowGaps;
    return new ParseNode(result.type, result, parser.mode);
}

/*
 * An environment definition is very similar to a function definition:
 * it is declared with a name or a list of names, a set of properties
 * and a handler containing the actual implementation.
 *
 * The properties include:
 *  - numArgs: The number of arguments after the \begin{name} function.
 *  - argTypes: (optional) Just like for a function
 *  - allowedInText: (optional) Whether or not the environment is allowed inside
 *                   text mode (default false) (not enforced yet)
 *  - numOptionalArgs: (optional) Just like for a function
 * A bare number instead of that object indicates the numArgs value.
 *
 * The handler function will receive two arguments
 *  - context: information and references provided by the parser
 *  - args: an array of arguments passed to \begin{name}
 * The context contains the following properties:
 *  - envName: the name of the environment, one of the listed names.
 *  - parser: the parser object
 *  - lexer: the lexer object
 *  - positions: the positions associated with these arguments from args.
 * The handler must return a ParseResult.
 */

function defineEnvironment(names, props, handler) {
    if (typeof names === "string") {
        names = [names];
    }
    if (typeof props === "number") {
        props = { numArgs: props };
    }
    // Set default values of environments
    var data = {
        numArgs: props.numArgs || 0,
        argTypes: props.argTypes,
        greediness: 1,
        allowedInText: !!props.allowedInText,
        numOptionalArgs: props.numOptionalArgs || 0,
        handler: handler,
    };
    for (var i = 0; i < names.length; ++i) {
        module.exports[names[i]] = data;
    }
}

// Arrays are part of LaTeX, defined in lttab.dtx so its documentation
// is part of the source2e.pdf file of LaTeX2e source documentation.
defineEnvironment("array", {
    numArgs: 1,
}, function(context, args) {
    var colalign = args[0];
    colalign = colalign.value.map ? colalign.value : [colalign];
    var cols = colalign.map(function(node) {
        var ca = node.value;
        if ("lcr".indexOf(ca) !== -1) {
            return {
                type: "align",
                align: ca,
            };
        } else if (ca === "|") {
            return {
                type: "separator",
                separator: "|",
            };
        }
        throw new ParseError(
            "Unknown column alignment: " + node.value,
            context.lexer, context.positions[1]);
    });
    var res = {
        type: "array",
        cols: cols,
        hskipBeforeAndAfter: true, // \@preamble in lttab.dtx
    };
    res = parseArray(context.parser, res);
    return res;
});

// The matrix environments of amsmath builds on the array environment
// of LaTeX, which is discussed above.
defineEnvironment([
    "matrix",
    "pmatrix",
    "bmatrix",
    "Bmatrix",
    "vmatrix",
    "Vmatrix",
], {
}, function(context) {
    var delimiters = {
        "matrix": null,
        "pmatrix": ["(", ")"],
        "bmatrix": ["[", "]"],
        "Bmatrix": ["\\{", "\\}"],
        "vmatrix": ["|", "|"],
        "Vmatrix": ["\\Vert", "\\Vert"],
    }[context.envName];
    var res = {
        type: "array",
        hskipBeforeAndAfter: false, // \hskip -\arraycolsep in amsmath
    };
    res = parseArray(context.parser, res);
    if (delimiters) {
        res = new ParseNode("leftright", {
            body: [res],
            left: delimiters[0],
            right: delimiters[1],
        }, context.mode);
    }
    return res;
});

// A cases environment (in amsmath.sty) is almost equivalent to
// \def\arraystretch{1.2}%
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
defineEnvironment("cases", {
}, function(context) {
    var res = {
        type: "array",
        arraystretch: 1.2,
        cols: [{
            type: "align",
            align: "l",
            pregap: 0,
            postgap: fontMetrics.metrics.quad,
        }, {
            type: "align",
            align: "l",
            pregap: 0,
            postgap: 0,
        }],
    };
    res = parseArray(context.parser, res);
    res = new ParseNode("leftright", {
        body: [res],
        left: "\\{",
        right: ".",
    }, context.mode);
    return res;
});

// An aligned environment is like the align* environment
// except it operates within math mode.
// Note that we assume \nomallineskiplimit to be zero,
// so that \strut@ is the same as \strut.
defineEnvironment("aligned", {
}, function(context) {
    var res = {
        type: "array",
        cols: [],
    };
    res = parseArray(context.parser, res);
    var emptyGroup = new ParseNode("ordgroup", [], context.mode);
    var numCols = 0;
    res.value.body.forEach(function(row) {
        var i;
        for (i = 1; i < row.length; i += 2) {
            row[i].value.unshift(emptyGroup);
        }
        if (numCols < row.length) {
            numCols = row.length;
        }
    });
    for (var i = 0; i < numCols; ++i) {
        var align = "r";
        var pregap = 0;
        if (i % 2 === 1) {
            align = "l";
        } else if (i > 0) {
            pregap = 2; // one \qquad between columns
        }
        res.value.cols[i] = {
            type: "align",
            align: align,
            pregap: pregap,
            postgap: 0,
        };
    }
    return res;
});

},{"./ParseError":149,"./fontMetrics":160,"./parseData":164}],160:[function(require,module,exports){
/* eslint no-unused-vars:0 */

var Style = require("./Style");

/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */

// These font metrics are extracted from TeX by using
// \font\a=cmmi10
// \showthe\fontdimenX\a
// where X is the corresponding variable number. These correspond to the font
// parameters of the symbol fonts. In TeX, there are actually three sets of
// dimensions, one for each of textstyle, scriptstyle, and scriptscriptstyle,
// but we only use the textstyle ones, and scale certain dimensions accordingly.
// See the TeXbook, page 441.
var sigma1 = 0.025;
var sigma2 = 0;
var sigma3 = 0;
var sigma4 = 0;
var sigma5 = 0.431;
var sigma6 = 1;
var sigma7 = 0;
var sigma8 = 0.677;
var sigma9 = 0.394;
var sigma10 = 0.444;
var sigma11 = 0.686;
var sigma12 = 0.345;
var sigma13 = 0.413;
var sigma14 = 0.363;
var sigma15 = 0.289;
var sigma16 = 0.150;
var sigma17 = 0.247;
var sigma18 = 0.386;
var sigma19 = 0.050;
var sigma20 = 2.390;
var sigma21 = 1.01;
var sigma21Script = 0.81;
var sigma21ScriptScript = 0.71;
var sigma22 = 0.250;

// These font metrics are extracted from TeX by using
// \font\a=cmex10
// \showthe\fontdimenX\a
// where X is the corresponding variable number. These correspond to the font
// parameters of the extension fonts (family 3). See the TeXbook, page 441.
var xi1 = 0;
var xi2 = 0;
var xi3 = 0;
var xi4 = 0;
var xi5 = 0.431;
var xi6 = 1;
var xi7 = 0;
var xi8 = 0.04;
var xi9 = 0.111;
var xi10 = 0.166;
var xi11 = 0.2;
var xi12 = 0.6;
var xi13 = 0.1;

// This value determines how large a pt is, for metrics which are defined in
// terms of pts.
// This value is also used in katex.less; if you change it make sure the values
// match.
var ptPerEm = 10.0;

// The space between adjacent `|` columns in an array definition. From
// `\showthe\doublerulesep` in LaTeX.
var doubleRuleSep = 2.0 / ptPerEm;

/**
 * This is just a mapping from common names to real metrics
 */
var metrics = {
    xHeight: sigma5,
    quad: sigma6,
    num1: sigma8,
    num2: sigma9,
    num3: sigma10,
    denom1: sigma11,
    denom2: sigma12,
    sup1: sigma13,
    sup2: sigma14,
    sup3: sigma15,
    sub1: sigma16,
    sub2: sigma17,
    supDrop: sigma18,
    subDrop: sigma19,
    axisHeight: sigma22,
    defaultRuleThickness: xi8,
    bigOpSpacing1: xi9,
    bigOpSpacing2: xi10,
    bigOpSpacing3: xi11,
    bigOpSpacing4: xi12,
    bigOpSpacing5: xi13,
    ptPerEm: ptPerEm,
    emPerEx: sigma5 / sigma6,
    doubleRuleSep: doubleRuleSep,

    // TODO(alpert): Missing parallel structure here. We should probably add
    // style-specific metrics for all of these.
    delim1: sigma20,
    getDelim2: function(style) {
        if (style.size === Style.TEXT.size) {
            return sigma21;
        } else if (style.size === Style.SCRIPT.size) {
            return sigma21Script;
        } else if (style.size === Style.SCRIPTSCRIPT.size) {
            return sigma21ScriptScript;
        }
        throw new Error("Unexpected style size: " + style.size);
    },
};

// This map contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.
var metricMap = require("./fontMetricsData");

/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a style.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */
var getCharacterMetrics = function(character, style) {
    var metrics = metricMap[style][character.charCodeAt(0)];
    if (metrics) {
        return {
            depth: metrics[0],
            height: metrics[1],
            italic: metrics[2],
            skew: metrics[3],
            width: metrics[4],
        };
    }
};

module.exports = {
    metrics: metrics,
    getCharacterMetrics: getCharacterMetrics,
};

},{"./Style":152,"./fontMetricsData":161}],161:[function(require,module,exports){
module.exports = {
    "AMS-Regular": {
        "65": [0, 0.68889, 0, 0],
        "66": [0, 0.68889, 0, 0],
        "67": [0, 0.68889, 0, 0],
        "68": [0, 0.68889, 0, 0],
        "69": [0, 0.68889, 0, 0],
        "70": [0, 0.68889, 0, 0],
        "71": [0, 0.68889, 0, 0],
        "72": [0, 0.68889, 0, 0],
        "73": [0, 0.68889, 0, 0],
        "74": [0.16667, 0.68889, 0, 0],
        "75": [0, 0.68889, 0, 0],
        "76": [0, 0.68889, 0, 0],
        "77": [0, 0.68889, 0, 0],
        "78": [0, 0.68889, 0, 0],
        "79": [0.16667, 0.68889, 0, 0],
        "80": [0, 0.68889, 0, 0],
        "81": [0.16667, 0.68889, 0, 0],
        "82": [0, 0.68889, 0, 0],
        "83": [0, 0.68889, 0, 0],
        "84": [0, 0.68889, 0, 0],
        "85": [0, 0.68889, 0, 0],
        "86": [0, 0.68889, 0, 0],
        "87": [0, 0.68889, 0, 0],
        "88": [0, 0.68889, 0, 0],
        "89": [0, 0.68889, 0, 0],
        "90": [0, 0.68889, 0, 0],
        "107": [0, 0.68889, 0, 0],
        "165": [0, 0.675, 0.025, 0],
        "174": [0.15559, 0.69224, 0, 0],
        "240": [0, 0.68889, 0, 0],
        "295": [0, 0.68889, 0, 0],
        "710": [0, 0.825, 0, 0],
        "732": [0, 0.9, 0, 0],
        "770": [0, 0.825, 0, 0],
        "771": [0, 0.9, 0, 0],
        "989": [0.08167, 0.58167, 0, 0],
        "1008": [0, 0.43056, 0.04028, 0],
        "8245": [0, 0.54986, 0, 0],
        "8463": [0, 0.68889, 0, 0],
        "8487": [0, 0.68889, 0, 0],
        "8498": [0, 0.68889, 0, 0],
        "8502": [0, 0.68889, 0, 0],
        "8503": [0, 0.68889, 0, 0],
        "8504": [0, 0.68889, 0, 0],
        "8513": [0, 0.68889, 0, 0],
        "8592": [-0.03598, 0.46402, 0, 0],
        "8594": [-0.03598, 0.46402, 0, 0],
        "8602": [-0.13313, 0.36687, 0, 0],
        "8603": [-0.13313, 0.36687, 0, 0],
        "8606": [0.01354, 0.52239, 0, 0],
        "8608": [0.01354, 0.52239, 0, 0],
        "8610": [0.01354, 0.52239, 0, 0],
        "8611": [0.01354, 0.52239, 0, 0],
        "8619": [0, 0.54986, 0, 0],
        "8620": [0, 0.54986, 0, 0],
        "8621": [-0.13313, 0.37788, 0, 0],
        "8622": [-0.13313, 0.36687, 0, 0],
        "8624": [0, 0.69224, 0, 0],
        "8625": [0, 0.69224, 0, 0],
        "8630": [0, 0.43056, 0, 0],
        "8631": [0, 0.43056, 0, 0],
        "8634": [0.08198, 0.58198, 0, 0],
        "8635": [0.08198, 0.58198, 0, 0],
        "8638": [0.19444, 0.69224, 0, 0],
        "8639": [0.19444, 0.69224, 0, 0],
        "8642": [0.19444, 0.69224, 0, 0],
        "8643": [0.19444, 0.69224, 0, 0],
        "8644": [0.1808, 0.675, 0, 0],
        "8646": [0.1808, 0.675, 0, 0],
        "8647": [0.1808, 0.675, 0, 0],
        "8648": [0.19444, 0.69224, 0, 0],
        "8649": [0.1808, 0.675, 0, 0],
        "8650": [0.19444, 0.69224, 0, 0],
        "8651": [0.01354, 0.52239, 0, 0],
        "8652": [0.01354, 0.52239, 0, 0],
        "8653": [-0.13313, 0.36687, 0, 0],
        "8654": [-0.13313, 0.36687, 0, 0],
        "8655": [-0.13313, 0.36687, 0, 0],
        "8666": [0.13667, 0.63667, 0, 0],
        "8667": [0.13667, 0.63667, 0, 0],
        "8669": [-0.13313, 0.37788, 0, 0],
        "8672": [-0.064, 0.437, 0, 0],
        "8674": [-0.064, 0.437, 0, 0],
        "8705": [0, 0.825, 0, 0],
        "8708": [0, 0.68889, 0, 0],
        "8709": [0.08167, 0.58167, 0, 0],
        "8717": [0, 0.43056, 0, 0],
        "8722": [-0.03598, 0.46402, 0, 0],
        "8724": [0.08198, 0.69224, 0, 0],
        "8726": [0.08167, 0.58167, 0, 0],
        "8733": [0, 0.69224, 0, 0],
        "8736": [0, 0.69224, 0, 0],
        "8737": [0, 0.69224, 0, 0],
        "8738": [0.03517, 0.52239, 0, 0],
        "8739": [0.08167, 0.58167, 0, 0],
        "8740": [0.25142, 0.74111, 0, 0],
        "8741": [0.08167, 0.58167, 0, 0],
        "8742": [0.25142, 0.74111, 0, 0],
        "8756": [0, 0.69224, 0, 0],
        "8757": [0, 0.69224, 0, 0],
        "8764": [-0.13313, 0.36687, 0, 0],
        "8765": [-0.13313, 0.37788, 0, 0],
        "8769": [-0.13313, 0.36687, 0, 0],
        "8770": [-0.03625, 0.46375, 0, 0],
        "8774": [0.30274, 0.79383, 0, 0],
        "8776": [-0.01688, 0.48312, 0, 0],
        "8778": [0.08167, 0.58167, 0, 0],
        "8782": [0.06062, 0.54986, 0, 0],
        "8783": [0.06062, 0.54986, 0, 0],
        "8785": [0.08198, 0.58198, 0, 0],
        "8786": [0.08198, 0.58198, 0, 0],
        "8787": [0.08198, 0.58198, 0, 0],
        "8790": [0, 0.69224, 0, 0],
        "8791": [0.22958, 0.72958, 0, 0],
        "8796": [0.08198, 0.91667, 0, 0],
        "8806": [0.25583, 0.75583, 0, 0],
        "8807": [0.25583, 0.75583, 0, 0],
        "8808": [0.25142, 0.75726, 0, 0],
        "8809": [0.25142, 0.75726, 0, 0],
        "8812": [0.25583, 0.75583, 0, 0],
        "8814": [0.20576, 0.70576, 0, 0],
        "8815": [0.20576, 0.70576, 0, 0],
        "8816": [0.30274, 0.79383, 0, 0],
        "8817": [0.30274, 0.79383, 0, 0],
        "8818": [0.22958, 0.72958, 0, 0],
        "8819": [0.22958, 0.72958, 0, 0],
        "8822": [0.1808, 0.675, 0, 0],
        "8823": [0.1808, 0.675, 0, 0],
        "8828": [0.13667, 0.63667, 0, 0],
        "8829": [0.13667, 0.63667, 0, 0],
        "8830": [0.22958, 0.72958, 0, 0],
        "8831": [0.22958, 0.72958, 0, 0],
        "8832": [0.20576, 0.70576, 0, 0],
        "8833": [0.20576, 0.70576, 0, 0],
        "8840": [0.30274, 0.79383, 0, 0],
        "8841": [0.30274, 0.79383, 0, 0],
        "8842": [0.13597, 0.63597, 0, 0],
        "8843": [0.13597, 0.63597, 0, 0],
        "8847": [0.03517, 0.54986, 0, 0],
        "8848": [0.03517, 0.54986, 0, 0],
        "8858": [0.08198, 0.58198, 0, 0],
        "8859": [0.08198, 0.58198, 0, 0],
        "8861": [0.08198, 0.58198, 0, 0],
        "8862": [0, 0.675, 0, 0],
        "8863": [0, 0.675, 0, 0],
        "8864": [0, 0.675, 0, 0],
        "8865": [0, 0.675, 0, 0],
        "8872": [0, 0.69224, 0, 0],
        "8873": [0, 0.69224, 0, 0],
        "8874": [0, 0.69224, 0, 0],
        "8876": [0, 0.68889, 0, 0],
        "8877": [0, 0.68889, 0, 0],
        "8878": [0, 0.68889, 0, 0],
        "8879": [0, 0.68889, 0, 0],
        "8882": [0.03517, 0.54986, 0, 0],
        "8883": [0.03517, 0.54986, 0, 0],
        "8884": [0.13667, 0.63667, 0, 0],
        "8885": [0.13667, 0.63667, 0, 0],
        "8888": [0, 0.54986, 0, 0],
        "8890": [0.19444, 0.43056, 0, 0],
        "8891": [0.19444, 0.69224, 0, 0],
        "8892": [0.19444, 0.69224, 0, 0],
        "8901": [0, 0.54986, 0, 0],
        "8903": [0.08167, 0.58167, 0, 0],
        "8905": [0.08167, 0.58167, 0, 0],
        "8906": [0.08167, 0.58167, 0, 0],
        "8907": [0, 0.69224, 0, 0],
        "8908": [0, 0.69224, 0, 0],
        "8909": [-0.03598, 0.46402, 0, 0],
        "8910": [0, 0.54986, 0, 0],
        "8911": [0, 0.54986, 0, 0],
        "8912": [0.03517, 0.54986, 0, 0],
        "8913": [0.03517, 0.54986, 0, 0],
        "8914": [0, 0.54986, 0, 0],
        "8915": [0, 0.54986, 0, 0],
        "8916": [0, 0.69224, 0, 0],
        "8918": [0.0391, 0.5391, 0, 0],
        "8919": [0.0391, 0.5391, 0, 0],
        "8920": [0.03517, 0.54986, 0, 0],
        "8921": [0.03517, 0.54986, 0, 0],
        "8922": [0.38569, 0.88569, 0, 0],
        "8923": [0.38569, 0.88569, 0, 0],
        "8926": [0.13667, 0.63667, 0, 0],
        "8927": [0.13667, 0.63667, 0, 0],
        "8928": [0.30274, 0.79383, 0, 0],
        "8929": [0.30274, 0.79383, 0, 0],
        "8934": [0.23222, 0.74111, 0, 0],
        "8935": [0.23222, 0.74111, 0, 0],
        "8936": [0.23222, 0.74111, 0, 0],
        "8937": [0.23222, 0.74111, 0, 0],
        "8938": [0.20576, 0.70576, 0, 0],
        "8939": [0.20576, 0.70576, 0, 0],
        "8940": [0.30274, 0.79383, 0, 0],
        "8941": [0.30274, 0.79383, 0, 0],
        "8994": [0.19444, 0.69224, 0, 0],
        "8995": [0.19444, 0.69224, 0, 0],
        "9416": [0.15559, 0.69224, 0, 0],
        "9484": [0, 0.69224, 0, 0],
        "9488": [0, 0.69224, 0, 0],
        "9492": [0, 0.37788, 0, 0],
        "9496": [0, 0.37788, 0, 0],
        "9585": [0.19444, 0.68889, 0, 0],
        "9586": [0.19444, 0.74111, 0, 0],
        "9632": [0, 0.675, 0, 0],
        "9633": [0, 0.675, 0, 0],
        "9650": [0, 0.54986, 0, 0],
        "9651": [0, 0.54986, 0, 0],
        "9654": [0.03517, 0.54986, 0, 0],
        "9660": [0, 0.54986, 0, 0],
        "9661": [0, 0.54986, 0, 0],
        "9664": [0.03517, 0.54986, 0, 0],
        "9674": [0.11111, 0.69224, 0, 0],
        "9733": [0.19444, 0.69224, 0, 0],
        "10003": [0, 0.69224, 0, 0],
        "10016": [0, 0.69224, 0, 0],
        "10731": [0.11111, 0.69224, 0, 0],
        "10846": [0.19444, 0.75583, 0, 0],
        "10877": [0.13667, 0.63667, 0, 0],
        "10878": [0.13667, 0.63667, 0, 0],
        "10885": [0.25583, 0.75583, 0, 0],
        "10886": [0.25583, 0.75583, 0, 0],
        "10887": [0.13597, 0.63597, 0, 0],
        "10888": [0.13597, 0.63597, 0, 0],
        "10889": [0.26167, 0.75726, 0, 0],
        "10890": [0.26167, 0.75726, 0, 0],
        "10891": [0.48256, 0.98256, 0, 0],
        "10892": [0.48256, 0.98256, 0, 0],
        "10901": [0.13667, 0.63667, 0, 0],
        "10902": [0.13667, 0.63667, 0, 0],
        "10933": [0.25142, 0.75726, 0, 0],
        "10934": [0.25142, 0.75726, 0, 0],
        "10935": [0.26167, 0.75726, 0, 0],
        "10936": [0.26167, 0.75726, 0, 0],
        "10937": [0.26167, 0.75726, 0, 0],
        "10938": [0.26167, 0.75726, 0, 0],
        "10949": [0.25583, 0.75583, 0, 0],
        "10950": [0.25583, 0.75583, 0, 0],
        "10955": [0.28481, 0.79383, 0, 0],
        "10956": [0.28481, 0.79383, 0, 0],
        "57350": [0.08167, 0.58167, 0, 0],
        "57351": [0.08167, 0.58167, 0, 0],
        "57352": [0.08167, 0.58167, 0, 0],
        "57353": [0, 0.43056, 0.04028, 0],
        "57356": [0.25142, 0.75726, 0, 0],
        "57357": [0.25142, 0.75726, 0, 0],
        "57358": [0.41951, 0.91951, 0, 0],
        "57359": [0.30274, 0.79383, 0, 0],
        "57360": [0.30274, 0.79383, 0, 0],
        "57361": [0.41951, 0.91951, 0, 0],
        "57366": [0.25142, 0.75726, 0, 0],
        "57367": [0.25142, 0.75726, 0, 0],
        "57368": [0.25142, 0.75726, 0, 0],
        "57369": [0.25142, 0.75726, 0, 0],
        "57370": [0.13597, 0.63597, 0, 0],
        "57371": [0.13597, 0.63597, 0, 0],
    },
    "Caligraphic-Regular": {
        "48": [0, 0.43056, 0, 0],
        "49": [0, 0.43056, 0, 0],
        "50": [0, 0.43056, 0, 0],
        "51": [0.19444, 0.43056, 0, 0],
        "52": [0.19444, 0.43056, 0, 0],
        "53": [0.19444, 0.43056, 0, 0],
        "54": [0, 0.64444, 0, 0],
        "55": [0.19444, 0.43056, 0, 0],
        "56": [0, 0.64444, 0, 0],
        "57": [0.19444, 0.43056, 0, 0],
        "65": [0, 0.68333, 0, 0.19445],
        "66": [0, 0.68333, 0.03041, 0.13889],
        "67": [0, 0.68333, 0.05834, 0.13889],
        "68": [0, 0.68333, 0.02778, 0.08334],
        "69": [0, 0.68333, 0.08944, 0.11111],
        "70": [0, 0.68333, 0.09931, 0.11111],
        "71": [0.09722, 0.68333, 0.0593, 0.11111],
        "72": [0, 0.68333, 0.00965, 0.11111],
        "73": [0, 0.68333, 0.07382, 0],
        "74": [0.09722, 0.68333, 0.18472, 0.16667],
        "75": [0, 0.68333, 0.01445, 0.05556],
        "76": [0, 0.68333, 0, 0.13889],
        "77": [0, 0.68333, 0, 0.13889],
        "78": [0, 0.68333, 0.14736, 0.08334],
        "79": [0, 0.68333, 0.02778, 0.11111],
        "80": [0, 0.68333, 0.08222, 0.08334],
        "81": [0.09722, 0.68333, 0, 0.11111],
        "82": [0, 0.68333, 0, 0.08334],
        "83": [0, 0.68333, 0.075, 0.13889],
        "84": [0, 0.68333, 0.25417, 0],
        "85": [0, 0.68333, 0.09931, 0.08334],
        "86": [0, 0.68333, 0.08222, 0],
        "87": [0, 0.68333, 0.08222, 0.08334],
        "88": [0, 0.68333, 0.14643, 0.13889],
        "89": [0.09722, 0.68333, 0.08222, 0.08334],
        "90": [0, 0.68333, 0.07944, 0.13889],
    },
    "Fraktur-Regular": {
        "33": [0, 0.69141, 0, 0],
        "34": [0, 0.69141, 0, 0],
        "38": [0, 0.69141, 0, 0],
        "39": [0, 0.69141, 0, 0],
        "40": [0.24982, 0.74947, 0, 0],
        "41": [0.24982, 0.74947, 0, 0],
        "42": [0, 0.62119, 0, 0],
        "43": [0.08319, 0.58283, 0, 0],
        "44": [0, 0.10803, 0, 0],
        "45": [0.08319, 0.58283, 0, 0],
        "46": [0, 0.10803, 0, 0],
        "47": [0.24982, 0.74947, 0, 0],
        "48": [0, 0.47534, 0, 0],
        "49": [0, 0.47534, 0, 0],
        "50": [0, 0.47534, 0, 0],
        "51": [0.18906, 0.47534, 0, 0],
        "52": [0.18906, 0.47534, 0, 0],
        "53": [0.18906, 0.47534, 0, 0],
        "54": [0, 0.69141, 0, 0],
        "55": [0.18906, 0.47534, 0, 0],
        "56": [0, 0.69141, 0, 0],
        "57": [0.18906, 0.47534, 0, 0],
        "58": [0, 0.47534, 0, 0],
        "59": [0.12604, 0.47534, 0, 0],
        "61": [-0.13099, 0.36866, 0, 0],
        "63": [0, 0.69141, 0, 0],
        "65": [0, 0.69141, 0, 0],
        "66": [0, 0.69141, 0, 0],
        "67": [0, 0.69141, 0, 0],
        "68": [0, 0.69141, 0, 0],
        "69": [0, 0.69141, 0, 0],
        "70": [0.12604, 0.69141, 0, 0],
        "71": [0, 0.69141, 0, 0],
        "72": [0.06302, 0.69141, 0, 0],
        "73": [0, 0.69141, 0, 0],
        "74": [0.12604, 0.69141, 0, 0],
        "75": [0, 0.69141, 0, 0],
        "76": [0, 0.69141, 0, 0],
        "77": [0, 0.69141, 0, 0],
        "78": [0, 0.69141, 0, 0],
        "79": [0, 0.69141, 0, 0],
        "80": [0.18906, 0.69141, 0, 0],
        "81": [0.03781, 0.69141, 0, 0],
        "82": [0, 0.69141, 0, 0],
        "83": [0, 0.69141, 0, 0],
        "84": [0, 0.69141, 0, 0],
        "85": [0, 0.69141, 0, 0],
        "86": [0, 0.69141, 0, 0],
        "87": [0, 0.69141, 0, 0],
        "88": [0, 0.69141, 0, 0],
        "89": [0.18906, 0.69141, 0, 0],
        "90": [0.12604, 0.69141, 0, 0],
        "91": [0.24982, 0.74947, 0, 0],
        "93": [0.24982, 0.74947, 0, 0],
        "94": [0, 0.69141, 0, 0],
        "97": [0, 0.47534, 0, 0],
        "98": [0, 0.69141, 0, 0],
        "99": [0, 0.47534, 0, 0],
        "100": [0, 0.62119, 0, 0],
        "101": [0, 0.47534, 0, 0],
        "102": [0.18906, 0.69141, 0, 0],
        "103": [0.18906, 0.47534, 0, 0],
        "104": [0.18906, 0.69141, 0, 0],
        "105": [0, 0.69141, 0, 0],
        "106": [0, 0.69141, 0, 0],
        "107": [0, 0.69141, 0, 0],
        "108": [0, 0.69141, 0, 0],
        "109": [0, 0.47534, 0, 0],
        "110": [0, 0.47534, 0, 0],
        "111": [0, 0.47534, 0, 0],
        "112": [0.18906, 0.52396, 0, 0],
        "113": [0.18906, 0.47534, 0, 0],
        "114": [0, 0.47534, 0, 0],
        "115": [0, 0.47534, 0, 0],
        "116": [0, 0.62119, 0, 0],
        "117": [0, 0.47534, 0, 0],
        "118": [0, 0.52396, 0, 0],
        "119": [0, 0.52396, 0, 0],
        "120": [0.18906, 0.47534, 0, 0],
        "121": [0.18906, 0.47534, 0, 0],
        "122": [0.18906, 0.47534, 0, 0],
        "8216": [0, 0.69141, 0, 0],
        "8217": [0, 0.69141, 0, 0],
        "58112": [0, 0.62119, 0, 0],
        "58113": [0, 0.62119, 0, 0],
        "58114": [0.18906, 0.69141, 0, 0],
        "58115": [0.18906, 0.69141, 0, 0],
        "58116": [0.18906, 0.47534, 0, 0],
        "58117": [0, 0.69141, 0, 0],
        "58118": [0, 0.62119, 0, 0],
        "58119": [0, 0.47534, 0, 0],
    },
    "Main-Bold": {
        "33": [0, 0.69444, 0, 0],
        "34": [0, 0.69444, 0, 0],
        "35": [0.19444, 0.69444, 0, 0],
        "36": [0.05556, 0.75, 0, 0],
        "37": [0.05556, 0.75, 0, 0],
        "38": [0, 0.69444, 0, 0],
        "39": [0, 0.69444, 0, 0],
        "40": [0.25, 0.75, 0, 0],
        "41": [0.25, 0.75, 0, 0],
        "42": [0, 0.75, 0, 0],
        "43": [0.13333, 0.63333, 0, 0],
        "44": [0.19444, 0.15556, 0, 0],
        "45": [0, 0.44444, 0, 0],
        "46": [0, 0.15556, 0, 0],
        "47": [0.25, 0.75, 0, 0],
        "48": [0, 0.64444, 0, 0],
        "49": [0, 0.64444, 0, 0],
        "50": [0, 0.64444, 0, 0],
        "51": [0, 0.64444, 0, 0],
        "52": [0, 0.64444, 0, 0],
        "53": [0, 0.64444, 0, 0],
        "54": [0, 0.64444, 0, 0],
        "55": [0, 0.64444, 0, 0],
        "56": [0, 0.64444, 0, 0],
        "57": [0, 0.64444, 0, 0],
        "58": [0, 0.44444, 0, 0],
        "59": [0.19444, 0.44444, 0, 0],
        "60": [0.08556, 0.58556, 0, 0],
        "61": [-0.10889, 0.39111, 0, 0],
        "62": [0.08556, 0.58556, 0, 0],
        "63": [0, 0.69444, 0, 0],
        "64": [0, 0.69444, 0, 0],
        "65": [0, 0.68611, 0, 0],
        "66": [0, 0.68611, 0, 0],
        "67": [0, 0.68611, 0, 0],
        "68": [0, 0.68611, 0, 0],
        "69": [0, 0.68611, 0, 0],
        "70": [0, 0.68611, 0, 0],
        "71": [0, 0.68611, 0, 0],
        "72": [0, 0.68611, 0, 0],
        "73": [0, 0.68611, 0, 0],
        "74": [0, 0.68611, 0, 0],
        "75": [0, 0.68611, 0, 0],
        "76": [0, 0.68611, 0, 0],
        "77": [0, 0.68611, 0, 0],
        "78": [0, 0.68611, 0, 0],
        "79": [0, 0.68611, 0, 0],
        "80": [0, 0.68611, 0, 0],
        "81": [0.19444, 0.68611, 0, 0],
        "82": [0, 0.68611, 0, 0],
        "83": [0, 0.68611, 0, 0],
        "84": [0, 0.68611, 0, 0],
        "85": [0, 0.68611, 0, 0],
        "86": [0, 0.68611, 0.01597, 0],
        "87": [0, 0.68611, 0.01597, 0],
        "88": [0, 0.68611, 0, 0],
        "89": [0, 0.68611, 0.02875, 0],
        "90": [0, 0.68611, 0, 0],
        "91": [0.25, 0.75, 0, 0],
        "92": [0.25, 0.75, 0, 0],
        "93": [0.25, 0.75, 0, 0],
        "94": [0, 0.69444, 0, 0],
        "95": [0.31, 0.13444, 0.03194, 0],
        "96": [0, 0.69444, 0, 0],
        "97": [0, 0.44444, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.44444, 0, 0],
        "100": [0, 0.69444, 0, 0],
        "101": [0, 0.44444, 0, 0],
        "102": [0, 0.69444, 0.10903, 0],
        "103": [0.19444, 0.44444, 0.01597, 0],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.69444, 0, 0],
        "106": [0.19444, 0.69444, 0, 0],
        "107": [0, 0.69444, 0, 0],
        "108": [0, 0.69444, 0, 0],
        "109": [0, 0.44444, 0, 0],
        "110": [0, 0.44444, 0, 0],
        "111": [0, 0.44444, 0, 0],
        "112": [0.19444, 0.44444, 0, 0],
        "113": [0.19444, 0.44444, 0, 0],
        "114": [0, 0.44444, 0, 0],
        "115": [0, 0.44444, 0, 0],
        "116": [0, 0.63492, 0, 0],
        "117": [0, 0.44444, 0, 0],
        "118": [0, 0.44444, 0.01597, 0],
        "119": [0, 0.44444, 0.01597, 0],
        "120": [0, 0.44444, 0, 0],
        "121": [0.19444, 0.44444, 0.01597, 0],
        "122": [0, 0.44444, 0, 0],
        "123": [0.25, 0.75, 0, 0],
        "124": [0.25, 0.75, 0, 0],
        "125": [0.25, 0.75, 0, 0],
        "126": [0.35, 0.34444, 0, 0],
        "168": [0, 0.69444, 0, 0],
        "172": [0, 0.44444, 0, 0],
        "175": [0, 0.59611, 0, 0],
        "176": [0, 0.69444, 0, 0],
        "177": [0.13333, 0.63333, 0, 0],
        "180": [0, 0.69444, 0, 0],
        "215": [0.13333, 0.63333, 0, 0],
        "247": [0.13333, 0.63333, 0, 0],
        "305": [0, 0.44444, 0, 0],
        "567": [0.19444, 0.44444, 0, 0],
        "710": [0, 0.69444, 0, 0],
        "711": [0, 0.63194, 0, 0],
        "713": [0, 0.59611, 0, 0],
        "714": [0, 0.69444, 0, 0],
        "715": [0, 0.69444, 0, 0],
        "728": [0, 0.69444, 0, 0],
        "729": [0, 0.69444, 0, 0],
        "730": [0, 0.69444, 0, 0],
        "732": [0, 0.69444, 0, 0],
        "768": [0, 0.69444, 0, 0],
        "769": [0, 0.69444, 0, 0],
        "770": [0, 0.69444, 0, 0],
        "771": [0, 0.69444, 0, 0],
        "772": [0, 0.59611, 0, 0],
        "774": [0, 0.69444, 0, 0],
        "775": [0, 0.69444, 0, 0],
        "776": [0, 0.69444, 0, 0],
        "778": [0, 0.69444, 0, 0],
        "779": [0, 0.69444, 0, 0],
        "780": [0, 0.63194, 0, 0],
        "824": [0.19444, 0.69444, 0, 0],
        "915": [0, 0.68611, 0, 0],
        "916": [0, 0.68611, 0, 0],
        "920": [0, 0.68611, 0, 0],
        "923": [0, 0.68611, 0, 0],
        "926": [0, 0.68611, 0, 0],
        "928": [0, 0.68611, 0, 0],
        "931": [0, 0.68611, 0, 0],
        "933": [0, 0.68611, 0, 0],
        "934": [0, 0.68611, 0, 0],
        "936": [0, 0.68611, 0, 0],
        "937": [0, 0.68611, 0, 0],
        "8211": [0, 0.44444, 0.03194, 0],
        "8212": [0, 0.44444, 0.03194, 0],
        "8216": [0, 0.69444, 0, 0],
        "8217": [0, 0.69444, 0, 0],
        "8220": [0, 0.69444, 0, 0],
        "8221": [0, 0.69444, 0, 0],
        "8224": [0.19444, 0.69444, 0, 0],
        "8225": [0.19444, 0.69444, 0, 0],
        "8242": [0, 0.55556, 0, 0],
        "8407": [0, 0.72444, 0.15486, 0],
        "8463": [0, 0.69444, 0, 0],
        "8465": [0, 0.69444, 0, 0],
        "8467": [0, 0.69444, 0, 0],
        "8472": [0.19444, 0.44444, 0, 0],
        "8476": [0, 0.69444, 0, 0],
        "8501": [0, 0.69444, 0, 0],
        "8592": [-0.10889, 0.39111, 0, 0],
        "8593": [0.19444, 0.69444, 0, 0],
        "8594": [-0.10889, 0.39111, 0, 0],
        "8595": [0.19444, 0.69444, 0, 0],
        "8596": [-0.10889, 0.39111, 0, 0],
        "8597": [0.25, 0.75, 0, 0],
        "8598": [0.19444, 0.69444, 0, 0],
        "8599": [0.19444, 0.69444, 0, 0],
        "8600": [0.19444, 0.69444, 0, 0],
        "8601": [0.19444, 0.69444, 0, 0],
        "8636": [-0.10889, 0.39111, 0, 0],
        "8637": [-0.10889, 0.39111, 0, 0],
        "8640": [-0.10889, 0.39111, 0, 0],
        "8641": [-0.10889, 0.39111, 0, 0],
        "8656": [-0.10889, 0.39111, 0, 0],
        "8657": [0.19444, 0.69444, 0, 0],
        "8658": [-0.10889, 0.39111, 0, 0],
        "8659": [0.19444, 0.69444, 0, 0],
        "8660": [-0.10889, 0.39111, 0, 0],
        "8661": [0.25, 0.75, 0, 0],
        "8704": [0, 0.69444, 0, 0],
        "8706": [0, 0.69444, 0.06389, 0],
        "8707": [0, 0.69444, 0, 0],
        "8709": [0.05556, 0.75, 0, 0],
        "8711": [0, 0.68611, 0, 0],
        "8712": [0.08556, 0.58556, 0, 0],
        "8715": [0.08556, 0.58556, 0, 0],
        "8722": [0.13333, 0.63333, 0, 0],
        "8723": [0.13333, 0.63333, 0, 0],
        "8725": [0.25, 0.75, 0, 0],
        "8726": [0.25, 0.75, 0, 0],
        "8727": [-0.02778, 0.47222, 0, 0],
        "8728": [-0.02639, 0.47361, 0, 0],
        "8729": [-0.02639, 0.47361, 0, 0],
        "8730": [0.18, 0.82, 0, 0],
        "8733": [0, 0.44444, 0, 0],
        "8734": [0, 0.44444, 0, 0],
        "8736": [0, 0.69224, 0, 0],
        "8739": [0.25, 0.75, 0, 0],
        "8741": [0.25, 0.75, 0, 0],
        "8743": [0, 0.55556, 0, 0],
        "8744": [0, 0.55556, 0, 0],
        "8745": [0, 0.55556, 0, 0],
        "8746": [0, 0.55556, 0, 0],
        "8747": [0.19444, 0.69444, 0.12778, 0],
        "8764": [-0.10889, 0.39111, 0, 0],
        "8768": [0.19444, 0.69444, 0, 0],
        "8771": [0.00222, 0.50222, 0, 0],
        "8776": [0.02444, 0.52444, 0, 0],
        "8781": [0.00222, 0.50222, 0, 0],
        "8801": [0.00222, 0.50222, 0, 0],
        "8804": [0.19667, 0.69667, 0, 0],
        "8805": [0.19667, 0.69667, 0, 0],
        "8810": [0.08556, 0.58556, 0, 0],
        "8811": [0.08556, 0.58556, 0, 0],
        "8826": [0.08556, 0.58556, 0, 0],
        "8827": [0.08556, 0.58556, 0, 0],
        "8834": [0.08556, 0.58556, 0, 0],
        "8835": [0.08556, 0.58556, 0, 0],
        "8838": [0.19667, 0.69667, 0, 0],
        "8839": [0.19667, 0.69667, 0, 0],
        "8846": [0, 0.55556, 0, 0],
        "8849": [0.19667, 0.69667, 0, 0],
        "8850": [0.19667, 0.69667, 0, 0],
        "8851": [0, 0.55556, 0, 0],
        "8852": [0, 0.55556, 0, 0],
        "8853": [0.13333, 0.63333, 0, 0],
        "8854": [0.13333, 0.63333, 0, 0],
        "8855": [0.13333, 0.63333, 0, 0],
        "8856": [0.13333, 0.63333, 0, 0],
        "8857": [0.13333, 0.63333, 0, 0],
        "8866": [0, 0.69444, 0, 0],
        "8867": [0, 0.69444, 0, 0],
        "8868": [0, 0.69444, 0, 0],
        "8869": [0, 0.69444, 0, 0],
        "8900": [-0.02639, 0.47361, 0, 0],
        "8901": [-0.02639, 0.47361, 0, 0],
        "8902": [-0.02778, 0.47222, 0, 0],
        "8968": [0.25, 0.75, 0, 0],
        "8969": [0.25, 0.75, 0, 0],
        "8970": [0.25, 0.75, 0, 0],
        "8971": [0.25, 0.75, 0, 0],
        "8994": [-0.13889, 0.36111, 0, 0],
        "8995": [-0.13889, 0.36111, 0, 0],
        "9651": [0.19444, 0.69444, 0, 0],
        "9657": [-0.02778, 0.47222, 0, 0],
        "9661": [0.19444, 0.69444, 0, 0],
        "9667": [-0.02778, 0.47222, 0, 0],
        "9711": [0.19444, 0.69444, 0, 0],
        "9824": [0.12963, 0.69444, 0, 0],
        "9825": [0.12963, 0.69444, 0, 0],
        "9826": [0.12963, 0.69444, 0, 0],
        "9827": [0.12963, 0.69444, 0, 0],
        "9837": [0, 0.75, 0, 0],
        "9838": [0.19444, 0.69444, 0, 0],
        "9839": [0.19444, 0.69444, 0, 0],
        "10216": [0.25, 0.75, 0, 0],
        "10217": [0.25, 0.75, 0, 0],
        "10815": [0, 0.68611, 0, 0],
        "10927": [0.19667, 0.69667, 0, 0],
        "10928": [0.19667, 0.69667, 0, 0],
    },
    "Main-Italic": {
        "33": [0, 0.69444, 0.12417, 0],
        "34": [0, 0.69444, 0.06961, 0],
        "35": [0.19444, 0.69444, 0.06616, 0],
        "37": [0.05556, 0.75, 0.13639, 0],
        "38": [0, 0.69444, 0.09694, 0],
        "39": [0, 0.69444, 0.12417, 0],
        "40": [0.25, 0.75, 0.16194, 0],
        "41": [0.25, 0.75, 0.03694, 0],
        "42": [0, 0.75, 0.14917, 0],
        "43": [0.05667, 0.56167, 0.03694, 0],
        "44": [0.19444, 0.10556, 0, 0],
        "45": [0, 0.43056, 0.02826, 0],
        "46": [0, 0.10556, 0, 0],
        "47": [0.25, 0.75, 0.16194, 0],
        "48": [0, 0.64444, 0.13556, 0],
        "49": [0, 0.64444, 0.13556, 0],
        "50": [0, 0.64444, 0.13556, 0],
        "51": [0, 0.64444, 0.13556, 0],
        "52": [0.19444, 0.64444, 0.13556, 0],
        "53": [0, 0.64444, 0.13556, 0],
        "54": [0, 0.64444, 0.13556, 0],
        "55": [0.19444, 0.64444, 0.13556, 0],
        "56": [0, 0.64444, 0.13556, 0],
        "57": [0, 0.64444, 0.13556, 0],
        "58": [0, 0.43056, 0.0582, 0],
        "59": [0.19444, 0.43056, 0.0582, 0],
        "61": [-0.13313, 0.36687, 0.06616, 0],
        "63": [0, 0.69444, 0.1225, 0],
        "64": [0, 0.69444, 0.09597, 0],
        "65": [0, 0.68333, 0, 0],
        "66": [0, 0.68333, 0.10257, 0],
        "67": [0, 0.68333, 0.14528, 0],
        "68": [0, 0.68333, 0.09403, 0],
        "69": [0, 0.68333, 0.12028, 0],
        "70": [0, 0.68333, 0.13305, 0],
        "71": [0, 0.68333, 0.08722, 0],
        "72": [0, 0.68333, 0.16389, 0],
        "73": [0, 0.68333, 0.15806, 0],
        "74": [0, 0.68333, 0.14028, 0],
        "75": [0, 0.68333, 0.14528, 0],
        "76": [0, 0.68333, 0, 0],
        "77": [0, 0.68333, 0.16389, 0],
        "78": [0, 0.68333, 0.16389, 0],
        "79": [0, 0.68333, 0.09403, 0],
        "80": [0, 0.68333, 0.10257, 0],
        "81": [0.19444, 0.68333, 0.09403, 0],
        "82": [0, 0.68333, 0.03868, 0],
        "83": [0, 0.68333, 0.11972, 0],
        "84": [0, 0.68333, 0.13305, 0],
        "85": [0, 0.68333, 0.16389, 0],
        "86": [0, 0.68333, 0.18361, 0],
        "87": [0, 0.68333, 0.18361, 0],
        "88": [0, 0.68333, 0.15806, 0],
        "89": [0, 0.68333, 0.19383, 0],
        "90": [0, 0.68333, 0.14528, 0],
        "91": [0.25, 0.75, 0.1875, 0],
        "93": [0.25, 0.75, 0.10528, 0],
        "94": [0, 0.69444, 0.06646, 0],
        "95": [0.31, 0.12056, 0.09208, 0],
        "97": [0, 0.43056, 0.07671, 0],
        "98": [0, 0.69444, 0.06312, 0],
        "99": [0, 0.43056, 0.05653, 0],
        "100": [0, 0.69444, 0.10333, 0],
        "101": [0, 0.43056, 0.07514, 0],
        "102": [0.19444, 0.69444, 0.21194, 0],
        "103": [0.19444, 0.43056, 0.08847, 0],
        "104": [0, 0.69444, 0.07671, 0],
        "105": [0, 0.65536, 0.1019, 0],
        "106": [0.19444, 0.65536, 0.14467, 0],
        "107": [0, 0.69444, 0.10764, 0],
        "108": [0, 0.69444, 0.10333, 0],
        "109": [0, 0.43056, 0.07671, 0],
        "110": [0, 0.43056, 0.07671, 0],
        "111": [0, 0.43056, 0.06312, 0],
        "112": [0.19444, 0.43056, 0.06312, 0],
        "113": [0.19444, 0.43056, 0.08847, 0],
        "114": [0, 0.43056, 0.10764, 0],
        "115": [0, 0.43056, 0.08208, 0],
        "116": [0, 0.61508, 0.09486, 0],
        "117": [0, 0.43056, 0.07671, 0],
        "118": [0, 0.43056, 0.10764, 0],
        "119": [0, 0.43056, 0.10764, 0],
        "120": [0, 0.43056, 0.12042, 0],
        "121": [0.19444, 0.43056, 0.08847, 0],
        "122": [0, 0.43056, 0.12292, 0],
        "126": [0.35, 0.31786, 0.11585, 0],
        "163": [0, 0.69444, 0, 0],
        "305": [0, 0.43056, 0, 0.02778],
        "567": [0.19444, 0.43056, 0, 0.08334],
        "768": [0, 0.69444, 0, 0],
        "769": [0, 0.69444, 0.09694, 0],
        "770": [0, 0.69444, 0.06646, 0],
        "771": [0, 0.66786, 0.11585, 0],
        "772": [0, 0.56167, 0.10333, 0],
        "774": [0, 0.69444, 0.10806, 0],
        "775": [0, 0.66786, 0.11752, 0],
        "776": [0, 0.66786, 0.10474, 0],
        "778": [0, 0.69444, 0, 0],
        "779": [0, 0.69444, 0.1225, 0],
        "780": [0, 0.62847, 0.08295, 0],
        "915": [0, 0.68333, 0.13305, 0],
        "916": [0, 0.68333, 0, 0],
        "920": [0, 0.68333, 0.09403, 0],
        "923": [0, 0.68333, 0, 0],
        "926": [0, 0.68333, 0.15294, 0],
        "928": [0, 0.68333, 0.16389, 0],
        "931": [0, 0.68333, 0.12028, 0],
        "933": [0, 0.68333, 0.11111, 0],
        "934": [0, 0.68333, 0.05986, 0],
        "936": [0, 0.68333, 0.11111, 0],
        "937": [0, 0.68333, 0.10257, 0],
        "8211": [0, 0.43056, 0.09208, 0],
        "8212": [0, 0.43056, 0.09208, 0],
        "8216": [0, 0.69444, 0.12417, 0],
        "8217": [0, 0.69444, 0.12417, 0],
        "8220": [0, 0.69444, 0.1685, 0],
        "8221": [0, 0.69444, 0.06961, 0],
        "8463": [0, 0.68889, 0, 0],
    },
    "Main-Regular": {
        "32": [0, 0, 0, 0],
        "33": [0, 0.69444, 0, 0],
        "34": [0, 0.69444, 0, 0],
        "35": [0.19444, 0.69444, 0, 0],
        "36": [0.05556, 0.75, 0, 0],
        "37": [0.05556, 0.75, 0, 0],
        "38": [0, 0.69444, 0, 0],
        "39": [0, 0.69444, 0, 0],
        "40": [0.25, 0.75, 0, 0],
        "41": [0.25, 0.75, 0, 0],
        "42": [0, 0.75, 0, 0],
        "43": [0.08333, 0.58333, 0, 0],
        "44": [0.19444, 0.10556, 0, 0],
        "45": [0, 0.43056, 0, 0],
        "46": [0, 0.10556, 0, 0],
        "47": [0.25, 0.75, 0, 0],
        "48": [0, 0.64444, 0, 0],
        "49": [0, 0.64444, 0, 0],
        "50": [0, 0.64444, 0, 0],
        "51": [0, 0.64444, 0, 0],
        "52": [0, 0.64444, 0, 0],
        "53": [0, 0.64444, 0, 0],
        "54": [0, 0.64444, 0, 0],
        "55": [0, 0.64444, 0, 0],
        "56": [0, 0.64444, 0, 0],
        "57": [0, 0.64444, 0, 0],
        "58": [0, 0.43056, 0, 0],
        "59": [0.19444, 0.43056, 0, 0],
        "60": [0.0391, 0.5391, 0, 0],
        "61": [-0.13313, 0.36687, 0, 0],
        "62": [0.0391, 0.5391, 0, 0],
        "63": [0, 0.69444, 0, 0],
        "64": [0, 0.69444, 0, 0],
        "65": [0, 0.68333, 0, 0],
        "66": [0, 0.68333, 0, 0],
        "67": [0, 0.68333, 0, 0],
        "68": [0, 0.68333, 0, 0],
        "69": [0, 0.68333, 0, 0],
        "70": [0, 0.68333, 0, 0],
        "71": [0, 0.68333, 0, 0],
        "72": [0, 0.68333, 0, 0],
        "73": [0, 0.68333, 0, 0],
        "74": [0, 0.68333, 0, 0],
        "75": [0, 0.68333, 0, 0],
        "76": [0, 0.68333, 0, 0],
        "77": [0, 0.68333, 0, 0],
        "78": [0, 0.68333, 0, 0],
        "79": [0, 0.68333, 0, 0],
        "80": [0, 0.68333, 0, 0],
        "81": [0.19444, 0.68333, 0, 0],
        "82": [0, 0.68333, 0, 0],
        "83": [0, 0.68333, 0, 0],
        "84": [0, 0.68333, 0, 0],
        "85": [0, 0.68333, 0, 0],
        "86": [0, 0.68333, 0.01389, 0],
        "87": [0, 0.68333, 0.01389, 0],
        "88": [0, 0.68333, 0, 0],
        "89": [0, 0.68333, 0.025, 0],
        "90": [0, 0.68333, 0, 0],
        "91": [0.25, 0.75, 0, 0],
        "92": [0.25, 0.75, 0, 0],
        "93": [0.25, 0.75, 0, 0],
        "94": [0, 0.69444, 0, 0],
        "95": [0.31, 0.12056, 0.02778, 0],
        "96": [0, 0.69444, 0, 0],
        "97": [0, 0.43056, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.43056, 0, 0],
        "100": [0, 0.69444, 0, 0],
        "101": [0, 0.43056, 0, 0],
        "102": [0, 0.69444, 0.07778, 0],
        "103": [0.19444, 0.43056, 0.01389, 0],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.66786, 0, 0],
        "106": [0.19444, 0.66786, 0, 0],
        "107": [0, 0.69444, 0, 0],
        "108": [0, 0.69444, 0, 0],
        "109": [0, 0.43056, 0, 0],
        "110": [0, 0.43056, 0, 0],
        "111": [0, 0.43056, 0, 0],
        "112": [0.19444, 0.43056, 0, 0],
        "113": [0.19444, 0.43056, 0, 0],
        "114": [0, 0.43056, 0, 0],
        "115": [0, 0.43056, 0, 0],
        "116": [0, 0.61508, 0, 0],
        "117": [0, 0.43056, 0, 0],
        "118": [0, 0.43056, 0.01389, 0],
        "119": [0, 0.43056, 0.01389, 0],
        "120": [0, 0.43056, 0, 0],
        "121": [0.19444, 0.43056, 0.01389, 0],
        "122": [0, 0.43056, 0, 0],
        "123": [0.25, 0.75, 0, 0],
        "124": [0.25, 0.75, 0, 0],
        "125": [0.25, 0.75, 0, 0],
        "126": [0.35, 0.31786, 0, 0],
        "160": [0, 0, 0, 0],
        "168": [0, 0.66786, 0, 0],
        "172": [0, 0.43056, 0, 0],
        "175": [0, 0.56778, 0, 0],
        "176": [0, 0.69444, 0, 0],
        "177": [0.08333, 0.58333, 0, 0],
        "180": [0, 0.69444, 0, 0],
        "215": [0.08333, 0.58333, 0, 0],
        "247": [0.08333, 0.58333, 0, 0],
        "305": [0, 0.43056, 0, 0],
        "567": [0.19444, 0.43056, 0, 0],
        "710": [0, 0.69444, 0, 0],
        "711": [0, 0.62847, 0, 0],
        "713": [0, 0.56778, 0, 0],
        "714": [0, 0.69444, 0, 0],
        "715": [0, 0.69444, 0, 0],
        "728": [0, 0.69444, 0, 0],
        "729": [0, 0.66786, 0, 0],
        "730": [0, 0.69444, 0, 0],
        "732": [0, 0.66786, 0, 0],
        "768": [0, 0.69444, 0, 0],
        "769": [0, 0.69444, 0, 0],
        "770": [0, 0.69444, 0, 0],
        "771": [0, 0.66786, 0, 0],
        "772": [0, 0.56778, 0, 0],
        "774": [0, 0.69444, 0, 0],
        "775": [0, 0.66786, 0, 0],
        "776": [0, 0.66786, 0, 0],
        "778": [0, 0.69444, 0, 0],
        "779": [0, 0.69444, 0, 0],
        "780": [0, 0.62847, 0, 0],
        "824": [0.19444, 0.69444, 0, 0],
        "915": [0, 0.68333, 0, 0],
        "916": [0, 0.68333, 0, 0],
        "920": [0, 0.68333, 0, 0],
        "923": [0, 0.68333, 0, 0],
        "926": [0, 0.68333, 0, 0],
        "928": [0, 0.68333, 0, 0],
        "931": [0, 0.68333, 0, 0],
        "933": [0, 0.68333, 0, 0],
        "934": [0, 0.68333, 0, 0],
        "936": [0, 0.68333, 0, 0],
        "937": [0, 0.68333, 0, 0],
        "8211": [0, 0.43056, 0.02778, 0],
        "8212": [0, 0.43056, 0.02778, 0],
        "8216": [0, 0.69444, 0, 0],
        "8217": [0, 0.69444, 0, 0],
        "8220": [0, 0.69444, 0, 0],
        "8221": [0, 0.69444, 0, 0],
        "8224": [0.19444, 0.69444, 0, 0],
        "8225": [0.19444, 0.69444, 0, 0],
        "8230": [0, 0.12, 0, 0],
        "8242": [0, 0.55556, 0, 0],
        "8407": [0, 0.71444, 0.15382, 0],
        "8463": [0, 0.68889, 0, 0],
        "8465": [0, 0.69444, 0, 0],
        "8467": [0, 0.69444, 0, 0.11111],
        "8472": [0.19444, 0.43056, 0, 0.11111],
        "8476": [0, 0.69444, 0, 0],
        "8501": [0, 0.69444, 0, 0],
        "8592": [-0.13313, 0.36687, 0, 0],
        "8593": [0.19444, 0.69444, 0, 0],
        "8594": [-0.13313, 0.36687, 0, 0],
        "8595": [0.19444, 0.69444, 0, 0],
        "8596": [-0.13313, 0.36687, 0, 0],
        "8597": [0.25, 0.75, 0, 0],
        "8598": [0.19444, 0.69444, 0, 0],
        "8599": [0.19444, 0.69444, 0, 0],
        "8600": [0.19444, 0.69444, 0, 0],
        "8601": [0.19444, 0.69444, 0, 0],
        "8614": [0.011, 0.511, 0, 0],
        "8617": [0.011, 0.511, 0, 0],
        "8618": [0.011, 0.511, 0, 0],
        "8636": [-0.13313, 0.36687, 0, 0],
        "8637": [-0.13313, 0.36687, 0, 0],
        "8640": [-0.13313, 0.36687, 0, 0],
        "8641": [-0.13313, 0.36687, 0, 0],
        "8652": [0.011, 0.671, 0, 0],
        "8656": [-0.13313, 0.36687, 0, 0],
        "8657": [0.19444, 0.69444, 0, 0],
        "8658": [-0.13313, 0.36687, 0, 0],
        "8659": [0.19444, 0.69444, 0, 0],
        "8660": [-0.13313, 0.36687, 0, 0],
        "8661": [0.25, 0.75, 0, 0],
        "8704": [0, 0.69444, 0, 0],
        "8706": [0, 0.69444, 0.05556, 0.08334],
        "8707": [0, 0.69444, 0, 0],
        "8709": [0.05556, 0.75, 0, 0],
        "8711": [0, 0.68333, 0, 0],
        "8712": [0.0391, 0.5391, 0, 0],
        "8715": [0.0391, 0.5391, 0, 0],
        "8722": [0.08333, 0.58333, 0, 0],
        "8723": [0.08333, 0.58333, 0, 0],
        "8725": [0.25, 0.75, 0, 0],
        "8726": [0.25, 0.75, 0, 0],
        "8727": [-0.03472, 0.46528, 0, 0],
        "8728": [-0.05555, 0.44445, 0, 0],
        "8729": [-0.05555, 0.44445, 0, 0],
        "8730": [0.2, 0.8, 0, 0],
        "8733": [0, 0.43056, 0, 0],
        "8734": [0, 0.43056, 0, 0],
        "8736": [0, 0.69224, 0, 0],
        "8739": [0.25, 0.75, 0, 0],
        "8741": [0.25, 0.75, 0, 0],
        "8743": [0, 0.55556, 0, 0],
        "8744": [0, 0.55556, 0, 0],
        "8745": [0, 0.55556, 0, 0],
        "8746": [0, 0.55556, 0, 0],
        "8747": [0.19444, 0.69444, 0.11111, 0],
        "8764": [-0.13313, 0.36687, 0, 0],
        "8768": [0.19444, 0.69444, 0, 0],
        "8771": [-0.03625, 0.46375, 0, 0],
        "8773": [-0.022, 0.589, 0, 0],
        "8776": [-0.01688, 0.48312, 0, 0],
        "8781": [-0.03625, 0.46375, 0, 0],
        "8784": [-0.133, 0.67, 0, 0],
        "8800": [0.215, 0.716, 0, 0],
        "8801": [-0.03625, 0.46375, 0, 0],
        "8804": [0.13597, 0.63597, 0, 0],
        "8805": [0.13597, 0.63597, 0, 0],
        "8810": [0.0391, 0.5391, 0, 0],
        "8811": [0.0391, 0.5391, 0, 0],
        "8826": [0.0391, 0.5391, 0, 0],
        "8827": [0.0391, 0.5391, 0, 0],
        "8834": [0.0391, 0.5391, 0, 0],
        "8835": [0.0391, 0.5391, 0, 0],
        "8838": [0.13597, 0.63597, 0, 0],
        "8839": [0.13597, 0.63597, 0, 0],
        "8846": [0, 0.55556, 0, 0],
        "8849": [0.13597, 0.63597, 0, 0],
        "8850": [0.13597, 0.63597, 0, 0],
        "8851": [0, 0.55556, 0, 0],
        "8852": [0, 0.55556, 0, 0],
        "8853": [0.08333, 0.58333, 0, 0],
        "8854": [0.08333, 0.58333, 0, 0],
        "8855": [0.08333, 0.58333, 0, 0],
        "8856": [0.08333, 0.58333, 0, 0],
        "8857": [0.08333, 0.58333, 0, 0],
        "8866": [0, 0.69444, 0, 0],
        "8867": [0, 0.69444, 0, 0],
        "8868": [0, 0.69444, 0, 0],
        "8869": [0, 0.69444, 0, 0],
        "8872": [0.249, 0.75, 0, 0],
        "8900": [-0.05555, 0.44445, 0, 0],
        "8901": [-0.05555, 0.44445, 0, 0],
        "8902": [-0.03472, 0.46528, 0, 0],
        "8904": [0.005, 0.505, 0, 0],
        "8942": [0.03, 0.9, 0, 0],
        "8943": [-0.19, 0.31, 0, 0],
        "8945": [-0.1, 0.82, 0, 0],
        "8968": [0.25, 0.75, 0, 0],
        "8969": [0.25, 0.75, 0, 0],
        "8970": [0.25, 0.75, 0, 0],
        "8971": [0.25, 0.75, 0, 0],
        "8994": [-0.14236, 0.35764, 0, 0],
        "8995": [-0.14236, 0.35764, 0, 0],
        "9136": [0.244, 0.744, 0, 0],
        "9137": [0.244, 0.744, 0, 0],
        "9651": [0.19444, 0.69444, 0, 0],
        "9657": [-0.03472, 0.46528, 0, 0],
        "9661": [0.19444, 0.69444, 0, 0],
        "9667": [-0.03472, 0.46528, 0, 0],
        "9711": [0.19444, 0.69444, 0, 0],
        "9824": [0.12963, 0.69444, 0, 0],
        "9825": [0.12963, 0.69444, 0, 0],
        "9826": [0.12963, 0.69444, 0, 0],
        "9827": [0.12963, 0.69444, 0, 0],
        "9837": [0, 0.75, 0, 0],
        "9838": [0.19444, 0.69444, 0, 0],
        "9839": [0.19444, 0.69444, 0, 0],
        "10216": [0.25, 0.75, 0, 0],
        "10217": [0.25, 0.75, 0, 0],
        "10222": [0.244, 0.744, 0, 0],
        "10223": [0.244, 0.744, 0, 0],
        "10229": [0.011, 0.511, 0, 0],
        "10230": [0.011, 0.511, 0, 0],
        "10231": [0.011, 0.511, 0, 0],
        "10232": [0.024, 0.525, 0, 0],
        "10233": [0.024, 0.525, 0, 0],
        "10234": [0.024, 0.525, 0, 0],
        "10236": [0.011, 0.511, 0, 0],
        "10815": [0, 0.68333, 0, 0],
        "10927": [0.13597, 0.63597, 0, 0],
        "10928": [0.13597, 0.63597, 0, 0],
    },
    "Math-BoldItalic": {
        "47": [0.19444, 0.69444, 0, 0],
        "65": [0, 0.68611, 0, 0],
        "66": [0, 0.68611, 0.04835, 0],
        "67": [0, 0.68611, 0.06979, 0],
        "68": [0, 0.68611, 0.03194, 0],
        "69": [0, 0.68611, 0.05451, 0],
        "70": [0, 0.68611, 0.15972, 0],
        "71": [0, 0.68611, 0, 0],
        "72": [0, 0.68611, 0.08229, 0],
        "73": [0, 0.68611, 0.07778, 0],
        "74": [0, 0.68611, 0.10069, 0],
        "75": [0, 0.68611, 0.06979, 0],
        "76": [0, 0.68611, 0, 0],
        "77": [0, 0.68611, 0.11424, 0],
        "78": [0, 0.68611, 0.11424, 0],
        "79": [0, 0.68611, 0.03194, 0],
        "80": [0, 0.68611, 0.15972, 0],
        "81": [0.19444, 0.68611, 0, 0],
        "82": [0, 0.68611, 0.00421, 0],
        "83": [0, 0.68611, 0.05382, 0],
        "84": [0, 0.68611, 0.15972, 0],
        "85": [0, 0.68611, 0.11424, 0],
        "86": [0, 0.68611, 0.25555, 0],
        "87": [0, 0.68611, 0.15972, 0],
        "88": [0, 0.68611, 0.07778, 0],
        "89": [0, 0.68611, 0.25555, 0],
        "90": [0, 0.68611, 0.06979, 0],
        "97": [0, 0.44444, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.44444, 0, 0],
        "100": [0, 0.69444, 0, 0],
        "101": [0, 0.44444, 0, 0],
        "102": [0.19444, 0.69444, 0.11042, 0],
        "103": [0.19444, 0.44444, 0.03704, 0],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.69326, 0, 0],
        "106": [0.19444, 0.69326, 0.0622, 0],
        "107": [0, 0.69444, 0.01852, 0],
        "108": [0, 0.69444, 0.0088, 0],
        "109": [0, 0.44444, 0, 0],
        "110": [0, 0.44444, 0, 0],
        "111": [0, 0.44444, 0, 0],
        "112": [0.19444, 0.44444, 0, 0],
        "113": [0.19444, 0.44444, 0.03704, 0],
        "114": [0, 0.44444, 0.03194, 0],
        "115": [0, 0.44444, 0, 0],
        "116": [0, 0.63492, 0, 0],
        "117": [0, 0.44444, 0, 0],
        "118": [0, 0.44444, 0.03704, 0],
        "119": [0, 0.44444, 0.02778, 0],
        "120": [0, 0.44444, 0, 0],
        "121": [0.19444, 0.44444, 0.03704, 0],
        "122": [0, 0.44444, 0.04213, 0],
        "915": [0, 0.68611, 0.15972, 0],
        "916": [0, 0.68611, 0, 0],
        "920": [0, 0.68611, 0.03194, 0],
        "923": [0, 0.68611, 0, 0],
        "926": [0, 0.68611, 0.07458, 0],
        "928": [0, 0.68611, 0.08229, 0],
        "931": [0, 0.68611, 0.05451, 0],
        "933": [0, 0.68611, 0.15972, 0],
        "934": [0, 0.68611, 0, 0],
        "936": [0, 0.68611, 0.11653, 0],
        "937": [0, 0.68611, 0.04835, 0],
        "945": [0, 0.44444, 0, 0],
        "946": [0.19444, 0.69444, 0.03403, 0],
        "947": [0.19444, 0.44444, 0.06389, 0],
        "948": [0, 0.69444, 0.03819, 0],
        "949": [0, 0.44444, 0, 0],
        "950": [0.19444, 0.69444, 0.06215, 0],
        "951": [0.19444, 0.44444, 0.03704, 0],
        "952": [0, 0.69444, 0.03194, 0],
        "953": [0, 0.44444, 0, 0],
        "954": [0, 0.44444, 0, 0],
        "955": [0, 0.69444, 0, 0],
        "956": [0.19444, 0.44444, 0, 0],
        "957": [0, 0.44444, 0.06898, 0],
        "958": [0.19444, 0.69444, 0.03021, 0],
        "959": [0, 0.44444, 0, 0],
        "960": [0, 0.44444, 0.03704, 0],
        "961": [0.19444, 0.44444, 0, 0],
        "962": [0.09722, 0.44444, 0.07917, 0],
        "963": [0, 0.44444, 0.03704, 0],
        "964": [0, 0.44444, 0.13472, 0],
        "965": [0, 0.44444, 0.03704, 0],
        "966": [0.19444, 0.44444, 0, 0],
        "967": [0.19444, 0.44444, 0, 0],
        "968": [0.19444, 0.69444, 0.03704, 0],
        "969": [0, 0.44444, 0.03704, 0],
        "977": [0, 0.69444, 0, 0],
        "981": [0.19444, 0.69444, 0, 0],
        "982": [0, 0.44444, 0.03194, 0],
        "1009": [0.19444, 0.44444, 0, 0],
        "1013": [0, 0.44444, 0, 0],
    },
    "Math-Italic": {
        "47": [0.19444, 0.69444, 0, 0],
        "65": [0, 0.68333, 0, 0.13889],
        "66": [0, 0.68333, 0.05017, 0.08334],
        "67": [0, 0.68333, 0.07153, 0.08334],
        "68": [0, 0.68333, 0.02778, 0.05556],
        "69": [0, 0.68333, 0.05764, 0.08334],
        "70": [0, 0.68333, 0.13889, 0.08334],
        "71": [0, 0.68333, 0, 0.08334],
        "72": [0, 0.68333, 0.08125, 0.05556],
        "73": [0, 0.68333, 0.07847, 0.11111],
        "74": [0, 0.68333, 0.09618, 0.16667],
        "75": [0, 0.68333, 0.07153, 0.05556],
        "76": [0, 0.68333, 0, 0.02778],
        "77": [0, 0.68333, 0.10903, 0.08334],
        "78": [0, 0.68333, 0.10903, 0.08334],
        "79": [0, 0.68333, 0.02778, 0.08334],
        "80": [0, 0.68333, 0.13889, 0.08334],
        "81": [0.19444, 0.68333, 0, 0.08334],
        "82": [0, 0.68333, 0.00773, 0.08334],
        "83": [0, 0.68333, 0.05764, 0.08334],
        "84": [0, 0.68333, 0.13889, 0.08334],
        "85": [0, 0.68333, 0.10903, 0.02778],
        "86": [0, 0.68333, 0.22222, 0],
        "87": [0, 0.68333, 0.13889, 0],
        "88": [0, 0.68333, 0.07847, 0.08334],
        "89": [0, 0.68333, 0.22222, 0],
        "90": [0, 0.68333, 0.07153, 0.08334],
        "97": [0, 0.43056, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.43056, 0, 0.05556],
        "100": [0, 0.69444, 0, 0.16667],
        "101": [0, 0.43056, 0, 0.05556],
        "102": [0.19444, 0.69444, 0.10764, 0.16667],
        "103": [0.19444, 0.43056, 0.03588, 0.02778],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.65952, 0, 0],
        "106": [0.19444, 0.65952, 0.05724, 0],
        "107": [0, 0.69444, 0.03148, 0],
        "108": [0, 0.69444, 0.01968, 0.08334],
        "109": [0, 0.43056, 0, 0],
        "110": [0, 0.43056, 0, 0],
        "111": [0, 0.43056, 0, 0.05556],
        "112": [0.19444, 0.43056, 0, 0.08334],
        "113": [0.19444, 0.43056, 0.03588, 0.08334],
        "114": [0, 0.43056, 0.02778, 0.05556],
        "115": [0, 0.43056, 0, 0.05556],
        "116": [0, 0.61508, 0, 0.08334],
        "117": [0, 0.43056, 0, 0.02778],
        "118": [0, 0.43056, 0.03588, 0.02778],
        "119": [0, 0.43056, 0.02691, 0.08334],
        "120": [0, 0.43056, 0, 0.02778],
        "121": [0.19444, 0.43056, 0.03588, 0.05556],
        "122": [0, 0.43056, 0.04398, 0.05556],
        "915": [0, 0.68333, 0.13889, 0.08334],
        "916": [0, 0.68333, 0, 0.16667],
        "920": [0, 0.68333, 0.02778, 0.08334],
        "923": [0, 0.68333, 0, 0.16667],
        "926": [0, 0.68333, 0.07569, 0.08334],
        "928": [0, 0.68333, 0.08125, 0.05556],
        "931": [0, 0.68333, 0.05764, 0.08334],
        "933": [0, 0.68333, 0.13889, 0.05556],
        "934": [0, 0.68333, 0, 0.08334],
        "936": [0, 0.68333, 0.11, 0.05556],
        "937": [0, 0.68333, 0.05017, 0.08334],
        "945": [0, 0.43056, 0.0037, 0.02778],
        "946": [0.19444, 0.69444, 0.05278, 0.08334],
        "947": [0.19444, 0.43056, 0.05556, 0],
        "948": [0, 0.69444, 0.03785, 0.05556],
        "949": [0, 0.43056, 0, 0.08334],
        "950": [0.19444, 0.69444, 0.07378, 0.08334],
        "951": [0.19444, 0.43056, 0.03588, 0.05556],
        "952": [0, 0.69444, 0.02778, 0.08334],
        "953": [0, 0.43056, 0, 0.05556],
        "954": [0, 0.43056, 0, 0],
        "955": [0, 0.69444, 0, 0],
        "956": [0.19444, 0.43056, 0, 0.02778],
        "957": [0, 0.43056, 0.06366, 0.02778],
        "958": [0.19444, 0.69444, 0.04601, 0.11111],
        "959": [0, 0.43056, 0, 0.05556],
        "960": [0, 0.43056, 0.03588, 0],
        "961": [0.19444, 0.43056, 0, 0.08334],
        "962": [0.09722, 0.43056, 0.07986, 0.08334],
        "963": [0, 0.43056, 0.03588, 0],
        "964": [0, 0.43056, 0.1132, 0.02778],
        "965": [0, 0.43056, 0.03588, 0.02778],
        "966": [0.19444, 0.43056, 0, 0.08334],
        "967": [0.19444, 0.43056, 0, 0.05556],
        "968": [0.19444, 0.69444, 0.03588, 0.11111],
        "969": [0, 0.43056, 0.03588, 0],
        "977": [0, 0.69444, 0, 0.08334],
        "981": [0.19444, 0.69444, 0, 0.08334],
        "982": [0, 0.43056, 0.02778, 0],
        "1009": [0.19444, 0.43056, 0, 0.08334],
        "1013": [0, 0.43056, 0, 0.05556],
    },
    "Math-Regular": {
        "65": [0, 0.68333, 0, 0.13889],
        "66": [0, 0.68333, 0.05017, 0.08334],
        "67": [0, 0.68333, 0.07153, 0.08334],
        "68": [0, 0.68333, 0.02778, 0.05556],
        "69": [0, 0.68333, 0.05764, 0.08334],
        "70": [0, 0.68333, 0.13889, 0.08334],
        "71": [0, 0.68333, 0, 0.08334],
        "72": [0, 0.68333, 0.08125, 0.05556],
        "73": [0, 0.68333, 0.07847, 0.11111],
        "74": [0, 0.68333, 0.09618, 0.16667],
        "75": [0, 0.68333, 0.07153, 0.05556],
        "76": [0, 0.68333, 0, 0.02778],
        "77": [0, 0.68333, 0.10903, 0.08334],
        "78": [0, 0.68333, 0.10903, 0.08334],
        "79": [0, 0.68333, 0.02778, 0.08334],
        "80": [0, 0.68333, 0.13889, 0.08334],
        "81": [0.19444, 0.68333, 0, 0.08334],
        "82": [0, 0.68333, 0.00773, 0.08334],
        "83": [0, 0.68333, 0.05764, 0.08334],
        "84": [0, 0.68333, 0.13889, 0.08334],
        "85": [0, 0.68333, 0.10903, 0.02778],
        "86": [0, 0.68333, 0.22222, 0],
        "87": [0, 0.68333, 0.13889, 0],
        "88": [0, 0.68333, 0.07847, 0.08334],
        "89": [0, 0.68333, 0.22222, 0],
        "90": [0, 0.68333, 0.07153, 0.08334],
        "97": [0, 0.43056, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.43056, 0, 0.05556],
        "100": [0, 0.69444, 0, 0.16667],
        "101": [0, 0.43056, 0, 0.05556],
        "102": [0.19444, 0.69444, 0.10764, 0.16667],
        "103": [0.19444, 0.43056, 0.03588, 0.02778],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.65952, 0, 0],
        "106": [0.19444, 0.65952, 0.05724, 0],
        "107": [0, 0.69444, 0.03148, 0],
        "108": [0, 0.69444, 0.01968, 0.08334],
        "109": [0, 0.43056, 0, 0],
        "110": [0, 0.43056, 0, 0],
        "111": [0, 0.43056, 0, 0.05556],
        "112": [0.19444, 0.43056, 0, 0.08334],
        "113": [0.19444, 0.43056, 0.03588, 0.08334],
        "114": [0, 0.43056, 0.02778, 0.05556],
        "115": [0, 0.43056, 0, 0.05556],
        "116": [0, 0.61508, 0, 0.08334],
        "117": [0, 0.43056, 0, 0.02778],
        "118": [0, 0.43056, 0.03588, 0.02778],
        "119": [0, 0.43056, 0.02691, 0.08334],
        "120": [0, 0.43056, 0, 0.02778],
        "121": [0.19444, 0.43056, 0.03588, 0.05556],
        "122": [0, 0.43056, 0.04398, 0.05556],
        "915": [0, 0.68333, 0.13889, 0.08334],
        "916": [0, 0.68333, 0, 0.16667],
        "920": [0, 0.68333, 0.02778, 0.08334],
        "923": [0, 0.68333, 0, 0.16667],
        "926": [0, 0.68333, 0.07569, 0.08334],
        "928": [0, 0.68333, 0.08125, 0.05556],
        "931": [0, 0.68333, 0.05764, 0.08334],
        "933": [0, 0.68333, 0.13889, 0.05556],
        "934": [0, 0.68333, 0, 0.08334],
        "936": [0, 0.68333, 0.11, 0.05556],
        "937": [0, 0.68333, 0.05017, 0.08334],
        "945": [0, 0.43056, 0.0037, 0.02778],
        "946": [0.19444, 0.69444, 0.05278, 0.08334],
        "947": [0.19444, 0.43056, 0.05556, 0],
        "948": [0, 0.69444, 0.03785, 0.05556],
        "949": [0, 0.43056, 0, 0.08334],
        "950": [0.19444, 0.69444, 0.07378, 0.08334],
        "951": [0.19444, 0.43056, 0.03588, 0.05556],
        "952": [0, 0.69444, 0.02778, 0.08334],
        "953": [0, 0.43056, 0, 0.05556],
        "954": [0, 0.43056, 0, 0],
        "955": [0, 0.69444, 0, 0],
        "956": [0.19444, 0.43056, 0, 0.02778],
        "957": [0, 0.43056, 0.06366, 0.02778],
        "958": [0.19444, 0.69444, 0.04601, 0.11111],
        "959": [0, 0.43056, 0, 0.05556],
        "960": [0, 0.43056, 0.03588, 0],
        "961": [0.19444, 0.43056, 0, 0.08334],
        "962": [0.09722, 0.43056, 0.07986, 0.08334],
        "963": [0, 0.43056, 0.03588, 0],
        "964": [0, 0.43056, 0.1132, 0.02778],
        "965": [0, 0.43056, 0.03588, 0.02778],
        "966": [0.19444, 0.43056, 0, 0.08334],
        "967": [0.19444, 0.43056, 0, 0.05556],
        "968": [0.19444, 0.69444, 0.03588, 0.11111],
        "969": [0, 0.43056, 0.03588, 0],
        "977": [0, 0.69444, 0, 0.08334],
        "981": [0.19444, 0.69444, 0, 0.08334],
        "982": [0, 0.43056, 0.02778, 0],
        "1009": [0.19444, 0.43056, 0, 0.08334],
        "1013": [0, 0.43056, 0, 0.05556],
    },
    "SansSerif-Regular": {
        "33": [0, 0.69444, 0, 0],
        "34": [0, 0.69444, 0, 0],
        "35": [0.19444, 0.69444, 0, 0],
        "36": [0.05556, 0.75, 0, 0],
        "37": [0.05556, 0.75, 0, 0],
        "38": [0, 0.69444, 0, 0],
        "39": [0, 0.69444, 0, 0],
        "40": [0.25, 0.75, 0, 0],
        "41": [0.25, 0.75, 0, 0],
        "42": [0, 0.75, 0, 0],
        "43": [0.08333, 0.58333, 0, 0],
        "44": [0.125, 0.08333, 0, 0],
        "45": [0, 0.44444, 0, 0],
        "46": [0, 0.08333, 0, 0],
        "47": [0.25, 0.75, 0, 0],
        "48": [0, 0.65556, 0, 0],
        "49": [0, 0.65556, 0, 0],
        "50": [0, 0.65556, 0, 0],
        "51": [0, 0.65556, 0, 0],
        "52": [0, 0.65556, 0, 0],
        "53": [0, 0.65556, 0, 0],
        "54": [0, 0.65556, 0, 0],
        "55": [0, 0.65556, 0, 0],
        "56": [0, 0.65556, 0, 0],
        "57": [0, 0.65556, 0, 0],
        "58": [0, 0.44444, 0, 0],
        "59": [0.125, 0.44444, 0, 0],
        "61": [-0.13, 0.37, 0, 0],
        "63": [0, 0.69444, 0, 0],
        "64": [0, 0.69444, 0, 0],
        "65": [0, 0.69444, 0, 0],
        "66": [0, 0.69444, 0, 0],
        "67": [0, 0.69444, 0, 0],
        "68": [0, 0.69444, 0, 0],
        "69": [0, 0.69444, 0, 0],
        "70": [0, 0.69444, 0, 0],
        "71": [0, 0.69444, 0, 0],
        "72": [0, 0.69444, 0, 0],
        "73": [0, 0.69444, 0, 0],
        "74": [0, 0.69444, 0, 0],
        "75": [0, 0.69444, 0, 0],
        "76": [0, 0.69444, 0, 0],
        "77": [0, 0.69444, 0, 0],
        "78": [0, 0.69444, 0, 0],
        "79": [0, 0.69444, 0, 0],
        "80": [0, 0.69444, 0, 0],
        "81": [0.125, 0.69444, 0, 0],
        "82": [0, 0.69444, 0, 0],
        "83": [0, 0.69444, 0, 0],
        "84": [0, 0.69444, 0, 0],
        "85": [0, 0.69444, 0, 0],
        "86": [0, 0.69444, 0.01389, 0],
        "87": [0, 0.69444, 0.01389, 0],
        "88": [0, 0.69444, 0, 0],
        "89": [0, 0.69444, 0.025, 0],
        "90": [0, 0.69444, 0, 0],
        "91": [0.25, 0.75, 0, 0],
        "93": [0.25, 0.75, 0, 0],
        "94": [0, 0.69444, 0, 0],
        "95": [0.35, 0.09444, 0.02778, 0],
        "97": [0, 0.44444, 0, 0],
        "98": [0, 0.69444, 0, 0],
        "99": [0, 0.44444, 0, 0],
        "100": [0, 0.69444, 0, 0],
        "101": [0, 0.44444, 0, 0],
        "102": [0, 0.69444, 0.06944, 0],
        "103": [0.19444, 0.44444, 0.01389, 0],
        "104": [0, 0.69444, 0, 0],
        "105": [0, 0.67937, 0, 0],
        "106": [0.19444, 0.67937, 0, 0],
        "107": [0, 0.69444, 0, 0],
        "108": [0, 0.69444, 0, 0],
        "109": [0, 0.44444, 0, 0],
        "110": [0, 0.44444, 0, 0],
        "111": [0, 0.44444, 0, 0],
        "112": [0.19444, 0.44444, 0, 0],
        "113": [0.19444, 0.44444, 0, 0],
        "114": [0, 0.44444, 0.01389, 0],
        "115": [0, 0.44444, 0, 0],
        "116": [0, 0.57143, 0, 0],
        "117": [0, 0.44444, 0, 0],
        "118": [0, 0.44444, 0.01389, 0],
        "119": [0, 0.44444, 0.01389, 0],
        "120": [0, 0.44444, 0, 0],
        "121": [0.19444, 0.44444, 0.01389, 0],
        "122": [0, 0.44444, 0, 0],
        "126": [0.35, 0.32659, 0, 0],
        "305": [0, 0.44444, 0, 0],
        "567": [0.19444, 0.44444, 0, 0],
        "768": [0, 0.69444, 0, 0],
        "769": [0, 0.69444, 0, 0],
        "770": [0, 0.69444, 0, 0],
        "771": [0, 0.67659, 0, 0],
        "772": [0, 0.60889, 0, 0],
        "774": [0, 0.69444, 0, 0],
        "775": [0, 0.67937, 0, 0],
        "776": [0, 0.67937, 0, 0],
        "778": [0, 0.69444, 0, 0],
        "779": [0, 0.69444, 0, 0],
        "780": [0, 0.63194, 0, 0],
        "915": [0, 0.69444, 0, 0],
        "916": [0, 0.69444, 0, 0],
        "920": [0, 0.69444, 0, 0],
        "923": [0, 0.69444, 0, 0],
        "926": [0, 0.69444, 0, 0],
        "928": [0, 0.69444, 0, 0],
        "931": [0, 0.69444, 0, 0],
        "933": [0, 0.69444, 0, 0],
        "934": [0, 0.69444, 0, 0],
        "936": [0, 0.69444, 0, 0],
        "937": [0, 0.69444, 0, 0],
        "8211": [0, 0.44444, 0.02778, 0],
        "8212": [0, 0.44444, 0.02778, 0],
        "8216": [0, 0.69444, 0, 0],
        "8217": [0, 0.69444, 0, 0],
        "8220": [0, 0.69444, 0, 0],
        "8221": [0, 0.69444, 0, 0],
    },
    "Script-Regular": {
        "65": [0, 0.7, 0.22925, 0],
        "66": [0, 0.7, 0.04087, 0],
        "67": [0, 0.7, 0.1689, 0],
        "68": [0, 0.7, 0.09371, 0],
        "69": [0, 0.7, 0.18583, 0],
        "70": [0, 0.7, 0.13634, 0],
        "71": [0, 0.7, 0.17322, 0],
        "72": [0, 0.7, 0.29694, 0],
        "73": [0, 0.7, 0.19189, 0],
        "74": [0.27778, 0.7, 0.19189, 0],
        "75": [0, 0.7, 0.31259, 0],
        "76": [0, 0.7, 0.19189, 0],
        "77": [0, 0.7, 0.15981, 0],
        "78": [0, 0.7, 0.3525, 0],
        "79": [0, 0.7, 0.08078, 0],
        "80": [0, 0.7, 0.08078, 0],
        "81": [0, 0.7, 0.03305, 0],
        "82": [0, 0.7, 0.06259, 0],
        "83": [0, 0.7, 0.19189, 0],
        "84": [0, 0.7, 0.29087, 0],
        "85": [0, 0.7, 0.25815, 0],
        "86": [0, 0.7, 0.27523, 0],
        "87": [0, 0.7, 0.27523, 0],
        "88": [0, 0.7, 0.26006, 0],
        "89": [0, 0.7, 0.2939, 0],
        "90": [0, 0.7, 0.24037, 0],
    },
    "Size1-Regular": {
        "40": [0.35001, 0.85, 0, 0],
        "41": [0.35001, 0.85, 0, 0],
        "47": [0.35001, 0.85, 0, 0],
        "91": [0.35001, 0.85, 0, 0],
        "92": [0.35001, 0.85, 0, 0],
        "93": [0.35001, 0.85, 0, 0],
        "123": [0.35001, 0.85, 0, 0],
        "125": [0.35001, 0.85, 0, 0],
        "710": [0, 0.72222, 0, 0],
        "732": [0, 0.72222, 0, 0],
        "770": [0, 0.72222, 0, 0],
        "771": [0, 0.72222, 0, 0],
        "8214": [-0.00099, 0.601, 0, 0],
        "8593": [1e-05, 0.6, 0, 0],
        "8595": [1e-05, 0.6, 0, 0],
        "8657": [1e-05, 0.6, 0, 0],
        "8659": [1e-05, 0.6, 0, 0],
        "8719": [0.25001, 0.75, 0, 0],
        "8720": [0.25001, 0.75, 0, 0],
        "8721": [0.25001, 0.75, 0, 0],
        "8730": [0.35001, 0.85, 0, 0],
        "8739": [-0.00599, 0.606, 0, 0],
        "8741": [-0.00599, 0.606, 0, 0],
        "8747": [0.30612, 0.805, 0.19445, 0],
        "8748": [0.306, 0.805, 0.19445, 0],
        "8749": [0.306, 0.805, 0.19445, 0],
        "8750": [0.30612, 0.805, 0.19445, 0],
        "8896": [0.25001, 0.75, 0, 0],
        "8897": [0.25001, 0.75, 0, 0],
        "8898": [0.25001, 0.75, 0, 0],
        "8899": [0.25001, 0.75, 0, 0],
        "8968": [0.35001, 0.85, 0, 0],
        "8969": [0.35001, 0.85, 0, 0],
        "8970": [0.35001, 0.85, 0, 0],
        "8971": [0.35001, 0.85, 0, 0],
        "9168": [-0.00099, 0.601, 0, 0],
        "10216": [0.35001, 0.85, 0, 0],
        "10217": [0.35001, 0.85, 0, 0],
        "10752": [0.25001, 0.75, 0, 0],
        "10753": [0.25001, 0.75, 0, 0],
        "10754": [0.25001, 0.75, 0, 0],
        "10756": [0.25001, 0.75, 0, 0],
        "10758": [0.25001, 0.75, 0, 0],
    },
    "Size2-Regular": {
        "40": [0.65002, 1.15, 0, 0],
        "41": [0.65002, 1.15, 0, 0],
        "47": [0.65002, 1.15, 0, 0],
        "91": [0.65002, 1.15, 0, 0],
        "92": [0.65002, 1.15, 0, 0],
        "93": [0.65002, 1.15, 0, 0],
        "123": [0.65002, 1.15, 0, 0],
        "125": [0.65002, 1.15, 0, 0],
        "710": [0, 0.75, 0, 0],
        "732": [0, 0.75, 0, 0],
        "770": [0, 0.75, 0, 0],
        "771": [0, 0.75, 0, 0],
        "8719": [0.55001, 1.05, 0, 0],
        "8720": [0.55001, 1.05, 0, 0],
        "8721": [0.55001, 1.05, 0, 0],
        "8730": [0.65002, 1.15, 0, 0],
        "8747": [0.86225, 1.36, 0.44445, 0],
        "8748": [0.862, 1.36, 0.44445, 0],
        "8749": [0.862, 1.36, 0.44445, 0],
        "8750": [0.86225, 1.36, 0.44445, 0],
        "8896": [0.55001, 1.05, 0, 0],
        "8897": [0.55001, 1.05, 0, 0],
        "8898": [0.55001, 1.05, 0, 0],
        "8899": [0.55001, 1.05, 0, 0],
        "8968": [0.65002, 1.15, 0, 0],
        "8969": [0.65002, 1.15, 0, 0],
        "8970": [0.65002, 1.15, 0, 0],
        "8971": [0.65002, 1.15, 0, 0],
        "10216": [0.65002, 1.15, 0, 0],
        "10217": [0.65002, 1.15, 0, 0],
        "10752": [0.55001, 1.05, 0, 0],
        "10753": [0.55001, 1.05, 0, 0],
        "10754": [0.55001, 1.05, 0, 0],
        "10756": [0.55001, 1.05, 0, 0],
        "10758": [0.55001, 1.05, 0, 0],
    },
    "Size3-Regular": {
        "40": [0.95003, 1.45, 0, 0],
        "41": [0.95003, 1.45, 0, 0],
        "47": [0.95003, 1.45, 0, 0],
        "91": [0.95003, 1.45, 0, 0],
        "92": [0.95003, 1.45, 0, 0],
        "93": [0.95003, 1.45, 0, 0],
        "123": [0.95003, 1.45, 0, 0],
        "125": [0.95003, 1.45, 0, 0],
        "710": [0, 0.75, 0, 0],
        "732": [0, 0.75, 0, 0],
        "770": [0, 0.75, 0, 0],
        "771": [0, 0.75, 0, 0],
        "8730": [0.95003, 1.45, 0, 0],
        "8968": [0.95003, 1.45, 0, 0],
        "8969": [0.95003, 1.45, 0, 0],
        "8970": [0.95003, 1.45, 0, 0],
        "8971": [0.95003, 1.45, 0, 0],
        "10216": [0.95003, 1.45, 0, 0],
        "10217": [0.95003, 1.45, 0, 0],
    },
    "Size4-Regular": {
        "40": [1.25003, 1.75, 0, 0],
        "41": [1.25003, 1.75, 0, 0],
        "47": [1.25003, 1.75, 0, 0],
        "91": [1.25003, 1.75, 0, 0],
        "92": [1.25003, 1.75, 0, 0],
        "93": [1.25003, 1.75, 0, 0],
        "123": [1.25003, 1.75, 0, 0],
        "125": [1.25003, 1.75, 0, 0],
        "710": [0, 0.825, 0, 0],
        "732": [0, 0.825, 0, 0],
        "770": [0, 0.825, 0, 0],
        "771": [0, 0.825, 0, 0],
        "8730": [1.25003, 1.75, 0, 0],
        "8968": [1.25003, 1.75, 0, 0],
        "8969": [1.25003, 1.75, 0, 0],
        "8970": [1.25003, 1.75, 0, 0],
        "8971": [1.25003, 1.75, 0, 0],
        "9115": [0.64502, 1.155, 0, 0],
        "9116": [1e-05, 0.6, 0, 0],
        "9117": [0.64502, 1.155, 0, 0],
        "9118": [0.64502, 1.155, 0, 0],
        "9119": [1e-05, 0.6, 0, 0],
        "9120": [0.64502, 1.155, 0, 0],
        "9121": [0.64502, 1.155, 0, 0],
        "9122": [-0.00099, 0.601, 0, 0],
        "9123": [0.64502, 1.155, 0, 0],
        "9124": [0.64502, 1.155, 0, 0],
        "9125": [-0.00099, 0.601, 0, 0],
        "9126": [0.64502, 1.155, 0, 0],
        "9127": [1e-05, 0.9, 0, 0],
        "9128": [0.65002, 1.15, 0, 0],
        "9129": [0.90001, 0, 0, 0],
        "9130": [0, 0.3, 0, 0],
        "9131": [1e-05, 0.9, 0, 0],
        "9132": [0.65002, 1.15, 0, 0],
        "9133": [0.90001, 0, 0, 0],
        "9143": [0.88502, 0.915, 0, 0],
        "10216": [1.25003, 1.75, 0, 0],
        "10217": [1.25003, 1.75, 0, 0],
        "57344": [-0.00499, 0.605, 0, 0],
        "57345": [-0.00499, 0.605, 0, 0],
        "57680": [0, 0.12, 0, 0],
        "57681": [0, 0.12, 0, 0],
        "57682": [0, 0.12, 0, 0],
        "57683": [0, 0.12, 0, 0],
    },
    "Typewriter-Regular": {
        "33": [0, 0.61111, 0, 0],
        "34": [0, 0.61111, 0, 0],
        "35": [0, 0.61111, 0, 0],
        "36": [0.08333, 0.69444, 0, 0],
        "37": [0.08333, 0.69444, 0, 0],
        "38": [0, 0.61111, 0, 0],
        "39": [0, 0.61111, 0, 0],
        "40": [0.08333, 0.69444, 0, 0],
        "41": [0.08333, 0.69444, 0, 0],
        "42": [0, 0.52083, 0, 0],
        "43": [-0.08056, 0.53055, 0, 0],
        "44": [0.13889, 0.125, 0, 0],
        "45": [-0.08056, 0.53055, 0, 0],
        "46": [0, 0.125, 0, 0],
        "47": [0.08333, 0.69444, 0, 0],
        "48": [0, 0.61111, 0, 0],
        "49": [0, 0.61111, 0, 0],
        "50": [0, 0.61111, 0, 0],
        "51": [0, 0.61111, 0, 0],
        "52": [0, 0.61111, 0, 0],
        "53": [0, 0.61111, 0, 0],
        "54": [0, 0.61111, 0, 0],
        "55": [0, 0.61111, 0, 0],
        "56": [0, 0.61111, 0, 0],
        "57": [0, 0.61111, 0, 0],
        "58": [0, 0.43056, 0, 0],
        "59": [0.13889, 0.43056, 0, 0],
        "60": [-0.05556, 0.55556, 0, 0],
        "61": [-0.19549, 0.41562, 0, 0],
        "62": [-0.05556, 0.55556, 0, 0],
        "63": [0, 0.61111, 0, 0],
        "64": [0, 0.61111, 0, 0],
        "65": [0, 0.61111, 0, 0],
        "66": [0, 0.61111, 0, 0],
        "67": [0, 0.61111, 0, 0],
        "68": [0, 0.61111, 0, 0],
        "69": [0, 0.61111, 0, 0],
        "70": [0, 0.61111, 0, 0],
        "71": [0, 0.61111, 0, 0],
        "72": [0, 0.61111, 0, 0],
        "73": [0, 0.61111, 0, 0],
        "74": [0, 0.61111, 0, 0],
        "75": [0, 0.61111, 0, 0],
        "76": [0, 0.61111, 0, 0],
        "77": [0, 0.61111, 0, 0],
        "78": [0, 0.61111, 0, 0],
        "79": [0, 0.61111, 0, 0],
        "80": [0, 0.61111, 0, 0],
        "81": [0.13889, 0.61111, 0, 0],
        "82": [0, 0.61111, 0, 0],
        "83": [0, 0.61111, 0, 0],
        "84": [0, 0.61111, 0, 0],
        "85": [0, 0.61111, 0, 0],
        "86": [0, 0.61111, 0, 0],
        "87": [0, 0.61111, 0, 0],
        "88": [0, 0.61111, 0, 0],
        "89": [0, 0.61111, 0, 0],
        "90": [0, 0.61111, 0, 0],
        "91": [0.08333, 0.69444, 0, 0],
        "92": [0.08333, 0.69444, 0, 0],
        "93": [0.08333, 0.69444, 0, 0],
        "94": [0, 0.61111, 0, 0],
        "95": [0.09514, 0, 0, 0],
        "96": [0, 0.61111, 0, 0],
        "97": [0, 0.43056, 0, 0],
        "98": [0, 0.61111, 0, 0],
        "99": [0, 0.43056, 0, 0],
        "100": [0, 0.61111, 0, 0],
        "101": [0, 0.43056, 0, 0],
        "102": [0, 0.61111, 0, 0],
        "103": [0.22222, 0.43056, 0, 0],
        "104": [0, 0.61111, 0, 0],
        "105": [0, 0.61111, 0, 0],
        "106": [0.22222, 0.61111, 0, 0],
        "107": [0, 0.61111, 0, 0],
        "108": [0, 0.61111, 0, 0],
        "109": [0, 0.43056, 0, 0],
        "110": [0, 0.43056, 0, 0],
        "111": [0, 0.43056, 0, 0],
        "112": [0.22222, 0.43056, 0, 0],
        "113": [0.22222, 0.43056, 0, 0],
        "114": [0, 0.43056, 0, 0],
        "115": [0, 0.43056, 0, 0],
        "116": [0, 0.55358, 0, 0],
        "117": [0, 0.43056, 0, 0],
        "118": [0, 0.43056, 0, 0],
        "119": [0, 0.43056, 0, 0],
        "120": [0, 0.43056, 0, 0],
        "121": [0.22222, 0.43056, 0, 0],
        "122": [0, 0.43056, 0, 0],
        "123": [0.08333, 0.69444, 0, 0],
        "124": [0.08333, 0.69444, 0, 0],
        "125": [0.08333, 0.69444, 0, 0],
        "126": [0, 0.61111, 0, 0],
        "127": [0, 0.61111, 0, 0],
        "305": [0, 0.43056, 0, 0],
        "567": [0.22222, 0.43056, 0, 0],
        "768": [0, 0.61111, 0, 0],
        "769": [0, 0.61111, 0, 0],
        "770": [0, 0.61111, 0, 0],
        "771": [0, 0.61111, 0, 0],
        "772": [0, 0.56555, 0, 0],
        "774": [0, 0.61111, 0, 0],
        "776": [0, 0.61111, 0, 0],
        "778": [0, 0.61111, 0, 0],
        "780": [0, 0.56597, 0, 0],
        "915": [0, 0.61111, 0, 0],
        "916": [0, 0.61111, 0, 0],
        "920": [0, 0.61111, 0, 0],
        "923": [0, 0.61111, 0, 0],
        "926": [0, 0.61111, 0, 0],
        "928": [0, 0.61111, 0, 0],
        "931": [0, 0.61111, 0, 0],
        "933": [0, 0.61111, 0, 0],
        "934": [0, 0.61111, 0, 0],
        "936": [0, 0.61111, 0, 0],
        "937": [0, 0.61111, 0, 0],
        "2018": [0, 0.61111, 0, 0],
        "2019": [0, 0.61111, 0, 0],
        "8242": [0, 0.61111, 0, 0],
    },
};

},{}],162:[function(require,module,exports){
var utils = require("./utils");
var ParseError = require("./ParseError");

/* This file contains a list of functions that we parse, identified by
 * the calls to defineFunction.
 *
 * The first argument to defineFunction is a single name or a list of names.
 * All functions named in such a list will share a single implementation.
 *
 * Each declared function can have associated properties, which
 * include the following:
 *
 *  - numArgs: The number of arguments the function takes.
 *             If this is the only property, it can be passed as a number
 *             instead of an element of a properties object.
 *  - argTypes: (optional) An array corresponding to each argument of the
 *              function, giving the type of argument that should be parsed. Its
 *              length should be equal to `numArgs + numOptionalArgs`. Valid
 *              types:
 *               - "size": A size-like thing, such as "1em" or "5ex"
 *               - "color": An html color, like "#abc" or "blue"
 *               - "original": The same type as the environment that the
 *                             function being parsed is in (e.g. used for the
 *                             bodies of functions like \color where the first
 *                             argument is special and the second argument is
 *                             parsed normally)
 *              Other possible types (probably shouldn't be used)
 *               - "text": Text-like (e.g. \text)
 *               - "math": Normal math
 *              If undefined, this will be treated as an appropriate length
 *              array of "original" strings
 *  - greediness: (optional) The greediness of the function to use ungrouped
 *                arguments.
 *
 *                E.g. if you have an expression
 *                  \sqrt \frac 1 2
 *                since \frac has greediness=2 vs \sqrt's greediness=1, \frac
 *                will use the two arguments '1' and '2' as its two arguments,
 *                then that whole function will be used as the argument to
 *                \sqrt. On the other hand, the expressions
 *                  \frac \frac 1 2 3
 *                and
 *                  \frac \sqrt 1 2
 *                will fail because \frac and \frac have equal greediness
 *                and \sqrt has a lower greediness than \frac respectively. To
 *                make these parse, we would have to change them to:
 *                  \frac {\frac 1 2} 3
 *                and
 *                  \frac {\sqrt 1} 2
 *
 *                The default value is `1`
 *  - allowedInText: (optional) Whether or not the function is allowed inside
 *                   text mode (default false)
 *  - numOptionalArgs: (optional) The number of optional arguments the function
 *                     should parse. If the optional arguments aren't found,
 *                     `null` will be passed to the handler in their place.
 *                     (default 0)
 *
 * The last argument is that implementation, the handler for the function(s).
 * It is called to handle these functions and their arguments.
 * It receives two arguments:
 *  - context contains information and references provided by the parser
 *  - args is an array of arguments obtained from TeX input
 * The context contains the following properties:
 *  - funcName: the text (i.e. name) of the function, including \
 *  - parser: the parser object
 *  - lexer: the lexer object
 *  - positions: the positions in the overall string of the function
 *               and the arguments.
 * The latter three should only be used to produce error messages.
 *
 * The function should return an object with the following keys:
 *  - type: The type of element that this is. This is then used in
 *          buildHTML/buildMathML to determine which function
 *          should be called to build this node into a DOM node
 * Any other data can be added to the object, which will be passed
 * in to the function in buildHTML/buildMathML as `group.value`.
 */

function defineFunction(names, props, handler) {
    if (typeof names === "string") {
        names = [names];
    }
    if (typeof props === "number") {
        props = { numArgs: props };
    }
    // Set default values of functions
    var data = {
        numArgs: props.numArgs,
        argTypes: props.argTypes,
        greediness: (props.greediness === undefined) ? 1 : props.greediness,
        allowedInText: !!props.allowedInText,
        numOptionalArgs: props.numOptionalArgs || 0,
        handler: handler,
    };
    for (var i = 0; i < names.length; ++i) {
        module.exports[names[i]] = data;
    }
}

// A normal square root
defineFunction("\\sqrt", {
    numArgs: 1,
    numOptionalArgs: 1,
}, function(context, args) {
    var index = args[0];
    var body = args[1];
    return {
        type: "sqrt",
        body: body,
        index: index,
    };
});

// Some non-mathy text
defineFunction("\\text", {
    numArgs: 1,
    argTypes: ["text"],
    greediness: 2,
}, function(context, args) {
    var body = args[0];
    // Since the corresponding buildHTML/buildMathML function expects a
    // list of elements, we normalize for different kinds of arguments
    // TODO(emily): maybe this should be done somewhere else
    var inner;
    if (body.type === "ordgroup") {
        inner = body.value;
    } else {
        inner = [body];
    }

    return {
        type: "text",
        body: inner,
    };
});

// A two-argument custom color
defineFunction("\\color", {
    numArgs: 2,
    allowedInText: true,
    greediness: 3,
    argTypes: ["color", "original"],
}, function(context, args) {
    var color = args[0];
    var body = args[1];
    // Normalize the different kinds of bodies (see \text above)
    var inner;
    if (body.type === "ordgroup") {
        inner = body.value;
    } else {
        inner = [body];
    }

    return {
        type: "color",
        color: color.value,
        value: inner,
    };
});

// An overline
defineFunction("\\overline", {
    numArgs: 1,
}, function(context, args) {
    var body = args[0];
    return {
        type: "overline",
        body: body,
    };
});

// An underline
defineFunction("\\underline", {
    numArgs: 1,
}, function(context, args) {
    var body = args[0];
    return {
        type: "underline",
        body: body,
    };
});

// A box of the width and height
defineFunction("\\rule", {
    numArgs: 2,
    numOptionalArgs: 1,
    argTypes: ["size", "size", "size"],
}, function(context, args) {
    var shift = args[0];
    var width = args[1];
    var height = args[2];
    return {
        type: "rule",
        shift: shift && shift.value,
        width: width.value,
        height: height.value,
    };
});

// A KaTeX logo
defineFunction("\\KaTeX", {
    numArgs: 0,
}, function(context) {
    return {
        type: "katex",
    };
});

defineFunction("\\phantom", {
    numArgs: 1,
}, function(context, args) {
    var body = args[0];
    var inner;
    if (body.type === "ordgroup") {
        inner = body.value;
    } else {
        inner = [body];
    }

    return {
        type: "phantom",
        value: inner,
    };
});

// Extra data needed for the delimiter handler down below
var delimiterSizes = {
    "\\bigl" : {type: "open",    size: 1},
    "\\Bigl" : {type: "open",    size: 2},
    "\\biggl": {type: "open",    size: 3},
    "\\Biggl": {type: "open",    size: 4},
    "\\bigr" : {type: "close",   size: 1},
    "\\Bigr" : {type: "close",   size: 2},
    "\\biggr": {type: "close",   size: 3},
    "\\Biggr": {type: "close",   size: 4},
    "\\bigm" : {type: "rel",     size: 1},
    "\\Bigm" : {type: "rel",     size: 2},
    "\\biggm": {type: "rel",     size: 3},
    "\\Biggm": {type: "rel",     size: 4},
    "\\big"  : {type: "textord", size: 1},
    "\\Big"  : {type: "textord", size: 2},
    "\\bigg" : {type: "textord", size: 3},
    "\\Bigg" : {type: "textord", size: 4},
};

var delimiters = [
    "(", ")", "[", "\\lbrack", "]", "\\rbrack",
    "\\{", "\\lbrace", "\\}", "\\rbrace",
    "\\lfloor", "\\rfloor", "\\lceil", "\\rceil",
    "<", ">", "\\langle", "\\rangle", "\\lt", "\\gt",
    "\\lvert", "\\rvert", "\\lVert", "\\rVert",
    "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache",
    "/", "\\backslash",
    "|", "\\vert", "\\|", "\\Vert",
    "\\uparrow", "\\Uparrow",
    "\\downarrow", "\\Downarrow",
    "\\updownarrow", "\\Updownarrow",
    ".",
];

var fontAliases = {
    "\\Bbb": "\\mathbb",
    "\\bold": "\\mathbf",
    "\\frak": "\\mathfrak",
};

// Single-argument color functions
defineFunction([
    "\\blue", "\\orange", "\\pink", "\\red",
    "\\green", "\\gray", "\\purple",
    "\\blueA", "\\blueB", "\\blueC", "\\blueD", "\\blueE",
    "\\tealA", "\\tealB", "\\tealC", "\\tealD", "\\tealE",
    "\\greenA", "\\greenB", "\\greenC", "\\greenD", "\\greenE",
    "\\goldA", "\\goldB", "\\goldC", "\\goldD", "\\goldE",
    "\\redA", "\\redB", "\\redC", "\\redD", "\\redE",
    "\\maroonA", "\\maroonB", "\\maroonC", "\\maroonD", "\\maroonE",
    "\\purpleA", "\\purpleB", "\\purpleC", "\\purpleD", "\\purpleE",
    "\\mintA", "\\mintB", "\\mintC",
    "\\grayA", "\\grayB", "\\grayC", "\\grayD", "\\grayE",
    "\\grayF", "\\grayG", "\\grayH", "\\grayI",
    "\\kaBlue", "\\kaGreen",
], {
    numArgs: 1,
    allowedInText: true,
    greediness: 3,
}, function(context, args) {
    var body = args[0];
    var atoms;
    if (body.type === "ordgroup") {
        atoms = body.value;
    } else {
        atoms = [body];
    }

    return {
        type: "color",
        color: "katex-" + context.funcName.slice(1),
        value: atoms,
    };
});

// There are 2 flags for operators; whether they produce limits in
// displaystyle, and whether they are symbols and should grow in
// displaystyle. These four groups cover the four possible choices.

// No limits, not symbols
defineFunction([
    "\\arcsin", "\\arccos", "\\arctan", "\\arg", "\\cos", "\\cosh",
    "\\cot", "\\coth", "\\csc", "\\deg", "\\dim", "\\exp", "\\hom",
    "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh",
    "\\tan", "\\tanh",
], {
    numArgs: 0,
}, function(context) {
    return {
        type: "op",
        limits: false,
        symbol: false,
        body: context.funcName,
    };
});

// Limits, not symbols
defineFunction([
    "\\det", "\\gcd", "\\inf", "\\lim", "\\liminf", "\\limsup", "\\max",
    "\\min", "\\Pr", "\\sup",
], {
    numArgs: 0,
}, function(context) {
    return {
        type: "op",
        limits: true,
        symbol: false,
        body: context.funcName,
    };
});

// No limits, symbols
defineFunction([
    "\\int", "\\iint", "\\iiint", "\\oint",
], {
    numArgs: 0,
}, function(context) {
    return {
        type: "op",
        limits: false,
        symbol: true,
        body: context.funcName,
    };
});

// Limits, symbols
defineFunction([
    "\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap",
    "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes",
    "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint",
], {
    numArgs: 0,
}, function(context) {
    return {
        type: "op",
        limits: true,
        symbol: true,
        body: context.funcName,
    };
});

// Fractions
defineFunction([
    "\\dfrac", "\\frac", "\\tfrac",
    "\\dbinom", "\\binom", "\\tbinom",
], {
    numArgs: 2,
    greediness: 2,
}, function(context, args) {
    var numer = args[0];
    var denom = args[1];
    var hasBarLine;
    var leftDelim = null;
    var rightDelim = null;
    var size = "auto";

    switch (context.funcName) {
        case "\\dfrac":
        case "\\frac":
        case "\\tfrac":
            hasBarLine = true;
            break;
        case "\\dbinom":
        case "\\binom":
        case "\\tbinom":
            hasBarLine = false;
            leftDelim = "(";
            rightDelim = ")";
            break;
        default:
            throw new Error("Unrecognized genfrac command");
    }

    switch (context.funcName) {
        case "\\dfrac":
        case "\\dbinom":
            size = "display";
            break;
        case "\\tfrac":
        case "\\tbinom":
            size = "text";
            break;
    }

    return {
        type: "genfrac",
        numer: numer,
        denom: denom,
        hasBarLine: hasBarLine,
        leftDelim: leftDelim,
        rightDelim: rightDelim,
        size: size,
    };
});

// Left and right overlap functions
defineFunction(["\\llap", "\\rlap"], {
    numArgs: 1,
    allowedInText: true,
}, function(context, args) {
    var body = args[0];
    return {
        type: context.funcName.slice(1),
        body: body,
    };
});

// Delimiter functions
defineFunction([
    "\\bigl", "\\Bigl", "\\biggl", "\\Biggl",
    "\\bigr", "\\Bigr", "\\biggr", "\\Biggr",
    "\\bigm", "\\Bigm", "\\biggm", "\\Biggm",
    "\\big",  "\\Big",  "\\bigg",  "\\Bigg",
    "\\left", "\\right",
], {
    numArgs: 1,
}, function(context, args) {
    var delim = args[0];
    if (!utils.contains(delimiters, delim.value)) {
        throw new ParseError(
            "Invalid delimiter: '" + delim.value + "' after '" +
                context.funcName + "'",
            context.lexer, context.positions[1]);
    }

    // \left and \right are caught somewhere in Parser.js, which is
    // why this data doesn't match what is in buildHTML.
    if (context.funcName === "\\left" || context.funcName === "\\right") {
        return {
            type: "leftright",
            value: delim.value,
        };
    } else {
        return {
            type: "delimsizing",
            size: delimiterSizes[context.funcName].size,
            delimType: delimiterSizes[context.funcName].type,
            value: delim.value,
        };
    }
});

// Sizing functions (handled in Parser.js explicitly, hence no handler)
defineFunction([
    "\\tiny", "\\scriptsize", "\\footnotesize", "\\small",
    "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge",
], 0, null);

// Style changing functions (handled in Parser.js explicitly, hence no
// handler)
defineFunction([
    "\\displaystyle", "\\textstyle", "\\scriptstyle",
    "\\scriptscriptstyle",
], 0, null);

defineFunction([
    // styles
    "\\mathrm", "\\mathit", "\\mathbf",

    // families
    "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf",
    "\\mathtt",

    // aliases
    "\\Bbb", "\\bold", "\\frak",
], {
    numArgs: 1,
    greediness: 2,
}, function(context, args) {
    var body = args[0];
    var func = context.funcName;
    if (func in fontAliases) {
        func = fontAliases[func];
    }
    return {
        type: "font",
        font: func.slice(1),
        body: body,
    };
});

// Accents
defineFunction([
    "\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve",
    "\\check", "\\hat", "\\vec", "\\dot",
    // We don't support expanding accents yet
    // "\\widetilde", "\\widehat"
], {
    numArgs: 1,
}, function(context, args) {
    var base = args[0];
    return {
        type: "accent",
        accent: context.funcName,
        base: base,
    };
});

// Infix generalized fractions
defineFunction(["\\over", "\\choose"], {
    numArgs: 0,
}, function(context) {
    var replaceWith;
    switch (context.funcName) {
        case "\\over":
            replaceWith = "\\frac";
            break;
        case "\\choose":
            replaceWith = "\\binom";
            break;
        default:
            throw new Error("Unrecognized infix genfrac command");
    }
    return {
        type: "infix",
        replaceWith: replaceWith,
    };
});

// Row breaks for aligned data
defineFunction(["\\\\", "\\cr"], {
    numArgs: 0,
    numOptionalArgs: 1,
    argTypes: ["size"],
}, function(context, args) {
    var size = args[0];
    return {
        type: "cr",
        size: size,
    };
});

// Environment delimiters
defineFunction(["\\begin", "\\end"], {
    numArgs: 1,
    argTypes: ["text"],
}, function(context, args) {
    var nameGroup = args[0];
    if (nameGroup.type !== "ordgroup") {
        throw new ParseError(
            "Invalid environment name",
            context.lexer, context.positions[1]);
    }
    var name = "";
    for (var i = 0; i < nameGroup.value.length; ++i) {
        name += nameGroup.value[i].value;
    }
    return {
        type: "environment",
        name: name,
        namepos: context.positions[1],
    };
});

},{"./ParseError":149,"./utils":167}],163:[function(require,module,exports){
/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 */

var utils = require("./utils");

/**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */
function MathNode(type, children) {
    this.type = type;
    this.attributes = {};
    this.children = children || [];
}

/**
 * Sets an attribute on a MathML node. MathML depends on attributes to convey a
 * semantic content, so this is used heavily.
 */
MathNode.prototype.setAttribute = function(name, value) {
    this.attributes[name] = value;
};

/**
 * Converts the math node into a MathML-namespaced DOM element.
 */
MathNode.prototype.toNode = function() {
    var node = document.createElementNS(
        "http://www.w3.org/1998/Math/MathML", this.type);

    for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            node.setAttribute(attr, this.attributes[attr]);
        }
    }

    for (var i = 0; i < this.children.length; i++) {
        node.appendChild(this.children[i].toNode());
    }

    return node;
};

/**
 * Converts the math node into an HTML markup string.
 */
MathNode.prototype.toMarkup = function() {
    var markup = "<" + this.type;

    // Add the attributes
    for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
            markup += " " + attr + "=\"";
            markup += utils.escape(this.attributes[attr]);
            markup += "\"";
        }
    }

    markup += ">";

    for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
    }

    markup += "</" + this.type + ">";

    return markup;
};

/**
 * This node represents a piece of text.
 */
function TextNode(text) {
    this.text = text;
}

/**
 * Converts the text node into a DOM text node.
 */
TextNode.prototype.toNode = function() {
    return document.createTextNode(this.text);
};

/**
 * Converts the text node into HTML markup (which is just the text itself).
 */
TextNode.prototype.toMarkup = function() {
    return utils.escape(this.text);
};

module.exports = {
    MathNode: MathNode,
    TextNode: TextNode,
};

},{"./utils":167}],164:[function(require,module,exports){
/**
 * The resulting parse tree nodes of the parse tree.
 */
function ParseNode(type, value, mode) {
    this.type = type;
    this.value = value;
    this.mode = mode;
}

module.exports = {
    ParseNode: ParseNode,
};


},{}],165:[function(require,module,exports){
/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */

var Parser = require("./Parser");

/**
 * Parses an expression using a Parser, then returns the parsed result.
 */
var parseTree = function(toParse, settings) {
    var parser = new Parser(toParse, settings);

    return parser.parse();
};

module.exports = parseTree;

},{"./Parser":150}],166:[function(require,module,exports){
/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
     See https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */

module.exports = {
    math: {},
    text: {},
};

function defineSymbol(mode, font, group, replace, name) {
    module.exports[mode][name] = {
        font: font,
        group: group,
        replace: replace,
    };
}

// Some abbreviations for commonly used strings.
// This helps minify the code, and also spotting typos using jshint.

// modes:
var math = "math";
var text = "text";

// fonts:
var main = "main";
var ams = "ams";

// groups:
var accent = "accent";
var bin = "bin";
var close = "close";
var inner = "inner";
var mathord = "mathord";
var op = "op";
var open = "open";
var punct = "punct";
var rel = "rel";
var spacing = "spacing";
var textord = "textord";

// Now comes the symbol table

// Relation Symbols
defineSymbol(math, main, rel, "\u2261", "\\equiv");
defineSymbol(math, main, rel, "\u227a", "\\prec");
defineSymbol(math, main, rel, "\u227b", "\\succ");
defineSymbol(math, main, rel, "\u223c", "\\sim");
defineSymbol(math, main, rel, "\u22a5", "\\perp");
defineSymbol(math, main, rel, "\u2aaf", "\\preceq");
defineSymbol(math, main, rel, "\u2ab0", "\\succeq");
defineSymbol(math, main, rel, "\u2243", "\\simeq");
defineSymbol(math, main, rel, "\u2223", "\\mid");
defineSymbol(math, main, rel, "\u226a", "\\ll");
defineSymbol(math, main, rel, "\u226b", "\\gg");
defineSymbol(math, main, rel, "\u224d", "\\asymp");
defineSymbol(math, main, rel, "\u2225", "\\parallel");
defineSymbol(math, main, rel, "\u22c8", "\\bowtie");
defineSymbol(math, main, rel, "\u2323", "\\smile");
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq");
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq");
defineSymbol(math, main, rel, "\u2250", "\\doteq");
defineSymbol(math, main, rel, "\u2322", "\\frown");
defineSymbol(math, main, rel, "\u220b", "\\ni");
defineSymbol(math, main, rel, "\u221d", "\\propto");
defineSymbol(math, main, rel, "\u22a2", "\\vdash");
defineSymbol(math, main, rel, "\u22a3", "\\dashv");
defineSymbol(math, main, rel, "\u220b", "\\owns");

// Punctuation
defineSymbol(math, main, punct, "\u002e", "\\ldotp");
defineSymbol(math, main, punct, "\u22c5", "\\cdotp");

// Misc Symbols
defineSymbol(math, main, textord, "\u0023", "\\#");
defineSymbol(math, main, textord, "\u0026", "\\&");
defineSymbol(math, main, textord, "\u2135", "\\aleph");
defineSymbol(math, main, textord, "\u2200", "\\forall");
defineSymbol(math, main, textord, "\u210f", "\\hbar");
defineSymbol(math, main, textord, "\u2203", "\\exists");
defineSymbol(math, main, textord, "\u2207", "\\nabla");
defineSymbol(math, main, textord, "\u266d", "\\flat");
defineSymbol(math, main, textord, "\u2113", "\\ell");
defineSymbol(math, main, textord, "\u266e", "\\natural");
defineSymbol(math, main, textord, "\u2663", "\\clubsuit");
defineSymbol(math, main, textord, "\u2118", "\\wp");
defineSymbol(math, main, textord, "\u266f", "\\sharp");
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit");
defineSymbol(math, main, textord, "\u211c", "\\Re");
defineSymbol(math, main, textord, "\u2661", "\\heartsuit");
defineSymbol(math, main, textord, "\u2111", "\\Im");
defineSymbol(math, main, textord, "\u2660", "\\spadesuit");

// Math and Text
defineSymbol(math, main, textord, "\u2020", "\\dag");
defineSymbol(math, main, textord, "\u2021", "\\ddag");

// Large Delimiters
defineSymbol(math, main, close, "\u23b1", "\\rmoustache");
defineSymbol(math, main, open, "\u23b0", "\\lmoustache");
defineSymbol(math, main, close, "\u27ef", "\\rgroup");
defineSymbol(math, main, open, "\u27ee", "\\lgroup");

// Binary Operators
defineSymbol(math, main, bin, "\u2213", "\\mp");
defineSymbol(math, main, bin, "\u2296", "\\ominus");
defineSymbol(math, main, bin, "\u228e", "\\uplus");
defineSymbol(math, main, bin, "\u2293", "\\sqcap");
defineSymbol(math, main, bin, "\u2217", "\\ast");
defineSymbol(math, main, bin, "\u2294", "\\sqcup");
defineSymbol(math, main, bin, "\u25ef", "\\bigcirc");
defineSymbol(math, main, bin, "\u2219", "\\bullet");
defineSymbol(math, main, bin, "\u2021", "\\ddagger");
defineSymbol(math, main, bin, "\u2240", "\\wr");
defineSymbol(math, main, bin, "\u2a3f", "\\amalg");

// Arrow Symbols
defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow");
defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow");
defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow");
defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow");
defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow");
defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow");
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow");
defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow");
defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow");
defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow");
defineSymbol(math, main, rel, "\u21a6", "\\mapsto");
defineSymbol(math, main, rel, "\u27fc", "\\longmapsto");
defineSymbol(math, main, rel, "\u2197", "\\nearrow");
defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow");
defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow");
defineSymbol(math, main, rel, "\u2198", "\\searrow");
defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup");
defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup");
defineSymbol(math, main, rel, "\u2199", "\\swarrow");
defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown");
defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown");
defineSymbol(math, main, rel, "\u2196", "\\nwarrow");
defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons");

// AMS Negated Binary Relations
defineSymbol(math, ams, rel, "\u226e", "\\nless");
defineSymbol(math, ams, rel, "\ue010", "\\nleqslant");
defineSymbol(math, ams, rel, "\ue011", "\\nleqq");
defineSymbol(math, ams, rel, "\u2a87", "\\lneq");
defineSymbol(math, ams, rel, "\u2268", "\\lneqq");
defineSymbol(math, ams, rel, "\ue00c", "\\lvertneqq");
defineSymbol(math, ams, rel, "\u22e6", "\\lnsim");
defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox");
defineSymbol(math, ams, rel, "\u2280", "\\nprec");
defineSymbol(math, ams, rel, "\u22e0", "\\npreceq");
defineSymbol(math, ams, rel, "\u22e8", "\\precnsim");
defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox");
defineSymbol(math, ams, rel, "\u2241", "\\nsim");
defineSymbol(math, ams, rel, "\ue006", "\\nshortmid");
defineSymbol(math, ams, rel, "\u2224", "\\nmid");
defineSymbol(math, ams, rel, "\u22ac", "\\nvdash");
defineSymbol(math, ams, rel, "\u22ad", "\\nvDash");
defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq");
defineSymbol(math, ams, rel, "\u228a", "\\subsetneq");
defineSymbol(math, ams, rel, "\ue01a", "\\varsubsetneq");
defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq");
defineSymbol(math, ams, rel, "\ue017", "\\varsubsetneqq");
defineSymbol(math, ams, rel, "\u226f", "\\ngtr");
defineSymbol(math, ams, rel, "\ue00f", "\\ngeqslant");
defineSymbol(math, ams, rel, "\ue00e", "\\ngeqq");
defineSymbol(math, ams, rel, "\u2a88", "\\gneq");
defineSymbol(math, ams, rel, "\u2269", "\\gneqq");
defineSymbol(math, ams, rel, "\ue00d", "\\gvertneqq");
defineSymbol(math, ams, rel, "\u22e7", "\\gnsim");
defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox");
defineSymbol(math, ams, rel, "\u2281", "\\nsucc");
defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq");
defineSymbol(math, ams, rel, "\u22e9", "\\succnsim");
defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox");
defineSymbol(math, ams, rel, "\u2246", "\\ncong");
defineSymbol(math, ams, rel, "\ue007", "\\nshortparallel");
defineSymbol(math, ams, rel, "\u2226", "\\nparallel");
defineSymbol(math, ams, rel, "\u22af", "\\nVDash");
defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq");
defineSymbol(math, ams, rel, "\ue018", "\\nsupseteqq");
defineSymbol(math, ams, rel, "\u228b", "\\supsetneq");
defineSymbol(math, ams, rel, "\ue01b", "\\varsupsetneq");
defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq");
defineSymbol(math, ams, rel, "\ue019", "\\varsupsetneqq");
defineSymbol(math, ams, rel, "\u22ae", "\\nVdash");
defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq");
defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq");
defineSymbol(math, ams, rel, "\ue016", "\\nsubseteqq");
defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
defineSymbol(math, ams, bin, "\u22b5", "\\unrhd");

// AMS Negated Arrows
defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow");
defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow");
defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow");
defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow");
defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow");
defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow");

// AMS Misc
defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
defineSymbol(math, ams, textord, "\u210f", "\\hslash");
defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle");
defineSymbol(math, ams, textord, "\u2204", "\\nexists");
defineSymbol(math, ams, textord, "\u2127", "\\mho");
defineSymbol(math, ams, textord, "\u2132", "\\Finv");
defineSymbol(math, ams, textord, "\u2141", "\\Game");
defineSymbol(math, ams, textord, "\u006b", "\\Bbbk");
defineSymbol(math, ams, textord, "\u2035", "\\backprime");
defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle");
defineSymbol(math, ams, textord, "\u2201", "\\complement");
defineSymbol(math, ams, textord, "\u00f0", "\\eth");
defineSymbol(math, ams, textord, "\u2571", "\\diagup");
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
defineSymbol(math, ams, textord, "\u25a1", "\\square");
defineSymbol(math, ams, textord, "\u25a1", "\\Box");
defineSymbol(math, ams, textord, "\u25ca", "\\Diamond");
defineSymbol(math, ams, textord, "\u00a5", "\\yen");
defineSymbol(math, ams, textord, "\u2713", "\\checkmark");

// AMS Hebrew
defineSymbol(math, ams, textord, "\u2136", "\\beth");
defineSymbol(math, ams, textord, "\u2138", "\\daleth");
defineSymbol(math, ams, textord, "\u2137", "\\gimel");

// AMS Greek
defineSymbol(math, ams, textord, "\u03dd", "\\digamma");
defineSymbol(math, ams, textord, "\u03f0", "\\varkappa");

// AMS Delimiters
defineSymbol(math, ams, open, "\u250c", "\\ulcorner");
defineSymbol(math, ams, close, "\u2510", "\\urcorner");
defineSymbol(math, ams, open, "\u2514", "\\llcorner");
defineSymbol(math, ams, close, "\u2518", "\\lrcorner");

// AMS Binary Relations
defineSymbol(math, ams, rel, "\u2266", "\\leqq");
defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant");
defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless");
defineSymbol(math, ams, rel, "\u2272", "\\lesssim");
defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox");
defineSymbol(math, ams, rel, "\u224a", "\\approxeq");
defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
defineSymbol(math, ams, rel, "\u22d8", "\\lll");
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr");
defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr");
defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr");
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq");
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq");
defineSymbol(math, ams, rel, "\u223d", "\\backsim");
defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq");
defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq");
defineSymbol(math, ams, rel, "\u22d0", "\\Subset");
defineSymbol(math, ams, rel, "\u228f", "\\sqsubset");
defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq");
defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec");
defineSymbol(math, ams, rel, "\u227e", "\\precsim");
defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox");
defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
defineSymbol(math, ams, rel, "\u22a8", "\\vDash");
defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash");
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
defineSymbol(math, ams, rel, "\u224f", "\\bumpeq");
defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq");
defineSymbol(math, ams, rel, "\u2267", "\\geqq");
defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant");
defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr");
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim");
defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox");
defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
defineSymbol(math, ams, rel, "\u22d9", "\\ggg");
defineSymbol(math, ams, rel, "\u2277", "\\gtrless");
defineSymbol(math, ams, rel, "\u22db", "\\gtreqless");
defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless");
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc");
defineSymbol(math, ams, rel, "\u2257", "\\circeq");
defineSymbol(math, ams, rel, "\u225c", "\\triangleq");
defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq");
defineSymbol(math, ams, rel, "\u22d1", "\\Supset");
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset");
defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq");
defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc");
defineSymbol(math, ams, rel, "\u227f", "\\succsim");
defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox");
defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
defineSymbol(math, ams, rel, "\u22a9", "\\Vdash");
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
defineSymbol(math, ams, rel, "\u226c", "\\between");
defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork");
defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft");
defineSymbol(math, ams, rel, "\u2234", "\\therefore");
defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright");
defineSymbol(math, ams, rel, "\u2235", "\\because");
defineSymbol(math, ams, rel, "\u22d8", "\\llless");
defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
defineSymbol(math, ams, rel, "\u2242", "\\eqsim");
defineSymbol(math, main, rel, "\u22c8", "\\Join");
defineSymbol(math, ams, rel, "\u2251", "\\Doteq");

// AMS Binary Operators
defineSymbol(math, ams, bin, "\u2214", "\\dotplus");
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, ams, bin, "\u22d2", "\\Cap");
defineSymbol(math, ams, bin, "\u22d3", "\\Cup");
defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge");
defineSymbol(math, ams, bin, "\u229f", "\\boxminus");
defineSymbol(math, ams, bin, "\u229e", "\\boxplus");
defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes");
defineSymbol(math, ams, bin, "\u22c9", "\\ltimes");
defineSymbol(math, ams, bin, "\u22ca", "\\rtimes");
defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes");
defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes");
defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge");
defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee");
defineSymbol(math, ams, bin, "\u229d", "\\circleddash");
defineSymbol(math, ams, bin, "\u229b", "\\circledast");
defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
defineSymbol(math, ams, bin, "\u22ba", "\\intercal");
defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes");

// AMS Arrows
defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow");
defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow");
defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows");
defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows");
defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow");
defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow");
defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail");
defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft");
defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons");
defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft");
defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft");
defineSymbol(math, ams, rel, "\u21b0", "\\Lsh");
defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows");
defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft");
defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft");
defineSymbol(math, ams, rel, "\u22b8", "\\multimap");
defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow");
defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows");
defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows");
defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow");
defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail");
defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright");
defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright");
defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright");
defineSymbol(math, ams, rel, "\u21b1", "\\Rsh");
defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows");
defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright");
defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright");
defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow");
defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow");
defineSymbol(math, ams, rel, "\u21be", "\\restriction");

defineSymbol(math, main, textord, "\u2018", "`");
defineSymbol(math, main, textord, "$", "\\$");
defineSymbol(math, main, textord, "%", "\\%");
defineSymbol(math, main, textord, "_", "\\_");
defineSymbol(math, main, textord, "\u2220", "\\angle");
defineSymbol(math, main, textord, "\u221e", "\\infty");
defineSymbol(math, main, textord, "\u2032", "\\prime");
defineSymbol(math, main, textord, "\u25b3", "\\triangle");
defineSymbol(math, main, textord, "\u0393", "\\Gamma");
defineSymbol(math, main, textord, "\u0394", "\\Delta");
defineSymbol(math, main, textord, "\u0398", "\\Theta");
defineSymbol(math, main, textord, "\u039b", "\\Lambda");
defineSymbol(math, main, textord, "\u039e", "\\Xi");
defineSymbol(math, main, textord, "\u03a0", "\\Pi");
defineSymbol(math, main, textord, "\u03a3", "\\Sigma");
defineSymbol(math, main, textord, "\u03a5", "\\Upsilon");
defineSymbol(math, main, textord, "\u03a6", "\\Phi");
defineSymbol(math, main, textord, "\u03a8", "\\Psi");
defineSymbol(math, main, textord, "\u03a9", "\\Omega");
defineSymbol(math, main, textord, "\u00ac", "\\neg");
defineSymbol(math, main, textord, "\u00ac", "\\lnot");
defineSymbol(math, main, textord, "\u22a4", "\\top");
defineSymbol(math, main, textord, "\u22a5", "\\bot");
defineSymbol(math, main, textord, "\u2205", "\\emptyset");
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
defineSymbol(math, main, mathord, "\u03b1", "\\alpha");
defineSymbol(math, main, mathord, "\u03b2", "\\beta");
defineSymbol(math, main, mathord, "\u03b3", "\\gamma");
defineSymbol(math, main, mathord, "\u03b4", "\\delta");
defineSymbol(math, main, mathord, "\u03f5", "\\epsilon");
defineSymbol(math, main, mathord, "\u03b6", "\\zeta");
defineSymbol(math, main, mathord, "\u03b7", "\\eta");
defineSymbol(math, main, mathord, "\u03b8", "\\theta");
defineSymbol(math, main, mathord, "\u03b9", "\\iota");
defineSymbol(math, main, mathord, "\u03ba", "\\kappa");
defineSymbol(math, main, mathord, "\u03bb", "\\lambda");
defineSymbol(math, main, mathord, "\u03bc", "\\mu");
defineSymbol(math, main, mathord, "\u03bd", "\\nu");
defineSymbol(math, main, mathord, "\u03be", "\\xi");
defineSymbol(math, main, mathord, "o", "\\omicron");
defineSymbol(math, main, mathord, "\u03c0", "\\pi");
defineSymbol(math, main, mathord, "\u03c1", "\\rho");
defineSymbol(math, main, mathord, "\u03c3", "\\sigma");
defineSymbol(math, main, mathord, "\u03c4", "\\tau");
defineSymbol(math, main, mathord, "\u03c5", "\\upsilon");
defineSymbol(math, main, mathord, "\u03d5", "\\phi");
defineSymbol(math, main, mathord, "\u03c7", "\\chi");
defineSymbol(math, main, mathord, "\u03c8", "\\psi");
defineSymbol(math, main, mathord, "\u03c9", "\\omega");
defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon");
defineSymbol(math, main, mathord, "\u03d1", "\\vartheta");
defineSymbol(math, main, mathord, "\u03d6", "\\varpi");
defineSymbol(math, main, mathord, "\u03f1", "\\varrho");
defineSymbol(math, main, mathord, "\u03c2", "\\varsigma");
defineSymbol(math, main, mathord, "\u03c6", "\\varphi");
defineSymbol(math, main, bin, "\u2217", "*");
defineSymbol(math, main, bin, "+", "+");
defineSymbol(math, main, bin, "\u2212", "-");
defineSymbol(math, main, bin, "\u22c5", "\\cdot");
defineSymbol(math, main, bin, "\u2218", "\\circ");
defineSymbol(math, main, bin, "\u00f7", "\\div");
defineSymbol(math, main, bin, "\u00b1", "\\pm");
defineSymbol(math, main, bin, "\u00d7", "\\times");
defineSymbol(math, main, bin, "\u2229", "\\cap");
defineSymbol(math, main, bin, "\u222a", "\\cup");
defineSymbol(math, main, bin, "\u2216", "\\setminus");
defineSymbol(math, main, bin, "\u2227", "\\land");
defineSymbol(math, main, bin, "\u2228", "\\lor");
defineSymbol(math, main, bin, "\u2227", "\\wedge");
defineSymbol(math, main, bin, "\u2228", "\\vee");
defineSymbol(math, main, textord, "\u221a", "\\surd");
defineSymbol(math, main, open, "(", "(");
defineSymbol(math, main, open, "[", "[");
defineSymbol(math, main, open, "\u27e8", "\\langle");
defineSymbol(math, main, open, "\u2223", "\\lvert");
defineSymbol(math, main, open, "\u2225", "\\lVert");
defineSymbol(math, main, close, ")", ")");
defineSymbol(math, main, close, "]", "]");
defineSymbol(math, main, close, "?", "?");
defineSymbol(math, main, close, "!", "!");
defineSymbol(math, main, close, "\u27e9", "\\rangle");
defineSymbol(math, main, close, "\u2223", "\\rvert");
defineSymbol(math, main, close, "\u2225", "\\rVert");
defineSymbol(math, main, rel, "=", "=");
defineSymbol(math, main, rel, "<", "<");
defineSymbol(math, main, rel, ">", ">");
defineSymbol(math, main, rel, ":", ":");
defineSymbol(math, main, rel, "\u2248", "\\approx");
defineSymbol(math, main, rel, "\u2245", "\\cong");
defineSymbol(math, main, rel, "\u2265", "\\ge");
defineSymbol(math, main, rel, "\u2265", "\\geq");
defineSymbol(math, main, rel, "\u2190", "\\gets");
defineSymbol(math, main, rel, ">", "\\gt");
defineSymbol(math, main, rel, "\u2208", "\\in");
defineSymbol(math, main, rel, "\u2209", "\\notin");
defineSymbol(math, main, rel, "\u2282", "\\subset");
defineSymbol(math, main, rel, "\u2283", "\\supset");
defineSymbol(math, main, rel, "\u2286", "\\subseteq");
defineSymbol(math, main, rel, "\u2287", "\\supseteq");
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq");
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq");
defineSymbol(math, main, rel, "\u22a8", "\\models");
defineSymbol(math, main, rel, "\u2190", "\\leftarrow");
defineSymbol(math, main, rel, "\u2264", "\\le");
defineSymbol(math, main, rel, "\u2264", "\\leq");
defineSymbol(math, main, rel, "<", "\\lt");
defineSymbol(math, main, rel, "\u2260", "\\ne");
defineSymbol(math, main, rel, "\u2260", "\\neq");
defineSymbol(math, main, rel, "\u2192", "\\rightarrow");
defineSymbol(math, main, rel, "\u2192", "\\to");
defineSymbol(math, ams, rel, "\u2271", "\\ngeq");
defineSymbol(math, ams, rel, "\u2270", "\\nleq");
defineSymbol(math, main, spacing, null, "\\!");
defineSymbol(math, main, spacing, "\u00a0", "\\ ");
defineSymbol(math, main, spacing, "\u00a0", "~");
defineSymbol(math, main, spacing, null, "\\,");
defineSymbol(math, main, spacing, null, "\\:");
defineSymbol(math, main, spacing, null, "\\;");
defineSymbol(math, main, spacing, null, "\\enspace");
defineSymbol(math, main, spacing, null, "\\qquad");
defineSymbol(math, main, spacing, null, "\\quad");
defineSymbol(math, main, spacing, "\u00a0", "\\space");
defineSymbol(math, main, punct, ",", ",");
defineSymbol(math, main, punct, ";", ";");
defineSymbol(math, main, punct, ":", "\\colon");
defineSymbol(math, ams, bin, "\u22bc", "\\barwedge");
defineSymbol(math, ams, bin, "\u22bb", "\\veebar");
defineSymbol(math, main, bin, "\u2299", "\\odot");
defineSymbol(math, main, bin, "\u2295", "\\oplus");
defineSymbol(math, main, bin, "\u2297", "\\otimes");
defineSymbol(math, main, textord, "\u2202", "\\partial");
defineSymbol(math, main, bin, "\u2298", "\\oslash");
defineSymbol(math, ams, bin, "\u229a", "\\circledcirc");
defineSymbol(math, ams, bin, "\u22a1", "\\boxdot");
defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");
defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");
defineSymbol(math, main, bin, "\u2020", "\\dagger");
defineSymbol(math, main, bin, "\u22c4", "\\diamond");
defineSymbol(math, main, bin, "\u22c6", "\\star");
defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");
defineSymbol(math, main, bin, "\u25b9", "\\triangleright");
defineSymbol(math, main, open, "{", "\\{");
defineSymbol(math, main, close, "}", "\\}");
defineSymbol(math, main, open, "{", "\\lbrace");
defineSymbol(math, main, close, "}", "\\rbrace");
defineSymbol(math, main, open, "[", "\\lbrack");
defineSymbol(math, main, close, "]", "\\rbrack");
defineSymbol(math, main, open, "\u230a", "\\lfloor");
defineSymbol(math, main, close, "\u230b", "\\rfloor");
defineSymbol(math, main, open, "\u2308", "\\lceil");
defineSymbol(math, main, close, "\u2309", "\\rceil");
defineSymbol(math, main, textord, "\\", "\\backslash");
defineSymbol(math, main, textord, "\u2223", "|");
defineSymbol(math, main, textord, "\u2223", "\\vert");
defineSymbol(math, main, textord, "\u2225", "\\|");
defineSymbol(math, main, textord, "\u2225", "\\Vert");
defineSymbol(math, main, rel, "\u2191", "\\uparrow");
defineSymbol(math, main, rel, "\u21d1", "\\Uparrow");
defineSymbol(math, main, rel, "\u2193", "\\downarrow");
defineSymbol(math, main, rel, "\u21d3", "\\Downarrow");
defineSymbol(math, main, rel, "\u2195", "\\updownarrow");
defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow");
defineSymbol(math, math, op, "\u2210", "\\coprod");
defineSymbol(math, math, op, "\u22c1", "\\bigvee");
defineSymbol(math, math, op, "\u22c0", "\\bigwedge");
defineSymbol(math, math, op, "\u2a04", "\\biguplus");
defineSymbol(math, math, op, "\u22c2", "\\bigcap");
defineSymbol(math, math, op, "\u22c3", "\\bigcup");
defineSymbol(math, math, op, "\u222b", "\\int");
defineSymbol(math, math, op, "\u222b", "\\intop");
defineSymbol(math, math, op, "\u222c", "\\iint");
defineSymbol(math, math, op, "\u222d", "\\iiint");
defineSymbol(math, math, op, "\u220f", "\\prod");
defineSymbol(math, math, op, "\u2211", "\\sum");
defineSymbol(math, math, op, "\u2a02", "\\bigotimes");
defineSymbol(math, math, op, "\u2a01", "\\bigoplus");
defineSymbol(math, math, op, "\u2a00", "\\bigodot");
defineSymbol(math, math, op, "\u222e", "\\oint");
defineSymbol(math, math, op, "\u2a06", "\\bigsqcup");
defineSymbol(math, math, op, "\u222b", "\\smallint");
defineSymbol(math, main, inner, "\u2026", "\\ldots");
defineSymbol(math, main, inner, "\u22ef", "\\cdots");
defineSymbol(math, main, inner, "\u22f1", "\\ddots");
defineSymbol(math, main, textord, "\u22ee", "\\vdots");
defineSymbol(math, main, accent, "\u00b4", "\\acute");
defineSymbol(math, main, accent, "\u0060", "\\grave");
defineSymbol(math, main, accent, "\u00a8", "\\ddot");
defineSymbol(math, main, accent, "\u007e", "\\tilde");
defineSymbol(math, main, accent, "\u00af", "\\bar");
defineSymbol(math, main, accent, "\u02d8", "\\breve");
defineSymbol(math, main, accent, "\u02c7", "\\check");
defineSymbol(math, main, accent, "\u005e", "\\hat");
defineSymbol(math, main, accent, "\u20d7", "\\vec");
defineSymbol(math, main, accent, "\u02d9", "\\dot");
defineSymbol(math, main, mathord, "\u0131", "\\imath");
defineSymbol(math, main, mathord, "\u0237", "\\jmath");

defineSymbol(text, main, spacing, "\u00a0", "\\ ");
defineSymbol(text, main, spacing, "\u00a0", " ");
defineSymbol(text, main, spacing, "\u00a0", "~");

// There are lots of symbols which are the same, so we add them in afterwards.
var i;
var ch;

// All of these are textords in math mode
var mathTextSymbols = "0123456789/@.\"";
for (i = 0; i < mathTextSymbols.length; i++) {
    ch = mathTextSymbols.charAt(i);
    defineSymbol(math, main, textord, ch, ch);
}

// All of these are textords in text mode
var textSymbols = "0123456789`!@*()-=+[]'\";:?/.,";
for (i = 0; i < textSymbols.length; i++) {
    ch = textSymbols.charAt(i);
    defineSymbol(text, main, textord, ch, ch);
}

// All of these are textords in text mode, and mathords in math mode
var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
for (i = 0; i < letters.length; i++) {
    ch = letters.charAt(i);
    defineSymbol(math, main, mathord, ch, ch);
    defineSymbol(text, main, textord, ch, ch);
}

},{}],167:[function(require,module,exports){
/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * Provide an `indexOf` function which works in IE8, but defers to native if
 * possible.
 */
var nativeIndexOf = Array.prototype.indexOf;
var indexOf = function(list, elem) {
    if (list == null) {
        return -1;
    }
    if (nativeIndexOf && list.indexOf === nativeIndexOf) {
        return list.indexOf(elem);
    }
    var i = 0;
    var l = list.length;
    for (; i < l; i++) {
        if (list[i] === elem) {
            return i;
        }
    }
    return -1;
};

/**
 * Return whether an element is contained in a list
 */
var contains = function(list, elem) {
    return indexOf(list, elem) !== -1;
};

/**
 * Provide a default value if a setting is undefined
 */
var deflt = function(setting, defaultIfUndefined) {
    return setting === undefined ? defaultIfUndefined : setting;
};

// hyphenate and escape adapted from Facebook's React under Apache 2 license

var uppercase = /([A-Z])/g;
var hyphenate = function(str) {
    return str.replace(uppercase, "-$1").toLowerCase();
};

var ESCAPE_LOOKUP = {
    "&": "&amp;",
    ">": "&gt;",
    "<": "&lt;",
    "\"": "&quot;",
    "'": "&#x27;",
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
    return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escape(text) {
    return ("" + text).replace(ESCAPE_REGEX, escaper);
}

/**
 * A function to set the text content of a DOM element in all supported
 * browsers. Note that we don't define this if there is no document.
 */
var setTextContent;
if (typeof document !== "undefined") {
    var testNode = document.createElement("span");
    if ("textContent" in testNode) {
        setTextContent = function(node, text) {
            node.textContent = text;
        };
    } else {
        setTextContent = function(node, text) {
            node.innerText = text;
        };
    }
}

/**
 * A function to clear a node.
 */
function clearNode(node) {
    setTextContent(node, "");
}

module.exports = {
    contains: contains,
    deflt: deflt,
    escape: escape,
    hyphenate: hyphenate,
    indexOf: indexOf,
    setTextContent: setTextContent,
    clearNode: clearNode,
};

},{}],168:[function(require,module,exports){
/** @flow */

"use strict";

function getRelocatable(re) {
  // In the future, this could use a WeakMap instead of an expando.
  if (!re.__matchAtRelocatable) {
    // Disjunctions are the lowest-precedence operator, so we can make any
    // pattern match the empty string by appending `|()` to it:
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns
    var source = re.source + "|()";

    // We always make the new regex global.
    var flags = "g" + (re.ignoreCase ? "i" : "") + (re.multiline ? "m" : "") + (re.unicode ? "u" : "")
    // sticky (/.../y) doesn't make sense in conjunction with our relocation
    // logic, so we ignore it here.
    ;

    re.__matchAtRelocatable = new RegExp(source, flags);
  }
  return re.__matchAtRelocatable;
}

function matchAt(re, str, pos) {
  if (re.global || re.sticky) {
    throw new Error("matchAt(...): Only non-global regexes are supported");
  }
  var reloc = getRelocatable(re);
  reloc.lastIndex = pos;
  var match = reloc.exec(str);
  // Last capturing group is our sentinel that indicates whether the regex
  // matched at the given location.
  if (match[match.length - 1] == null) {
    // Original regex matched.
    match.length = match.length - 1;
    return match;
  } else {
    return null;
  }
}

module.exports = matchAt;
},{}],169:[function(require,module,exports){
(function () {
function Rule(name, symbols, postprocess) {
    this.name = name;
    this.symbols = symbols;        // a list of literal | regex class | nonterminal
    this.postprocess = postprocess;
    return this;
}

Rule.prototype.toString = function(withCursorAt) {
    function stringifySymbolSequence (e) {
        return (e.literal) ? JSON.stringify(e.literal)
                           : e.toString();
    }
    var symbolSequence = (typeof withCursorAt === "undefined")
                         ? this.symbols.map(stringifySymbolSequence).join(' ')
                         : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')
                             + " ● "
                             + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );
    return this.name + " → " + symbolSequence;
}


// a State is a rule at a position from a given starting point in the input stream (reference)
function State(rule, expect, reference) {
    this.rule = rule;
    this.expect = expect;
    this.reference = reference;
    this.data = [];
}

State.prototype.toString = function() {
    return "{" + this.rule.toString(this.expect) + "}, from: " + (this.reference || 0);
};

State.prototype.nextState = function(data) {
    var state = new State(this.rule, this.expect + 1, this.reference);
    state.data = this.data.slice(0);  // make a cheap copy of currentState's data
    state.data.push(data);            // append the passed data
    return state;
};

State.prototype.consumeTerminal = function(inp) {
    var val = false;
    if (this.rule.symbols[this.expect]) {                  // is there a symbol to test?
       if (this.rule.symbols[this.expect].test) {          // is the symbol a regex?
          if (this.rule.symbols[this.expect].test(inp)) {  // does the regex match
             val = this.nextState(inp);  // nextState on a successful regex match
          }
       } else {   // not a regex, must be a literal
          if (this.rule.symbols[this.expect].literal === inp) {
             val = this.nextState(inp);  // nextState on a successful literal match
          }
       }
    }
    return val;
};

State.prototype.consumeNonTerminal = function(inp) {
    if (this.rule.symbols[this.expect] === inp) {
        return this.nextState(inp);
    }
    return false;
};

State.prototype.process = function(location, ind, table, rules, addedRules) {
    if (this.expect === this.rule.symbols.length) {
        // I have completed a rule
        if (this.rule.postprocess) {
            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
        }
        if (!(this.data === Parser.fail)) {
            var findLeo;
            // LEO THE LION SAYS GER
            findLeo = function findLeo(idx, rulename, finalData) {
                // performance optimization, avoid high order functions(map/filter) in hotspot code.
                var items = [];
                var row = table[idx];
                for (var col = 0; col < row.length; col++) {
                    var s = row[col].consumeNonTerminal(rulename);
                    if (s && s.isComplete() && s.rule.name === rulename) {
                        items.push(s);
                    }
                }
                if (items.length === 1) {
                    var item = items[0];
                    item.data[item.data.length-1] = finalData;
                    if (item.reference === idx) {
                        return item;
                    }
                    var newdata = item.data;
                    if (item.rule.postprocess) {
                        newdata = item.rule.postprocess(item.data, item.reference, Parser.fail);
                    }
                    if (newdata === Parser.fail) {
                        return false;
                    }
                    return findLeo(item.reference, item.rule.name, newdata) || item;
                } else {
                    return false;
                }
            };

            var leo = findLeo(this.reference, this.rule.name, this.data);
            if (leo) {
                leo.epsilonClosure(location, ind, table);
                return;
            }

            var w = 0;
            // We need a while here because the empty rule will
            // modify table[reference]. (when location === reference)
            var s,x;
            while (w < table[this.reference].length) {
                s = table[this.reference][w];
                x = s.consumeNonTerminal(this.rule.name);
                if (x && !(leo && x.isComplete())) { // ignore leo-ey terms
                    x.data[x.data.length-1] = this.data;
                    x.epsilonClosure(location, ind, table);
                }
                w++;
            }

            // --- The comment below is OUTDATED. It's left so that future
            // editors know not to try and do that.

            // Remove this rule from "addedRules" so that another one can be
            // added if some future added rule requires it.
            // Note: I can be optimized by someone clever and not-lazy. Somehow
            // queue rules so that everything that this completion "spawns" can
            // affect the rest of the rules yet-to-be-added-to-the-table.
            // Maybe.

            // I repeat, this is a *bad* idea.

            // var i = addedRules.indexOf(this.rule);
            // if (i !== -1) {
            //     addedRules.splice(i, 1);
            // }
        }
    } else {
        // I'm not done, but I can predict something
        var exp = this.rule.symbols[this.expect];

        // for each rule
        // implemented as for instead of forEach for performance
        for(var rule = 0; rule < rules.length; ++rule) {
            var r = rules[rule];
            // if I expect it, and it hasn't been added already
            if (r.name === exp && addedRules.indexOf(r) === -1) {
                // Make a note that you've added it already, and don't need to
                // add it again; otherwise left recursive rules are going to go
                // into an infinite loop by adding themselves over and over
                // again.

                // If it's the null rule, however, you don't do this because it
                // affects the current table row, so you might need it to be
                // called again later. Instead, I just insert a copy whose
                // state has been advanced one position (since that's all the
                // null rule means anyway)

                if (r.symbols.length > 0) {
                    addedRules.push(r);
                    new State(r, 0, location).epsilonClosure(location, ind, table);
                } else {
                    // Empty rule
                    // This is special
                    var copy = this.consumeNonTerminal(r.name);
                    if (r.postprocess) {
                        copy.data[copy.data.length-1] = r.postprocess([], this.reference);
                    } else {
                        copy.data[copy.data.length-1] = [];
                    }
                    copy.epsilonClosure(location, ind, table);
                }
            }
        }
    }
};

State.prototype.isComplete = function() {
    return this.expect === this.rule.symbols.length;
}

/**
 * Computes all possible epsilon-steps from the current state at
 * given location. States 0 through ind-1 in location are considered
 * for possible nullables.
 */
State.prototype.epsilonClosure = function(location, ind, table, result) {
    var col = table[location];
    if (!result) result = table[location]; // convenient common case

    result.push(this);

    if (!this.isComplete()) {
        for (var i = 0; i < ind; i++) {
            var state = col[i];
            if (state.isComplete() && state.reference === location) {
                var x = this.consumeNonTerminal(state.rule.name);
                if (x) {
                    x.data[x.data.length-1] = state.data;
                    x.epsilonClosure(location, ind, table);
                }
            }
        }
    }
}


function Parser(rules, start) {
    var table = this.table = [];
    this.rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });
    this.start = start = start || this.rules[0].name;
    // Setup a table
    var addedRules = [];
    this.table.push([]);
    // I could be expecting anything.
    this.rules.forEach(function (r) {
        if (r.name === start) {  // add all rules named start
            addedRules.push(r);
            table[0].push(new State(r, 0, 0));
        }});  // this should refer to this object, not each rule inside the forEach
    this.advanceTo(0, addedRules);
    this.current = 0;
}

// create a reserved token for indicating a parse fail
Parser.fail = {};

Parser.prototype.advanceTo = function(n, addedRules) {
    // Advance a table, take the closure of .process for location n in the input stream
    var w = 0;
    while (w < this.table[n].length) {
        (this.table[n][w]).process(n, w, this.table, this.rules, addedRules);
        w++;
    }
}

Parser.prototype.feed = function(chunk) {
    for (var chunkPos = 0; chunkPos < chunk.length; chunkPos++) {
        // We add new states to table[current+1]
        this.table.push([]);

        // Advance all tokens that expect the symbol
        // So for each state in the previous row,

        for (var w = 0; w < this.table[this.current + chunkPos].length; w++) {
            var s = this.table[this.current + chunkPos][w];
            var x = s.consumeTerminal(chunk[chunkPos]);      // Try to consume the token
            if (x) {
                // And then add it
                this.table[this.current + chunkPos + 1].push(x);
            }
        }

        // Next, for each of the rules, we either
        // (a) complete it, and try to see if the reference row expected that
        //     rule
        // (b) predict the next nonterminal it expects by adding that
        //     nonterminal's start state
        // To prevent duplication, we also keep track of rules we have already
        // added

        var addedRules = [];
        this.advanceTo(this.current + chunkPos + 1, addedRules);

        // If needed, throw an error:
        if (this.table[this.table.length-1].length === 0) {
            // No states at all! This is not good.
            var err = new Error(
                "nearley: No possible parsings (@" + (this.current + chunkPos)
                    + ": '" + chunk[chunkPos] + "')."
            );
            err.offset = this.current + chunkPos;
            throw err;
        }
    }

    this.current += chunkPos;
    // Incrementally keep track of results
    this.results = this.finish();

    // Allow chaining, for whatever it's worth
    return this;
};

Parser.prototype.finish = function() {
    // Return the possible parsings
    var considerations = [];
    var myself = this;
    this.table[this.table.length-1].forEach(function (t) {
        if (t.rule.name === myself.start
                && t.expect === t.rule.symbols.length
                && t.reference === 0
                && t.data !== Parser.fail) {
            considerations.push(t);
        }
    });
    return considerations.map(function(c) {return c.data; });
};

var nearley = {
    Parser: Parser,
    Rule: Rule
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
   module.exports = nearley;
} else {
   window.nearley = nearley;
}
})();

},{}],170:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LayoutApplier = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _matchesSelector = require("./matches-selector");

var _cutContent = require("./cut-content");

var _pageCounters = require("./page-counters");

var _createToc = require("./create-toc");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LayoutApplier = exports.LayoutApplier = function () {
    function LayoutApplier(config) {
        _classCallCheck(this, LayoutApplier);

        this.config = config;
        this.bodyFlowObjects = [];
        //this.currentChapter = false
        //this.currentSection = false
        this.currentFragment = -1;

        /* pageCounters contains all the page counters we use in a book --
         * typically these are two -- roman for the frontmatter and arab for the main
         * body contents.
         */
        this.pageCounters = {
            arab: new _pageCounters.PageCounterArab(),
            roman: new _pageCounters.PageCounterRoman()
        };

        this.cutter = new _cutContent.ContentCutter(this.config);
    }

    _createClass(LayoutApplier, [{
        key: "initiate",
        value: function initiate() {
            // Create div for layout
            var layoutDiv = document.createElement('div'),
                flowedElement = this.config['flowFromElement'] ? this.config['flowFromElement'] : document.body,
                chapterStartSelector = this.config['chapterStartSelector'],
                sectionStartSelector = this.config['sectionStartSelector'],
                dividerSelector = chapterStartSelector + ',' + sectionStartSelector,
                dividers = flowedElement.querySelectorAll(dividerSelector),
                range = document.createRange(),
                nextChapter = false,
                nextSection = false,
                flowTo = this.config['flowToElement'] ? this.config['flowToElement'] : document.body;

            layoutDiv.id = 'pagination-layout';
            for (var i = 0; i < dividers.length; i++) {
                var _flowObject = {
                    chapter: false,
                    section: false
                };
                if (nextChapter) {
                    _flowObject.chapter = nextChapter;
                    nextChapter = false;
                }
                if (nextSection) {
                    _flowObject.section = nextSection;
                    nextSection = false;
                }
                range.setStart(flowedElement.firstChild, 0);
                range.setEnd(dividers[i], 0);
                _flowObject.fragment = range.extractContents();
                this.bodyFlowObjects.push(_flowObject);

                var extraElement = _flowObject.fragment.querySelectorAll(dividerSelector)[1];
                if (extraElement && extraElement.parentElement) {
                    extraElement.parentElement.removeChild(extraElement);
                }
                if ((0, _matchesSelector.matchesSelector)(dividers[i], chapterStartSelector)) {
                    var tempNode = flowedElement.querySelector(this.config['chapterTitleSelector']);
                    if (!tempNode) {
                        tempNode = document.createElement('div');
                    }
                    tempNode = tempNode.cloneNode(true);
                    nextChapter = document.createDocumentFragment();
                    while (tempNode.firstChild) {
                        nextChapter.appendChild(tempNode.firstChild);
                    }
                } else {
                    var _tempNode = flowedElement.querySelector(this.config['sectionTitleSelector']).cloneNode(true);
                    nextSection = document.createDocumentFragment();
                    while (_tempNode.firstChild) {
                        nextSection.appendChild(_tempNode.firstChild);
                    }
                }

                if (i === 0) {
                    if (_flowObject.fragment.textContent.trim().length === 0 && _flowObject.fragment.querySelectorAll('img,svg,canvas,hr').length === 0) {
                        this.bodyFlowObjects.pop();
                    }
                }
            }

            var flowObject = {
                chapter: false,
                section: false
            };
            if (nextChapter) {
                flowObject.chapter = nextChapter;
            }
            if (nextSection) {
                flowObject.section = nextSection;
            }

            flowObject.fragment = document.createDocumentFragment();

            while (flowedElement.firstChild) {
                flowObject.fragment.appendChild(flowedElement.firstChild);
            }

            this.bodyFlowObjects.push(flowObject);

            flowTo.appendChild(layoutDiv);

            this.paginateDivision(layoutDiv, 'arab');
        }
    }, {
        key: "paginateDivision",
        value: function paginateDivision(layoutDiv, pageCounterStyle) {
            if (++this.currentFragment < this.bodyFlowObjects.length) {
                var newContainer = document.createElement('div');
                layoutDiv.appendChild(newContainer);
                newContainer.classList.add('pagination-body');
                newContainer.classList.add('pagination-body-' + this.currentFragment);
                if (this.bodyFlowObjects[this.currentFragment].section) {
                    this.currentSection = this.bodyFlowObjects[this.currentFragment].section;
                    newContainer.classList.add('pagination-section');
                }
                if (this.bodyFlowObjects[this.currentFragment].chapter) {
                    this.currentChapter = this.bodyFlowObjects[this.currentFragment].chapter;
                    newContainer.classList.add('pagination-chapter');
                }
                this.flowElement(this.bodyFlowObjects[this.currentFragment].fragment, newContainer, pageCounterStyle, this.bodyFlowObjects[this.currentFragment].section, this.bodyFlowObjects[this.currentFragment].chapter);
            } else {
                this.currentChapter = false;
                this.currentSection = false;
                this.pageCounters[pageCounterStyle].numberPages();
                if (this.config['enableFrontmatter']) {
                    layoutDiv.insertBefore(document.createElement('div'), layoutDiv.firstChild);
                    layoutDiv.firstChild.classList.add('pagination-frontmatter');
                    var flowObject = {
                        fragment: document.createDocumentFragment()
                    };
                    if (this.config['frontmatterFlowFromElement']) {
                        var fmNode = this.config['frontmatterFlowFromElement'];
                        while (fmNode.firstChild) {
                            flowObject.fragment.appendChild(fmNode.firstChild);
                        }
                    }
                    if (this.config['numberPages']) {
                        flowObject.fragment.appendChild((0, _createToc.createToc)());
                    }
                    this.flowElement(flowObject.fragment, layoutDiv.firstChild, 'roman');
                }
            }
        }
    }, {
        key: "fillPage",
        value: function fillPage(node, container, pageCounterStyle) {

            var lastPage = this.createPage(container, pageCounterStyle),
                clonedNode = node.cloneNode(true),
                footnoteSelector = this.config['footnoteSelector'],
                topfloatSelector = this.config['topfloatSelector'],
                that = this;

            lastPage.appendChild(node);

            var overflow = this.cutter.cutToFit(lastPage);

            var topfloatsLength = lastPage.querySelectorAll(topfloatSelector).length;

            if (topfloatsLength > 0) {
                var topfloats = clonedNode.querySelectorAll(topfloatSelector);

                for (var i = 0; i < topfloatsLength; i++) {
                    while (topfloats[i].firstChild) {
                        lastPage.previousSibling.appendChild(topfloats[i].firstChild);
                    }
                }
                while (lastPage.firstChild) {
                    lastPage.removeChild(lastPage.firstChild);
                }
                node = clonedNode.cloneNode(true);
                lastPage.appendChild(node);
                overflow = this.cutter.cutToFit(lastPage);
            }

            var footnotes = lastPage.querySelectorAll(footnoteSelector);
            var footnotesLength = footnotes.length;
            if (footnotesLength > 0) {

                while (lastPage.nextSibling.firstChild) {
                    lastPage.nextSibling.removeChild(lastPage.nextSibling.firstChild);
                }

                for (var _i = 0; _i < footnotesLength; _i++) {
                    var clonedFootnote = footnotes[_i].cloneNode(true);
                    lastPage.nextSibling.appendChild(clonedFootnote);
                }

                while (lastPage.firstChild) {
                    lastPage.removeChild(lastPage.firstChild);
                }

                lastPage.appendChild(clonedNode);

                overflow = this.cutter.cutToFit(lastPage);
                for (var _i2 = lastPage.querySelectorAll(footnoteSelector).length; _i2 < footnotesLength; _i2++) {
                    var oldFn = lastPage.nextSibling.children[_i2];

                    while (oldFn.firstChild) {
                        oldFn.removeChild(oldFn.firstChild);
                    }
                }
            }

            if (overflow.firstChild && overflow.firstChild.textContent.trim().length === 0 && ['P', 'DIV'].indexOf(overflow.firstChild.nodeName) !== -1) {
                overflow.removeChild(overflow.firstChild);
            }

            if (lastPage.firstChild && lastPage.firstChild.nodeType != 3 && lastPage.firstChild.textContent.trim().length === 0 && lastPage.firstChild.querySelectorAll('img,svg,canvas').length === 0) {
                lastPage.removeChild(lastPage.firstChild);
            } else if (overflow.firstChild && lastPage.firstChild) {
                setTimeout(function () {
                    that.fillPage(overflow, container, pageCounterStyle);
                }, 1);
            } else {
                this.finish(container, pageCounterStyle);
            }
        }
    }, {
        key: "createPage",
        value: function createPage(container, pageCounterClass) {
            var page = document.createElement('div'),
                contentsContainer = document.createElement('div'),
                mainContentsContainer = document.createElement('div'),
                topfloats = document.createElement('div'),
                contents = document.createElement('div'),
                footnotes = document.createElement('div');

            page.classList.add('pagination-page');
            contentsContainer.classList.add('pagination-contents-container');
            mainContentsContainer.classList.add('pagination-main-contents-container');

            if (this.currentChapter || this.currentSection) {

                var header = document.createElement('div');

                header.classList.add('pagination-header');

                if (this.currentChapter) {

                    var chapterHeader = document.createElement('span');

                    chapterHeader.classList.add('pagination-header-chapter');
                    chapterHeader.appendChild(this.currentChapter.cloneNode(true));
                    header.appendChild(chapterHeader);
                }

                if (this.currentSection) {

                    var sectionHeader = document.createElement('span');
                    sectionHeader.classList.add('pagination-header-section');
                    sectionHeader.appendChild(this.currentSection.cloneNode(true));
                    header.appendChild(sectionHeader);
                }
                page.appendChild(header);
            }

            topfloats.classList.add('pagination-topfloats');
            //topfloats.appendChild(document.createElement('p'))

            contents.classList.add('pagination-contents');

            footnotes.classList.add('pagination-footnotes');
            footnotes.appendChild(document.createElement('p'));

            mainContentsContainer.appendChild(topfloats);
            mainContentsContainer.appendChild(contents);
            mainContentsContainer.appendChild(footnotes);

            page.appendChild(mainContentsContainer);

            if (this.config['numberPages']) {

                var pagenumberField = document.createElement('div');
                pagenumberField.classList.add('pagination-pagenumber');
                pagenumberField.classList.add('pagination-' + pageCounterClass);

                page.appendChild(pagenumberField);
            }

            container.appendChild(page);
            return contents;
        }
    }, {
        key: "flowElement",
        value: function flowElement(overflow, container, pageCounterStyle) {
            var that = this;
            setTimeout(function () {
                that.fillPage(overflow, container, pageCounterStyle);
            }, 1);
        }
    }, {
        key: "finish",
        value: function finish(container, pageCounterStyle) {
            var layoutDiv = container.parentElement;
            if (this.config['alwaysEven'] && container.querySelectorAll('.pagination-page').length % 2 === 1) {
                this.createPage(container, pageCounterStyle);
            }
            if (container.classList.contains('pagination-body')) {
                this.paginateDivision(layoutDiv, pageCounterStyle);
                if (this.bodyFlowObjects.length === this.currentFragment && this.config['enableFrontmatter'] === false) {
                    this.config['callback']();
                }
            } else {
                this.pageCounters[pageCounterStyle].numberPages();
                this.config['callback']();
            }
        }
    }]);

    return LayoutApplier;
}();
},{"./create-toc":171,"./cut-content":172,"./matches-selector":175,"./page-counters":176}],171:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createToc = createToc;

var _matchesSelector = require('./matches-selector');

function createToc() {
    var tocDiv = document.createElement('div'),
        tocTitleH1 = document.createElement('h1'),
        tocItems = document.getElementById('pagination-layout').querySelectorAll('.pagination-body'),
        itemType = void 0;

    tocDiv.id = 'pagination-toc';
    tocTitleH1.id = 'pagination-toc-title';
    tocDiv.appendChild(tocTitleH1);

    for (var i = 0; i < tocItems.length; i++) {
        if ((0, _matchesSelector.matchesSelector)(tocItems[i], '.pagination-chapter')) {
            itemType = 'chapter';
        } else if ((0, _matchesSelector.matchesSelector)(tocItems[i], '.pagination-section')) {
            itemType = 'section';
        } else {
            continue;
        }
        var tocItemDiv = document.createElement('div');
        tocItemDiv.classList.add('pagination-toc-entry');
        var tocItemTextSpan = document.createElement('span');
        tocItemTextSpan.classList.add('pagination-toc-text');

        tocItemTextSpan.appendChild(document.createTextNode(tocItems[i].querySelector('.pagination-header-' + itemType).textContent.trim()));
        tocItemDiv.appendChild(tocItemTextSpan);

        var tocItemPnSpan = document.createElement('span');
        tocItemPnSpan.classList.add('pagination-toc-pagenumber');

        tocItemPnSpan.appendChild(document.createTextNode(tocItems[i].querySelector('.pagination-pagenumber').textContent.trim()));

        tocItemDiv.appendChild(tocItemPnSpan);

        tocDiv.appendChild(tocItemDiv);
    }

    return tocDiv;
}
},{"./matches-selector":175}],172:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentCutter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _getBoundingClientRect = require("./get-bounding-client-rect");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ContentCutter = exports.ContentCutter = function () {
    function ContentCutter(config) {
        _classCallCheck(this, ContentCutter);

        this.config = config;
    }

    // main cut method


    _createClass(ContentCutter, [{
        key: "cutToFit",
        value: function cutToFit(contents) {

            var range = void 0,
                overflow = void 0,
                manualPageBreak = void 0,
                ignoreLastLIcut = false,
                cutLIs = void 0,
                pageBreak = void 0,

            // contentHeight = height of page - height of top floats - height of footnotes.
            contentHeight = contents.parentElement.clientHeight - contents.previousSibling.clientHeight - contents.nextSibling.clientHeight,
                contentWidth = contents.parentElement.clientWidth,
                boundingRect = void 0,
                rightCutOff = void 0;

            // set height to contentHeight
            contents.style.height = contentHeight + "px";

            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                // Firefox has some insane bug which means that the new content height
                // isn't applied immediately when dealing with multicol -- unless one
                // removes the content and re-adds it.
                var nSib = contents.nextSibling;
                var pEl = contents.parentElement;
                pEl.removeChild(contents);
                pEl.insertBefore(contents, nSib);
            }

            // Set height temporarily to "auto" so the page flows beyond where
            // it should end and we can find the page break.
            contents.style.width = contentWidth * 2 + 100 + 'px';
            contents.style.columnWidth = contentWidth + 'px';
            contents.style.columnGap = '100px';
            contents.style.columnFill = 'auto';

            contents.style.MozColumnWidth = contentWidth + 'px';
            contents.style.MozColumnGap = '100px';
            contents.style.MozColumnFill = 'auto';

            boundingRect = contents.getBoundingClientRect();
            rightCutOff = boundingRect.left + contentWidth + 20;

            manualPageBreak = contents.querySelector(this.config['pagebreakSelector']);

            if (manualPageBreak && manualPageBreak.getBoundingClientRect().left < rightCutOff) {
                range = document.createRange();
                range.setStartBefore(manualPageBreak);
            } else if (boundingRect.right <= rightCutOff) {
                contents.style.width = contentWidth + "px";
                return false;
            } else {
                pageBreak = this.findPageBreak(contents, rightCutOff);
                if (!pageBreak) {
                    contents.style.width = contentWidth + "px";
                    return false;
                }
                range = document.createRange();
                range.setStart(pageBreak.node, pageBreak.offset);
            }

            contents.style.width = contentWidth + "px";
            // We find that the first item is an OL/UL which may have started on the previous page.
            if (['OL', 'UL'].indexOf(range.startContainer.nodeName) !== -1 || range.startContainer.nodeName === '#text' && range.startContainer.parentNode && ['OL', 'UL'].indexOf(range.startContainer.parentNode.nodeName) !== -1 && range.startContainer.length === range.startOffset) {
                // We are cutting from inside a List, don't touch the innermost list items.
                ignoreLastLIcut = true;
            }
            range.setEndAfter(contents.lastChild);
            overflow = range.extractContents();
            cutLIs = this.countOLItemsAndFixLI(contents);
            if (ignoreLastLIcut) {
                // Because the cut happened exactly between two LI items, don't try to unify the two lowest level LIs.
                cutLIs[cutLIs.length - 1].hideFirstLI = false;
                if (cutLIs[cutLIs.length - 1].start) {
                    cutLIs[cutLIs.length - 1].start++;
                }
            }
            this.applyInitialOLcount(overflow, cutLIs);

            if (!contents.lastChild || contents.textContent.trim().length === 0 && contents.querySelectorAll('img,svg,canvas').length === 0) {
                contents.appendChild(overflow);
                overflow = false;
            }
            return overflow;
        }
    }, {
        key: "countOLItemsAndFixLI",
        value: function countOLItemsAndFixLI(element, countList) {
            var start = 1,
                hideFirstLI = false;

            if (typeof countList === 'undefined') {
                countList = [];
            }
            if (element.nodeName === 'OL') {
                if (element.hasAttribute('start')) {
                    start = parseInt(element.getAttribute('start'));
                }
                if (element.lastElementChild.textContent.length === 0) {
                    element.removeChild(element.lastElementChild);
                } else {
                    start--;
                    hideFirstLI = true;
                }
                countList.push({
                    start: start + element.childElementCount,
                    hideFirstLI: hideFirstLI
                });
            } else if (element.nodeName === 'UL') {
                if (element.lastElementChild.textContent.length === 0) {
                    element.removeChild(element.lastElementChild);
                } else {
                    hideFirstLI = true;
                }
                countList.push({
                    hideFirstLI: hideFirstLI
                });
            }

            if (element.childElementCount > 0) {
                return this.countOLItemsAndFixLI(element.lastElementChild, countList);
            } else {
                return countList;
            }
        }
    }, {
        key: "applyInitialOLcount",
        value: function applyInitialOLcount(element, countList) {
            if (element.nodeName === '#document-fragment') {
                element = element.childNodes[0];
            }
            var listCount = void 0;
            if (countList.length === 0) {
                return;
            }
            if (element.nodeName === 'OL') {
                listCount = countList.shift();
                element.setAttribute('start', listCount.start);
                if (listCount.hideFirstLI) {
                    element.firstElementChild.classList.add('hide');
                }
            } else if (element.nodeName === 'UL') {
                listCount = countList.shift();
                if (listCount.hideFirstLI) {
                    element.firstElementChild.classList.add('hide');
                }
            }
            if (element.childElementCount > 0) {
                this.applyInitialOLcount(element.firstElementChild, countList);
            } else {
                return;
            }
        }
    }, {
        key: "findPrevNode",
        value: function findPrevNode(node) {
            if (node.previousSibling) {
                return node.previousSibling;
            } else {
                return this.findPrevNode(node.parentElement);
            }
        }

        // Go through a node (contents) and find the exact position where it goes
        // further to the right than the right cutoff.

    }, {
        key: "findPageBreak",
        value: function findPageBreak(contents, rightCutOff) {
            var contentCoords = void 0,
                found = void 0,
                prevNode = void 0;
            if (contents.nodeType === 1) {
                contentCoords = (0, _getBoundingClientRect.getBoundingClientRect)(contents);
                if (contentCoords.left < rightCutOff) {
                    if (contentCoords.right > rightCutOff) {
                        found = false;
                        var i = 0;
                        while (found === false && i < contents.childNodes.length) {
                            found = this.findPageBreak(contents.childNodes[i], rightCutOff);
                            i++;
                        }
                        if (found) {
                            return found;
                        }
                    } else {
                        return false;
                    }
                }
                prevNode = this.findPrevNode(contents);
                return {
                    node: prevNode,
                    offset: prevNode.length ? prevNode.length : prevNode.childNodes.length
                };
            } else if (contents.nodeType === 3) {
                var range = document.createRange(),
                    offset = contents.length;
                range.setStart(contents, 0);
                range.setEnd(contents, offset);
                contentCoords = range.getBoundingClientRect();

                if (contentCoords.bottom === contentCoords.top) {
                    // A text node that doesn't have any output.
                    return false;
                } else if (contentCoords.left < rightCutOff) {
                    if (contentCoords.right > rightCutOff) {
                        found = false;
                        while (found === false && offset > 0) {
                            offset--;
                            range.setEnd(contents, offset);
                            contentCoords = range.getBoundingClientRect();
                            if (contentCoords.right <= rightCutOff) {
                                found = {
                                    node: contents,
                                    offset: offset
                                };
                            }
                        }
                        if (found) {
                            return found;
                        }
                    } else {
                        return false;
                    }
                }
                prevNode = this.findPrevNode(contents);
                return {
                    node: prevNode,
                    offset: prevNode.length ? prevNode.length : prevNode.childNodes.length
                };
            } else {
                return false;
            }
        }
    }]);

    return ContentCutter;
}();
},{"./get-bounding-client-rect":174}],173:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DEFAULT_CONFIG_VALUES = exports.DEFAULT_CONFIG_VALUES = {
    // SELECTORS
    sectionStartSelector: 'h1', // The CSS selector that marks the start of a new section.
    sectionTitleSelector: 'h1', // The CSS selector at a start of a section that marks the title of that section.
    chapterStartSelector: 'h2', // The CSS selector that marks the start of a new chapter.
    chapterTitleSelector: 'h2', // The CSS selector at a start of a chapter that marks the title of that chapter.
    footnoteSelector: '.pagination-footnote', // The CSS selector of elements that are to be converted to footnotes.
    pagebreakSelector: '.pagination-pagebreak', // The CSS selector of elements that are to be converted to page breaks.
    topfloatSelector: '.pagination-topfloat', // The CSS selector of elements that are to be converted to top floating elements.
    //        'marginnoteSelector': '.pagination-marginnote',

    // FLOW ELEMENTS
    flowFromElement: false, // An element where to flow from (if false, document.body will be taken)
    frontmatterFlowFromElement: false, // An element that holds the contents to be flown into the frontmatter
    flowToElement: false, // An element where to flow to (if false, document.body will be taken)

    // LAYOUT OPTIONS
    numberPages: true, // Whether to number pages
    alwaysEven: true, // Whether every section/chapter always should have an even number of pages
    enableFrontmatter: true, // Whether to add frontmatter (Title page, Table-of-Contents, etc.)
    //        'enableTableOfFigures': false,
    //        'enableTableOfTables': false,
    //        'enableMarginNotes': false,
    //        'enableCrossReferences': true,
    //        'enableWordIndex': true,

    // CALLBACK
    callback: function callback() {},

    // STYLING OpTIONS (Can be overriden with CSS)
    outerMargin: 0.5,
    innerMargin: 0.8,
    contentsTopMargin: 0.8,
    headerTopMargin: 0.3,
    contentsBottomMargin: 0.8,
    pagenumberBottomMargin: 0.3,
    pageHeight: 8.3,
    pageWidth: 5.8,
    //        'marginNotesWidth': 1.5,
    //        'marginNotesSeparatorWidth': 0.09,
    //        'marginNotesVerticalSeparatorWidth': 0.09,
    lengthUnit: 'in'
};
},{}],174:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getBoundingClientRect = getBoundingClientRect;
// Chrome (+ possibly others) currently has issues when trying to find the real coordinates of elements when in multicol.
// This is a workaround that uses a range over the elements contents and combines all client rects around it.

function getBoundingClientRect(element) {
    var r = document.createRange();
    r.setStart(element, 0);
    r.setEnd(element, element.childNodes.length);
    return r.getBoundingClientRect();
}
},{}],175:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.matchesSelector = matchesSelector;
function matchesSelector(element, selector) {

    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
        // Firefox
        return element.mozMatchesSelector(selector);
    } else {
        // Webkit + Chrome + Edge
        return element.webkitMatchesSelector(selector);
    }
}
},{}],176:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageCounterArab = exports.PageCounterArab = function () {
    // arab is the page counter used by the main body contents.

    /* Create a pagecounter. cssClass is the CSS class employed by this page
     * counter to mark all page numbers associated with it.
     */
    function PageCounterArab() {
        _classCallCheck(this, PageCounterArab);

        this.cssClass = 'arab';
        this.counterValue = 0;
    }

    _createClass(PageCounterArab, [{
        key: 'show',
        value: function show() {
            /* Standard show function for page counter is to show the value itself
             * using arabic numbers.
             */
            return this.counterValue;
        }
    }, {
        key: 'incrementAndShow',
        value: function incrementAndShow() {
            /* Increment the page count by one and return the reuslt page count
             * using the show function.
             */
            this.counterValue++;
            return this.show();
        }
    }, {
        key: 'numberPages',
        value: function numberPages() {
            /* If the pages associated with this page counter need to be updated,
             * go through all of them from the start of the book and number them,
             * thereby potentially removing old page numbers.
             */
            this.counterValue = 0;

            var pagenumbersToNumber = document.querySelectorAll('.pagination-page .pagination-pagenumber.pagination-' + this.cssClass);
            for (var i = 0; i < pagenumbersToNumber.length; i++) {
                pagenumbersToNumber[i].innerHTML = this.incrementAndShow();
            }
        }
    }]);

    return PageCounterArab;
}();

var PageCounterRoman = exports.PageCounterRoman = function (_PageCounterArab) {
    _inherits(PageCounterRoman, _PageCounterArab);

    // roman is the page counter used by the frontmatter.
    function PageCounterRoman() {
        _classCallCheck(this, PageCounterRoman);

        var _this = _possibleConstructorReturn(this, (PageCounterRoman.__proto__ || Object.getPrototypeOf(PageCounterRoman)).call(this));

        _this.cssClass = 'roman';
        return _this;
    }

    _createClass(PageCounterRoman, [{
        key: 'show',
        value: function show() {
            // Create roman numeral representations of numbers.
            var digits = String(+this.counterValue).split(""),
                key = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"],
                roman = "",
                i = 3;
            while (i--) {
                roman = (key[+digits.pop() + i * 10] || "") + roman;
            }
            return new Array(+digits.join("") + 1).join("M") + roman;
        }
    }]);

    return PageCounterRoman;
}(PageCounterArab);
},{}],177:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PaginateForPrint = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _defaults = require("./defaults");

var _applyLayout = require("./apply-layout");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*!
 * PaginateForPrint
 * Copyright 2014-2016 Johannes Wilm. Freely available under the AGPL. For further details see LICENSE.txt
 *
 */

var PaginateForPrint = exports.PaginateForPrint = function () {
    function PaginateForPrint(config) {
        _classCallCheck(this, PaginateForPrint);

        this.config = Object.assign(_defaults.DEFAULT_CONFIG_VALUES, config);
        this.stylesheets = [];
        this.layoutApplier = new _applyLayout.LayoutApplier(this.config);
    }

    _createClass(PaginateForPrint, [{
        key: "initiate",
        value: function initiate() {
            /* Initiate PaginateForPrint by setting basic CSS style. and initiating
               the layout mechanism.
             */
            this.setStyle();
            this.setPageStyle();
            this.setBrowserSpecifics();
            this.layoutApplier.initiate();
        }
    }, {
        key: "setBrowserSpecifics",
        value: function setBrowserSpecifics() {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                var stylesheet = document.createElement('style');
                // Small fix for Firefox to not print first two pages on top of oneanother.
                stylesheet.innerHTML = ".pagination-page:first-child {page-break-before: always;}";
                document.head.appendChild(stylesheet);
                this.stylesheets.push(stylesheet);
            }
        }
    }, {
        key: "setStyle",
        value: function setStyle() {
            /* Set style for the regions and pages used by Paginate for Print and add it
             * to the head of the DOM.
             */
            var stylesheet = document.createElement('style');
            var footnoteSelector = this.config['footnoteSelector'];

            stylesheet.innerHTML = "\n.pagination-footnotes " + footnoteSelector + " {display: block;}\n.pagination-contents " + footnoteSelector + " > * {display:none;}\n.pagination-main-contents-container " + footnoteSelector + ", figure {\n    -webkit-column-break-inside: avoid;\n    page-break-inside: avoid;\n}\nbody {\n    counter-reset: pagination-footnote pagination-footnote-reference;\n}\n.pagination-contents " + footnoteSelector + "::before {\n    counter-increment: pagination-footnote-reference;\n    content: counter(pagination-footnote-reference);\n}\n" + footnoteSelector + " > * > *:first-child::before {\n    counter-increment: pagination-footnote;\n    content: counter(pagination-footnote);\n}\n.pagination-page {\n    position: relative;\n}\n.pagination-page {\n    page-break-after: always;\n    page-break-before: always;\n    margin-left: auto;\n    margin-right: auto;\n}\n.pagination-page:first-child {\n    page-break-before: avoid;\n}\n.pagination-page:last-child {\n    page-break-after: avoid;\n}\n.pagination-main-contents-container, .pagination-pagenumber, .pagination-header {\n    position: absolute;\n}\nli.hide {\n    list-style-type: none;\n}\n        ";
            document.head.appendChild(stylesheet);
            this.stylesheets.push(stylesheet);
        }
    }, {
        key: "setPageStyle",
        value: function setPageStyle() {
            // Set style for a particular page size.
            var unit = this.config['lengthUnit'],
                contentsWidthNumber = this.config['pageWidth'] - this.config['innerMargin'] - this.config['outerMargin'],
                contentsWidth = contentsWidthNumber + unit,
                contentsHeightNumber = this.config['pageHeight'] - this.config['contentsTopMargin'] - this.config['contentsBottomMargin'],
                contentsHeight = contentsHeightNumber + unit,
                pageWidth = this.config['pageWidth'] + unit,
                pageHeight = this.config['pageHeight'] + unit,
                contentsBottomMargin = this.config['contentsBottomMargin'] + unit,
                innerMargin = this.config['innerMargin'] + unit,
                outerMargin = this.config['outerMargin'] + unit,
                pagenumberBottomMargin = this.config['pagenumberBottomMargin'] + unit,
                headerTopMargin = this.config['headerTopMargin'] + unit,
                imageMaxHeight = contentsHeightNumber - 0.1 + unit,
                footnoteSelector = this.config['footnoteSelector'];
            var pageStyleSheet = document.createElement('style');
            pageStyleSheet.innerHTML = "\n.pagination-page {height: " + pageHeight + "; width: " + pageWidth + ";background-color: #fff;}\n@page {size:" + pageWidth + " " + pageHeight + ";}\nbody {background-color: #efefef; margin:0;}\n@media screen{.pagination-page {border:solid 1px #000; margin-bottom:.2in;}}\n.pagination-main-contents-container {\n    width: " + contentsWidth + ";\n    height: " + contentsHeight + ";\n    bottom: " + contentsBottomMargin + ";\n}\n.pagination-contents-container {\n    bottom: " + contentsBottomMargin + ";\n    height: " + contentsHeight + ";\n}\n.pagination-contents {\n    height: " + contentsHeight + ";\n    width: " + contentsWidth + ";\n}\nimg {max-height: " + imageMaxHeight + "; max-width: 100%;}\n.pagination-pagenumber {\n    bottom: " + pagenumberBottomMargin + ";\n}\n.pagination-header {\n    top: " + headerTopMargin + ";\n}\n.pagination-page:nth-child(odd) .pagination-main-contents-container,\n.pagination-page:nth-child(odd) .pagination-pagenumber,\n.pagination-page:nth-child(odd) .pagination-header {\n    right: " + outerMargin + ";\n    left: " + innerMargin + ";\n}\n.pagination-page:nth-child(even) .pagination-main-contents-container,\n.pagination-page:nth-child(even) .pagination-pagenumber,\n.pagination-page:nth-child(even) .pagination-header {\n    right: " + innerMargin + ";\n    left: " + outerMargin + ";\n}\n.pagination-page:nth-child(odd) .pagination-pagenumber,\n.pagination-page:nth-child(odd) .pagination-header {text-align:right;}\n.pagination-page:nth-child(odd) .pagination-header-section {display:none;}\n.pagination-page:nth-child(even) .pagination-header-chapter {display:none;}\n.pagination-page:nth-child(even) .pagination-pagenumber,\n.pagination-page:nth-child(even) .pagination-header { text-align:left;}\n" + footnoteSelector + " > * > * {font-size: 0.7em; margin:.25em;}\n" + footnoteSelector + " > * > *::before, " + footnoteSelector + "::before {\n    position: relative;\n    top: -0.5em;\n    font-size: 80%;\n}\n#pagination-toc-title:before {\n    content:'Contents';\n}\n.pagination-toc-entry .pagination-toc-pagenumber {float:right;}\n            ";
            document.head.insertBefore(pageStyleSheet, document.head.firstChild);
            this.stylesheets.push(pageStyleSheet);
        }

        // Remove stylesheets and all contents of the flow to element.

    }, {
        key: "tearDown",
        value: function tearDown() {
            // Remove stylesheets from DOM
            this.stylesheets.forEach(function (stylesheet) {
                stylesheet.parentNode.removeChild(stylesheet);
            });
            var flowToElement = this.config['flowToElement'] ? this.config['flowToElement'] : document.body;
            while (flowToElement.firstChild) {
                flowToElement.removeChild(flowToElement.firstChild);
            }
        }
    }]);

    return PaginateForPrint;
}();
},{"./apply-layout":170,"./defaults":173}],178:[function(require,module,exports){
"use strict";

var Keymap = require("browserkeymap");

var _require = require("./selection"),
    findSelectionFrom = _require.findSelectionFrom,
    verticalMotionLeavesTextblock = _require.verticalMotionLeavesTextblock,
    NodeSelection = _require.NodeSelection,
    TextSelection = _require.TextSelection;

var browser = require("../util/browser");

function nothing() {}

function moveSelectionBlock(pm, dir) {
  var _pm$selection = pm.selection,
      $from = _pm$selection.$from,
      $to = _pm$selection.$to,
      node = _pm$selection.node;

  var $side = dir > 0 ? $to : $from;
  var $start = node && node.isBlock ? $side : $side.depth ? pm.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
  return $start && findSelectionFrom($start, dir);
}

function selectNodeHorizontally(pm, dir) {
  var _pm$selection2 = pm.selection,
      empty = _pm$selection2.empty,
      node = _pm$selection2.node,
      $from = _pm$selection2.$from,
      $to = _pm$selection2.$to;

  if (!empty && !node) return false;

  if (node && node.isInline) {
    pm.setSelection(new TextSelection(dir > 0 ? $to : $from));
    return true;
  }

  if (!node) {
    var _ref = dir > 0 ? $from.parent.childAfter($from.parentOffset) : $from.parent.childBefore($from.parentOffset),
        nextNode = _ref.node,
        offset = _ref.offset;

    if (nextNode) {
      if (nextNode.type.selectable && offset == $from.parentOffset - (dir > 0 ? 0 : nextNode.nodeSize)) {
        pm.setSelection(new NodeSelection(dir < 0 ? pm.doc.resolve($from.pos - nextNode.nodeSize) : $from));
        return true;
      }
      return false;
    }
  }

  var next = moveSelectionBlock(pm, dir);
  if (next && (next instanceof NodeSelection || node)) {
    pm.setSelection(next);
    return true;
  }
  return false;
}

function horiz(dir) {
  return function (pm) {
    var done = selectNodeHorizontally(pm, dir);
    if (done) pm.scrollIntoView();
    return done;
  };
}

// : (ProseMirror, number)
// Check whether vertical selection motion would involve node
// selections. If so, apply it (if not, the result is left to the
// browser)
function selectNodeVertically(pm, dir) {
  var _pm$selection3 = pm.selection,
      empty = _pm$selection3.empty,
      node = _pm$selection3.node,
      $from = _pm$selection3.$from,
      $to = _pm$selection3.$to;

  if (!empty && !node) return false;

  var leavingTextblock = true,
      $start = dir < 0 ? $from : $to;
  if (!node || node.isInline) {
    pm.flush(); // verticalMotionLeavesTextblock needs an up-to-date DOM
    leavingTextblock = verticalMotionLeavesTextblock(pm, $start, dir);
  }

  if (leavingTextblock) {
    var next = moveSelectionBlock(pm, dir);
    if (next && next instanceof NodeSelection) {
      pm.setSelection(next);
      return true;
    }
  }

  if (!node || node.isInline) return false;

  var beyond = findSelectionFrom($start, dir);
  if (beyond) pm.setSelection(beyond);
  return true;
}

function vert(dir) {
  return function (pm) {
    var done = selectNodeVertically(pm, dir);
    if (done !== false) pm.scrollIntoView();
    return done;
  };
}

// A backdrop keymap used to make sure we always suppress keys that
// have a dangerous default effect, even if the commands they are
// bound to return false, and to make sure that cursor-motion keys
// find a cursor (as opposed to a node selection) when pressed. For
// cursor-motion keys, the code in the handlers also takes care of
// block selections.

var keys = {
  "Esc": nothing,
  "Enter": nothing,
  "Ctrl-Enter": nothing,
  "Mod-Enter": nothing,
  "Shift-Enter": nothing,
  "Backspace": browser.ios ? undefined : nothing,
  "Delete": nothing,
  "Mod-B": nothing,
  "Mod-I": nothing,
  "Mod-Backspace": nothing,
  "Mod-Delete": nothing,
  "Shift-Backspace": nothing,
  "Shift-Delete": nothing,
  "Shift-Mod-Backspace": nothing,
  "Shift-Mod-Delete": nothing,
  "Mod-Z": nothing,
  "Mod-Y": nothing,
  "Shift-Mod-Z": nothing,
  "Ctrl-D": nothing,
  "Ctrl-H": nothing,
  "Ctrl-Alt-Backspace": nothing,
  "Alt-D": nothing,
  "Alt-Delete": nothing,
  "Alt-Backspace": nothing,

  "Left": horiz(-1),
  "Mod-Left": horiz(-1),
  "Right": horiz(1),
  "Mod-Right": horiz(1),
  "Up": vert(-1),
  "Down": vert(1)
};

if (browser.mac) {
  keys["Alt-Left"] = horiz(-1);
  keys["Alt-Right"] = horiz(1);
  keys["Ctrl-Backspace"] = keys["Ctrl-Delete"] = nothing;
}

var captureKeys = new Keymap(keys);
exports.captureKeys = captureKeys;
},{"../util/browser":218,"./selection":193,"browserkeymap":46}],179:[function(require,module,exports){
"use strict";

var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;

// Extending unicode characters. A series of a non-extending char +
// any number of extending chars is treated as a single unit as far
// as editing and measuring is concerned. This is not fully correct,
// since some scripts/fonts/browsers also treat other configurations
// of code points as a group.
var extendingChar = /[\u0300-\u036f\u0483-\u0489\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u065e\u0670\u06d6-\u06dc\u06de-\u06e4\u06e7\u06e8\u06ea-\u06ed\u0711\u0730-\u074a\u07a6-\u07b0\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0900-\u0902\u093c\u0941-\u0948\u094d\u0951-\u0955\u0962\u0963\u0981\u09bc\u09be\u09c1-\u09c4\u09cd\u09d7\u09e2\u09e3\u0a01\u0a02\u0a3c\u0a41\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a70\u0a71\u0a75\u0a81\u0a82\u0abc\u0ac1-\u0ac5\u0ac7\u0ac8\u0acd\u0ae2\u0ae3\u0b01\u0b3c\u0b3e\u0b3f\u0b41-\u0b44\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b82\u0bbe\u0bc0\u0bcd\u0bd7\u0c3e-\u0c40\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0cbc\u0cbf\u0cc2\u0cc6\u0ccc\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0d3e\u0d41-\u0d44\u0d4d\u0d57\u0d62\u0d63\u0dca\u0dcf\u0dd2-\u0dd4\u0dd6\u0ddf\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0f18\u0f19\u0f35\u0f37\u0f39\u0f71-\u0f7e\u0f80-\u0f84\u0f86\u0f87\u0f90-\u0f97\u0f99-\u0fbc\u0fc6\u102d-\u1030\u1032-\u1037\u1039\u103a\u103d\u103e\u1058\u1059\u105e-\u1060\u1071-\u1074\u1082\u1085\u1086\u108d\u109d\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b7-\u17bd\u17c6\u17c9-\u17d3\u17dd\u180b-\u180d\u18a9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193b\u1a17\u1a18\u1a56\u1a58-\u1a5e\u1a60\u1a62\u1a65-\u1a6c\u1a73-\u1a7c\u1a7f\u1b00-\u1b03\u1b34\u1b36-\u1b3a\u1b3c\u1b42\u1b6b-\u1b73\u1b80\u1b81\u1ba2-\u1ba5\u1ba8\u1ba9\u1c2c-\u1c33\u1c36\u1c37\u1cd0-\u1cd2\u1cd4-\u1ce0\u1ce2-\u1ce8\u1ced\u1dc0-\u1de6\u1dfd-\u1dff\u200c\u200d\u20d0-\u20f0\u2cef-\u2cf1\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua66f-\ua672\ua67c\ua67d\ua6f0\ua6f1\ua802\ua806\ua80b\ua825\ua826\ua8c4\ua8e0-\ua8f1\ua926-\ua92d\ua947-\ua951\ua980-\ua982\ua9b3\ua9b6-\ua9b9\ua9bc\uaa29-\uaa2e\uaa31\uaa32\uaa35\uaa36\uaa43\uaa4c\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uabe5\uabe8\uabed\udc00-\udfff\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\uff9e\uff9f]/;

function isWordChar(ch) {
  return (/\w/.test(ch) || ch > "\x80" && (ch < "\uD800" || ch > "\uDFFF") && (isExtendingChar(ch) || ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))
  );
}
exports.isWordChar = isWordChar;

// Get the category of a given character. Either a "space",
// a character that can be part of a word ("word"), or anything else ("other").
function charCategory(ch) {
  return (/\s/.test(ch) ? "space" : isWordChar(ch) ? "word" : "other"
  );
}
exports.charCategory = charCategory;

function isExtendingChar(ch) {
  return ch.charCodeAt(0) >= 768 && extendingChar.test(ch);
}
exports.isExtendingChar = isExtendingChar;
},{}],180:[function(require,module,exports){
"use strict";

var _require = require("../transform"),
    joinPoint = _require.joinPoint,
    joinable = _require.joinable,
    findWrapping = _require.findWrapping,
    liftTarget = _require.liftTarget,
    canSplit = _require.canSplit,
    ReplaceAroundStep = _require.ReplaceAroundStep;

var _require2 = require("../model"),
    Slice = _require2.Slice,
    Fragment = _require2.Fragment,
    NodeRange = _require2.NodeRange;

var browser = require("../util/browser");

var _require3 = require("./char"),
    charCategory = _require3.charCategory,
    isExtendingChar = _require3.isExtendingChar;

var _require4 = require("./selection"),
    findSelectionFrom = _require4.findSelectionFrom,
    TextSelection = _require4.TextSelection,
    NodeSelection = _require4.NodeSelection;

// :: Object
// This object contains a number of ‘commands‘, functions that take a
// ProseMirror instance and try to perform some action on it,
// returning `false` if they don't apply. These are used to bind keys
// to, and to define [menu items](#menu).
//
// Most of the command functions defined here take a second, optional,
// boolean parameter. This can be set to `false` to do a ‘dry run’,
// where the function won't take any actual action, but will return
// information about whether it applies.


var commands = Object.create(null);
exports.commands = commands;

// :: (...[(ProseMirror, ?bool) → bool]) → (ProseMirror, ?bool) → bool
// Combine a number of command functions into a single function (which
// calls them one by one until one returns something other than
// `false`).
commands.chainCommands = function () {
  for (var _len = arguments.length, commands = Array(_len), _key = 0; _key < _len; _key++) {
    commands[_key] = arguments[_key];
  }

  return function (pm, apply) {
    for (var i = 0; i < commands.length; i++) {
      var val = commands[i](pm, apply);
      if (val !== false) return val;
    }
    return false;
  };
};

// :: (ProseMirror, ?bool) → bool
// Delete the selection, if there is one.
commands.deleteSelection = function (pm, apply) {
  if (pm.selection.empty) return false;
  if (apply !== false) pm.tr.replaceSelection().applyAndScroll();
  return true;
};

// :: (ProseMirror, ?bool) → bool
// If the selection is empty and at the start of a textblock, move
// that block closer to the block before it, by lifting it out of its
// parent or, if it has no parent it doesn't share with the node
// before it, moving it into a parent of that node, or joining it with
// that.
commands.joinBackward = function (pm, apply) {
  var _pm$selection = pm.selection,
      $head = _pm$selection.$head,
      empty = _pm$selection.empty;

  if (!empty) return false;

  if ($head.parentOffset > 0) return false;

  // Find the node before this one
  var before = void 0,
      cut = void 0;
  for (var i = $head.depth - 1; !before && i >= 0; i--) {
    if ($head.index(i) > 0) {
      cut = $head.before(i + 1);
      before = $head.node(i).child($head.index(i) - 1);
    }
  } // If there is no node before this, try to lift
  if (!before) {
    var range = $head.blockRange(),
        target = range && liftTarget(range);
    if (target == null) return false;
    if (apply !== false) pm.tr.lift(range, target).applyAndScroll();
    return true;
  }

  // If the node below has no content and the node above is
  // selectable, delete the node below and select the one above.
  if (before.type.isLeaf && before.type.selectable && $head.parent.content.size == 0) {
    if (apply !== false) {
      var tr = pm.tr.delete(cut, cut + $head.parent.nodeSize);
      tr.setSelection(new NodeSelection(tr.doc.resolve(cut - before.nodeSize)));
      tr.applyAndScroll();
    }
    return true;
  }

  // If the node doesn't allow children, delete it
  if (before.type.isLeaf) {
    if (apply !== false) pm.tr.delete(cut - before.nodeSize, cut).applyAndScroll();
    return true;
  }

  // Apply the joining algorithm
  return deleteBarrier(pm, cut, apply);
};

// :: (ProseMirror, ?bool) → bool
// If the selection is empty and the cursor is at the end of a
// textblock, move the node after it closer to the node with the
// cursor (lifting it out of parents that aren't shared, moving it
// into parents of the cursor block, or joining the two when they are
// siblings).
commands.joinForward = function (pm, apply) {
  var _pm$selection2 = pm.selection,
      $head = _pm$selection2.$head,
      empty = _pm$selection2.empty;

  if (!empty || $head.parentOffset < $head.parent.content.size) return false;

  // Find the node after this one
  var after = void 0,
      cut = void 0;
  for (var i = $head.depth - 1; !after && i >= 0; i--) {
    var parent = $head.node(i);
    if ($head.index(i) + 1 < parent.childCount) {
      after = parent.child($head.index(i) + 1);
      cut = $head.after(i + 1);
    }
  }

  // If there is no node after this, there's nothing to do
  if (!after) return false;

  // If the node doesn't allow children, delete it
  if (after.type.isLeaf) {
    if (apply !== false) pm.tr.delete(cut, cut + after.nodeSize).applyAndScroll();
    return true;
  } else {
    // Apply the joining algorithm
    return deleteBarrier(pm, cut, true);
  }
};

// :: (ProseMirror, ?bool) → bool
// Delete the character before the cursor, if the selection is empty
// and the cursor isn't at the start of a textblock.
commands.deleteCharBefore = function (pm, apply) {
  if (browser.ios) return false;
  var _pm$selection3 = pm.selection,
      $head = _pm$selection3.$head,
      empty = _pm$selection3.empty;

  if (!empty || $head.parentOffset == 0) return false;
  if (apply !== false) {
    var dest = moveBackward($head, "char");
    pm.tr.delete(dest, $head.pos).applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Delete the word before the cursor, if the selection is empty and
// the cursor isn't at the start of a textblock.
commands.deleteWordBefore = function (pm, apply) {
  var _pm$selection4 = pm.selection,
      $head = _pm$selection4.$head,
      empty = _pm$selection4.empty;

  if (!empty || $head.parentOffset == 0) return false;
  if (apply !== false) {
    var dest = moveBackward($head, "word");
    pm.tr.delete(dest, $head.pos).applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Delete the character after the cursor, if the selection is empty
// and the cursor isn't at the end of its textblock.
commands.deleteCharAfter = function (pm, apply) {
  var _pm$selection5 = pm.selection,
      $head = _pm$selection5.$head,
      empty = _pm$selection5.empty;

  if (!empty || $head.parentOffset == $head.parent.content.size) return false;
  if (apply !== false) {
    var dest = moveForward($head, "char");
    pm.tr.delete($head.pos, dest).applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Delete the word after the cursor, if the selection is empty and the
// cursor isn't at the end of a textblock.
commands.deleteWordAfter = function (pm, apply) {
  var _pm$selection6 = pm.selection,
      $head = _pm$selection6.$head,
      empty = _pm$selection6.empty;

  if (!empty || $head.parentOffset == $head.parent.content.size) return false;
  if (apply !== false) {
    var dest = moveForward($head, "word");
    pm.tr.delete($head.pos, dest).applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Join the selected block or, if there is a text selection, the
// closest ancestor block of the selection that can be joined, with
// the sibling above it.
commands.joinUp = function (pm, apply) {
  var _pm$selection7 = pm.selection,
      node = _pm$selection7.node,
      from = _pm$selection7.from,
      point = void 0;

  if (node) {
    if (node.isTextblock || !joinable(pm.doc, from)) return false;
    point = from;
  } else {
    point = joinPoint(pm.doc, from, -1);
    if (point == null) return false;
  }
  if (apply !== false) {
    var tr = pm.tr.join(point);
    if (pm.selection.node) tr.setSelection(new NodeSelection(tr.doc.resolve(point - pm.doc.resolve(point).nodeBefore.nodeSize)));
    tr.applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Join the selected block, or the closest ancestor of the selection
// that can be joined, with the sibling after it.
commands.joinDown = function (pm, apply) {
  var node = pm.selection.node,
      nodeAt = pm.selection.from;
  var point = joinPointBelow(pm);
  if (!point) return false;
  if (apply !== false) {
    var tr = pm.tr.join(point);
    if (node) tr.setSelection(new NodeSelection(tr.doc.resolve(nodeAt)));
    tr.applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Lift the selected block, or the closest ancestor block of the
// selection that can be lifted, out of its parent node.
commands.lift = function (pm, apply) {
  var _pm$selection8 = pm.selection,
      $from = _pm$selection8.$from,
      $to = _pm$selection8.$to;

  var range = $from.blockRange($to),
      target = range && liftTarget(range);
  if (target == null) return false;
  if (apply !== false) pm.tr.lift(range, target).applyAndScroll();
  return true;
};

// :: (ProseMirror, ?bool) → bool
// If the selection is in a node whose type has a truthy `isCode`
// property, replace the selection with a newline character.
commands.newlineInCode = function (pm, apply) {
  var _pm$selection9 = pm.selection,
      $from = _pm$selection9.$from,
      $to = _pm$selection9.$to,
      node = _pm$selection9.node;

  if (node) return false;
  if (!$from.parent.type.isCode || $to.pos >= $from.end()) return false;
  if (apply !== false) pm.tr.typeText("\n").applyAndScroll();
  return true;
};

// :: (ProseMirror, ?bool) → bool
// If a block node is selected, create an empty paragraph before (if
// it is its parent's first child) or after it.
commands.createParagraphNear = function (pm, apply) {
  var _pm$selection10 = pm.selection,
      $from = _pm$selection10.$from,
      $to = _pm$selection10.$to,
      node = _pm$selection10.node;

  if (!node || !node.isBlock) return false;
  var type = $from.parent.defaultContentType($to.indexAfter());
  if (!type || !type.isTextblock) return false;
  if (apply !== false) {
    var side = ($from.parentOffset ? $to : $from).pos;
    var tr = pm.tr.insert(side, type.createAndFill());
    tr.setSelection(new TextSelection(tr.doc.resolve(side + 1)));
    tr.applyAndScroll();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// If the cursor is in an empty textblock that can be lifted, lift the
// block.
commands.liftEmptyBlock = function (pm, apply) {
  var _pm$selection11 = pm.selection,
      $head = _pm$selection11.$head,
      empty = _pm$selection11.empty;

  if (!empty || $head.parent.content.size) return false;
  if ($head.depth > 1 && $head.after() != $head.end(-1)) {
    var before = $head.before();
    if (canSplit(pm.doc, before)) {
      if (apply !== false) pm.tr.split(before).applyAndScroll();
      return true;
    }
  }
  var range = $head.blockRange(),
      target = range && liftTarget(range);
  if (target == null) return false;
  if (apply !== false) pm.tr.lift(range, target).applyAndScroll();
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Split the parent block of the selection. If the selection is a text
// selection, delete it.
commands.splitBlock = function (pm, apply) {
  var _pm$selection12 = pm.selection,
      $from = _pm$selection12.$from,
      $to = _pm$selection12.$to,
      node = _pm$selection12.node;

  if (node && node.isBlock) {
    if (!$from.parentOffset || !canSplit(pm.doc, $from.pos)) return false;
    if (apply !== false) pm.tr.split($from.pos).applyAndScroll();
    return true;
  } else {
    if (apply === false) return true;
    var atEnd = $to.parentOffset == $to.parent.content.size;
    var tr = pm.tr.delete($from.pos, $to.pos);
    var deflt = $from.depth == 0 ? null : $from.node(-1).defaultContentType($from.indexAfter(-1));
    var type = atEnd ? deflt : null;
    var can = canSplit(tr.doc, $from.pos, 1, type);
    if (!type && !can && canSplit(tr.doc, $from.pos, 1, deflt)) {
      type = deflt;
      can = true;
    }
    if (can) {
      tr.split($from.pos, 1, type);
      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) tr.setNodeType($from.before(), deflt);
    }
    tr.applyAndScroll();
    return true;
  }
};

// :: (ProseMirror, ?bool) → bool
// Move the selection to the node wrapping the current selection, if
// any. (Will not select the document node.)
commands.selectParentNode = function (pm, apply) {
  var sel = pm.selection,
      pos = void 0;
  if (sel.node) {
    if (!sel.$from.depth) return false;
    pos = sel.$from.before();
  } else {
    var same = sel.$head.sameDepth(sel.$anchor);
    if (same == 0) return false;
    pos = sel.$head.before(same);
  }
  if (apply !== false) pm.setNodeSelection(pos);
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Undo the most recent change event, if any.
commands.undo = function (pm, apply) {
  if (pm.history.undoDepth == 0) return false;
  if (apply !== false) {
    pm.scrollIntoView();
    pm.history.undo();
  }
  return true;
};

// :: (ProseMirror, ?bool) → bool
// Redo the most recently undone change event, if any.
commands.redo = function (pm, apply) {
  if (pm.history.redoDepth == 0) return false;
  if (apply !== false) {
    pm.scrollIntoView();
    pm.history.redo();
  }
  return true;
};

function deleteBarrier(pm, cut, apply) {
  var $cut = pm.doc.resolve(cut),
      before = $cut.nodeBefore,
      after = $cut.nodeAfter,
      conn = void 0;
  if (joinable(pm.doc, cut)) {
    if (apply === false) return true;
    var tr = pm.tr.join(cut);
    if (tr.steps.length && before.content.size == 0 && !before.sameMarkup(after) && $cut.parent.canReplace($cut.index() - 1, $cut.index())) tr.setNodeType(cut - before.nodeSize, after.type, after.attrs);
    tr.applyAndScroll();
    return true;
  } else if (after.isTextblock && (conn = before.contentMatchAt($cut.index()).findWrapping(after.type, after.attrs))) {
    if (apply === false) return true;
    var end = cut + after.nodeSize,
        wrap = Fragment.empty;
    for (var i = conn.length - 1; i >= 0; i--) {
      wrap = Fragment.from(conn[i].type.create(conn[i].attrs, wrap));
    }wrap = Fragment.from(before.copy(wrap));
    pm.tr.step(new ReplaceAroundStep(cut - 1, end, cut, end, new Slice(wrap, 1, 0), conn.length, true)).join(end + 2 * conn.length, 1, true).applyAndScroll();
    return true;
  } else {
    var selAfter = findSelectionFrom($cut, 1);
    var range = selAfter.$from.blockRange(selAfter.$to),
        target = range && liftTarget(range);
    if (target == null) return false;
    if (apply !== false) pm.tr.lift(range, target).applyAndScroll();
    return true;
  }
}

// Get an offset moving backward from a current offset inside a node.
function moveBackward($pos, by) {
  if (by != "char" && by != "word") throw new RangeError("Unknown motion unit: " + by);

  var parent = $pos.parent,
      offset = $pos.parentOffset;

  var cat = null,
      counted = 0,
      pos = $pos.pos;
  for (;;) {
    if (offset == 0) return pos;

    var _parent$childBefore = parent.childBefore(offset),
        start = _parent$childBefore.offset,
        node = _parent$childBefore.node;

    if (!node) return pos;
    if (!node.isText) return cat ? pos : pos - 1;

    if (by == "char") {
      for (var i = offset - start; i > 0; i--) {
        if (!isExtendingChar(node.text.charAt(i - 1))) return pos - 1;
        offset--;
        pos--;
      }
    } else if (by == "word") {
      // Work from the current position backwards through text of a singular
      // character category (e.g. "cat" of "#!*") until reaching a character in a
      // different category (i.e. the end of the word).
      for (var _i = offset - start; _i > 0; _i--) {
        var nextCharCat = charCategory(node.text.charAt(_i - 1));
        if (cat == null || counted == 1 && cat == "space") cat = nextCharCat;else if (cat != nextCharCat) return pos;
        offset--;
        pos--;
        counted++;
      }
    }
  }
}

function moveForward($pos, by) {
  if (by != "char" && by != "word") throw new RangeError("Unknown motion unit: " + by);

  var parent = $pos.parent,
      offset = $pos.parentOffset,
      pos = $pos.pos;

  var cat = null,
      counted = 0;
  for (;;) {
    if (offset == parent.content.size) return pos;

    var _parent$childAfter = parent.childAfter(offset),
        start = _parent$childAfter.offset,
        node = _parent$childAfter.node;

    if (!node) return pos;
    if (!node.isText) return cat ? pos : pos + 1;

    if (by == "char") {
      for (var i = offset - start; i < node.text.length; i++) {
        if (!isExtendingChar(node.text.charAt(i + 1))) return pos + 1;
        offset++;
        pos++;
      }
    } else if (by == "word") {
      for (var _i2 = offset - start; _i2 < node.text.length; _i2++) {
        var nextCharCat = charCategory(node.text.charAt(_i2));
        if (cat == null || counted == 1 && cat == "space") cat = nextCharCat;else if (cat != nextCharCat) return pos;
        offset++;
        pos++;
        counted++;
      }
    }
  }
}

// Parameterized commands

function joinPointBelow(pm) {
  var _pm$selection13 = pm.selection,
      node = _pm$selection13.node,
      to = _pm$selection13.to;

  if (node) return joinable(pm.doc, to) ? to : null;else return joinPoint(pm.doc, to, 1);
}

// :: (NodeType, ?Object) → (pm: ProseMirror, apply: ?bool) → bool
// Wrap the selection in a node of the given type with the given
// attributes. When `apply` is `false`, just tell whether this is
// possible, without performing any action.
commands.wrapIn = function (nodeType, attrs) {
  return function (pm, apply) {
    var _pm$selection14 = pm.selection,
        $from = _pm$selection14.$from,
        $to = _pm$selection14.$to;

    var range = $from.blockRange($to),
        wrapping = range && findWrapping(range, nodeType, attrs);
    if (!wrapping) return false;
    if (apply !== false) pm.tr.wrap(range, wrapping).applyAndScroll();
    return true;
  };
};

// :: (NodeType, ?Object) → (pm: ProseMirror, apply: ?bool) → bool
// Try to the textblock around the selection to the given node type
// with the given attributes. Return `true` when this is possible. If
// `apply` is `false`, just report whether the change is possible,
// don't perform any action.
commands.setBlockType = function (nodeType, attrs) {
  return function (pm, apply) {
    var _pm$selection15 = pm.selection,
        $from = _pm$selection15.$from,
        $to = _pm$selection15.$to,
        node = _pm$selection15.node,
        depth = void 0;

    if (node) {
      depth = $from.depth;
    } else {
      if (!$from.depth || $to.pos > $from.end()) return false;
      depth = $from.depth - 1;
    }
    var target = node || $from.parent;
    if (!target.isTextblock || target.hasMarkup(nodeType, attrs)) return false;
    var index = $from.index(depth);
    if (!$from.node(depth).canReplaceWith(index, index + 1, nodeType)) return false;
    if (apply !== false) {
      var where = $from.before(depth + 1);
      pm.tr.clearMarkupFor(where, nodeType, attrs).setNodeType(where, nodeType, attrs).applyAndScroll();
    }
    return true;
  };
};

// List-related commands

// :: (NodeType, ?Object) → (pm: ProseMirror, apply: ?bool) → bool
// Returns a command function that wraps the selection in a list with
// the given type an attributes. If `apply` is `false`, only return a
// value to indicate whether this is possible, but don't actually
// perform the change.
commands.wrapInList = function (nodeType, attrs) {
  return function (pm, apply) {
    var _pm$selection16 = pm.selection,
        $from = _pm$selection16.$from,
        $to = _pm$selection16.$to;

    var range = $from.blockRange($to),
        doJoin = false,
        outerRange = range;
    // This is at the top of an existing list item
    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(nodeType) && range.startIndex == 0) {
      // Don't do anything if this is the top of the list
      if ($from.index(range.depth - 1) == 0) return false;
      var $insert = pm.doc.resolve(range.start - 2);
      outerRange = new NodeRange($insert, $insert, range.depth);
      if (range.endIndex < range.parent.childCount) range = new NodeRange($from, pm.doc.resolve($to.end(range.depth)), range.depth);
      doJoin = true;
    }
    var wrap = findWrapping(outerRange, nodeType, attrs, range);
    if (!wrap) return false;
    if (apply !== false) doWrapInList(pm.tr, range, wrap, doJoin, nodeType).applyAndScroll();
    return true;
  };
};

function doWrapInList(tr, range, wrappers, joinBefore, nodeType) {
  var content = Fragment.empty;
  for (var i = wrappers.length - 1; i >= 0; i--) {
    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
  }tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));

  var found = 0;
  for (var _i3 = 0; _i3 < wrappers.length; _i3++) {
    if (wrappers[_i3].type == nodeType) found = _i3 + 1;
  }var splitDepth = wrappers.length - found;

  var splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0),
      parent = range.parent;
  for (var _i4 = range.startIndex, e = range.endIndex, first = true; _i4 < e; _i4++, first = false) {
    if (!first && canSplit(tr.doc, splitPos, splitDepth)) tr.split(splitPos, splitDepth);
    splitPos += parent.child(_i4).nodeSize + (first ? 0 : 2 * splitDepth);
  }
  return tr;
}

// :: (NodeType) → (pm: ProseMirror) → bool
// Build a command that splits a non-empty textblock at the top level
// of a list item by also splitting that list item.
commands.splitListItem = function (nodeType) {
  return function (pm) {
    var _pm$selection17 = pm.selection,
        $from = _pm$selection17.$from,
        $to = _pm$selection17.$to,
        node = _pm$selection17.node;

    if (node && node.isBlock || !$from.parent.content.size || $from.depth < 2 || !$from.sameParent($to)) return false;
    var grandParent = $from.node(-1);
    if (grandParent.type != nodeType) return false;
    var nextType = $to.pos == $from.end() ? grandParent.defaultContentType($from.indexAfter(-1)) : null;
    var tr = pm.tr.delete($from.pos, $to.pos);
    if (!canSplit(tr.doc, $from.pos, 2, nextType)) return false;
    tr.split($from.pos, 2, nextType).applyAndScroll();
    return true;
  };
};

// :: (NodeType) → (pm: ProseMirror, apply: ?bool) → bool
// Create a command to lift the list item around the selection up into
// a wrapping list.
commands.liftListItem = function (nodeType) {
  return function (pm, apply) {
    var _pm$selection18 = pm.selection,
        $from = _pm$selection18.$from,
        $to = _pm$selection18.$to;

    var range = $from.blockRange($to, function (node) {
      return node.childCount && node.firstChild.type == nodeType;
    });
    if (!range || range.depth < 2 || $from.node(range.depth - 1).type != nodeType) return false;
    if (apply !== false) {
      var tr = pm.tr,
          end = range.end,
          endOfList = $to.end(range.depth);
      if (end < endOfList) {
        // There are siblings after the lifted items, which must become
        // children of the last item
        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(nodeType.create(null, range.parent.copy())), 1, 0), 1, true));
        range = new NodeRange(tr.doc.resolveNoCache($from.pos), tr.doc.resolveNoCache(endOfList), range.depth);
      }

      tr.lift(range, liftTarget(range)).applyAndScroll();
    }
    return true;
  };
};

// :: (NodeType) → (pm: ProseMirror, apply: ?bool) → bool
// Create a command to sink the list item around the selection down
// into an inner list.
commands.sinkListItem = function (nodeType) {
  return function (pm, apply) {
    var _pm$selection19 = pm.selection,
        $from = _pm$selection19.$from,
        $to = _pm$selection19.$to;

    var range = $from.blockRange($to, function (node) {
      return node.childCount && node.firstChild.type == nodeType;
    });
    if (!range) return false;
    var startIndex = range.startIndex;
    if (startIndex == 0) return false;
    var parent = range.parent,
        nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != nodeType) return false;
    if (apply !== false) {
      var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      var inner = Fragment.from(nestedBefore ? nodeType.create() : null);
      var slice = new Slice(Fragment.from(nodeType.create(null, Fragment.from(parent.copy(inner)))), nestedBefore ? 3 : 1, 0);
      var before = range.start,
          after = range.end;
      pm.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true)).applyAndScroll();
    }
    return true;
  };
};

function markApplies(doc, from, to, type) {
  var can = false;
  doc.nodesBetween(from, to, function (node) {
    if (can) return false;
    can = node.isTextblock && node.contentMatchAt(0).allowsMark(type);
  });
  return can;
}

// :: (MarkType, ?Object) → (pm: ProseMirror, apply: ?bool) → bool
// Create a command function that toggles the given mark with the
// given attributes. Will return `false` when the current selection
// doesn't support that mark. If `apply` is not `false`, it will
// remove the mark if any marks of that type exist in the selection,
// or add it otherwise. If the selection is empty, this applies to the
// [active marks](#ProseMirror.activeMarks) instead of a range of the
// document.
commands.toggleMark = function (markType, attrs) {
  return function (pm, apply) {
    var _pm$selection20 = pm.selection,
        empty = _pm$selection20.empty,
        from = _pm$selection20.from,
        to = _pm$selection20.to;

    if (!markApplies(pm.doc, from, to, markType)) return false;
    if (apply === false) return true;
    if (empty) {
      if (markType.isInSet(pm.activeMarks())) pm.removeActiveMark(markType);else pm.addActiveMark(markType.create(attrs));
    } else {
      if (pm.doc.rangeHasMark(from, to, markType)) pm.tr.removeMark(from, to, markType).applyAndScroll();else pm.tr.addMark(from, to, markType.create(attrs)).applyAndScroll();
    }
    return true;
  };
};
},{"../model":200,"../transform":209,"../util/browser":218,"./char":179,"./selection":193}],181:[function(require,module,exports){
"use strict";

var _require = require("../util/dom"),
    insertCSS = _require.insertCSS;

insertCSS("\n\n.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror-content {\n  white-space: pre-wrap;\n}\n\n.ProseMirror-drop-target {\n  position: absolute;\n  width: 1px;\n  background: #666;\n  pointer-events: none;\n}\n\n.ProseMirror-content ul, .ProseMirror-content ol {\n  padding-left: 30px;\n  cursor: default;\n}\n\n.ProseMirror-content blockquote {\n  padding-left: 1em;\n  border-left: 3px solid #eee;\n  margin-left: 0; margin-right: 0;\n}\n\n.ProseMirror-content pre {\n  white-space: pre-wrap;\n}\n\n.ProseMirror-content li {\n  position: relative;\n  pointer-events: none; /* Don't do weird stuff with marker clicks */\n}\n.ProseMirror-content li > * {\n  pointer-events: auto;\n}\n\n.ProseMirror-nodeselection *::selection { background: transparent; }\n.ProseMirror-nodeselection *::-moz-selection { background: transparent; }\n\n.ProseMirror-selectednode {\n  outline: 2px solid #8cf;\n}\n\n/* Make sure li selections wrap around markers */\n\nli.ProseMirror-selectednode {\n  outline: none;\n}\n\nli.ProseMirror-selectednode:after {\n  content: \"\";\n  position: absolute;\n  left: -32px;\n  right: -2px; top: -2px; bottom: -2px;\n  border: 2px solid #8cf;\n  pointer-events: none;\n}\n\n");
},{"../util/dom":220}],182:[function(require,module,exports){
"use strict";

var _require = require("../model"),
    Mark = _require.Mark;

var _require2 = require("../transform"),
    mapThroughResult = _require2.mapThroughResult;

var _require3 = require("./selection"),
    findSelectionFrom = _require3.findSelectionFrom,
    findSelectionNear = _require3.findSelectionNear,
    TextSelection = _require3.TextSelection,
    isCollapsed = _require3.isCollapsed;

var _require4 = require("./dompos"),
    DOMFromPos = _require4.DOMFromPos,
    DOMFromPosFromEnd = _require4.DOMFromPosFromEnd;

function readInputChange(pm) {
  pm.ensureOperation({ readSelection: false });
  return readDOMChange(pm, rangeAroundSelection(pm));
}
exports.readInputChange = readInputChange;

function readCompositionChange(pm, margin) {
  return readDOMChange(pm, rangeAroundComposition(pm, margin));
}
exports.readCompositionChange = readCompositionChange;

// Note that all referencing and parsing is done with the
// start-of-operation selection and document, since that's the one
// that the DOM represents. If any changes came in in the meantime,
// the modification is mapped over those before it is applied, in
// readDOMChange.

function parseBetween(pm, from, to) {
  var _DOMFromPos = DOMFromPos(pm, from, true),
      parent = _DOMFromPos.node,
      startOff = _DOMFromPos.offset;

  var _DOMFromPosFromEnd = DOMFromPosFromEnd(pm, to),
      parentRight = _DOMFromPosFromEnd.node,
      endOff = _DOMFromPosFromEnd.offset;

  if (parent != parentRight) return null;
  while (startOff) {
    var prev = parent.childNodes[startOff - 1];
    if (prev.nodeType != 1 || !prev.hasAttribute("pm-offset")) --startOff;else break;
  }
  while (endOff < parent.childNodes.length) {
    var next = parent.childNodes[endOff];
    if (next.nodeType != 1 || !next.hasAttribute("pm-offset")) ++endOff;else break;
  }
  var domSel = pm.root.getSelection(),
      find = null;
  if (domSel.anchorNode && pm.content.contains(domSel.anchorNode)) {
    find = [{ node: domSel.anchorNode, offset: domSel.anchorOffset }];
    if (!isCollapsed(domSel)) find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
  }
  var sel = null,
      doc = pm.schema.parseDOM(parent, {
    topNode: pm.operation.doc.resolve(from).parent.copy(),
    from: startOff,
    to: endOff,
    preserveWhitespace: true,
    editableContent: true,
    findPositions: find
  });
  if (find && find[0].pos != null) {
    var anchor = find[0].pos,
        head = find[1] && find[1].pos;
    if (head == null) head = anchor;
    sel = { anchor: anchor, head: head };
  }
  return { doc: doc, sel: sel };
}

function isAtEnd($pos, depth) {
  for (var i = depth || 0; i < $pos.depth; i++) {
    if ($pos.index(i) + 1 < $pos.node(i).childCount) return false;
  }return $pos.parentOffset == $pos.parent.content.size;
}
function isAtStart($pos, depth) {
  for (var i = depth || 0; i < $pos.depth; i++) {
    if ($pos.index(0) > 0) return false;
  }return $pos.parentOffset == 0;
}

function rangeAroundSelection(pm) {
  var _pm$operation$sel = pm.operation.sel,
      $from = _pm$operation$sel.$from,
      $to = _pm$operation$sel.$to;
  // When the selection is entirely inside a text block, use
  // rangeAroundComposition to get a narrow range.

  if ($from.sameParent($to) && $from.parent.isTextblock && $from.parentOffset && $to.parentOffset < $to.parent.content.size) return rangeAroundComposition(pm, 0);

  for (var depth = 0;; depth++) {
    var fromStart = isAtStart($from, depth + 1),
        toEnd = isAtEnd($to, depth + 1);
    if (fromStart || toEnd || $from.index(depth) != $to.index(depth) || $to.node(depth).isTextblock) {
      var from = $from.before(depth + 1),
          to = $to.after(depth + 1);
      if (fromStart && $from.index(depth) > 0) from -= $from.node(depth).child($from.index(depth) - 1).nodeSize;
      if (toEnd && $to.index(depth) + 1 < $to.node(depth).childCount) to += $to.node(depth).child($to.index(depth) + 1).nodeSize;
      return { from: from, to: to };
    }
  }
}

function rangeAroundComposition(pm, margin) {
  var _pm$operation$sel2 = pm.operation.sel,
      $from = _pm$operation$sel2.$from,
      $to = _pm$operation$sel2.$to;

  if (!$from.sameParent($to)) return rangeAroundSelection(pm);
  var startOff = Math.max(0, $from.parentOffset - margin);
  var size = $from.parent.content.size;
  var endOff = Math.min(size, $to.parentOffset + margin);

  if (startOff > 0) startOff = $from.parent.childBefore(startOff).offset;
  if (endOff < size) {
    var after = $from.parent.childAfter(endOff);
    endOff = after.offset + after.node.nodeSize;
  }
  var nodeStart = $from.start();
  return { from: nodeStart + startOff, to: nodeStart + endOff };
}

function readDOMChange(pm, range) {
  var op = pm.operation;
  // If the document was reset since the start of the current
  // operation, we can't do anything useful with the change to the
  // DOM, so we discard it.
  if (op.docSet) {
    pm.markAllDirty();
    return false;
  }

  var parseResult = void 0;
  for (;;) {
    parseResult = parseBetween(pm, range.from, range.to);
    if (parseResult) break;
    range = { from: op.doc.resolve(range.from).before(),
      to: op.doc.resolve(range.to).after() };
  }
  var _parseResult = parseResult,
      parsed = _parseResult.doc,
      parsedSel = _parseResult.sel;


  var compare = op.doc.slice(range.from, range.to);
  var change = findDiff(compare.content, parsed.content, range.from, op.sel.from);
  if (!change) return false;
  var fromMapped = mapThroughResult(op.mappings, change.start);
  var toMapped = mapThroughResult(op.mappings, change.endA);
  if (fromMapped.deleted && toMapped.deleted) return false;

  // Mark nodes touched by this change as 'to be redrawn'
  markDirtyFor(pm, op.doc, change.start, change.endA);

  function newSelection(doc) {
    if (!parsedSel) return false;
    var newSel = findSelectionNear(doc.resolve(range.from + parsedSel.head));
    if (parsedSel.anchor != parsedSel.head && newSel.$head) {
      var $anchor = doc.resolve(range.from + parsedSel.anchor);
      if ($anchor.parent.isTextblock) newSel = new TextSelection($anchor, newSel.$head);
    }
    return newSel;
  }

  var $from = parsed.resolveNoCache(change.start - range.from);
  var $to = parsed.resolveNoCache(change.endB - range.from);
  var nextSel = void 0,
      text = void 0;
  // If this looks like the effect of pressing Enter, just dispatch an
  // Enter key instead.
  if (!$from.sameParent($to) && $from.pos < parsed.content.size && (nextSel = findSelectionFrom(parsed.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) {
    pm.input.dispatchKey("Enter");
  } else if ($from.sameParent($to) && $from.parent.isTextblock && (text = uniformTextBetween(parsed, $from.pos, $to.pos)) != null) {
    pm.input.insertText(fromMapped.pos, toMapped.pos, text, newSelection);
  } else {
    var slice = parsed.slice(change.start - range.from, change.endB - range.from);
    var tr = pm.tr.replace(fromMapped.pos, toMapped.pos, slice);
    var sel = newSelection(tr.doc);
    if (sel) tr.setSelection(sel);
    tr.applyAndScroll();
  }
  return true;
}

function uniformTextBetween(node, from, to) {
  var result = "",
      valid = true,
      marks = null;
  node.nodesBetween(from, to, function (node, pos) {
    if (!node.isInline && pos < from) return;
    if (!node.isText) return valid = false;
    if (!marks) marks = node.marks;else if (!Mark.sameSet(marks, node.marks)) valid = false;
    result += node.text.slice(Math.max(0, from - pos), to - pos);
  });
  return valid ? result : null;
}

function findDiff(a, b, pos, preferedStart) {
  var start = a.findDiffStart(b, pos);
  if (!start) return null;

  var _a$findDiffEnd = a.findDiffEnd(b, pos + a.size, pos + b.size),
      endA = _a$findDiffEnd.a,
      endB = _a$findDiffEnd.b;

  if (endA < start) {
    var move = preferedStart <= start && preferedStart >= endA ? start - preferedStart : 0;
    start -= move;
    endB = start + (endB - endA);
    endA = start;
  } else if (endB < start) {
    var _move = preferedStart <= start && preferedStart >= endB ? start - preferedStart : 0;
    start -= _move;
    endA = start + (endA - endB);
    endB = start;
  }
  return { start: start, endA: endA, endB: endB };
}

function markDirtyFor(pm, doc, start, end) {
  var $start = doc.resolve(start),
      $end = doc.resolve(end),
      same = $start.sameDepth($end);
  if (same == 0) pm.markAllDirty();else pm.markRangeDirty($start.before(same), $start.after(same), doc);
}
},{"../model":200,"../transform":209,"./dompos":183,"./selection":193}],183:[function(require,module,exports){
"use strict";

var _require = require("../util/dom"),
    contains = _require.contains;

function isEditorContent(dom) {
  return dom.classList.contains("ProseMirror-content");
}

// : (DOMNode) → number
// Get the position before a given a DOM node in a document.
function posBeforeFromDOM(node) {
  var pos = 0,
      add = 0;
  for (var cur = node; !isEditorContent(cur); cur = cur.parentNode) {
    var attr = cur.getAttribute("pm-offset");
    if (attr) {
      pos += +attr + add;add = 1;
    }
  }
  return pos;
}

var posFromDOMResult = { pos: 0, inLeaf: -1 };

// : (DOMNode, number) → number
function posFromDOM(dom, domOffset) {
  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (domOffset == null) {
    domOffset = Array.prototype.indexOf.call(dom.parentNode.childNodes, dom);
    dom = dom.parentNode;
  }

  // Move up to the wrapping container, counting local offset along
  // the way.
  var innerOffset = 0,
      tag = void 0;
  for (;;) {
    var adjust = 0;
    if (dom.nodeType == 3) {
      innerOffset += domOffset;
    } else if (tag = dom.getAttribute("pm-offset") && !childContainer(dom)) {
      var size = +dom.getAttribute("pm-size");
      if (dom.nodeType == 1 && !dom.firstChild) innerOffset = bias > 0 ? size : 0;else if (domOffset == dom.childNodes.length) innerOffset = size;else innerOffset = Math.min(innerOffset, size);
      var inLeaf = posFromDOMResult.inLeaf = posBeforeFromDOM(dom);
      posFromDOMResult.pos = inLeaf + innerOffset;
      return posFromDOMResult;
    } else if (dom.hasAttribute("pm-container")) {
      break;
    } else if (domOffset == dom.childNodes.length) {
      if (domOffset) adjust = 1;else adjust = bias > 0 ? 1 : 0;
    }

    var parent = dom.parentNode;
    domOffset = adjust < 0 ? 0 : Array.prototype.indexOf.call(parent.childNodes, dom) + adjust;
    dom = parent;
    bias = 0;
  }

  var start = isEditorContent(dom) ? 0 : posBeforeFromDOM(dom) + 1,
      before = 0;

  for (var child = dom.childNodes[domOffset - 1]; child; child = child.previousSibling) {
    if (child.nodeType == 1 && (tag = child.getAttribute("pm-offset"))) {
      before += +tag + +child.getAttribute("pm-size");
      break;
    }
  }
  posFromDOMResult.inLeaf = -1;
  posFromDOMResult.pos = start + before + innerOffset;
  return posFromDOMResult;
}
exports.posFromDOM = posFromDOM;

// : (DOMNode) → ?DOMNode
function childContainer(dom) {
  return dom.hasAttribute("pm-container") ? dom : dom.querySelector("[pm-container]");
}
exports.childContainer = childContainer;

// : (ProseMirror, number) → {node: DOMNode, offset: number}
// Find the DOM node and offset into that node that the given document
// position refers to.
function DOMFromPos(pm, pos, loose) {
  if (!loose && pm.operation && pm.doc != pm.operation.doc) throw new RangeError("Resolving a position in an outdated DOM structure");

  var container = pm.content,
      offset = pos;
  for (;;) {
    for (var child = container.firstChild, i = 0;; child = child.nextSibling, i++) {
      if (!child) {
        if (offset && !loose) throw new RangeError("Failed to find node at " + pos);
        return { node: container, offset: i };
      }

      var size = child.nodeType == 1 && child.getAttribute("pm-size");
      if (size) {
        if (!offset) return { node: container, offset: i };
        size = +size;
        if (offset < size) {
          container = childContainer(child);
          if (!container) {
            return leafAt(child, offset);
          } else {
            offset--;
            break;
          }
        } else {
          offset -= size;
        }
      }
    }
  }
}
exports.DOMFromPos = DOMFromPos;

// : (ProseMirror, number) → {node: DOMNode, offset: number}
// The same as DOMFromPos, but searching from the bottom instead of
// the top. This is needed in domchange.js, when there is an arbitrary
// DOM change somewhere in our document, and we can no longer rely on
// the DOM structure around the selection.
function DOMFromPosFromEnd(pm, pos) {
  var container = pm.content,
      dist = (pm.operation ? pm.operation.doc : pm.doc).content.size - pos;
  for (;;) {
    for (var child = container.lastChild, i = container.childNodes.length;; child = child.previousSibling, i--) {
      if (!child) return { node: container, offset: i };

      var size = child.nodeType == 1 && child.getAttribute("pm-size");
      if (size) {
        if (!dist) return { node: container, offset: i };
        size = +size;
        if (dist < size) {
          container = childContainer(child);
          if (!container) {
            return leafAt(child, size - dist);
          } else {
            dist--;
            break;
          }
        } else {
          dist -= size;
        }
      }
    }
  }
}
exports.DOMFromPosFromEnd = DOMFromPosFromEnd;

// : (ProseMirror, number) → DOMNode
function DOMAfterPos(pm, pos) {
  var _DOMFromPos = DOMFromPos(pm, pos),
      node = _DOMFromPos.node,
      offset = _DOMFromPos.offset;

  if (node.nodeType != 1 || offset == node.childNodes.length) throw new RangeError("No node after pos " + pos);
  return node.childNodes[offset];
}
exports.DOMAfterPos = DOMAfterPos;

// : (DOMNode, number) → {node: DOMNode, offset: number}
function leafAt(node, offset) {
  for (;;) {
    var child = node.firstChild;
    if (!child) return { node: node, offset: offset };
    if (child.nodeType != 1) return { node: child, offset: offset };
    node = child;
  }
}

function windowRect() {
  return { left: 0, right: window.innerWidth,
    top: 0, bottom: window.innerHeight };
}

function parentNode(node) {
  var parent = node.parentNode;
  return parent.nodeType == 11 ? parent.host : parent;
}

function scrollIntoView(pm, pos) {
  if (!pos) pos = pm.sel.range.head || pm.sel.range.from;
  var coords = coordsAtPos(pm, pos);
  for (var parent = pm.content;; parent = parentNode(parent)) {
    var _pm$options = pm.options,
        scrollThreshold = _pm$options.scrollThreshold,
        scrollMargin = _pm$options.scrollMargin;

    var atBody = parent == document.body;
    var rect = atBody ? windowRect() : parent.getBoundingClientRect();
    var moveX = 0,
        moveY = 0;
    if (coords.top < rect.top + scrollThreshold) moveY = -(rect.top - coords.top + scrollMargin);else if (coords.bottom > rect.bottom - scrollThreshold) moveY = coords.bottom - rect.bottom + scrollMargin;
    if (coords.left < rect.left + scrollThreshold) moveX = -(rect.left - coords.left + scrollMargin);else if (coords.right > rect.right - scrollThreshold) moveX = coords.right - rect.right + scrollMargin;
    if (moveX || moveY) {
      if (atBody) {
        window.scrollBy(moveX, moveY);
      } else {
        if (moveY) parent.scrollTop += moveY;
        if (moveX) parent.scrollLeft += moveX;
      }
    }
    if (atBody) break;
  }
}
exports.scrollIntoView = scrollIntoView;

function findOffsetInNode(node, coords) {
  var closest = void 0,
      dxClosest = 2e8,
      coordsClosest = void 0,
      offset = 0;
  for (var child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
    var rects = void 0;
    if (child.nodeType == 1) rects = child.getClientRects();else if (child.nodeType == 3) rects = textRange(child).getClientRects();else continue;

    for (var i = 0; i < rects.length; i++) {
      var rect = rects[i];
      if (rect.top <= coords.top && rect.bottom >= coords.top) {
        var dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;
        if (dx < dxClosest) {
          closest = child;
          dxClosest = dx;
          coordsClosest = dx && closest.nodeType == 3 ? { left: rect.right < coords.left ? rect.right : rect.left, top: coords.top } : coords;
          if (child.nodeType == 1 && dx) offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
          continue;
        }
      }
      if (!closest && (coords.left >= rect.right || coords.left >= rect.left && coords.top >= rect.bottom)) offset = i + 1;
    }
  }
  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest);
  if (!closest || dxClosest && closest.nodeType == 1) return { node: node, offset: offset };
  return findOffsetInNode(closest, coordsClosest);
}

function findOffsetInText(node, coords) {
  var len = node.nodeValue.length;
  var range = document.createRange();
  for (var i = 0; i < len; i++) {
    range.setEnd(node, i + 1);
    range.setStart(node, i);
    var rect = singleRect(range, 1);
    if (rect.top == rect.bottom) continue;
    if (rect.left - 1 <= coords.left && rect.right + 1 >= coords.left && rect.top - 1 <= coords.top && rect.bottom + 1 >= coords.top) return { node: node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
  }
  return { node: node, offset: 0 };
}

function targetKludge(dom, coords) {
  if (/^[uo]l$/i.test(dom.nodeName)) {
    for (var child = dom.firstChild; child; child = child.nextSibling) {
      if (child.nodeType != 1 || !child.hasAttribute("pm-offset") || !/^li$/i.test(child.nodeName)) continue;
      var childBox = child.getBoundingClientRect();
      if (coords.left > childBox.left - 2) break;
      if (childBox.top <= coords.top && childBox.bottom >= coords.top) return child;
    }
  }
  return dom;
}

// Given an x,y position on the editor, get the position in the document.
function posAtCoords(pm, coords) {
  var elt = targetKludge(pm.root.elementFromPoint(coords.left, coords.top + 1), coords);
  if (!contains(pm.content, elt)) return null;

  var _findOffsetInNode = findOffsetInNode(elt, coords),
      node = _findOffsetInNode.node,
      offset = _findOffsetInNode.offset,
      bias = -1;

  if (node.nodeType == 1 && !node.firstChild) {
    var rect = node.getBoundingClientRect();
    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
  }
  return posFromDOM(node, offset, bias);
}
exports.posAtCoords = posAtCoords;

function textRange(node, from, to) {
  var range = document.createRange();
  range.setEnd(node, to == null ? node.nodeValue.length : to);
  range.setStart(node, from || 0);
  return range;
}

function singleRect(object, bias) {
  var rects = object.getClientRects();
  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
}

// : (ProseMirror, number) → ClientRect
// Given a position in the document model, get a bounding box of the
// character at that position, relative to the window.
function coordsAtPos(pm, pos) {
  var _DOMFromPos2 = DOMFromPos(pm, pos),
      node = _DOMFromPos2.node,
      offset = _DOMFromPos2.offset;

  var side = void 0,
      rect = void 0;
  if (node.nodeType == 3) {
    if (offset < node.nodeValue.length) {
      rect = singleRect(textRange(node, offset, offset + 1), -1);
      side = "left";
    }
    if ((!rect || rect.left == rect.right) && offset) {
      rect = singleRect(textRange(node, offset - 1, offset), 1);
      side = "right";
    }
  } else if (node.firstChild) {
    if (offset < node.childNodes.length) {
      var child = node.childNodes[offset];
      rect = singleRect(child.nodeType == 3 ? textRange(child) : child, -1);
      side = "left";
    }
    if ((!rect || rect.top == rect.bottom) && offset) {
      var _child = node.childNodes[offset - 1];
      rect = singleRect(_child.nodeType == 3 ? textRange(_child) : _child, 1);
      side = "right";
    }
  } else {
    rect = node.getBoundingClientRect();
    side = "left";
  }
  var x = rect[side];
  return { top: rect.top, bottom: rect.bottom, left: x, right: x };
}
exports.coordsAtPos = coordsAtPos;
},{"../util/dom":220}],184:[function(require,module,exports){
"use strict";

var _require = require("../util/dom"),
    elt = _require.elt;

var browser = require("../util/browser");

var _require2 = require("./dompos"),
    childContainer = _require2.childContainer;

var DIRTY_RESCAN = 1,
    DIRTY_REDRAW = 2;
exports.DIRTY_RESCAN = DIRTY_RESCAN;exports.DIRTY_REDRAW = DIRTY_REDRAW;

function options(ranges) {
  return {
    pos: 0,

    onRender: function onRender(node, dom, _pos, offset) {
      if (node.isBlock) {
        if (offset != null) dom.setAttribute("pm-offset", offset);
        dom.setAttribute("pm-size", node.nodeSize);
        if (node.isTextblock) adjustTrailingHacks(dom, node);
        if (dom.contentEditable == "false") dom = elt("div", null, dom);
      }

      return dom;
    },
    onContainer: function onContainer(dom) {
      dom.setAttribute("pm-container", true);
    },

    // : (Node, DOMNode, number, number) → DOMNode
    renderInlineFlat: function renderInlineFlat(node, dom, pos, offset) {
      if (dom.nodeType != 1) dom = elt("span", null, dom);

      var end = pos + node.nodeSize,
          fragment = void 0;
      for (;;) {
        ranges.advanceTo(pos);
        var nextCut = ranges.nextChangeBefore(end),
            nextDOM = void 0,
            size = void 0;
        if (nextCut > -1) {
          size = nextCut - pos;
          nextDOM = splitTextNode(dom, size);
        } else {
          size = end - pos;
        }

        dom.setAttribute("pm-offset", offset);
        dom.setAttribute("pm-size", size);

        ranges.current.forEach(function (className) {
          return dom.classList.add(className);
        });

        if (!fragment && (nextCut > -1 || ranges.element)) fragment = document.createDocumentFragment();
        if (ranges.element) fragment.appendChild(elt("span", { contenteditable: false, "pm-ignore": true }, ranges.element));
        if (fragment) fragment.appendChild(dom);

        if (nextCut == -1) break;
        offset += size;
        pos += size;
        dom = nextDOM;
      }

      return fragment || dom;
    },

    document: document
  };
}

function splitTextNode(dom, at) {
  if (dom.nodeType == 3) {
    var text = document.createTextNode(dom.nodeValue.slice(at));
    dom.nodeValue = dom.nodeValue.slice(0, at);
    return text;
  } else {
    var clone = dom.cloneNode(false);
    clone.appendChild(splitTextNode(dom.firstChild, at));
    return clone;
  }
}

function draw(pm, doc) {
  pm.content.textContent = "";
  pm.content.appendChild(doc.content.toDOM(options(pm.ranges.activeRangeTracker())));
}
exports.draw = draw;

function adjustTrailingHacks(dom, node) {
  var needs = node.content.size == 0 || node.lastChild.type.isBR || node.type.isCode && node.lastChild.isText && /\n$/.test(node.lastChild.text) ? "br" : !node.lastChild.isText && node.lastChild.type.isLeaf ? "text" : null;
  var last = dom.lastChild;
  var has = !last || last.nodeType != 1 || !last.hasAttribute("pm-ignore") ? null : last.nodeName == "BR" ? "br" : "text";
  if (needs != has) {
    if (has) dom.removeChild(last);
    if (needs) dom.appendChild(needs == "br" ? elt("br", { "pm-ignore": "trailing-break" }) : elt("span", { "pm-ignore": "cursor-text" }, ""));
  }
}

function findNodeIn(parent, i, node) {
  for (; i < parent.childCount; i++) {
    var child = parent.child(i);
    if (child == node) return i;
  }
  return -1;
}

function movePast(dom) {
  var next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}

function redraw(pm, dirty, doc, prev) {
  if (dirty.get(prev) == DIRTY_REDRAW) return draw(pm, doc);

  var opts = options(pm.ranges.activeRangeTracker());

  function scan(dom, node, prev, pos) {
    var iPrev = 0,
        oPrev = 0,
        pChild = prev.firstChild;
    var domPos = dom.firstChild;

    function syncDOM() {
      while (domPos) {
        var curOff = domPos.nodeType == 1 && domPos.getAttribute("pm-offset");
        if (!curOff || +curOff < oPrev) domPos = movePast(domPos);else return +curOff == oPrev;
      }
      return false;
    }

    for (var iNode = 0, offset = 0; iNode < node.childCount; iNode++) {
      var child = node.child(iNode),
          matching = void 0,
          reuseDOM = void 0;
      var found = pChild == child ? iPrev : findNodeIn(prev, iPrev + 1, child);
      if (found > -1) {
        matching = child;
        while (iPrev != found) {
          oPrev += pChild.nodeSize;
          pChild = prev.maybeChild(++iPrev);
        }
      }

      if (matching && !dirty.get(matching) && syncDOM()) {
        reuseDOM = true;
      } else if (pChild && !child.isText && child.sameMarkup(pChild) && dirty.get(pChild) != DIRTY_REDRAW && syncDOM()) {
        reuseDOM = true;
        if (!pChild.type.isLeaf) scan(childContainer(domPos), child, pChild, pos + offset + 1);
        domPos.setAttribute("pm-size", child.nodeSize);
      } else {
        opts.pos = pos + offset;
        opts.offset = offset;
        var rendered = child.toDOM(opts);
        dom.insertBefore(rendered, domPos);
        reuseDOM = false;
      }

      if (reuseDOM) {
        // Text nodes might be split into smaller segments
        if (child.isText) {
          for (var off = offset, end = off + child.nodeSize; off < end;) {
            if (offset != oPrev) domPos.setAttribute("pm-offset", off);
            off += +domPos.getAttribute("pm-size");
            domPos = domPos.nextSibling;
          }
        } else {
          if (offset != oPrev) domPos.setAttribute("pm-offset", offset);
          domPos = domPos.nextSibling;
        }
        oPrev += pChild.nodeSize;
        pChild = prev.maybeChild(++iPrev);
      }
      offset += child.nodeSize;
    }

    while (domPos) {
      domPos = movePast(domPos);
    }if (node.isTextblock) adjustTrailingHacks(dom, node);

    if (browser.ios) iosHacks(dom);
  }
  scan(pm.content, doc, prev, 0);
}
exports.redraw = redraw;

function iosHacks(dom) {
  if (dom.nodeName == "UL" || dom.nodeName == "OL") {
    var oldCSS = dom.style.cssText;
    dom.style.cssText = oldCSS + "; list-style: square !important";
    window.getComputedStyle(dom).listStyle;
    dom.style.cssText = oldCSS;
  }
}
},{"../util/browser":218,"../util/dom":220,"./dompos":183}],185:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("../transform"),
    Transform = _require.Transform,
    Remapping = _require.Remapping;

// ProseMirror's history implements not a way to roll back to a
// previous state, because ProseMirror supports applying changes
// without adding them to the history (for example during
// collaboration).
//
// To this end, each 'Branch' (one for the undo history and one for
// the redo history) keeps an array of 'Items', which can optionally
// hold a step (an actual undoable change), and always hold a position
// map (which is needed to move changes below them to apply to the
// current document).
//
// An item that has both a step and a selection token field is the
// start of an 'event' -- a group of changes that will be undone or
// redone at once. (It stores only a token, since that way we don't
// have to provide a document until the selection is actually applied,
// which is useful when compressing.)

// Used to schedule history compression


var max_empty_items = 500;

var Branch = function () {
  function Branch(maxEvents) {
    _classCallCheck(this, Branch);

    this.events = 0;
    this.maxEvents = maxEvents;
    // Item 0 is always a dummy that's only used to have an id to
    // refer to at the start of the history.
    this.items = [new Item()];
  }

  // : (Node, bool, ?Item) → ?{transform: Transform, selection: SelectionToken, ids: [number]}
  // Pop the latest event off the branch's history and apply it
  // to a document transform, returning the transform and the step IDs.


  _createClass(Branch, [{
    key: "popEvent",
    value: function popEvent(doc, preserveItems, upto) {
      var preserve = preserveItems,
          transform = new Transform(doc);
      var remap = new BranchRemapping();
      var selection = void 0,
          ids = [],
          i = this.items.length;

      for (;;) {
        var cur = this.items[--i];
        if (upto && cur == upto) break;
        if (!cur.map) return null;

        if (!cur.step) {
          remap.add(cur);
          preserve = true;
          continue;
        }

        if (preserve) {
          var step = cur.step.map(remap.remap),
              map = void 0;

          this.items[i] = new MapItem(cur.map);
          if (step && transform.maybeStep(step).doc) {
            map = transform.maps[transform.maps.length - 1];
            this.items.push(new MapItem(map, this.items[i].id));
          }
          remap.movePastStep(cur, map);
        } else {
          this.items.pop();
          transform.maybeStep(cur.step);
        }

        ids.push(cur.id);
        if (cur.selection) {
          this.events--;
          if (!upto) {
            selection = cur.selection.type.mapToken(cur.selection, remap.remap);
            break;
          }
        }
      }

      return { transform: transform, selection: selection, ids: ids };
    }
  }, {
    key: "clear",
    value: function clear() {
      this.items.length = 1;
      this.events = 0;
    }

    // : (Transform, Selection, ?[number])
    // Create a new branch with the given transform added.

  }, {
    key: "addTransform",
    value: function addTransform(transform, selection, ids) {
      for (var i = 0; i < transform.steps.length; i++) {
        var step = transform.steps[i].invert(transform.docs[i]);
        this.items.push(new StepItem(transform.maps[i], ids && ids[i], step, selection));
        if (selection) {
          this.events++;
          selection = null;
        }
      }
      if (this.events > this.maxEvents) this.clip();
    }

    // Clip this branch to the max number of events.

  }, {
    key: "clip",
    value: function clip() {
      var seen = 0,
          toClip = this.events - this.maxEvents;
      for (var i = 0;; i++) {
        var cur = this.items[i];
        if (cur.selection) {
          if (seen < toClip) {
            ++seen;
          } else {
            this.items.splice(0, i, new Item(null, this.events[toClip - 1]));
            this.events = this.maxEvents;
            return;
          }
        }
      }
    }
  }, {
    key: "addMaps",
    value: function addMaps(array) {
      if (this.events == 0) return;
      for (var i = 0; i < array.length; i++) {
        this.items.push(new MapItem(array[i]));
      }
    }
  }, {
    key: "findChangeID",
    value: function findChangeID(id) {
      if (id == this.items[0].id) return this.items[0];

      for (var i = this.items.length - 1; i >= 0; i--) {
        var cur = this.items[i];
        if (cur.step) {
          if (cur.id == id) return cur;
          if (cur.id < id) return null;
        }
      }
    }

    // : ([PosMap], Transform, [number])
    // When the collab module receives remote changes, the history has
    // to know about those, so that it can adjust the steps that were
    // rebased on top of the remote changes, and include the position
    // maps for the remote changes in its array of items.

  }, {
    key: "rebased",
    value: function rebased(newMaps, rebasedTransform, positions) {
      if (this.events == 0) return;

      var rebasedItems = [],
          start = this.items.length - positions.length,
          startPos = 0;
      if (start < 1) {
        startPos = 1 - start;
        start = 1;
        this.items[0] = new Item();
      }

      if (positions.length) {
        var remap = new Remapping([], newMaps.slice());
        for (var iItem = start, iPosition = startPos; iItem < this.items.length; iItem++) {
          var item = this.items[iItem],
              pos = positions[iPosition++],
              id = void 0;
          if (pos != -1) {
            var map = rebasedTransform.maps[pos];
            if (item.step) {
              var step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
              var selection = item.selection && item.selection.type.mapToken(item.selection, remap);
              rebasedItems.push(new StepItem(map, item.id, step, selection));
            } else {
              rebasedItems.push(new MapItem(map));
            }
            id = remap.addToBack(map);
          }
          remap.addToFront(item.map.invert(), id);
        }

        this.items.length = start;
      }

      for (var i = 0; i < newMaps.length; i++) {
        this.items.push(new MapItem(newMaps[i]));
      }for (var _i = 0; _i < rebasedItems.length; _i++) {
        this.items.push(rebasedItems[_i]);
      }if (!this.compressing && this.emptyItems(start) + newMaps.length > max_empty_items) this.compress(start + newMaps.length);
    }
  }, {
    key: "emptyItems",
    value: function emptyItems(upto) {
      var count = 0;
      for (var i = 1; i < upto; i++) {
        if (!this.items[i].step) count++;
      }return count;
    }

    // Compressing a branch means rewriting it to push the air (map-only
    // items) out. During collaboration, these naturally accumulate
    // because each remote change adds one. The `upto` argument is used
    // to ensure that only the items below a given level are compressed,
    // because `rebased` relies on a clean, untouched set of items in
    // order to associate old ids to rebased steps.

  }, {
    key: "compress",
    value: function compress(upto) {
      var remap = new BranchRemapping();
      var items = [],
          events = 0;
      for (var i = this.items.length - 1; i >= 0; i--) {
        var item = this.items[i];
        if (i >= upto) {
          items.push(item);
        } else if (item.step) {
          var step = item.step.map(remap.remap),
              map = step && step.posMap();
          remap.movePastStep(item, map);
          if (step) {
            var selection = item.selection && item.selection.type.mapToken(item.selection, remap.remap);
            items.push(new StepItem(map.invert(), item.id, step, selection));
            if (selection) events++;
          }
        } else if (item.map) {
          remap.add(item);
        } else {
          items.push(item);
        }
      }
      this.items = items.reverse();
      this.events = events;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.items.join("\n");
    }
  }, {
    key: "changeID",
    get: function get() {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].step) return this.items[i].id;
      }return this.items[0].id;
    }
  }]);

  return Branch;
}();

// History items all have ids, but the meaning of these is somewhat
// complicated.
//
// - For StepItems, the ids are kept ordered (inside a given branch),
//   and are kept associated with a given change (if you undo and then
//   redo it, the resulting item gets the old id)
//
// - For MapItems, the ids are just opaque identifiers, not
//   necessarily ordered.
//
// - The placeholder item at the base of a branch's list


var nextID = 1;

var Item = function () {
  function Item(map, id) {
    _classCallCheck(this, Item);

    this.map = map;
    this.id = id || nextID++;
  }

  _createClass(Item, [{
    key: "toString",
    value: function toString() {
      return this.id + ":" + (this.map || "") + (this.step ? ":" + this.step : "") + (this.mirror != null ? "->" + this.mirror : "");
    }
  }]);

  return Item;
}();

var StepItem = function (_Item) {
  _inherits(StepItem, _Item);

  function StepItem(map, id, step, selection) {
    _classCallCheck(this, StepItem);

    var _this = _possibleConstructorReturn(this, (StepItem.__proto__ || Object.getPrototypeOf(StepItem)).call(this, map, id));

    _this.step = step;
    _this.selection = selection;
    return _this;
  }

  return StepItem;
}(Item);

var MapItem = function (_Item2) {
  _inherits(MapItem, _Item2);

  function MapItem(map, mirror) {
    _classCallCheck(this, MapItem);

    var _this2 = _possibleConstructorReturn(this, (MapItem.__proto__ || Object.getPrototypeOf(MapItem)).call(this, map));

    _this2.mirror = mirror;
    return _this2;
  }

  return MapItem;
}(Item);

// Assists with remapping a step with other changes that have been
// made since the step was first applied.


var BranchRemapping = function () {
  function BranchRemapping() {
    _classCallCheck(this, BranchRemapping);

    this.remap = new Remapping();
    this.mirrorBuffer = Object.create(null);
  }

  _createClass(BranchRemapping, [{
    key: "add",
    value: function add(item) {
      var id = this.remap.addToFront(item.map, this.mirrorBuffer[item.id]);
      if (item.mirror != null) this.mirrorBuffer[item.mirror] = id;
      return id;
    }
  }, {
    key: "movePastStep",
    value: function movePastStep(item, map) {
      var id = this.add(item);
      if (map) this.remap.addToBack(map, id);
    }
  }]);

  return BranchRemapping;
}();

// ;; An undo/redo history manager for an editor instance.


var History = function () {
  function History(pm) {
    _classCallCheck(this, History);

    this.pm = pm;

    this.done = new Branch(pm.options.historyDepth);
    this.undone = new Branch(pm.options.historyDepth);

    this.lastAddedAt = 0;
    this.ignoreTransform = false;
    this.preserveItems = 0;

    pm.on.transform.add(this.recordTransform.bind(this));
  }

  // : (Transform, Selection, Object)
  // Record a transformation in undo history.


  _createClass(History, [{
    key: "recordTransform",
    value: function recordTransform(transform, selection, options) {
      if (this.ignoreTransform) return;

      if (options.addToHistory == false) {
        this.done.addMaps(transform.maps);
        this.undone.addMaps(transform.maps);
      } else {
        var now = Date.now();
        // Group transforms that occur in quick succession into one event.
        var newGroup = now > this.lastAddedAt + this.pm.options.historyEventDelay;
        this.done.addTransform(transform, newGroup ? selection.token : null);
        this.undone.clear();
        this.lastAddedAt = now;
      }
    }

    // :: () → bool
    // Undo one history event. The return value indicates whether
    // anything was actually undone. Note that in a collaborative
    // context, or when changes are [applied](#ProseMirror.apply)
    // without adding them to the history, it is possible for
    // [`undoDepth`](#History.undoDepth) to have a positive value, but
    // this method to still return `false`, when non-history changes
    // overwrote all remaining changes in the history.

  }, {
    key: "undo",
    value: function undo() {
      return this.shift(this.done, this.undone);
    }

    // :: () → bool
    // Redo one history event. The return value indicates whether
    // anything was actually redone.

  }, {
    key: "redo",
    value: function redo() {
      return this.shift(this.undone, this.done);
    }

    // :: number
    // The amount of undoable events available.

  }, {
    key: "shift",


    // : (Branch, Branch) → bool
    // Apply the latest event from one branch to the document and optionally
    // shift the event onto the other branch. Returns true when an event could
    // be shifted.
    value: function shift(from, to) {
      var pop = from.popEvent(this.pm.doc, this.preserveItems > 0);
      if (!pop) return false;
      var selectionBeforeTransform = this.pm.selection;

      if (!pop.transform.steps.length) return this.shift(from, to);

      var selection = pop.selection.type.fromToken(pop.selection, pop.transform.doc);
      this.applyIgnoring(pop.transform, selection);

      // Store the selection before transform on the event so that
      // it can be reapplied if the event is undone or redone (e.g.
      // redoing a character addition should place the cursor after
      // the character).
      to.addTransform(pop.transform, selectionBeforeTransform.token, pop.ids);

      this.lastAddedAt = 0;

      return true;
    }
  }, {
    key: "applyIgnoring",
    value: function applyIgnoring(transform, selection) {
      this.ignoreTransform = true;
      this.pm.apply(transform, { selection: selection, filter: false });
      this.ignoreTransform = false;
    }

    // :: () → Object
    // Get the current ‘version’ of the editor content. This can be used
    // to later [check](#History.isAtVersion) whether anything changed, or
    // to [roll back](#History.backToVersion) to this version.

  }, {
    key: "getVersion",
    value: function getVersion() {
      return this.done.changeID;
    }

    // :: (Object) → bool
    // Returns `true` when the editor history is in the state that it
    // was when the given [version](#History.getVersion) was recorded.
    // That means either no changes were made, or changes were
    // done/undone and then undone/redone again.

  }, {
    key: "isAtVersion",
    value: function isAtVersion(version) {
      return this.done.changeID == version;
    }

    // :: (Object) → bool
    // Rolls back all changes made since the given
    // [version](#History.getVersion) was recorded. Returns `false` if
    // that version was no longer found in the history, and thus the
    // action could not be completed.

  }, {
    key: "backToVersion",
    value: function backToVersion(version) {
      var found = this.done.findChangeID(version);
      if (!found) return false;

      var _done$popEvent = this.done.popEvent(this.pm.doc, this.preserveItems > 0, found),
          transform = _done$popEvent.transform;

      this.applyIgnoring(transform);
      this.undone.clear();
      return true;
    }

    // Used by the collab module to tell the history that some of its
    // content has been rebased.

  }, {
    key: "rebased",
    value: function rebased(newMaps, rebasedTransform, positions) {
      this.done.rebased(newMaps, rebasedTransform, positions);
      this.undone.rebased(newMaps, rebasedTransform, positions);
    }
  }, {
    key: "undoDepth",
    get: function get() {
      return this.done.events;
    }

    // :: number
    // The amount of redoable events available.

  }, {
    key: "redoDepth",
    get: function get() {
      return this.undone.events;
    }
  }]);

  return History;
}();

exports.History = History;
},{"../transform":209}],186:[function(require,module,exports){
"use strict";

// !! This module implements the ProseMirror editor. It contains
// functionality related to editing, selection, and integration with
// the browser. `ProseMirror` is the class you'll want to instantiate
// and interact with when using the editor.

exports.ProseMirror = require("./main").ProseMirror;
var _require = require("./selection");

exports.Selection = _require.Selection;
exports.TextSelection = _require.TextSelection;
exports.NodeSelection = _require.NodeSelection;

var _require2 = require("./range");

exports.MarkedRange = _require2.MarkedRange;

exports.baseKeymap = require("./keymap").baseKeymap;
var _require3 = require("./plugin");

exports.Plugin = _require3.Plugin;

exports.commands = require("./commands").commands;

exports.Keymap = require("browserkeymap");
},{"./commands":180,"./keymap":188,"./main":189,"./plugin":191,"./range":192,"./selection":193,"browserkeymap":46}],187:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Keymap = require("browserkeymap");
var browser = require("../util/browser");

var _require = require("../model"),
    Slice = _require.Slice,
    Fragment = _require.Fragment,
    parseDOMInContext = _require.parseDOMInContext;

var _require2 = require("./capturekeys"),
    captureKeys = _require2.captureKeys;

var _require3 = require("../util/dom"),
    elt = _require3.elt,
    contains = _require3.contains;

var _require4 = require("./domchange"),
    readInputChange = _require4.readInputChange,
    readCompositionChange = _require4.readCompositionChange;

var _require5 = require("./selection"),
    findSelectionNear = _require5.findSelectionNear,
    hasFocus = _require5.hasFocus;

var stopSeq = null;

// A collection of DOM events that occur within the editor, and callback functions
// to invoke when the event fires.
var handlers = {};

var Input = function () {
  function Input(pm) {
    var _this = this;

    _classCallCheck(this, Input);

    this.pm = pm;

    this.keySeq = null;

    this.mouseDown = null;
    this.dragging = null;
    this.dropTarget = null;
    this.shiftKey = false;
    this.finishComposing = null;

    this.keymaps = [];

    this.storedMarks = null;

    var _loop = function _loop(event) {
      var handler = handlers[event];
      pm.content.addEventListener(event, function (e) {
        return handler(pm, e);
      });
    };

    for (var event in handlers) {
      _loop(event);
    }

    pm.on.selectionChange.add(function () {
      return _this.storedMarks = null;
    });
  }

  // Dispatch a key press to the internal keymaps, which will override the default
  // DOM behavior.


  _createClass(Input, [{
    key: "dispatchKey",
    value: function dispatchKey(name, e) {
      var pm = this.pm,
          seq = pm.input.keySeq;
      // If the previous key should be used in sequence with this one, modify the name accordingly.
      if (seq) {
        if (Keymap.isModifierKey(name)) return true;
        clearTimeout(stopSeq);
        stopSeq = setTimeout(function () {
          if (pm.input.keySeq == seq) pm.input.keySeq = null;
        }, 50);
        name = seq + " " + name;
      }

      var handle = function handle(bound) {
        if (bound === false) return "nothing";
        if (bound == "...") return "multi";
        if (bound == null) return false;
        return bound(pm) == false ? false : "handled";
      };

      var result = void 0;
      for (var i = 0; !result && i < pm.input.keymaps.length; i++) {
        result = handle(pm.input.keymaps[i].map.lookup(name, pm));
      }if (!result) result = handle(captureKeys.lookup(name));

      // If the key should be used in sequence with the next key, store the keyname internally.
      if (result == "multi") pm.input.keySeq = name;

      if ((result == "handled" || result == "multi") && e) e.preventDefault();

      if (seq && !result && /\'$/.test(name)) {
        if (e) e.preventDefault();
        return true;
      }
      return !!result;
    }

    // : (ProseMirror, TextSelection, string, ?(Node) → Selection)
    // Insert text into a document.

  }, {
    key: "insertText",
    value: function insertText(from, to, text, findSelection) {
      if (from == to && !text) return;
      var pm = this.pm,
          marks = pm.input.storedMarks || pm.doc.marksAt(from);
      var tr = pm.tr.replaceWith(from, to, text ? pm.schema.text(text, marks) : null);
      tr.setSelection(findSelection && findSelection(tr.doc) || findSelectionNear(tr.doc.resolve(tr.map(to)), -1, true));
      tr.applyAndScroll();
      if (text) pm.on.textInput.dispatch(text);
    }
  }, {
    key: "startComposition",
    value: function startComposition(dataLen, realStart) {
      this.pm.ensureOperation({ noFlush: true, readSelection: realStart }).composing = {
        ended: false,
        applied: false,
        margin: dataLen
      };
      this.pm.unscheduleFlush();
    }
  }, {
    key: "applyComposition",
    value: function applyComposition(andFlush) {
      var composing = this.composing;
      if (composing.applied) return;
      readCompositionChange(this.pm, composing.margin);
      composing.applied = true;
      // Operations that read DOM changes must be flushed, to make sure
      // subsequent DOM changes find a clean DOM.
      if (andFlush) this.pm.flush();
    }
  }, {
    key: "composing",
    get: function get() {
      return this.pm.operation && this.pm.operation.composing;
    }
  }]);

  return Input;
}();

exports.Input = Input;

handlers.keydown = function (pm, e) {
  if (!hasFocus(pm)) return;
  pm.on.interaction.dispatch();
  if (e.keyCode == 16) pm.input.shiftKey = true;
  if (pm.input.composing) return;
  var name = Keymap.keyName(e);
  if (name && pm.input.dispatchKey(name, e)) return;
  pm.sel.fastPoll();
};

handlers.keyup = function (pm, e) {
  if (e.keyCode == 16) pm.input.shiftKey = false;
};

handlers.keypress = function (pm, e) {
  if (!hasFocus(pm) || pm.input.composing || !e.charCode || e.ctrlKey && !e.altKey || browser.mac && e.metaKey) return;
  if (pm.input.dispatchKey(Keymap.keyName(e), e)) return;
  var sel = pm.selection;
  // On iOS, let input through, because if we handle it the virtual
  // keyboard's default case doesn't update (it only does so when the
  // user types or taps, not on selection updates from JavaScript).
  if (!browser.ios) {
    pm.input.insertText(sel.from, sel.to, String.fromCharCode(e.charCode));
    e.preventDefault();
  }
};

function contextFromEvent(pm, event) {
  return pm.contextAtCoords({ left: event.clientX, top: event.clientY });
}

function selectClickedNode(pm, context) {
  var _pm$selection = pm.selection,
      selectedNode = _pm$selection.node,
      $from = _pm$selection.$from,
      selectAt = void 0;


  for (var i = context.inside.length - 1; i >= 0; i--) {
    var _context$inside$i = context.inside[i],
        pos = _context$inside$i.pos,
        node = _context$inside$i.node;

    if (node.type.selectable) {
      selectAt = pos;
      if (selectedNode && $from.depth > 0) {
        var $pos = pm.doc.resolve(pos);
        if ($pos.depth >= $from.depth && $pos.before($from.depth + 1) == $from.pos) selectAt = $pos.before($from.depth);
      }
      break;
    }
  }

  if (selectAt != null) {
    pm.setNodeSelection(selectAt);
    pm.focus();
    return true;
  } else {
    return false;
  }
}

var lastClick = { time: 0, x: 0, y: 0 },
    oneButLastClick = lastClick;

function isNear(event, click) {
  var dx = click.x - event.clientX,
      dy = click.y - event.clientY;
  return dx * dx + dy * dy < 100;
}

function handleTripleClick(pm, context) {
  for (var i = context.inside.length - 1; i >= 0; i--) {
    var _context$inside$i2 = context.inside[i],
        pos = _context$inside$i2.pos,
        node = _context$inside$i2.node;

    if (node.isTextblock) pm.setTextSelection(pos + 1, pos + 1 + node.content.size);else if (node.type.selectable) pm.setNodeSelection(pos);else continue;
    pm.focus();
    break;
  }
}

function runHandlerOnContext(handler, context, event) {
  for (var i = context.inside.length - 1; i >= 0; i--) {
    if (handler.dispatch(context.pos, context.inside[i].node, context.inside[i].pos, event)) return true;
  }
}

handlers.mousedown = function (pm, e) {
  pm.on.interaction.dispatch();
  var now = Date.now();
  var doubleClick = now - lastClick.time < 500 && isNear(e, lastClick);
  var tripleClick = doubleClick && now - oneButLastClick.time < 600 && isNear(e, oneButLastClick);
  oneButLastClick = lastClick;
  lastClick = { time: now, x: e.clientX, y: e.clientY };

  var context = contextFromEvent(pm, e);
  if (context == null) return;
  if (tripleClick) {
    e.preventDefault();
    handleTripleClick(pm, context);
  } else if (doubleClick) {
    if (runHandlerOnContext(pm.on.doubleClickOn, context, e) || pm.on.doubleClick.dispatch(context.pos, e)) e.preventDefault();else pm.sel.fastPoll();
  } else {
    pm.input.mouseDown = new MouseDown(pm, e, context, doubleClick);
  }
};

var MouseDown = function () {
  function MouseDown(pm, event, context, doubleClick) {
    _classCallCheck(this, MouseDown);

    this.pm = pm;
    this.event = event;
    this.context = context;
    this.leaveToBrowser = pm.input.shiftKey || doubleClick;
    this.x = event.clientX;this.y = event.clientY;

    var inner = context.inside[context.inside.length - 1];
    this.mightDrag = inner && (inner.node.type.draggable || inner.node == pm.sel.range.node) ? inner : null;
    this.target = event.target;
    if (this.mightDrag) {
      if (!contains(pm.content, this.target)) this.target = pm.root.elementFromPoint(this.x, this.y);
      this.target.draggable = true;
      if (browser.gecko && (this.setContentEditable = !this.target.hasAttribute("contentEditable"))) this.target.setAttribute("contentEditable", "false");
    }

    window.addEventListener("mouseup", this.up = this.up.bind(this));
    window.addEventListener("mousemove", this.move = this.move.bind(this));
    pm.sel.fastPoll();
  }

  _createClass(MouseDown, [{
    key: "done",
    value: function done() {
      window.removeEventListener("mouseup", this.up);
      window.removeEventListener("mousemove", this.move);
      if (this.mightDrag) {
        this.target.draggable = false;
        if (browser.gecko && this.setContentEditable) this.target.removeAttribute("contentEditable");
      }
    }
  }, {
    key: "up",
    value: function up(event) {
      this.done();

      if (this.leaveToBrowser || !contains(this.pm.content, event.target)) return this.pm.sel.fastPoll();

      var context = contextFromEvent(this.pm, event);
      if (this.event.ctrlKey && selectClickedNode(this.pm, context)) {
        event.preventDefault();
      } else if (runHandlerOnContext(this.pm.on.clickOn, this.context, event) || this.pm.on.click.dispatch(this.context.pos, event)) {
        event.preventDefault();
      } else {
        var inner = this.context.inside[this.context.inside.length - 1];
        if (inner && inner.node.type.isLeaf && inner.node.type.selectable) {
          this.pm.setNodeSelection(inner.pos);
          this.pm.focus();
        } else {
          this.pm.sel.fastPoll();
        }
      }
    }
  }, {
    key: "move",
    value: function move(event) {
      if (!this.leaveToBrowser && (Math.abs(this.x - event.clientX) > 4 || Math.abs(this.y - event.clientY) > 4)) this.leaveToBrowser = true;
      this.pm.sel.fastPoll();
    }
  }]);

  return MouseDown;
}();

handlers.touchdown = function (pm) {
  pm.sel.fastPoll();
};

handlers.contextmenu = function (pm, e) {
  var context = contextFromEvent(pm, e);
  if (context) {
    var inner = context.inside[context.inside.length - 1];
    if (pm.on.contextMenu.dispatch(context.pos, inner ? inner.node : pm.doc, e)) e.preventDefault();
  }
};

// Input compositions are hard. Mostly because the events fired by
// browsers are A) very unpredictable and inconsistent, and B) not
// cancelable.
//
// ProseMirror has the problem that it must not update the DOM during
// a composition, or the browser will cancel it. What it does is keep
// long-running operations (delayed DOM updates) when a composition is
// active.
//
// We _do not_ trust the information in the composition events which,
// apart from being very uninformative to begin with, is often just
// plain wrong. Instead, when a composition ends, we parse the dom
// around the original selection, and derive an update from that.

handlers.compositionstart = function (pm, e) {
  if (!pm.input.composing && hasFocus(pm)) pm.input.startComposition(e.data ? e.data.length : 0, true);
};

handlers.compositionupdate = function (pm) {
  if (!pm.input.composing && hasFocus(pm)) pm.input.startComposition(0, false);
};

handlers.compositionend = function (pm, e) {
  if (!hasFocus(pm)) return;
  var composing = pm.input.composing;
  if (!composing) {
    // We received a compositionend without having seen any previous
    // events for the composition. If there's data in the event
    // object, we assume that it's a real change, and start a
    // composition. Otherwise, we just ignore it.
    if (e.data) pm.input.startComposition(e.data.length, false);else return;
  } else if (composing.applied) {
    // This happens when a flush during composition causes a
    // syncronous compositionend.
    return;
  }

  clearTimeout(pm.input.finishComposing);
  pm.operation.composing.ended = true;
  // Applying the composition right away from this event confuses
  // Chrome (and probably other browsers), causing them to re-update
  // the DOM afterwards. So we apply the composition either in the
  // next input event, or after a short interval.
  pm.input.finishComposing = window.setTimeout(function () {
    var composing = pm.input.composing;
    if (composing && composing.ended) pm.input.applyComposition(true);
  }, 20);
};

function readInput(pm) {
  var composing = pm.input.composing;
  if (composing) {
    // Ignore input events during composition, except when the
    // composition has ended, in which case we can apply it.
    if (composing.ended) pm.input.applyComposition(true);
    return true;
  }

  // Read the changed DOM and derive an update from that.
  var result = readInputChange(pm);
  pm.flush();
  return result;
}

function readInputSoon(pm) {
  window.setTimeout(function () {
    if (!readInput(pm)) window.setTimeout(function () {
      return readInput(pm);
    }, 80);
  }, 20);
}

handlers.input = function (pm) {
  if (hasFocus(pm)) readInput(pm);
};

function toClipboard(doc, from, to, dataTransfer) {
  var $from = doc.resolve(from),
      start = from;
  for (var d = $from.depth; d > 0 && $from.end(d) == start; d--) {
    start++;
  }var slice = doc.slice(start, to);
  if (slice.possibleParent.type != doc.type.schema.nodes.doc) slice = new Slice(Fragment.from(slice.possibleParent.copy(slice.content)), slice.openLeft + 1, slice.openRight + 1);
  var dom = slice.content.toDOM(),
      wrap = document.createElement("div");
  if (dom.firstChild && dom.firstChild.nodeType == 1) dom.firstChild.setAttribute("pm-open-left", slice.openLeft);
  wrap.appendChild(dom);
  dataTransfer.clearData();
  dataTransfer.setData("text/html", wrap.innerHTML);
  dataTransfer.setData("text/plain", slice.content.textBetween(0, slice.content.size, "\n\n"));
  return slice;
}

var cachedCanUpdateClipboard = null;

function canUpdateClipboard(dataTransfer) {
  if (cachedCanUpdateClipboard != null) return cachedCanUpdateClipboard;
  dataTransfer.setData("text/html", "<hr>");
  return cachedCanUpdateClipboard = dataTransfer.getData("text/html") == "<hr>";
}

// : (ProseMirror, DataTransfer, ?bool, ResolvedPos) → ?Slice
function fromClipboard(pm, dataTransfer, plainText, $target) {
  var txt = dataTransfer.getData("text/plain");
  var html = dataTransfer.getData("text/html");
  if (!html && !txt) return null;
  var dom = void 0;
  if ((plainText || !html) && txt) {
    dom = document.createElement("div");
    pm.on.transformPastedText.dispatch(txt).split(/(?:\r\n?|\n){2,}/).forEach(function (block) {
      var para = dom.appendChild(document.createElement("p"));
      block.split(/\r\n?|\n/).forEach(function (line, i) {
        if (i) para.appendChild(document.createElement("br"));
        para.appendChild(document.createTextNode(line));
      });
    });
  } else {
    dom = readHTML(pm.on.transformPastedHTML.dispatch(html));
  }
  var openLeft = null,
      m = void 0;
  var foundLeft = dom.querySelector("[pm-open-left]");
  if (foundLeft && (m = /^\d+$/.exec(foundLeft.getAttribute("pm-open-left")))) openLeft = +m[0];
  var slice = parseDOMInContext($target, dom, { openLeft: openLeft, preserveWhiteSpace: true });
  return pm.on.transformPasted.dispatch(slice);
}

function insertRange($from, $to) {
  var from = $from.pos,
      to = $to.pos;
  for (var d = $to.depth; d > 0 && $to.end(d) == to; d--) {
    to++;
  }for (var _d = $from.depth; _d > 0 && $from.start(_d) == from && $from.end(_d) <= to; _d--) {
    from--;
  }return { from: from, to: to };
}

// Trick from jQuery -- some elements must be wrapped in other
// elements for innerHTML to work. I.e. if you do `div.innerHTML =
// "<td>..</td>"` the table cells are ignored.
var wrapMap = { thead: "table", colgroup: "table", col: "table colgroup",
  tr: "table tbody", td: "table tbody tr", th: "table tbody tr" };
function readHTML(html) {
  var metas = /(\s*<meta [^>]*>)*/.exec(html);
  if (metas) html = html.slice(metas[0].length);
  var elt = document.createElement("div");
  var firstTag = /(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(html),
      wrap = void 0,
      depth = 0;
  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()]) {
    var nodes = wrap.split(" ");
    html = nodes.map(function (n) {
      return "<" + n + ">";
    }).join("") + html + nodes.map(function (n) {
      return "</" + n + ">";
    }).reverse().join("");
    depth = nodes.length;
  }
  elt.innerHTML = html;
  for (var i = 0; i < depth; i++) {
    elt = elt.firstChild;
  }return elt;
}

handlers.copy = handlers.cut = function (pm, e) {
  var _pm$selection2 = pm.selection,
      from = _pm$selection2.from,
      to = _pm$selection2.to,
      empty = _pm$selection2.empty,
      cut = e.type == "cut";

  if (empty) return;
  if (!e.clipboardData || !canUpdateClipboard(e.clipboardData)) {
    if (cut && browser.ie && browser.ie_version <= 11) readInputSoon(pm);
    return;
  }
  toClipboard(pm.doc, from, to, e.clipboardData);
  e.preventDefault();
  if (cut) pm.tr.delete(from, to).apply();
};

handlers.paste = function (pm, e) {
  if (!hasFocus(pm) || pm.on.domPaste.dispatch(e)) return;
  if (!e.clipboardData) {
    if (browser.ie && browser.ie_version <= 11) readInputSoon(pm);
    return;
  }
  var sel = pm.selection,
      range = insertRange(sel.$from, sel.$to);
  var slice = fromClipboard(pm, e.clipboardData, pm.input.shiftKey, pm.doc.resolve(range.from));
  if (slice) {
    e.preventDefault();
    var tr = pm.tr.replace(range.from, range.to, slice);
    tr.setSelection(findSelectionNear(tr.doc.resolve(tr.map(range.to)), -1));
    tr.applyAndScroll();
  }
};

var Dragging = function Dragging(slice, from, to) {
  _classCallCheck(this, Dragging);

  this.slice = slice;
  this.from = from;
  this.to = to;
};

function dropPos(slice, $pos) {
  if (!slice || !slice.content.size) return $pos.pos;
  var content = slice.content;
  for (var i = 0; i < slice.openLeft; i++) {
    content = content.firstChild.content;
  }for (var d = $pos.depth; d >= 0; d--) {
    var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
    var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
    if ($pos.node(d).canReplace(insertPos, insertPos, content)) return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
  }
  return $pos.pos;
}

function removeDropTarget(pm) {
  if (pm.input.dropTarget) {
    pm.wrapper.removeChild(pm.input.dropTarget);
    pm.input.dropTarget = null;
  }
}

handlers.dragstart = function (pm, e) {
  var mouseDown = pm.input.mouseDown;
  if (mouseDown) mouseDown.done();

  if (!e.dataTransfer) return;

  var _pm$selection3 = pm.selection,
      from = _pm$selection3.from,
      to = _pm$selection3.to,
      empty = _pm$selection3.empty,
      dragging = void 0;

  var pos = !empty && pm.posAtCoords({ left: e.clientX, top: e.clientY });
  if (pos != null && pos >= from && pos <= to) {
    dragging = { from: from, to: to };
  } else if (mouseDown && mouseDown.mightDrag) {
    var _pos = mouseDown.mightDrag.pos;
    dragging = { from: _pos, to: _pos + mouseDown.mightDrag.node.nodeSize };
  }

  if (dragging) {
    var slice = toClipboard(pm.doc, dragging.from, dragging.to, e.dataTransfer);
    // FIXME the document could change during a drag, invalidating this range
    // use a marked range?
    pm.input.dragging = new Dragging(slice, dragging.from, dragging.to);
  }
};

handlers.dragend = function (pm) {
  removeDropTarget(pm);
  window.setTimeout(function () {
    return pm.input.dragging = null;
  }, 50);
};

handlers.dragover = handlers.dragenter = function (pm, e) {
  e.preventDefault();

  var target = pm.input.dropTarget;
  if (!target) target = pm.input.dropTarget = pm.wrapper.appendChild(elt("div", { class: "ProseMirror-drop-target" }));

  var mousePos = pm.posAtCoords({ left: e.clientX, top: e.clientY });
  var pos = mousePos == null ? null : dropPos(pm.input.dragging && pm.input.dragging.slice, pm.doc.resolve(mousePos));
  if (pos == null) return;
  var coords = pm.coordsAtPos(pos);
  var rect = pm.wrapper.getBoundingClientRect();
  coords.top -= rect.top;
  coords.right -= rect.left;
  coords.bottom -= rect.top;
  coords.left -= rect.left;
  target.style.left = coords.left - 1 + "px";
  target.style.top = coords.top + "px";
  target.style.height = coords.bottom - coords.top + "px";
};

handlers.dragleave = function (pm, e) {
  if (e.target == pm.content) removeDropTarget(pm);
};

handlers.drop = function (pm, e) {
  var dragging = pm.input.dragging;
  pm.input.dragging = null;
  removeDropTarget(pm);

  if (!e.dataTransfer || pm.on.domDrop.dispatch(e)) return;

  var $mouse = pm.doc.resolve(pm.posAtCoords({ left: e.clientX, top: e.clientY }));
  if (!$mouse) return;
  var range = insertRange($mouse, $mouse);
  var slice = dragging && dragging.slice || fromClipboard(pm, e.dataTransfer, pm.doc.resolve(range.from));
  if (!slice) return;
  var insertPos = dropPos(slice, pm.doc.resolve(range.from));

  e.preventDefault();
  var tr = pm.tr;
  if (dragging && !e.ctrlKey && dragging.from != null) tr.delete(dragging.from, dragging.to);
  var start = tr.map(insertPos),
      found = void 0;
  tr.replace(start, tr.map(insertPos), slice).apply();

  if (slice.content.childCount == 1 && slice.openLeft == 0 && slice.openRight == 0 && slice.content.child(0).type.selectable && (found = pm.doc.nodeAt(start)) && found.sameMarkup(slice.content.child(0))) {
    pm.setNodeSelection(start);
  } else {
    var left = findSelectionNear(pm.doc.resolve(start), 1, true).from;
    var right = findSelectionNear(pm.doc.resolve(tr.map(insertPos)), -1, true).to;
    pm.setTextSelection(left, right);
  }
  pm.focus();
};

handlers.focus = function (pm) {
  pm.wrapper.classList.add("ProseMirror-focused");
  pm.on.focus.dispatch();
};

handlers.blur = function (pm) {
  pm.wrapper.classList.remove("ProseMirror-focused");
  pm.on.blur.dispatch();
};
},{"../model":200,"../util/browser":218,"../util/dom":220,"./capturekeys":178,"./domchange":182,"./selection":193,"browserkeymap":46}],188:[function(require,module,exports){
"use strict";

var Keymap = require("browserkeymap");
var browser = require("../util/browser");

var c = require("./commands").commands;

// :: Keymap

// A basic keymap containing bindings not specific to any schema.
// Binds the following keys (when multiple commands are listed, they
// are chained with [`chainCommands`](#commands.chainCommands):
//
// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
// * **Backspace** to `deleteSelection`, `joinBackward`, `deleteCharBefore`
// * **Mod-Backspace** to `deleteSelection`, `joinBackward`, `deleteWordBefore`
// * **Delete** to `deleteSelection`, `joinForward`, `deleteCharAfter`
// * **Mod-Delete** to `deleteSelection`, `joinForward`, `deleteWordAfter`
// * **Alt-Up** to `joinUp`
// * **Alt-Down** to `joinDown`
// * **Mod-[** to `lift`
// * **Esc** to `selectParentNode`
// * **Mod-Z** to `undo`
// * **Mod-Y** and **Shift-Mod-Z** to `redo`
var baseKeymap = new Keymap({
  "Enter": c.chainCommands(c.newlineInCode, c.createParagraphNear, c.liftEmptyBlock, c.splitBlock),

  "Backspace": c.chainCommands(c.deleteSelection, c.joinBackward, c.deleteCharBefore),
  "Mod-Backspace": c.chainCommands(c.deleteSelection, c.joinBackward, c.deleteWordBefore),
  "Delete": c.chainCommands(c.deleteSelection, c.joinForward, c.deleteCharAfter),
  "Mod-Delete": c.chainCommands(c.deleteSelection, c.joinForward, c.deleteWordAfter),

  "Alt-Up": c.joinUp,
  "Alt-Down": c.joinDown,
  "Mod-[": c.lift,
  "Esc": c.selectParentNode,

  "Mod-Z": c.undo,
  "Mod-Y": c.redo,
  "Shift-Mod-Z": c.redo
});
exports.baseKeymap = baseKeymap;

if (browser.mac) baseKeymap.addBindings({
  "Ctrl-H": baseKeymap.lookup("Backspace"),
  "Alt-Backspace": baseKeymap.lookup("Cmd-Backspace"),
  "Ctrl-D": baseKeymap.lookup("Delete"),
  "Ctrl-Alt-Backspace": baseKeymap.lookup("Cmd-Delete"),
  "Alt-Delete": baseKeymap.lookup("Cmd-Delete"),
  "Alt-D": baseKeymap.lookup("Cmd-Delete")
});
},{"../util/browser":218,"./commands":180,"browserkeymap":46}],189:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require("./css");

var _require = require("../util/map"),
    Map = _require.Map;

var _require2 = require("subscription"),
    Subscription = _require2.Subscription,
    PipelineSubscription = _require2.PipelineSubscription,
    StoppableSubscription = _require2.StoppableSubscription,
    DOMSubscription = _require2.DOMSubscription;

var _require3 = require("../util/dom"),
    requestAnimationFrame = _require3.requestAnimationFrame,
    cancelAnimationFrame = _require3.cancelAnimationFrame,
    elt = _require3.elt,
    ensureCSSAdded = _require3.ensureCSSAdded;

var _require4 = require("../transform"),
    mapThrough = _require4.mapThrough;

var _require5 = require("../model"),
    Mark = _require5.Mark;

var _require6 = require("./options"),
    parseOptions = _require6.parseOptions;

var _require7 = require("./selection"),
    SelectionState = _require7.SelectionState,
    TextSelection = _require7.TextSelection,
    NodeSelection = _require7.NodeSelection,
    findSelectionAtStart = _require7.findSelectionAtStart,
    _hasFocus = _require7.hasFocus;

var _require8 = require("./dompos"),
    scrollIntoView = _require8.scrollIntoView,
    posAtCoords = _require8.posAtCoords,
    _coordsAtPos = _require8.coordsAtPos;

var _require9 = require("./draw"),
    draw = _require9.draw,
    redraw = _require9.redraw,
    DIRTY_REDRAW = _require9.DIRTY_REDRAW,
    DIRTY_RESCAN = _require9.DIRTY_RESCAN;

var _require10 = require("./input"),
    Input = _require10.Input;

var _require11 = require("./history"),
    History = _require11.History;

var _require12 = require("./range"),
    RangeStore = _require12.RangeStore,
    MarkedRange = _require12.MarkedRange;

var _require13 = require("./transform"),
    EditorTransform = _require13.EditorTransform;

var _require14 = require("./update"),
    EditorScheduler = _require14.EditorScheduler,
    UpdateScheduler = _require14.UpdateScheduler;

// ;; This is the class used to represent instances of the editor. A
// ProseMirror editor holds a [document](#Node) and a
// [selection](#Selection), and displays an editable surface
// representing that document in the browser document.


var ProseMirror = function () {
  // :: (Object)
  // Construct a new editor from a set of [options](#edit_options)
  // and, if it has a [`place`](#place) option, add it to the
  // document.
  function ProseMirror(opts) {
    var _this = this;

    _classCallCheck(this, ProseMirror);

    ensureCSSAdded();

    opts = this.options = parseOptions(opts);
    // :: Schema
    // The schema for this editor's document.
    this.schema = opts.schema || opts.doc && opts.doc.type.schema;
    if (!this.schema) throw new RangeError("You must specify a schema option");
    if (opts.doc == null) opts.doc = this.schema.nodes.doc.createAndFill();
    if (opts.doc.type.schema != this.schema) throw new RangeError("Schema option does not correspond to schema used in doc option");
    // :: DOMNode
    // The editable DOM node containing the document.
    this.content = elt("div", { class: "ProseMirror-content", "pm-container": true });
    // :: DOMNode
    // The outer DOM element of the editor.
    this.wrapper = elt("div", { class: "ProseMirror" }, this.content);
    this.wrapper.ProseMirror = this;

    // :: Object<Subscription>
    // A wrapper object containing the various [event
    // subscriptions](https://github.com/marijnh/subscription#readme)
    // exposed by an editor instance.
    this.on = {
      // :: Subscription<()>
      // Dispatched when the document has changed. See
      // [`setDoc`](#ProseMirror.on.setDoc) and
      // [`transform`](#ProseMirror.on.transform) for more specific
      // change-related events.
      change: new Subscription(),
      // :: Subscription<()>
      // Indicates that the editor's selection has changed.
      selectionChange: new Subscription(),
      // :: Subscription<(text: string)>
      // Dispatched when the user types text into the editor.
      textInput: new Subscription(),
      // :: Subscription<(doc: Node, selection: Selection)>
      // Dispatched when [`setDoc`](#ProseMirror.setDoc) is called, before
      // the document is actually updated.
      beforeSetDoc: new Subscription(),
      // :: Subscription<(doc: Node, selection: Selection)>
      // Dispatched when [`setDoc`](#ProseMirror.setDoc) is called, after
      // the document is updated.
      setDoc: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the user interacts with the editor, for example by
      // clicking on it or pressing a key while it is focused. Mostly
      // useful for closing or resetting transient UI state such as open
      // menus.
      interaction: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the editor gains focus.
      focus: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the editor loses focus.
      blur: new Subscription(),
      // :: StoppableSubscription<(pos: number, event: DOMEvent)>
      // Dispatched when the editor is clicked. Return a truthy
      // value to indicate that the click was handled, and no further
      // action needs to be taken.
      click: new StoppableSubscription(),
      // :: StoppableSubscription<(pos: number, node: Node, nodePos: number, event: DOMEvent)>
      // Dispatched for every node around a click in the editor, before
      // `click` is dispatched, from inner to outer nodes. `pos` is
      // the position neares to the click, `nodePos` is the position
      // directly in front of `node`.
      clickOn: new StoppableSubscription(),
      // :: StoppableSubscription<(pos: number, event: DOMEvent)>
      // Dispatched when the editor is double-clicked.
      doubleClick: new StoppableSubscription(),
      // :: StoppableSubscription<(pos: number, node: Node, nodePos: number, event: DOMEvent)>
      // Dispatched for every node around a double click in the
      // editor, before `doubleClick` is dispatched.
      doubleClickOn: new StoppableSubscription(),
      // :: StoppableSubscription<(pos: number, node: Node, event: DOMEvent)>
      // Dispatched when the context menu is opened on the editor.
      // Return a truthy value to indicate that you handled the event.
      contextMenu: new StoppableSubscription(),
      // :: PipelineSubscription<(slice: Slice) → Slice>
      // Dispatched when something is pasted or dragged into the editor. The
      // given slice represents the pasted content, and your handler can
      // return a modified version to manipulate it before it is inserted
      // into the document.
      transformPasted: new PipelineSubscription(),
      // :: PipelineSubscription<(text: string) → string>
      // Dispatched when plain text is pasted. Handlers must return the given
      // string or a transformed version of it.
      transformPastedText: new PipelineSubscription(),
      // :: PipelineSubscription<(html: string) → string>
      // Dispatched when html content is pasted or dragged into the editor.
      // Handlers must return the given string or a transformed
      // version of it.
      transformPastedHTML: new PipelineSubscription(),
      // :: Subscription<(transform: Transform, selectionBeforeTransform: Selection, options: Object)>
      // Signals that a (non-empty) transformation has been aplied to
      // the editor. Passes the `Transform`, the selection before the
      // transform, and the options given to [`apply`](#ProseMirror.apply)
      // as arguments to the handler.
      transform: new Subscription(),
      // :: Subscription<(transform: Transform, options: Object)>
      // Indicates that the given transform is about to be
      // [applied](#ProseMirror.apply). The handler may add additional
      // [steps](#Step) to the transform, but it it not allowed to
      // interfere with the editor's state.
      beforeTransform: new Subscription(),
      // :: StoppableSubscription<(transform: Transform)>
      // Dispatched before a transform (applied without `filter: false`) is
      // applied. The handler can return a truthy value to cancel the
      // transform.
      filterTransform: new StoppableSubscription(),
      // :: Subscription<()>
      // Dispatched when the editor is about to [flush](#ProseMirror.flush)
      // an update to the DOM.
      flushing: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the editor has finished
      // [flushing](#ProseMirror.flush) an update to the DOM.
      flush: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the editor redrew its document in the DOM.
      draw: new Subscription(),
      // :: Subscription<()>
      // Dispatched when the set of [active marks](#ProseMirror.activeMarks) changes.
      activeMarkChange: new Subscription(),
      // :: StoppableSubscription<(DOMEvent)>
      // Dispatched when a DOM `paste` event happens on the editor.
      // Handlers may declare the event as being handled by calling
      // `preventDefault` on it or returning a truthy value.
      domPaste: new DOMSubscription(),
      // :: StoppableSubscription<(DOMEvent)>
      // Dispatched when a DOM `drop` event happens on the editor.
      // Handlers may declare the event as being handled by calling
      // `preventDefault` on it or returning a truthy value.
      domDrop: new DOMSubscription()
    };

    if (opts.place && opts.place.appendChild) opts.place.appendChild(this.wrapper);else if (opts.place) opts.place(this.wrapper);

    this._root = null;

    this.setDocInner(opts.doc);
    draw(this, this.doc);
    this.content.contentEditable = true;
    if (opts.label) this.content.setAttribute("aria-label", opts.label);

    // A namespace where plugins can store their state. See the `Plugin` class.
    this.plugin = Object.create(null);
    this.cached = Object.create(null);
    this.operation = null;
    this.dirtyNodes = new Map(); // Maps node object to 1 (re-scan content) or 2 (redraw entirely)
    this.flushScheduled = null;
    this.centralScheduler = new EditorScheduler(this);

    this.sel = new SelectionState(this, findSelectionAtStart(this.doc));
    this.accurateSelection = false;
    this.input = new Input(this);
    this.addKeymap(this.options.keymap, -100);

    this.options.plugins.forEach(function (plugin) {
      return plugin.attach(_this);
    });
  }

  // :: DOMDocument
  // The root document that the editor is part of. Initialized lazily
  // (falling back to the top-level document until the editor is
  // placed in the DOM) to make sure asynchronously adding the editor
  // to a shadow DOM works correctly.


  _createClass(ProseMirror, [{
    key: "getOption",


    // :: (string) → any
    // Get the value of the given [option](#edit_options).
    value: function getOption(name) {
      return this.options[name];
    }

    // :: Selection
    // Get the current selection.

  }, {
    key: "setTextSelection",


    // :: (number, ?number)
    // Set the selection to a [text selection](#TextSelection) from
    // `anchor` to `head`, or, if `head` is null, a cursor selection at
    // `anchor`.
    value: function setTextSelection(anchor) {
      var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;

      var $anchor = this.doc.resolve(anchor),
          $head = this.doc.resolve(head);
      if (!$anchor.parent.isTextblock || !$head.parent.isTextblock) throw new RangeError("Setting text selection with an end not in a textblock");
      this.setSelection(new TextSelection($anchor, $head));
    }

    // :: (number)
    // Set the selection to a node selection on the node after `pos`.

  }, {
    key: "setNodeSelection",
    value: function setNodeSelection(pos) {
      var $pos = this.doc.resolve(pos),
          node = $pos.nodeAfter;
      if (!node || !node.type.selectable) throw new RangeError("Trying to create a node selection that doesn't point at a selectable node");
      this.setSelection(new NodeSelection($pos));
    }

    // :: (Selection)
    // Set the selection to the given selection object.

  }, {
    key: "setSelection",
    value: function setSelection(selection) {
      this.ensureOperation();
      if (!selection.eq(this.sel.range)) this.sel.setAndSignal(selection);
    }
  }, {
    key: "setDocInner",
    value: function setDocInner(doc) {
      if (doc.type != this.schema.nodes.doc) throw new RangeError("Trying to set a document with a different schema");
      // :: Node The current document.
      this.doc = doc;
      this.ranges = new RangeStore(this);
      // :: History The edit history for the editor.
      this.history = new History(this);
    }

    // :: (Node, ?Selection)
    // Set the editor's content, and optionally include a new selection.

  }, {
    key: "setDoc",
    value: function setDoc(doc, sel) {
      if (!sel) sel = findSelectionAtStart(doc);
      this.on.beforeSetDoc.dispatch(doc, sel);
      this.ensureOperation();
      this.setDocInner(doc);
      this.operation.docSet = true;
      this.sel.set(sel, true);
      this.on.setDoc.dispatch(doc, sel);
    }
  }, {
    key: "updateDoc",
    value: function updateDoc(doc, mapping, selection) {
      this.ensureOperation();
      this.ranges.transform(mapping);
      this.operation.mappings.push(mapping);
      this.doc = doc;
      this.sel.setAndSignal(selection || this.sel.range.map(doc, mapping));
      this.on.change.dispatch();
    }

    // :: EditorTransform
    // Create an editor- and selection-aware `Transform` object for this
    // editor.

  }, {
    key: "apply",


    // :: (Transform, ?Object) → Transform
    // Apply a transformation (which you might want to create with the
    // [`tr` getter](#ProseMirror.tr)) to the document in the editor.
    // The following options are supported:
    //
    // **`scrollIntoView`**: ?bool
    //   : When true, scroll the selection into view on the next
    //     [redraw](#ProseMirror.flush).
    //
    // **`selection`**`: ?Selection`
    //   : A new selection to set after the transformation is applied.
    //     If `transform` is an `EditorTransform`, this will default to
    //     that object's current selection. If no selection is provided,
    //     the new selection is determined by [mapping](#Selection.map)
    //     the existing selection through the transform.
    //
    // **`filter`**: ?bool
    //   : When set to false, suppresses the ability of the
    //     [`filterTransform` event](#ProseMirror.on.filterTransform)
    //     to cancel this transform.
    //
    // Returns the transform itself.
    value: function apply(transform) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nullOptions;

      if (!transform.steps.length) return transform;
      if (!transform.docs[0].eq(this.doc)) throw new RangeError("Applying a transform that does not start with the current document");

      if (options.filter !== false && this.on.filterTransform.dispatch(transform)) return transform;

      var selectionBeforeTransform = this.selection;

      this.on.beforeTransform.dispatch(transform, options);
      this.updateDoc(transform.doc, transform, options.selection || transform.selection);
      this.on.transform.dispatch(transform, selectionBeforeTransform, options);
      if (options.scrollIntoView) this.scrollIntoView();
      return transform;
    }

    // : (?Object) → Operation
    // Ensure that an operation has started.

  }, {
    key: "ensureOperation",
    value: function ensureOperation(options) {
      return this.operation || this.startOperation(options);
    }

    // : (?Object) → Operation
    // Start an operation and schedule a flush so that any effect of
    // the operation shows up in the DOM.

  }, {
    key: "startOperation",
    value: function startOperation(options) {
      var _this2 = this;

      this.operation = new Operation(this, options);
      if (!(options && options.readSelection === false) && this.sel.readFromDOM()) this.operation.sel = this.sel.range;

      if (this.flushScheduled == null) this.flushScheduled = requestAnimationFrame(function () {
        return _this2.flush();
      });
      return this.operation;
    }

    // Cancel any scheduled operation flush.

  }, {
    key: "unscheduleFlush",
    value: function unscheduleFlush() {
      if (this.flushScheduled != null) {
        cancelAnimationFrame(this.flushScheduled);
        this.flushScheduled = null;
      }
    }

    // :: () → bool
    // Flush any pending changes to the DOM. When the document,
    // selection, or marked ranges in an editor change, the DOM isn't
    // updated immediately, but rather scheduled to be updated the next
    // time the browser redraws the screen. This method can be used to
    // force this to happen immediately. It can be useful when you, for
    // example, want to measure where on the screen a part of the
    // document ends up, immediately after changing the document.
    //
    // Returns true when it updated the document DOM.

  }, {
    key: "flush",
    value: function flush() {
      this.unscheduleFlush();

      // IE does not support calling contains() on document
      var root = this.root.body || this.root;
      if (!root.contains(this.wrapper) || !this.operation) return false;
      this.on.flushing.dispatch();

      var op = this.operation,
          redrawn = false;
      if (!op) return false;
      if (op.composing) this.input.applyComposition();

      this.operation = null;
      this.accurateSelection = true;

      if (op.doc != this.doc || this.dirtyNodes.size) {
        redraw(this, this.dirtyNodes, this.doc, op.doc);
        this.dirtyNodes.clear();
        redrawn = true;
      }

      if (redrawn || !op.sel.eq(this.sel.range) || op.focus) this.sel.toDOM(op.focus);

      // FIXME somehow schedule this relative to ui/update so that it
      // doesn't cause extra layout
      if (op.scrollIntoView !== false) scrollIntoView(this, op.scrollIntoView);
      if (redrawn) this.on.draw.dispatch();
      this.on.flush.dispatch();
      this.accurateSelection = false;
      return redrawn;
    }

    // :: (Keymap, ?number)
    // Add a
    // [keymap](https://github.com/marijnh/browserkeymap#an-object-type-for-keymaps)
    // to the editor. Keymaps added in this way are queried before the
    // base keymap. The `priority` parameter can be used to
    // control when they are queried relative to other maps added like
    // this. Maps with a higher priority get queried first.

  }, {
    key: "addKeymap",
    value: function addKeymap(map) {
      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var i = 0,
          maps = this.input.keymaps;
      for (; i < maps.length; i++) {
        if (maps[i].priority < priority) break;
      }maps.splice(i, 0, { map: map, priority: priority });
    }

    // :: (union<string, Keymap>)
    // Remove the given keymap, or the keymap with the given name, from
    // the editor.

  }, {
    key: "removeKeymap",
    value: function removeKeymap(map) {
      var maps = this.input.keymaps;
      for (var i = 0; i < maps.length; ++i) {
        if (maps[i].map == map || maps[i].map.options.name == map) {
          maps.splice(i, 1);
          return true;
        }
      }
    }

    // :: (number, number, ?Object) → MarkedRange
    // Create a marked range between the given positions. Marked ranges
    // “track” the part of the document they point to—as the document
    // changes, they are updated to move, grow, and shrink along with
    // their content.
    //
    // The `options` parameter may be an object containing these properties:
    //
    // **`inclusiveLeft`**`: bool = false`
    //   : Whether the left side of the range is inclusive. When it is,
    //     content inserted at that point will become part of the range.
    //     When not, it will be outside of the range.
    //
    // **`inclusiveRight`**`: bool = false`
    //   : Whether the right side of the range is inclusive.
    //
    // **`removeWhenEmpty`**`: bool = true`
    //   : Whether the range should be forgotten when it becomes empty
    //     (because all of its content was deleted).
    //
    // **`className`**`: string`
    //   : A CSS class to add to the inline content that is part of this
    //     range.
    //
    // **`onRemove`**`: fn(number, number)`
    //   : When given, this function will be called when the range is
    //     removed from the editor.

  }, {
    key: "markRange",
    value: function markRange(from, to, options) {
      var range = new MarkedRange(from, to, options);
      this.ranges.addRange(range);
      return range;
    }

    // :: (MarkedRange)
    // Remove the given range from the editor.

  }, {
    key: "removeRange",
    value: function removeRange(range) {
      this.ranges.removeRange(range);
    }

    // :: () → [Mark]
    // Get the marks at the cursor. By default, this yields the marks
    // associated with the content at the cursor, as per `Node.marksAt`.
    // But if the set of active marks was updated with
    // [`addActiveMark`](#ProseMirror.addActiveMark) or
    // [`removeActiveMark`](#ProseMirror.removeActiveMark), the updated
    // set is returned.

  }, {
    key: "activeMarks",
    value: function activeMarks() {
      return this.input.storedMarks || currentMarks(this);
    }

    // :: (Mark)
    // Add a mark to the set of overridden active marks that will be
    // applied to subsequently typed text. Does not do anything when the
    // selection isn't collapsed.

  }, {
    key: "addActiveMark",
    value: function addActiveMark(mark) {
      if (this.selection.empty) {
        this.input.storedMarks = mark.addToSet(this.input.storedMarks || currentMarks(this));
        this.on.activeMarkChange.dispatch();
      }
    }

    // :: (MarkType)
    // Remove any mark of the given type from the set of overidden active marks.

  }, {
    key: "removeActiveMark",
    value: function removeActiveMark(markType) {
      if (this.selection.empty) {
        this.input.storedMarks = markType.removeFromSet(this.input.storedMarks || currentMarks(this));
        this.on.activeMarkChange.dispatch();
      }
    }

    // :: ()
    // Give the editor focus.

  }, {
    key: "focus",
    value: function focus() {
      if (this.operation) this.operation.focus = true;else this.sel.toDOM(true);
    }

    // :: () → bool
    // Query whether the editor has focus.

  }, {
    key: "hasFocus",
    value: function hasFocus() {
      if (this.sel.range instanceof NodeSelection) return this.root.activeElement == this.content;else return _hasFocus(this);
    }

    // :: ({top: number, left: number}) → ?number
    // If the given coordinates (which should be relative to the top
    // left corner of the window—not the page) fall within the editable
    // content, this method will return the document position that
    // corresponds to those coordinates.

  }, {
    key: "posAtCoords",
    value: function posAtCoords(coords) {
      var result = mappedPosAtCoords(this, coords);
      return result && result.pos;
    }

    // :: ({top: number, left: number}) → ?{pos: number, inside: [{pos: number, node: Node}]}
    // If the given coordinates fall within the editable content, this
    // method will return the document position that corresponds to
    // those coordinates, along with a stack of nodes and their
    // positions (excluding the top node) that the coordinates fall
    // into.

  }, {
    key: "contextAtCoords",
    value: function contextAtCoords(coords) {
      var result = mappedPosAtCoords(this, coords);
      if (!result) return null;

      var $pos = this.doc.resolve(result.inLeaf == -1 ? result.pos : result.inLeaf),
          inside = [];
      for (var i = 1; i <= $pos.depth; i++) {
        inside.push({ pos: $pos.before(i), node: $pos.node(i) });
      }if (result.inLeaf > -1) {
        var after = $pos.nodeAfter;
        if (after && !after.isText && after.type.isLeaf) inside.push({ pos: result.inLeaf, node: after });
      }
      return { pos: result.pos, inside: inside };
    }

    // :: (number) → {top: number, left: number, bottom: number}
    // Find the screen coordinates (relative to top left corner of the
    // window) of the given document position.

  }, {
    key: "coordsAtPos",
    value: function coordsAtPos(pos) {
      this.flush();
      return _coordsAtPos(this, pos);
    }

    // :: (?number)
    // Scroll the given position, or the cursor position if `pos` isn't
    // given, into view.

  }, {
    key: "scrollIntoView",
    value: function scrollIntoView() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this.ensureOperation();
      this.operation.scrollIntoView = pos;
    }
  }, {
    key: "markRangeDirty",
    value: function markRangeDirty(from, to) {
      var doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.doc;

      this.ensureOperation();
      var dirty = this.dirtyNodes;
      var $from = doc.resolve(from),
          $to = doc.resolve(to);
      var same = $from.sameDepth($to);
      for (var depth = 0; depth <= same; depth++) {
        var child = $from.node(depth);
        if (!dirty.has(child)) dirty.set(child, DIRTY_RESCAN);
      }
      var start = $from.index(same),
          end = $to.index(same) + (same == $to.depth && $to.atNodeBoundary ? 0 : 1);
      var parent = $from.node(same);
      for (var i = start; i < end; i++) {
        dirty.set(parent.child(i), DIRTY_REDRAW);
      }
    }
  }, {
    key: "markAllDirty",
    value: function markAllDirty() {
      this.dirtyNodes.set(this.doc, DIRTY_REDRAW);
    }

    // :: (string) → string
    // Return a translated string, if a [translate function](#translate)
    // has been supplied, or the original string.

  }, {
    key: "translate",
    value: function translate(string) {
      var trans = this.options.translate;
      return trans ? trans(string) : string;
    }

    // :: (() -> ?() -> ?())
    // Schedule a DOM update function to be called either the next time
    // the editor is [flushed](#ProseMirror.flush), or if no flush happens
    // immediately, after 200 milliseconds. This is used to synchronize
    // DOM updates and read to prevent [DOM layout
    // thrashing](http://eloquentjavascript.net/13_dom.html#p_nnTb9RktUT).
    //
    // Often, your updates will need to both read and write from the DOM.
    // To schedule such access in lockstep with other modules, the
    // function you give can return another function, which may return
    // another function, and so on. The first call should _write_ to the
    // DOM, and _not read_. If a _read_ needs to happen, that should be
    // done in the function returned from the first call. If that has to
    // be followed by another _write_, that should be done in a function
    // returned from the second function, and so on.

  }, {
    key: "scheduleDOMUpdate",
    value: function scheduleDOMUpdate(f) {
      this.centralScheduler.set(f);
    }

    // :: (() -> ?() -> ?())
    // Cancel an update scheduled with `scheduleDOMUpdate`. Calling this
    // with a function that is not actually scheduled is harmless.

  }, {
    key: "unscheduleDOMUpdate",
    value: function unscheduleDOMUpdate(f) {
      this.centralScheduler.unset(f);
    }

    // :: ([Subscription], () -> ?()) → UpdateScheduler
    // Creates an update scheduler for this editor. `subscriptions`
    // should be an array of subscriptions to listen for. `start` should
    // be a function as expected by
    // [`scheduleDOMUpdate`](ProseMirror.scheduleDOMUpdate).

  }, {
    key: "updateScheduler",
    value: function updateScheduler(subscriptions, start) {
      return new UpdateScheduler(this, subscriptions, start);
    }
  }, {
    key: "root",
    get: function get() {
      var cached = this._root;
      if (cached == null) for (var search = this.wrapper.parentNode; search; search = search.parentNode) {
        if (search.nodeType == 9 || search.nodeType == 11 && search.host) return this._root = search;
      }
      return cached || document;
    }
  }, {
    key: "selection",
    get: function get() {
      if (!this.accurateSelection) this.ensureOperation();
      return this.sel.range;
    }
  }, {
    key: "tr",
    get: function get() {
      return new EditorTransform(this);
    }
  }]);

  return ProseMirror;
}();

exports.ProseMirror = ProseMirror;

function mappedPosAtCoords(pm, coords) {
  // If the DOM has been changed, flush so that we have a proper DOM to read
  if (pm.operation && (pm.dirtyNodes.size > 0 || pm.operation.composing || pm.operation.docSet)) pm.flush();
  var result = posAtCoords(pm, coords);
  if (!result) return null;

  // If there's an active operation, we need to map forward through
  // its changes to get a position that applies to the current
  // document
  if (pm.operation) return { pos: mapThrough(pm.operation.mappings, result.pos),
    inLeaf: result.inLeaf < 0 ? null : mapThrough(pm.operation.mappings, result.inLeaf) };else return result;
}

function currentMarks(pm) {
  var head = pm.selection.head;
  return head == null ? Mark.none : pm.doc.marksAt(head);
}

var nullOptions = {};

// Operations are used to delay/batch DOM updates. When a change to
// the editor state happens, it is not immediately flushed to the DOM,
// but rather a call to `ProseMirror.flush` is scheduled using
// `requestAnimationFrame`. An object of this class is stored in the
// editor's `operation` property, and holds information about the
// state at the start of the operation, which can be used to determine
// the minimal DOM update needed. It also stores information about
// whether a focus needs to happen on flush, and whether something
// needs to be scrolled into view.

var Operation = function Operation(pm, options) {
  _classCallCheck(this, Operation);

  this.doc = pm.doc;
  this.docSet = false;
  this.sel = options && options.selection || pm.sel.range;
  this.scrollIntoView = false;
  this.focus = false;
  this.mappings = [];
  this.composing = null;
};
},{"../model":200,"../transform":209,"../util/dom":220,"../util/map":222,"./css":181,"./dompos":183,"./draw":184,"./history":185,"./input":187,"./options":190,"./range":192,"./selection":193,"./transform":194,"./update":195,"subscription":225}],190:[function(require,module,exports){
"use strict";

var _require = require("./keymap"),
    baseKeymap = _require.baseKeymap;

// Object mapping option names to default values.


var options = Object.create(null);

// :: Schema #path=schema #kind=option
// The [schema](#Schema) that the editor's document should use. Will
// default to the schema of the `doc` option, if that is given.
options.schema = null;

// :: Node #path=doc #kind=option
// The starting document.
options.doc = null;

// :: ?union<DOMNode, (DOMNode)> #path=place #kind=option
// Determines the placement of the editor in the page. When `null`,
// the editor is not placed. When a DOM node is given, the editor is
// appended to that node. When a function is given, it is called
// with the editor's wrapping DOM node, and is expected to place it
// into the document.
options.place = null;

// :: number #path=historyDepth #kind=option
// The amount of history events that are collected before the oldest
// events are discarded. Defaults to 100.
options.historyDepth = 100;

// :: number #path=historyEventDelay #kind=option
// The amount of milliseconds that must pass between changes to
// start a new history event. Defaults to 500.
options.historyEventDelay = 500;

// :: number #path=scrollThreshold #kind=option
// The minimum distance to keep between the position of document
// changes and the editor bounding rectangle before scrolling the view.
// Defaults to 0.
options.scrollThreshold = 0;

// :: number #path=scrollMargin #kind=option
// Determines how far to scroll when the scroll threshold is
// surpassed. Defaults to 5.
options.scrollMargin = 5;

// :: Keymap #path=keymap #kind=option
// Sets the base keymap for the editor. Defaults to `baseKeymap`.
options.keymap = baseKeymap;

// :: ?string #path=label #kind=option
// The label of the editor. When set, the editable DOM node gets an
// `aria-label` attribute with this value.
options.label = null;

// :: ?(string) → string #path=translate #kind=option
// Optional function to translate strings such as menu labels and prompts.
// When set, should be a function that takes a string as argument and returns
// a string, i.e. :: (string) → string
options.translate = null;

// :: [Plugin] #path=plugins #kind=option
// A set of plugins to enable when the editor is initialized. Defaults
// to the empty array.
options.plugins = [];

function parseOptions(obj) {
  var result = Object.create(null);
  for (var option in options) {
    result[option] = Object.prototype.hasOwnProperty.call(obj, option) ? obj[option] : options[option];
  }return result;
}
exports.parseOptions = parseOptions;
},{"./keymap":188}],191:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var pluginProps = Object.create(null);

// Each plugin gets assigned a unique property name, so that its state
// can be stored in the editor's `plugin` object.
function registerProp() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "plugin";

  for (var i = 1;; i++) {
    var prop = name + (i > 1 ? "_" + i : "");
    if (!(prop in pluginProps)) return pluginProps[prop] = prop;
  }
}

// ;; A plugin is a piece of functionality that can be attached to a
// ProseMirror instance. It may do something like show a
// [menu](#menubar) or wire in [collaborative editing](#collab). The
// plugin object is the interface to enabling and disabling the
// plugin, and for those where this is relevant, for accessing its
// state.

var Plugin = function () {
  // :: (constructor, ?Object)
  // Create a plugin object for the given state class. If desired, you
  // can pass a collection of options. When initializing the plugin,
  // it will receive the ProseMirror instance and the options as
  // arguments to its constructor.
  function Plugin(State, options, prop) {
    _classCallCheck(this, Plugin);

    this.State = State;
    this.options = options || Object.create(null);
    this.prop = prop || registerProp(State.name);
  }

  // :: (ProseMirror) → ?any
  // Return the plugin state for the given editor, if any.


  _createClass(Plugin, [{
    key: "get",
    value: function get(pm) {
      return pm.plugin[this.prop];
    }

    // :: (ProseMirror) → any
    // Initialize the plugin for the given editor. If it was already
    // enabled, this throws an error.

  }, {
    key: "attach",
    value: function attach(pm) {
      if (this.get(pm)) throw new RangeError("Attaching plugin multiple times");
      return pm.plugin[this.prop] = new this.State(pm, this.options);
    }

    // :: (ProseMirror)
    // Disable the plugin in the given editor. If the state has a
    // `detach` method, that will be called with the editor as argument,
    // to give it a chance to clean up.

  }, {
    key: "detach",
    value: function detach(pm) {
      var found = this.get(pm);
      if (found) {
        if (found.detach) found.detach(pm);
        delete pm.plugin[this.prop];
      }
    }

    // :: (ProseMirror) → any
    // Get the plugin state for an editor. Initializes the plugin if it
    // wasn't already active.

  }, {
    key: "ensure",
    value: function ensure(pm) {
      return this.get(pm) || this.attach(pm);
    }

    // :: (?Object) → Plugin
    // Configure the plugin. The given options will be combined with the
    // existing (default) options, with the newly provided ones taking
    // precedence. Returns a new plugin object with the new
    // configuration.

  }, {
    key: "config",
    value: function config(options) {
      if (!options) return this;
      var result = Object.create(null);
      for (var prop in this.options) {
        result[prop] = this.options[prop];
      }for (var _prop in options) {
        result[_prop] = options[_prop];
      }return new Plugin(this.State, result, this.prop);
    }
  }]);

  return Plugin;
}();

exports.Plugin = Plugin;
},{}],192:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ;; A marked range as created by
// [`markRange`](#ProseMirror.markRange).
var MarkedRange = function () {
  function MarkedRange(from, to, options) {
    _classCallCheck(this, MarkedRange);

    this.options = options || {};
    // :: ?number
    // The current start position of the range. Updated whenever the
    // editor's document is changed. Set to `null` when the marked
    // range is [removed](#ProseMirror.removeRange).
    this.from = from;
    // :: ?number
    // The current end position of the range. Updated whenever the
    // editor's document is changed. Set to `null` when the marked
    // range is [removed](#ProseMirror.removeRange).
    this.to = to;
  }

  _createClass(MarkedRange, [{
    key: "remove",
    value: function remove() {
      if (this.options.onRemove) this.options.onRemove(this.from, Math.max(this.to, this.from));
      this.from = this.to = null;
    }
  }]);

  return MarkedRange;
}();

exports.MarkedRange = MarkedRange;

var RangeSorter = function () {
  function RangeSorter() {
    _classCallCheck(this, RangeSorter);

    this.sorted = [];
  }

  _createClass(RangeSorter, [{
    key: "find",
    value: function find(at) {
      var min = 0,
          max = this.sorted.length;
      for (;;) {
        if (max < min + 10) {
          for (var i = min; i < max; i++) {
            if (this.sorted[i].at >= at) return i;
          }return max;
        }
        var mid = min + max >> 1;
        if (this.sorted[mid].at > at) max = mid;else min = mid;
      }
    }
  }, {
    key: "insert",
    value: function insert(obj) {
      this.sorted.splice(this.find(obj.at), 0, obj);
    }
  }, {
    key: "remove",
    value: function remove(at, range) {
      var pos = this.find(at);
      for (var dist = 0;; dist++) {
        var leftPos = pos - dist - 1,
            rightPos = pos + dist;
        if (leftPos >= 0 && this.sorted[leftPos].range == range) {
          this.sorted.splice(leftPos, 1);
          return;
        } else if (rightPos < this.sorted.length && this.sorted[rightPos].range == range) {
          this.sorted.splice(rightPos, 1);
          return;
        }
      }
    }
  }, {
    key: "resort",
    value: function resort() {
      for (var i = 0; i < this.sorted.length; i++) {
        var cur = this.sorted[i];
        var at = cur.at = cur.type == "open" ? cur.range.from : cur.range.to;
        var pos = i;
        while (pos > 0 && this.sorted[pos - 1].at > at) {
          this.sorted[pos] = this.sorted[pos - 1];
          this.sorted[--pos] = cur;
        }
      }
    }
  }]);

  return RangeSorter;
}();

var RangeStore = function () {
  function RangeStore(pm) {
    _classCallCheck(this, RangeStore);

    this.pm = pm;
    this.ranges = [];
    this.sorted = new RangeSorter();
  }

  _createClass(RangeStore, [{
    key: "addRange",
    value: function addRange(range) {
      this.ranges.push(range);
      this.sorted.insert({ type: "open", at: range.from, range: range });
      this.sorted.insert({ type: "close", at: range.to, range: range });
      if (range.options.className) this.pm.markRangeDirty(range.from, range.to);
    }
  }, {
    key: "removeRange",
    value: function removeRange(range) {
      var found = this.ranges.indexOf(range);
      if (found > -1) {
        this.ranges.splice(found, 1);
        this.sorted.remove(range.from, range);
        this.sorted.remove(range.to, range);
        if (range.options.className) this.pm.markRangeDirty(range.from, range.to);
        range.remove();
      }
    }
  }, {
    key: "transform",
    value: function transform(mapping) {
      for (var i = 0; i < this.ranges.length; i++) {
        var range = this.ranges[i];
        range.from = mapping.map(range.from, range.options.inclusiveLeft ? -1 : 1);
        range.to = mapping.map(range.to, range.options.inclusiveRight ? 1 : -1);
        if (range.options.removeWhenEmpty !== false && range.from >= range.to) {
          this.removeRange(range);
          i--;
        } else if (range.from > range.to) {
          range.to = range.from;
        }
      }
      this.sorted.resort();
    }
  }, {
    key: "activeRangeTracker",
    value: function activeRangeTracker() {
      return new RangeTracker(this.sorted.sorted);
    }
  }]);

  return RangeStore;
}();

exports.RangeStore = RangeStore;

function significant(obj) {
  var range = obj.range;
  return range.options.className && range.from != range.to || range.options.elementBefore && obj.type == "open" || range.options.elementAfter && obj.type == "close";
}

var RangeTracker = function () {
  function RangeTracker(sorted) {
    _classCallCheck(this, RangeTracker);

    this.sorted = sorted;
    this.pos = 0;
    this.current = [];
    this.element = null;
  }

  _createClass(RangeTracker, [{
    key: "advanceTo",
    value: function advanceTo(pos) {
      var next = void 0;
      this.element = null;
      while (this.pos < this.sorted.length && (next = this.sorted[this.pos]).at <= pos) {
        if (significant(next)) {
          var className = next.range.options.className,
              element = next.range.options.elementBefore;
          if (className) {
            if (next.type == "open") this.current.push(className);else this.current.splice(this.current.indexOf(className), 1);
          }
          if (element && next.type == "open" && next.at == pos) this.element = element;
        }
        this.pos++;
      }
    }
  }, {
    key: "nextChangeBefore",
    value: function nextChangeBefore(pos) {
      for (;;) {
        if (this.pos == this.sorted.length) return -1;
        var next = this.sorted[this.pos];
        if (!significant(next)) this.pos++;else if (next.at >= pos) return -1;else return next.at;
      }
    }
  }]);

  return RangeTracker;
}();
},{}],193:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("../util/dom"),
    contains = _require.contains;

var browser = require("../util/browser");

var _require2 = require("./dompos"),
    posFromDOM = _require2.posFromDOM,
    DOMAfterPos = _require2.DOMAfterPos,
    DOMFromPos = _require2.DOMFromPos,
    coordsAtPos = _require2.coordsAtPos;

// Track the state of the current editor selection. Keeps the editor
// selection in sync with the DOM selection by polling for changes,
// as there is no DOM event for DOM selection changes.


var SelectionState = function () {
  function SelectionState(pm, range) {
    var _this = this;

    _classCallCheck(this, SelectionState);

    this.pm = pm;
    // The current editor selection.
    this.range = range;

    // The timeout ID for the poller when active.
    this.polling = null;
    // Track the state of the DOM selection.
    this.lastAnchorNode = this.lastHeadNode = this.lastAnchorOffset = this.lastHeadOffset = null;
    // The corresponding DOM node when a node selection is active.
    this.lastNode = null;

    pm.content.addEventListener("focus", function () {
      return _this.receivedFocus();
    });

    this.poller = this.poller.bind(this);
  }

  // : (Selection, boolean)
  // Set the current selection and signal an event on the editor.


  _createClass(SelectionState, [{
    key: "setAndSignal",
    value: function setAndSignal(range, clearLast) {
      this.set(range, clearLast);
      this.pm.on.selectionChange.dispatch();
    }

    // : (Selection, boolean)
    // Set the current selection.

  }, {
    key: "set",
    value: function set(range, clearLast) {
      this.pm.ensureOperation({ readSelection: false, selection: range });
      this.range = range;
      if (clearLast !== false) this.lastAnchorNode = null;
    }
  }, {
    key: "poller",
    value: function poller() {
      if (hasFocus(this.pm)) {
        if (!this.pm.operation) this.readFromDOM();
        this.polling = setTimeout(this.poller, 100);
      } else {
        this.polling = null;
      }
    }
  }, {
    key: "startPolling",
    value: function startPolling() {
      clearTimeout(this.polling);
      this.polling = setTimeout(this.poller, 50);
    }
  }, {
    key: "fastPoll",
    value: function fastPoll() {
      this.startPolling();
    }
  }, {
    key: "stopPolling",
    value: function stopPolling() {
      clearTimeout(this.polling);
      this.polling = null;
    }

    // : () → bool
    // Whether the DOM selection has changed from the last known state.

  }, {
    key: "domChanged",
    value: function domChanged() {
      var sel = this.pm.root.getSelection();
      return sel.anchorNode != this.lastAnchorNode || sel.anchorOffset != this.lastAnchorOffset || sel.focusNode != this.lastHeadNode || sel.focusOffset != this.lastHeadOffset;
    }

    // Store the current state of the DOM selection.

  }, {
    key: "storeDOMState",
    value: function storeDOMState() {
      var sel = this.pm.root.getSelection();
      this.lastAnchorNode = sel.anchorNode;this.lastAnchorOffset = sel.anchorOffset;
      this.lastHeadNode = sel.focusNode;this.lastHeadOffset = sel.focusOffset;
    }

    // : () → bool
    // When the DOM selection changes in a notable manner, modify the
    // current selection state to match.

  }, {
    key: "readFromDOM",
    value: function readFromDOM() {
      if (!hasFocus(this.pm) || !this.domChanged()) return false;

      var _selectionFromDOM = selectionFromDOM(this.pm, this.range.head),
          range = _selectionFromDOM.range,
          adjusted = _selectionFromDOM.adjusted;

      this.setAndSignal(range);

      if (range instanceof NodeSelection || adjusted) {
        this.toDOM();
      } else {
        this.clearNode();
        this.storeDOMState();
      }
      return true;
    }
  }, {
    key: "toDOM",
    value: function toDOM(takeFocus) {
      if (!hasFocus(this.pm)) {
        if (!takeFocus) return;
        // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444
        else if (browser.gecko) this.pm.content.focus();
      }
      if (this.range instanceof NodeSelection) this.nodeToDOM();else this.rangeToDOM();
    }

    // Make changes to the DOM for a node selection.

  }, {
    key: "nodeToDOM",
    value: function nodeToDOM() {
      var dom = DOMAfterPos(this.pm, this.range.from);
      if (dom != this.lastNode) {
        this.clearNode();
        dom.classList.add("ProseMirror-selectednode");
        this.pm.content.classList.add("ProseMirror-nodeselection");
        this.lastNode = dom;
      }
      var range = document.createRange(),
          sel = this.pm.root.getSelection();
      range.selectNode(dom);
      sel.removeAllRanges();
      sel.addRange(range);
      this.storeDOMState();
    }

    // Make changes to the DOM for a text selection.

  }, {
    key: "rangeToDOM",
    value: function rangeToDOM() {
      this.clearNode();

      var anchor = DOMFromPos(this.pm, this.range.anchor);
      var head = DOMFromPos(this.pm, this.range.head);

      var sel = this.pm.root.getSelection(),
          range = document.createRange();
      if (sel.extend) {
        range.setEnd(anchor.node, anchor.offset);
        range.collapse(false);
      } else {
        if (this.range.anchor > this.range.head) {
          var tmp = anchor;anchor = head;head = tmp;
        }
        range.setEnd(head.node, head.offset);
        range.setStart(anchor.node, anchor.offset);
      }
      sel.removeAllRanges();
      sel.addRange(range);
      if (sel.extend) sel.extend(head.node, head.offset);
      this.storeDOMState();
    }

    // Clear all DOM statefulness of the last node selection.

  }, {
    key: "clearNode",
    value: function clearNode() {
      if (this.lastNode) {
        this.lastNode.classList.remove("ProseMirror-selectednode");
        this.pm.content.classList.remove("ProseMirror-nodeselection");
        this.lastNode = null;
        return true;
      }
    }
  }, {
    key: "receivedFocus",
    value: function receivedFocus() {
      if (this.polling == null) this.startPolling();
    }
  }]);

  return SelectionState;
}();

exports.SelectionState = SelectionState;

// ;; An editor selection. Can be one of two selection types:
// `TextSelection` or `NodeSelection`. Both have the properties
// listed here, but also contain more information (such as the
// selected [node](#NodeSelection.node) or the
// [head](#TextSelection.head) and [anchor](#TextSelection.anchor)).

var Selection = function () {
  _createClass(Selection, [{
    key: "from",

    // :: number
    // The left bound of the selection.
    get: function get() {
      return this.$from.pos;
    }

    // :: number
    // The right bound of the selection.

  }, {
    key: "to",
    get: function get() {
      return this.$to.pos;
    }
  }]);

  function Selection($from, $to) {
    _classCallCheck(this, Selection);

    // :: ResolvedPos
    // The resolved left bound of the selection
    this.$from = $from;
    // :: ResolvedPos
    // The resolved right bound of the selection
    this.$to = $to;
  }

  // :: bool
  // True if the selection is an empty text selection (head an anchor
  // are the same).


  _createClass(Selection, [{
    key: "empty",
    get: function get() {
      return this.from == this.to;
    }

    // :: (other: Selection) → bool #path=Selection.prototype.eq
    // Test whether the selection is the same as another selection.

    // :: (doc: Node, mapping: Mappable) → Selection #path=Selection.prototype.map
    // Map this selection through a [mappable](#Mappable) thing. `doc`
    // should be the new document, to which we are mapping.

  }]);

  return Selection;
}();

exports.Selection = Selection;

// ;; A text selection represents a classical editor
// selection, with a head (the moving side) and anchor (immobile
// side), both of which point into textblock nodes. It can be empty (a
// regular cursor position).

var TextSelection = function (_Selection) {
  _inherits(TextSelection, _Selection);

  _createClass(TextSelection, [{
    key: "anchor",

    // :: number
    // The selection's immobile side (does not move when pressing
    // shift-arrow).
    get: function get() {
      return this.$anchor.pos;
    }
    // :: number
    // The selection's mobile side (the side that moves when pressing
    // shift-arrow).

  }, {
    key: "head",
    get: function get() {
      return this.$head.pos;
    }

    // :: (ResolvedPos, ?ResolvedPos)
    // Construct a text selection. When `head` is not given, it defaults
    // to `anchor`.

  }]);

  function TextSelection($anchor) {
    var $head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchor;

    _classCallCheck(this, TextSelection);

    var inv = $anchor.pos > $head.pos;

    // :: ResolvedPos The resolved anchor of the selection.
    var _this2 = _possibleConstructorReturn(this, (TextSelection.__proto__ || Object.getPrototypeOf(TextSelection)).call(this, inv ? $head : $anchor, inv ? $anchor : $head));

    _this2.$anchor = $anchor;
    // :: ResolvedPos The resolved head of the selection.
    _this2.$head = $head;
    return _this2;
  }

  _createClass(TextSelection, [{
    key: "eq",
    value: function eq(other) {
      return other instanceof TextSelection && other.head == this.head && other.anchor == this.anchor;
    }
  }, {
    key: "map",
    value: function map(doc, mapping) {
      var $head = doc.resolve(mapping.map(this.head));
      if (!$head.parent.isTextblock) return findSelectionNear($head);
      var $anchor = doc.resolve(mapping.map(this.anchor));
      return new TextSelection($anchor.parent.isTextblock ? $anchor : $head, $head);
    }
  }, {
    key: "inverted",
    get: function get() {
      return this.anchor > this.head;
    }
  }, {
    key: "token",
    get: function get() {
      return new SelectionToken(TextSelection, this.anchor, this.head);
    }
  }], [{
    key: "mapToken",
    value: function mapToken(token, mapping) {
      return new SelectionToken(TextSelection, mapping.map(token.a), mapping.map(token.b));
    }
  }, {
    key: "fromToken",
    value: function fromToken(token, doc) {
      var $head = doc.resolve(token.b);
      if (!$head.parent.isTextblock) return findSelectionNear($head);
      var $anchor = doc.resolve(token.a);
      return new TextSelection($anchor.parent.isTextblock ? $anchor : $head, $head);
    }
  }]);

  return TextSelection;
}(Selection);

exports.TextSelection = TextSelection;

// ;; A node selection is a selection that points at a
// single node. All nodes marked [selectable](#NodeType.selectable)
// can be the target of a node selection. In such an object, `from`
// and `to` point directly before and after the selected node.

var NodeSelection = function (_Selection2) {
  _inherits(NodeSelection, _Selection2);

  // :: (ResolvedPos)
  // Create a node selection. Does not verify the validity of its
  // argument. Use `ProseMirror.setNodeSelection` for an easier,
  // error-checking way to create a node selection.
  function NodeSelection($from) {
    _classCallCheck(this, NodeSelection);

    var $to = $from.plusOne();

    // :: Node The selected node.
    var _this3 = _possibleConstructorReturn(this, (NodeSelection.__proto__ || Object.getPrototypeOf(NodeSelection)).call(this, $from, $to));

    _this3.node = $from.nodeAfter;
    return _this3;
  }

  _createClass(NodeSelection, [{
    key: "eq",
    value: function eq(other) {
      return other instanceof NodeSelection && this.from == other.from;
    }
  }, {
    key: "map",
    value: function map(doc, mapping) {
      var $from = doc.resolve(mapping.map(this.from, 1));
      var to = mapping.map(this.to, -1);
      var node = $from.nodeAfter;
      if (node && to == $from.pos + node.nodeSize && node.type.selectable) return new NodeSelection($from);
      return findSelectionNear($from);
    }
  }, {
    key: "token",
    get: function get() {
      return new SelectionToken(NodeSelection, this.from, this.to);
    }
  }], [{
    key: "mapToken",
    value: function mapToken(token, mapping) {
      return new SelectionToken(NodeSelection, mapping.map(token.a, 1), mapping.map(token.b, -1));
    }
  }, {
    key: "fromToken",
    value: function fromToken(token, doc) {
      var $from = doc.resolve(token.a),
          node = $from.nodeAfter;
      if (node && token.b == token.a + node.nodeSize && node.type.selectable) return new NodeSelection($from);
      return findSelectionNear($from);
    }
  }]);

  return NodeSelection;
}(Selection);

exports.NodeSelection = NodeSelection;

var SelectionToken = function SelectionToken(type, a, b) {
  _classCallCheck(this, SelectionToken);

  this.type = type;
  this.a = a;
  this.b = b;
};

function isCollapsed(sel) {
  // Selection.isCollapsed is broken in Chrome 52.
  // See https://bugs.chromium.org/p/chromium/issues/detail?id=447523
  return sel.focusNode === sel.anchorNode && sel.focusOffset === sel.anchorOffset;
}
exports.isCollapsed = isCollapsed;

function selectionFromDOM(pm, oldHead) {
  var sel = pm.root.getSelection();
  var doc = pm.doc;

  var _posFromDOM = posFromDOM(sel.focusNode, sel.focusOffset),
      head = _posFromDOM.pos,
      headLeaf = _posFromDOM.inLeaf;

  if (headLeaf > -1 && isCollapsed(sel)) {
    var $leaf = doc.resolve(headLeaf),
        node = $leaf.nodeAfter;
    if (node.type.selectable && !node.type.isInline) return { range: new NodeSelection($leaf), adjusted: true };
  }
  var anchor = isCollapsed(sel) ? head : posFromDOM(sel.anchorNode, sel.anchorOffset).pos;

  var range = findSelectionNear(doc.resolve(head), oldHead != null && oldHead < head ? 1 : -1);
  if (range instanceof TextSelection) {
    var selNearAnchor = findSelectionNear(doc.resolve(anchor), anchor > range.to ? -1 : 1, true);
    range = new TextSelection(selNearAnchor.$anchor, range.$head);
  } else if (anchor < range.from || anchor > range.to) {
    // If head falls on a node, but anchor falls outside of it,
    // create a text selection between them
    var inv = anchor > range.to;
    range = new TextSelection(findSelectionNear(doc.resolve(anchor), inv ? -1 : 1, true).$anchor, findSelectionNear(inv ? range.$from : range.$to, inv ? 1 : -1, true).$head);
  }
  return { range: range, adjusted: head != range.head || anchor != range.anchor };
}

function hasFocus(pm) {
  if (pm.root.activeElement != pm.content) return false;
  var sel = pm.root.getSelection();
  return sel.rangeCount && contains(pm.content, sel.anchorNode);
}
exports.hasFocus = hasFocus;

// Try to find a selection inside the given node. `pos` points at the
// position where the search starts. When `text` is true, only return
// text selections.
function findSelectionIn(doc, node, pos, index, dir, text) {
  if (node.isTextblock) return new TextSelection(doc.resolve(pos));
  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
    var child = node.child(i);
    if (!child.type.isLeaf) {
      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
      if (inner) return inner;
    } else if (!text && child.type.selectable) {
      return new NodeSelection(doc.resolve(pos - (dir < 0 ? child.nodeSize : 0)));
    }
    pos += child.nodeSize * dir;
  }
}

// FIXME we'll need some awareness of text direction when scanning for selections

// Create a selection which is moved relative to a position in a
// given direction. When a selection isn't found at the given position,
// walks up the document tree one level and one step in the
// desired direction.
function findSelectionFrom($pos, dir, text) {
  var inner = $pos.parent.isTextblock ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, text);
  if (inner) return inner;

  for (var depth = $pos.depth - 1; depth >= 0; depth--) {
    var found = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, text) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, text);
    if (found) return found;
  }
}
exports.findSelectionFrom = findSelectionFrom;

function findSelectionNear($pos) {
  var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var text = arguments[2];

  var result = findSelectionFrom($pos, bias, text) || findSelectionFrom($pos, -bias, text);
  if (!result) throw new RangeError("Searching for selection in invalid document " + $pos.node(0));
  return result;
}
exports.findSelectionNear = findSelectionNear;

// Find the selection closest to the start of the given node. `pos`,
// if given, should point at the start of the node's content.
function findSelectionAtStart(doc, text) {
  return findSelectionIn(doc, doc, 0, 0, 1, text);
}
exports.findSelectionAtStart = findSelectionAtStart;

// Find the selection closest to the end of the given node.
function findSelectionAtEnd(doc, text) {
  return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1, text);
}
exports.findSelectionAtEnd = findSelectionAtEnd;

// : (ProseMirror, number, number)
// Whether vertical position motion in a given direction
// from a position would leave a text block.
function verticalMotionLeavesTextblock(pm, $pos, dir) {
  var dom = $pos.depth ? DOMAfterPos(pm, $pos.before()) : pm.content;
  var coords = coordsAtPos(pm, $pos.pos);
  for (var child = dom.firstChild; child; child = child.nextSibling) {
    if (child.nodeType != 1) continue;
    var boxes = child.getClientRects();
    for (var i = 0; i < boxes.length; i++) {
      var box = boxes[i];
      if (dir < 0 ? box.bottom < coords.top : box.top > coords.bottom) return false;
    }
  }
  return true;
}
exports.verticalMotionLeavesTextblock = verticalMotionLeavesTextblock;
},{"../util/browser":218,"../util/dom":220,"./dompos":183}],194:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../model"),
    Fragment = _require.Fragment;

var _require2 = require("../transform"),
    Transform = _require2.Transform,
    insertPoint = _require2.insertPoint;

var _require3 = require("./selection"),
    findSelectionNear = _require3.findSelectionNear;

var _applyAndScroll = { scrollIntoView: true };

// ;; A selection-aware extension of `Transform`. Use
// `ProseMirror.tr` to create an instance.

var EditorTransform = function (_Transform) {
  _inherits(EditorTransform, _Transform);

  function EditorTransform(pm) {
    _classCallCheck(this, EditorTransform);

    var _this = _possibleConstructorReturn(this, (EditorTransform.__proto__ || Object.getPrototypeOf(EditorTransform)).call(this, pm.doc));

    _this.pm = pm;
    _this.curSelection = pm.selection;
    _this.curSelectionAt = 0;
    return _this;
  }

  // :: (?Object) → EditorTransform
  // Apply the transformation. Returns the transform, or `false` it is
  // was empty.


  _createClass(EditorTransform, [{
    key: "apply",
    value: function apply(options) {
      return this.pm.apply(this, options);
    }

    // :: () → EditorTransform
    // Apply this transform with a `{scrollIntoView: true}` option.

  }, {
    key: "applyAndScroll",
    value: function applyAndScroll() {
      return this.pm.apply(this, _applyAndScroll);
    }

    // :: Selection
    // The transform's current selection. This defaults to the
    // editor selection [mapped](#Selection.map) through the steps in
    // this transform, but can be overwritten with
    // [`setSelection`](#EditorTransform.setSelection).

  }, {
    key: "setSelection",


    // :: (Selection) → EditorTransform
    // Update the transform's current selection. This will determine the
    // selection that the editor gets when the transform is applied.
    value: function setSelection(selection) {
      this.curSelection = selection;
      this.curSelectionAt = this.steps.length;
      return this;
    }

    // :: (?Node, ?bool) → EditorTransform
    // Replace the selection with the given node, or delete it if `node`
    // is null. When `inheritMarks` is true and the node is an inline
    // node, it inherits the marks from the place where it is inserted.

  }, {
    key: "replaceSelection",
    value: function replaceSelection(node, inheritMarks) {
      var _selection = this.selection,
          empty = _selection.empty,
          $from = _selection.$from,
          $to = _selection.$to,
          from = _selection.from,
          to = _selection.to,
          selNode = _selection.node;


      if (node && node.isInline && inheritMarks !== false) node = node.mark(empty ? this.pm.input.storedMarks : this.doc.marksAt(from));
      var fragment = Fragment.from(node);

      if (selNode && selNode.isTextblock && node && node.isInline) {
        // Putting inline stuff onto a selected textblock puts it
        // inside, so cut off the sides
        from++;
        to--;
      } else if (selNode) {
        var depth = $from.depth;
        // This node can not simply be removed/replaced. Remove its parent as well
        while (depth && $from.node(depth).childCount == 1 && !$from.node(depth).canReplace($from.index(depth), $to.indexAfter(depth), fragment)) {
          depth--;
        }
        if (depth < $from.depth) {
          from = $from.before(depth + 1);
          to = $from.after(depth + 1);
        }
      } else if (node && from == to) {
        var point = insertPoint(this.doc, from, node.type, node.attrs);
        if (point != null) from = to = point;
      }

      this.replaceWith(from, to, fragment);
      var map = this.maps[this.maps.length - 1];
      this.setSelection(findSelectionNear(this.doc.resolve(map.map(to))));
      return this;
    }

    // :: () → EditorTransform
    // Delete the selection.

  }, {
    key: "deleteSelection",
    value: function deleteSelection() {
      return this.replaceSelection();
    }

    // :: (string) → EditorTransform
    // Replace the selection with a text node containing the given string.

  }, {
    key: "typeText",
    value: function typeText(text) {
      return this.replaceSelection(this.pm.schema.text(text), true);
    }
  }, {
    key: "selection",
    get: function get() {
      if (this.curSelectionAt < this.steps.length) {
        if (this.curSelectionAt) {
          for (var i = this.curSelectionAt; i < this.steps.length; i++) {
            this.curSelection = this.curSelection.map(i == this.steps.length - 1 ? this.doc : this.docs[i + 1], this.maps[i]);
          }
        } else {
          this.curSelection = this.curSelection.map(this.doc, this);
        }
        this.curSelectionAt = this.steps.length;
      }
      return this.curSelection;
    }
  }]);

  return EditorTransform;
}(Transform);

exports.EditorTransform = EditorTransform;
},{"../model":200,"../transform":209,"./selection":193}],195:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UPDATE_TIMEOUT = 50;
var MIN_FLUSH_DELAY = 100;

var EditorScheduler = function () {
  function EditorScheduler(pm) {
    var _this = this;

    _classCallCheck(this, EditorScheduler);

    this.waiting = [];
    this.timeout = null;
    this.lastForce = 0;
    this.pm = pm;
    this.timedOut = function () {
      if (_this.pm.operation) _this.timeout = setTimeout(_this.timedOut, UPDATE_TIMEOUT);else _this.force();
    };
    pm.on.flush.add(this.onFlush.bind(this));
  }

  _createClass(EditorScheduler, [{
    key: "set",
    value: function set(f) {
      if (this.waiting.length == 0) this.timeout = setTimeout(this.timedOut, UPDATE_TIMEOUT);
      if (this.waiting.indexOf(f) == -1) this.waiting.push(f);
    }
  }, {
    key: "unset",
    value: function unset(f) {
      var index = this.waiting.indexOf(f);
      if (index > -1) this.waiting.splice(index, 1);
    }
  }, {
    key: "force",
    value: function force() {
      clearTimeout(this.timeout);
      this.lastForce = Date.now();

      while (this.waiting.length) {
        for (var i = 0; i < this.waiting.length; i++) {
          var result = this.waiting[i]();
          if (result) this.waiting[i] = result;else this.waiting.splice(i--, 1);
        }
      }
    }
  }, {
    key: "onFlush",
    value: function onFlush() {
      if (this.waiting.length && Date.now() - this.lastForce > MIN_FLUSH_DELAY) this.force();
    }
  }]);

  return EditorScheduler;
}();

exports.EditorScheduler = EditorScheduler;

// ;; Helper for scheduling updates whenever any of a series of events
// happen. Created with the
// [`updateScheduler`](#ProseMirror.updateScheduler) method.

var UpdateScheduler = function () {
  function UpdateScheduler(pm, subscriptions, start) {
    var _this2 = this;

    _classCallCheck(this, UpdateScheduler);

    this.pm = pm;
    this.start = start;

    this.subscriptions = subscriptions;
    this.onEvent = this.onEvent.bind(this);
    this.subscriptions.forEach(function (sub) {
      return sub.add(_this2.onEvent);
    });
  }

  // :: ()
  // Detach the event handlers registered by this scheduler.


  _createClass(UpdateScheduler, [{
    key: "detach",
    value: function detach() {
      var _this3 = this;

      this.pm.unscheduleDOMUpdate(this.start);
      this.subscriptions.forEach(function (sub) {
        return sub.remove(_this3.onEvent);
      });
    }
  }, {
    key: "onEvent",
    value: function onEvent() {
      this.pm.scheduleDOMUpdate(this.start);
    }

    // :: ()
    // Force an update. Note that if the editor has scheduled a flush,
    // the update is still delayed until the flush occurs.

  }, {
    key: "force",
    value: function force() {
      if (this.pm.operation) {
        this.onEvent();
      } else {
        this.pm.unscheduleDOMUpdate(this.start);
        for (var run = this.start; run; run = run()) {}
      }
    }
  }]);

  return UpdateScheduler;
}();

exports.UpdateScheduler = UpdateScheduler;
},{}],196:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./fragment"),
    Fragment = _require.Fragment;

var _require2 = require("./mark"),
    Mark = _require2.Mark;

var ContentExpr = function () {
  function ContentExpr(nodeType, elements, inlineContent) {
    _classCallCheck(this, ContentExpr);

    this.nodeType = nodeType;
    this.elements = elements;
    this.inlineContent = inlineContent;
  }

  _createClass(ContentExpr, [{
    key: "start",
    value: function start(attrs) {
      return new ContentMatch(this, attrs, 0, 0);
    }
  }, {
    key: "matches",
    value: function matches(attrs, fragment, from, to) {
      return this.start(attrs).matchToEnd(fragment, from, to);
    }

    // Get a position in a known-valid fragment. If this is a simple
    // (single-element) expression, we don't have to do any matching,
    // and can simply skip to the position with count `index`.

  }, {
    key: "getMatchAt",
    value: function getMatchAt(attrs, fragment) {
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fragment.childCount;

      if (this.elements.length == 1) return new ContentMatch(this, attrs, 0, index);else return this.start(attrs).matchFragment(fragment, 0, index);
    }
  }, {
    key: "checkReplace",
    value: function checkReplace(attrs, content, from, to) {
      var replacement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Fragment.empty;
      var start = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var end = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : replacement.childCount;

      // Check for simple case, where the expression only has a single element
      // (Optimization to avoid matching more than we need)
      if (this.elements.length == 1) {
        var elt = this.elements[0];
        if (!checkCount(elt, content.childCount - (to - from) + (end - start), attrs, this)) return false;
        for (var i = start; i < end; i++) {
          if (!elt.matches(replacement.child(i), attrs, this)) return false;
        }return true;
      }

      var match = this.getMatchAt(attrs, content, from).matchFragment(replacement, start, end);
      return match ? match.matchToEnd(content, to) : false;
    }
  }, {
    key: "checkReplaceWith",
    value: function checkReplaceWith(attrs, content, from, to, type, typeAttrs, marks) {
      if (this.elements.length == 1) {
        var elt = this.elements[0];
        if (!checkCount(elt, content.childCount - (to - from) + 1, attrs, this)) return false;
        return elt.matchesType(type, typeAttrs, marks, attrs, this);
      }

      var match = this.getMatchAt(attrs, content, from).matchType(type, typeAttrs, marks);
      return match ? match.matchToEnd(content, to) : false;
    }
  }, {
    key: "compatible",
    value: function compatible(other) {
      for (var i = 0; i < this.elements.length; i++) {
        var elt = this.elements[i];
        for (var j = 0; j < other.elements.length; j++) {
          if (other.elements[j].compatible(elt)) return true;
        }
      }
      return false;
    }
  }, {
    key: "generateContent",
    value: function generateContent(attrs) {
      return this.start(attrs).fillBefore(Fragment.empty, true);
    }
  }, {
    key: "isLeaf",
    get: function get() {
      return this.elements.length == 0;
    }
  }], [{
    key: "parse",
    value: function parse(nodeType, expr, specs) {
      var elements = [],
          pos = 0,
          inline = null;
      for (;;) {
        pos += /^\s*/.exec(expr.slice(pos))[0].length;
        if (pos == expr.length) break;

        var types = /^(?:(\w+)|\(\s*(\w+(?:\s*\|\s*\w+)*)\s*\))/.exec(expr.slice(pos));
        if (!types) throw new SyntaxError("Invalid content expression '" + expr + "' at " + pos);
        pos += types[0].length;
        var attrs = /^\[([^\]]+)\]/.exec(expr.slice(pos));
        if (attrs) pos += attrs[0].length;
        var marks = /^<(?:(_)|\s*(\w+(?:\s+\w+)*)\s*)>/.exec(expr.slice(pos));
        if (marks) pos += marks[0].length;
        var repeat = /^(?:([+*?])|\{\s*(\d+|\.\w+)\s*(,\s*(\d+|\.\w+)?)?\s*\})/.exec(expr.slice(pos));
        if (repeat) pos += repeat[0].length;

        var nodeTypes = expandTypes(nodeType.schema, specs, types[1] ? [types[1]] : types[2].split(/\s*\|\s*/));
        for (var i = 0; i < nodeTypes.length; i++) {
          if (inline == null) inline = nodeTypes[i].isInline;else if (inline != nodeTypes[i].isInline) throw new SyntaxError("Mixing inline and block content in a single node");
        }
        var attrSet = !attrs ? null : parseAttrs(nodeType, attrs[1]);
        var markSet = !marks ? false : marks[1] ? true : checkMarks(nodeType.schema, marks[2].split(/\s+/));

        var _parseRepeat = parseRepeat(nodeType, repeat),
            min = _parseRepeat.min,
            max = _parseRepeat.max;

        if (min != 0 && nodeTypes[0].hasRequiredAttrs(attrSet)) throw new SyntaxError("Node type " + types[0] + " in type " + nodeType.name + " is required, but has non-optional attributes");
        var newElt = new ContentElement(nodeTypes, attrSet, markSet, min, max);
        for (var _i = elements.length - 1; _i >= 0; _i--) {
          var prev = elements[_i];
          if (prev.min != prev.max && prev.overlaps(newElt)) throw new SyntaxError("Possibly ambiguous overlapping adjacent content expressions in '" + expr + "'");
          if (prev.min != 0) break;
        }
        elements.push(newElt);
      }

      return new ContentExpr(nodeType, elements, !!inline);
    }
  }]);

  return ContentExpr;
}();

exports.ContentExpr = ContentExpr;

var ContentElement = function () {
  function ContentElement(nodeTypes, attrs, marks, min, max) {
    _classCallCheck(this, ContentElement);

    this.nodeTypes = nodeTypes;
    this.attrs = attrs;
    this.marks = marks;
    this.min = min;
    this.max = max;
  }

  _createClass(ContentElement, [{
    key: "matchesType",
    value: function matchesType(type, attrs, marks, parentAttrs, parentExpr) {
      if (this.nodeTypes.indexOf(type) == -1) return false;
      if (this.attrs) {
        if (!attrs) return false;
        for (var prop in this.attrs) {
          if (attrs[prop] != _resolveValue(this.attrs[prop], parentAttrs, parentExpr)) return false;
        }
      }
      if (this.marks === true) return true;
      if (this.marks === false) return marks.length == 0;
      for (var i = 0; i < marks.length; i++) {
        if (this.marks.indexOf(marks[i].type) == -1) return false;
      }return true;
    }
  }, {
    key: "matches",
    value: function matches(node, parentAttrs, parentExpr) {
      return this.matchesType(node.type, node.attrs, node.marks, parentAttrs, parentExpr);
    }
  }, {
    key: "compatible",
    value: function compatible(other) {
      for (var i = 0; i < this.nodeTypes.length; i++) {
        if (other.nodeTypes.indexOf(this.nodeTypes[i]) != -1) return true;
      }return false;
    }
  }, {
    key: "constrainedAttrs",
    value: function constrainedAttrs(parentAttrs, expr) {
      if (!this.attrs) return null;
      var attrs = Object.create(null);
      for (var prop in this.attrs) {
        attrs[prop] = _resolveValue(this.attrs[prop], parentAttrs, expr);
      }return attrs;
    }
  }, {
    key: "createFiller",
    value: function createFiller(parentAttrs, expr) {
      var type = this.nodeTypes[0],
          attrs = type.computeAttrs(this.constrainedAttrs(parentAttrs, expr));
      return type.create(attrs, type.contentExpr.generateContent(attrs));
    }
  }, {
    key: "defaultType",
    value: function defaultType() {
      return this.nodeTypes[0].defaultAttrs && this.nodeTypes[0];
    }
  }, {
    key: "overlaps",
    value: function overlaps(other) {
      return this.nodeTypes.some(function (t) {
        return other.nodeTypes.indexOf(t) > -1;
      });
    }
  }, {
    key: "allowsMark",
    value: function allowsMark(markType) {
      return this.marks === true || this.marks && this.marks.indexOf(markType) > -1;
    }
  }]);

  return ContentElement;
}();

// ;; Represents a partial match of a node type's [content
// expression](#NodeSpec), and can be used to find out whether further
// content matches here, and whether a given position is a valid end
// of the parent node.


var ContentMatch = function () {
  function ContentMatch(expr, attrs, index, count) {
    _classCallCheck(this, ContentMatch);

    this.expr = expr;
    this.attrs = attrs;
    this.index = index;
    this.count = count;
  }

  _createClass(ContentMatch, [{
    key: "move",
    value: function move(index, count) {
      return new ContentMatch(this.expr, this.attrs, index, count);
    }
  }, {
    key: "resolveValue",
    value: function resolveValue(value) {
      return value instanceof AttrValue ? _resolveValue(value, this.attrs, this.expr) : value;
    }

    // :: (Node) → ?ContentMatch
    // Match a node, returning a new match after the node if successful.

  }, {
    key: "matchNode",
    value: function matchNode(node) {
      return this.matchType(node.type, node.attrs, node.marks);
    }

    // :: (NodeType, ?Object, [Mark]) → ?ContentMatch
    // Match a node type and marks, returning an match after that node
    // if successful.

  }, {
    key: "matchType",
    value: function matchType(type, attrs) {
      var marks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Mark.none;

      // FIXME `var` to work around Babel bug T7293
      for (var index = this.index, count = this.count; index < this.expr.elements.length; index++, count = 0) {
        var elt = this.expr.elements[index],
            max = this.resolveValue(elt.max);
        if (count < max && elt.matchesType(type, attrs, marks, this.attrs, this.expr)) {
          count++;
          return this.move(index, count);
        }
        if (count < this.resolveValue(elt.min)) return null;
      }
    }

    // :: (Fragment, ?number, ?number) → ?union<ContentMatch, bool>
    // Try to match a fragment. Returns a new match when successful,
    // `null` when it ran into a required element it couldn't fit, and
    // `false` if it reached the end of the expression without
    // matching all nodes.

  }, {
    key: "matchFragment",
    value: function matchFragment(fragment) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fragment.childCount;

      if (from == to) return this;
      var fragPos = from,
          end = this.expr.elements.length;
      for (var index = this.index, count = this.count; index < end; index++, count = 0) {
        var elt = this.expr.elements[index],
            max = this.resolveValue(elt.max);

        while (count < max && fragPos < to) {
          if (elt.matches(fragment.child(fragPos), this.attrs, this.expr)) {
            count++;
            if (++fragPos == to) return this.move(index, count);
          } else {
            break;
          }
        }
        if (count < this.resolveValue(elt.min)) return null;
      }
      return false;
    }

    // :: (Fragment, ?number, ?number) → bool
    // Returns true only if the fragment matches here, and reaches all
    // the way to the end of the content expression.

  }, {
    key: "matchToEnd",
    value: function matchToEnd(fragment, start, end) {
      var matched = this.matchFragment(fragment, start, end);
      return matched && matched.validEnd() || false;
    }

    // :: () → bool
    // Returns true if this position represents a valid end of the
    // expression (no required content follows after it).

  }, {
    key: "validEnd",
    value: function validEnd() {
      for (var i = this.index, count = this.count; i < this.expr.elements.length; i++, count = 0) {
        if (count < this.resolveValue(this.expr.elements[i].min)) return false;
      }return true;
    }

    // :: (Fragment, bool, ?number) → ?Fragment
    // Try to match the given fragment, and if that fails, see if it can
    // be made to match by inserting nodes in front of it. When
    // successful, return a fragment of inserted nodes (which may be
    // empty if nothing had to be inserted). When `toEnd` is true, only
    // return a fragment if the resulting match goes to the end of the
    // content expression.

  }, {
    key: "fillBefore",
    value: function fillBefore(after, toEnd, startIndex) {
      var added = [],
          match = this,
          index = startIndex || 0,
          end = this.expr.elements.length;
      for (;;) {
        var fits = match.matchFragment(after, index);
        if (fits && (!toEnd || fits.validEnd())) return Fragment.from(added);
        if (fits === false) return null; // Matched to end with content remaining

        var elt = match.element;
        if (match.count < this.resolveValue(elt.min)) {
          added.push(elt.createFiller(this.attrs, this.expr));
          match = match.move(match.index, match.count + 1);
        } else if (match.index < end) {
          match = match.move(match.index + 1, 0);
        } else if (after.childCount > index) {
          return null;
        } else {
          return Fragment.from(added);
        }
      }
    }
  }, {
    key: "possibleContent",
    value: function possibleContent() {
      var found = [];
      for (var i = this.index, count = this.count; i < this.expr.elements.length; i++, count = 0) {
        var elt = this.expr.elements[i],
            attrs = elt.constrainedAttrs(this.attrs, this.expr);
        if (count < this.resolveValue(elt.max)) for (var j = 0; j < elt.nodeTypes.length; j++) {
          var type = elt.nodeTypes[j];
          if (!type.hasRequiredAttrs(attrs)) found.push({ type: type, attrs: attrs });
        }
        if (this.resolveValue(elt.min) > count) break;
      }
      return found;
    }

    // :: (MarkType) → bool
    // Check whether a node with the given mark type is allowed after
    // this position.

  }, {
    key: "allowsMark",
    value: function allowsMark(markType) {
      return this.element.allowsMark(markType);
    }

    // :: (NodeType, ?Object) → ?[{type: NodeType, attrs: Object}]
    // Find a set of wrapping node types that would allow a node of type
    // `target` with attributes `targetAttrs` to appear at this
    // position. The result may be empty (when it fits directly) and
    // will be null when no such wrapping exists.

  }, {
    key: "findWrapping",
    value: function findWrapping(target, targetAttrs) {
      // FIXME find out how expensive this is. Try to reintroduce caching?
      var seen = Object.create(null),
          first = { match: this, via: null },
          active = [first];
      while (active.length) {
        var current = active.shift(),
            match = current.match;
        if (match.matchType(target, targetAttrs)) {
          var result = [];
          for (var obj = current; obj != first; obj = obj.via) {
            result.push({ type: obj.match.expr.nodeType, attrs: obj.match.attrs });
          }return result.reverse();
        }
        var possible = match.possibleContent();
        for (var i = 0; i < possible.length; i++) {
          var _possible$i = possible[i],
              type = _possible$i.type,
              attrs = _possible$i.attrs,
              fullAttrs = type.computeAttrs(attrs);

          if (!type.isLeaf && !(type.name in seen) && (current == first || match.matchType(type, fullAttrs).validEnd())) {
            active.push({ match: type.contentExpr.start(fullAttrs), via: current });
            seen[type.name] = true;
          }
        }
      }
    }
  }, {
    key: "element",
    get: function get() {
      return this.expr.elements[this.index];
    }
  }, {
    key: "nextElement",
    get: function get() {
      for (var i = this.index, count = this.count; i < this.expr.elements.length; i++) {
        var element = this.expr.elements[i];
        if (this.resolveValue(element.max) > count) return element;
        count = 0;
      }
    }
  }]);

  return ContentMatch;
}();

exports.ContentMatch = ContentMatch;

var AttrValue = function AttrValue(attr) {
  _classCallCheck(this, AttrValue);

  this.attr = attr;
};

function parseValue(nodeType, value) {
  if (value.charAt(0) == ".") {
    var attr = value.slice(1);
    if (!nodeType.attrs[attr]) throw new SyntaxError("Node type " + nodeType.name + " has no attribute " + attr);
    return new AttrValue(attr);
  } else {
    return JSON.parse(value);
  }
}

function checkMarks(schema, marks) {
  var found = [];
  for (var i = 0; i < marks.length; i++) {
    var mark = schema.marks[marks[i]];
    if (mark) found.push(mark);else throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
  }
  return found;
}

function _resolveValue(value, attrs, expr) {
  if (!(value instanceof AttrValue)) return value;
  var attrVal = attrs && attrs[value.attr];
  return attrVal !== undefined ? attrVal : expr.nodeType.defaultAttrs[value.attr];
}

function checkCount(elt, count, attrs, expr) {
  return count >= _resolveValue(elt.min, attrs, expr) && count <= _resolveValue(elt.max, attrs, expr);
}

function expandTypes(schema, specs, types) {
  var result = [];
  types.forEach(function (type) {
    var found = schema.nodes[type];
    if (found) {
      if (result.indexOf(found) == -1) result.push(found);
    } else {
      specs.forEach(function (name, spec) {
        if (spec.group && spec.group.split(" ").indexOf(type) > -1) {
          found = schema.nodes[name];
          if (result.indexOf(found) == -1) result.push(found);
        }
      });
    }
    if (!found) throw new SyntaxError("Node type or group '" + type + "' does not exist");
  });
  return result;
}

var many = 2e9; // Big number representable as a 32-bit int

function parseRepeat(nodeType, match) {
  var min = 1,
      max = 1;
  if (match) {
    if (match[1] == "+") {
      max = many;
    } else if (match[1] == "*") {
      min = 0;
      max = many;
    } else if (match[1] == "?") {
      min = 0;
    } else if (match[2]) {
      min = parseValue(nodeType, match[2]);
      if (match[3]) max = match[4] ? parseValue(nodeType, match[4]) : many;else max = min;
    }
    if (max == 0 || min > max) throw new SyntaxError("Invalid repeat count in '" + match[0] + "'");
  }
  return { min: min, max: max };
}

function parseAttrs(nodeType, expr) {
  var parts = expr.split(/\s*,\s*/);
  var attrs = Object.create(null);
  for (var i = 0; i < parts.length; i++) {
    var match = /^(\w+)=(\w+|\"(?:\\.|[^\\])*\"|\.\w+)$/.exec(parts[i]);
    if (!match) throw new SyntaxError("Invalid attribute syntax: " + parts[i]);
    attrs[match[1]] = parseValue(nodeType, match[2]);
  }
  return attrs;
}
},{"./fragment":198,"./mark":201}],197:[function(require,module,exports){
"use strict";

function findDiffStart(a, b, pos) {
  for (var i = 0;; i++) {
    if (i == a.childCount || i == b.childCount) return a.childCount == b.childCount ? null : pos;

    var childA = a.child(i),
        childB = b.child(i);
    if (childA == childB) {
      pos += childA.nodeSize;continue;
    }

    if (!childA.sameMarkup(childB)) return pos;

    if (childA.isText && childA.text != childB.text) {
      for (var j = 0; childA.text[j] == childB.text[j]; j++) {
        pos++;
      }return pos;
    }
    if (childA.content.size || childB.content.size) {
      var inner = findDiffStart(childA.content, childB.content, pos + 1);
      if (inner != null) return inner;
    }
    pos += childA.nodeSize;
  }
}
exports.findDiffStart = findDiffStart;

function findDiffEnd(a, b, posA, posB) {
  for (var iA = a.childCount, iB = b.childCount;;) {
    if (iA == 0 || iB == 0) return iA == iB ? null : { a: posA, b: posB };

    var childA = a.child(--iA),
        childB = b.child(--iB),
        size = childA.nodeSize;
    if (childA == childB) {
      posA -= size;posB -= size;
      continue;
    }

    if (!childA.sameMarkup(childB)) return { a: posA, b: posB };

    if (childA.isText && childA.text != childB.text) {
      var same = 0,
          minSize = Math.min(childA.text.length, childB.text.length);
      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
        same++;posA--;posB--;
      }
      return { a: posA, b: posB };
    }
    if (childA.content.size || childB.content.size) {
      var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
      if (inner) return inner;
    }
    posA -= size;posB -= size;
  }
}
exports.findDiffEnd = findDiffEnd;
},{}],198:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./to_dom"),
    fragmentToDOM = _require.fragmentToDOM;

var _require2 = require("./diff"),
    _findDiffStart = _require2.findDiffStart,
    _findDiffEnd = _require2.findDiffEnd;

// ;; Fragment is the type used to represent a node's collection of
// child nodes.
//
// Fragments are persistent data structures. That means you should
// _not_ mutate them or their content, but create new instances
// whenever needed. The API tries to make this easy.


var Fragment = function () {
  function Fragment(content, size) {
    _classCallCheck(this, Fragment);

    this.content = content;
    this.size = size || 0;
    if (size == null) for (var i = 0; i < content.length; i++) {
      this.size += content[i].nodeSize;
    }
  }

  // :: () → string
  // Return a debugging string that describes this fragment.


  _createClass(Fragment, [{
    key: "toString",
    value: function toString() {
      return "<" + this.toStringInner() + ">";
    }
  }, {
    key: "toStringInner",
    value: function toStringInner() {
      return this.content.join(", ");
    }
  }, {
    key: "nodesBetween",
    value: function nodesBetween(from, to, f, nodeStart, parent) {
      for (var i = 0, pos = 0; pos < to; i++) {
        var child = this.content[i],
            end = pos + child.nodeSize;
        if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {
          var start = pos + 1;
          child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
        }
        pos = end;
      }
    }

    // : (number, number, string) → string

  }, {
    key: "textBetween",
    value: function textBetween(from, to, separator) {
      var text = "",
          separated = true;
      this.nodesBetween(from, to, function (node, pos) {
        if (node.isText) {
          text += node.text.slice(Math.max(from, pos) - pos, to - pos);
          separated = !separator;
        } else if (!separated && node.isBlock) {
          text += separator;
          separated = true;
        }
      }, 0);
      return text;
    }

    // :: (number, ?number) → Fragment
    // Cut out the sub-fragment between the two given positions.

  }, {
    key: "cut",
    value: function cut(from, to) {
      if (to == null) to = this.size;
      if (from == 0 && to == this.size) return this;
      var result = [],
          size = 0;
      if (to > from) for (var i = 0, pos = 0; pos < to; i++) {
        var child = this.content[i],
            end = pos + child.nodeSize;
        if (end > from) {
          if (pos < from || end > to) {
            if (child.isText) child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));else child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
          }
          result.push(child);
          size += child.nodeSize;
        }
        pos = end;
      }
      return new Fragment(result, size);
    }
  }, {
    key: "cutByIndex",
    value: function cutByIndex(from, to) {
      if (from == to) return Fragment.empty;
      if (from == 0 && to == this.content.length) return this;
      return new Fragment(this.content.slice(from, to));
    }

    // :: (Fragment) → Fragment
    // Create a new fragment containing the content of this fragment and
    // `other`.

  }, {
    key: "append",
    value: function append(other) {
      if (!other.size) return this;
      if (!this.size) return other;
      var last = this.lastChild,
          first = other.firstChild,
          content = this.content.slice(),
          i = 0;
      if (last.isText && last.sameMarkup(first)) {
        content[content.length - 1] = last.withText(last.text + first.text);
        i = 1;
      }
      for (; i < other.content.length; i++) {
        content.push(other.content[i]);
      }return new Fragment(content, this.size + other.size);
    }

    // :: (number, Node) → Fragment
    // Create a new fragment in which the node at the given index is
    // replaced by the given node.

  }, {
    key: "replaceChild",
    value: function replaceChild(index, node) {
      var current = this.content[index];
      if (current == node) return this;
      var copy = this.content.slice();
      var size = this.size + node.nodeSize - current.nodeSize;
      copy[index] = node;
      return new Fragment(copy, size);
    }

    // (Node) → Fragment
    // Create a new fragment by prepending the given node to this
    // fragment.

  }, {
    key: "addToStart",
    value: function addToStart(node) {
      return new Fragment([node].concat(this.content), this.size + node.nodeSize);
    }

    // (Node) → Fragment
    // Create a new fragment by appending the given node to this
    // fragment.

  }, {
    key: "addToEnd",
    value: function addToEnd(node) {
      return new Fragment(this.content.concat(node), this.size + node.nodeSize);
    }

    // :: () → ?Object
    // Create a JSON-serializeable representation of this fragment.

  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.content.length ? this.content.map(function (n) {
        return n.toJSON();
      }) : null;
    }

    // :: (Schema, ?Object) → Fragment
    // Deserialize a fragment from its JSON representation.

  }, {
    key: "eq",


    // :: (Fragment) → bool
    // Compare this fragment to another one.
    value: function eq(other) {
      if (this.content.length != other.content.length) return false;
      for (var i = 0; i < this.content.length; i++) {
        if (!this.content[i].eq(other.content[i])) return false;
      }return true;
    }

    // :: (?union<Fragment, Node, [Node]>) → Fragment
    // Create a fragment from something that can be interpreted as a set
    // of nodes. For `null`, it returns the empty fragment. For a
    // fragment, the fragment itself. For a node or array of nodes, a
    // fragment containing those nodes.

  }, {
    key: "child",


    // :: (number) → Node
    // Get the child node at the given index. Raise an error when the
    // index is out of range.
    value: function child(index) {
      var found = this.content[index];
      if (!found) throw new RangeError("Index " + index + " out of range for " + this);
      return found;
    }

    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.

  }, {
    key: "maybeChild",
    value: function maybeChild(index) {
      return this.content[index];
    }

    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.

  }, {
    key: "forEach",
    value: function forEach(f) {
      for (var i = 0, p = 0; i < this.content.length; i++) {
        var child = this.content[i];
        f(child, p, i);
        p += child.nodeSize;
      }
    }

    // :: (Fragment) → ?number
    // Find the first position at which this fragment and another
    // fragment differ, or `null` if they are the same.

  }, {
    key: "findDiffStart",
    value: function findDiffStart(other) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return _findDiffStart(this, other, pos);
    }

    // :: (Node) → ?{a: number, b: number}
    // Find the first position, searching from the end, at which this
    // fragment and the given fragment differ, or `null` if they are the
    // same. Since this position will not be the same in both nodes, an
    // object with two separate positions is returned.

  }, {
    key: "findDiffEnd",
    value: function findDiffEnd(other) {
      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;
      var otherPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : other.size;

      return _findDiffEnd(this, other, pos, otherPos);
    }

    // : (number, ?number) → {index: number, offset: number}
    // Find the index and inner offset corresponding to a given relative
    // position in this fragment. The result object will be reused
    // (overwritten) the next time the function is called. (Not public.)

  }, {
    key: "findIndex",
    value: function findIndex(pos) {
      var round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

      if (pos == 0) return retIndex(0, pos);
      if (pos == this.size) return retIndex(this.content.length, pos);
      if (pos > this.size || pos < 0) throw new RangeError("Position " + pos + " outside of fragment (" + this + ")");
      for (var i = 0, curPos = 0;; i++) {
        var cur = this.child(i),
            end = curPos + cur.nodeSize;
        if (end >= pos) {
          if (end == pos || round > 0) return retIndex(i + 1, end);
          return retIndex(i, curPos);
        }
        curPos = end;
      }
    }

    // :: (?Object) → DOMFragment
    // Serialize the content of this fragment to a DOM fragment. When
    // not in the browser, the `document` option, containing a DOM
    // document, should be passed so that the serialize can create
    // nodes.
    //
    // To specify rendering behavior for your own [node](#NodeType) and
    // [mark](#MarkType) types, define a [`toDOM`](#NodeType.toDOM)
    // method on them.

  }, {
    key: "toDOM",
    value: function toDOM() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return fragmentToDOM(this, options);
    }
  }, {
    key: "firstChild",


    // :: ?Node
    // The first child of the fragment, or `null` if it is empty.
    get: function get() {
      return this.content.length ? this.content[0] : null;
    }

    // :: ?Node
    // The last child of the fragment, or `null` if it is empty.

  }, {
    key: "lastChild",
    get: function get() {
      return this.content.length ? this.content[this.content.length - 1] : null;
    }

    // :: number
    // The number of child nodes in this fragment.

  }, {
    key: "childCount",
    get: function get() {
      return this.content.length;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, value) {
      return value ? new Fragment(value.map(schema.nodeFromJSON)) : Fragment.empty;
    }

    // :: ([Node]) → Fragment
    // Build a fragment from an array of nodes. Ensures that adjacent
    // text nodes with the same style are joined together.

  }, {
    key: "fromArray",
    value: function fromArray(array) {
      if (!array.length) return Fragment.empty;
      var joined = void 0,
          size = 0;
      for (var i = 0; i < array.length; i++) {
        var node = array[i];
        size += node.nodeSize;
        if (i && node.isText && array[i - 1].sameMarkup(node)) {
          if (!joined) joined = array.slice(0, i);
          joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);
        } else if (joined) {
          joined.push(node);
        }
      }
      return new Fragment(joined || array, size);
    }
  }, {
    key: "from",
    value: function from(nodes) {
      if (!nodes) return Fragment.empty;
      if (nodes instanceof Fragment) return nodes;
      if (Array.isArray(nodes)) return this.fromArray(nodes);
      return new Fragment([nodes], nodes.nodeSize);
    }
  }]);

  return Fragment;
}();

exports.Fragment = Fragment;

var found = { index: 0, offset: 0 };
function retIndex(index, offset) {
  found.index = index;
  found.offset = offset;
  return found;
}

// :: Fragment
// An empty fragment. Intended to be reused whenever a node doesn't
// contain anything (rather than allocating a new empty fragment for
// each leaf node).
Fragment.empty = new Fragment([], 0);
},{"./diff":197,"./to_dom":206}],199:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("./fragment"),
    Fragment = _require.Fragment;

var _require2 = require("./mark"),
    Mark = _require2.Mark;

function parseDOM(schema, dom, options) {
  var topNode = options.topNode;
  var top = new NodeBuilder(topNode ? topNode.type : schema.nodes.doc, topNode ? topNode.attrs : null, true, null, null, options.preserveWhitespace);
  var state = new DOMParseState(schema, options, top);
  state.addAll(dom, null, options.from, options.to);
  return top.finish(null);
}
exports.parseDOM = parseDOM;

// : (ResolvedPos, DOMNode, ?Object) → Slice
// Parse a DOM fragment into a `Slice`, starting with the context at
// `$context`. If the DOM nodes are known to be 'open' (as in
// `Slice`), pass their left open depth as the `openLeft` option.
function parseDOMInContext($context, dom) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var schema = $context.parent.type.schema;

  var _builderFromContext = builderFromContext($context, options.preserveWhitespace),
      builder = _builderFromContext.builder,
      top = _builderFromContext.top;

  var openLeft = options.openLeft,
      startPos = $context.depth;

  var state = new (function (_DOMParseState) {
    _inherits(_class, _DOMParseState);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: "enter",
      value: function enter(type, attrs, preserveWhitespace) {
        if (openLeft == null) openLeft = type.isTextblock ? 1 : 0;
        if (openLeft > 0 && this.top.match.matchType(type, attrs)) openLeft = 0;
        if (openLeft == 0) return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "enter", this).call(this, type, attrs, preserveWhitespace);

        openLeft--;
        return null;
      }
    }]);

    return _class;
  }(DOMParseState))(schema, options, builder);
  state.addAll(dom);

  var openTo = top.openDepth,
      doc = top.finish(openTo),
      $startPos = doc.resolve(startPos);
  for (var d = $startPos.depth; d >= 0 && startPos == $startPos.end(d); d--) {
    ++startPos;
  }return doc.slice(startPos, doc.content.size - openTo);
}
exports.parseDOMInContext = parseDOMInContext;

function builderFromContext($context, preserveWhitespace) {
  var top = void 0,
      builder = void 0;
  for (var i = 0; i <= $context.depth; i++) {
    var node = $context.node(i),
        match = node.contentMatchAt($context.index(i));
    if (i == 0) builder = top = new NodeBuilder(node.type, node.attrs, true, null, match, preserveWhitespace);else builder = builder.start(node.type, node.attrs, false, match, preserveWhitespace);
  }
  return { builder: builder, top: top };
}

// ;; #path=ParseSpec #kind=interface
// A value that describes how to parse a given DOM node as a
// ProseMirror node or mark type. Specifies the attributes of the new
// node or mark, along with optional information about the way the
// node's content should be treated.
//
// May either be a set of attributes, where `null` indicates the
// node's default attributes, or an array containing first a set of
// attributes and then an object describing the treatment of the
// node's content. Such an object may have the following properties:
//
// **`content`**`: ?union<bool, DOMNode>`
//   : If this is `false`, the content will be ignored. If it is not
//     given, the DOM node's children will be parsed as content of the
//     ProseMirror node or mark. If it is a DOM node, that DOM node's
//     content is treated as the content of the new node or mark (this
//     is useful if, for example, your DOM representation puts its
//     child nodes in an inner wrapping node).
//
// **`preserveWhitespace`**`: ?bool`
//   : When given, this enables or disables preserving of whitespace
//     when parsing the content.

var NodeBuilder = function () {
  function NodeBuilder(type, attrs, solid, prev, match, preserveWhitespace) {
    _classCallCheck(this, NodeBuilder);

    // : NodeType
    // The type of the node being built
    this.type = type;
    // : ContentMatch
    // The content match at this point, used to determine whether
    // other nodes may be added here.
    this.match = match || type.contentExpr.start(attrs);
    // : bool
    // True when the node is found in the source, and thus should be
    // preserved until its end. False when it was made up to provide a
    // wrapper for another node.
    this.solid = solid;
    // : [Node]
    // The nodes that have been added so far.
    this.content = [];
    // : ?NodeBuilder
    // The builder for the parent node, if any.
    this.prev = prev;
    // : ?NodeBuilder
    // The builder for the last child, if that is still open (see
    // `NodeBuilder.start`)
    this.openChild = null;
    // : bool
    this.preserveWhitespace = preserveWhitespace;
  }

  // : (Node) → ?Node
  // Try to add a node. Strip it of marks if necessary. Returns null
  // when the node doesn't fit here.


  _createClass(NodeBuilder, [{
    key: "add",
    value: function add(node) {
      var _this2 = this;

      var matched = this.match.matchNode(node);
      if (!matched && node.marks.length) {
        node = node.mark(node.marks.filter(function (mark) {
          return _this2.match.allowsMark(mark.type);
        }));
        matched = this.match.matchNode(node);
      }
      if (!matched) return null;
      this.closeChild();
      this.content.push(node);
      this.match = matched;
      return node;
    }

    // : (NodeType, ?Object, bool, ?ContentMatch) → ?NodeBuilder
    // Try to start a new node at this point.

  }, {
    key: "start",
    value: function start(type, attrs, solid, match, preserveWhitespace) {
      var matched = this.match.matchType(type, attrs);
      if (!matched) return null;
      this.closeChild();
      this.match = matched;
      return this.openChild = new NodeBuilder(type, attrs, solid, this, match, preserveWhitespace);
    }
  }, {
    key: "closeChild",
    value: function closeChild(openRight) {
      if (this.openChild) {
        this.content.push(this.openChild.finish(openRight && openRight - 1));
        this.openChild = null;
      }
    }

    // : ()
    // Strip any trailing space text from the builder's content.

  }, {
    key: "stripTrailingSpace",
    value: function stripTrailingSpace() {
      if (this.openChild) return;
      var last = this.content[this.content.length - 1],
          m = void 0;
      if (last && last.isText && (m = /\s+$/.exec(last.text))) {
        if (last.text.length == m[0].length) this.content.pop();else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length));
      }
    }

    // : (?number) → Node
    // Finish this node. If `openRight` is > 0, the node (and `openRight
    // - 1` last children) is partial, and we don't need to 'close' it
    // by filling in required content.

  }, {
    key: "finish",
    value: function finish(openRight) {
      if (!this.preserveWhitespace) this.stripTrailingSpace();
      this.closeChild(openRight);
      var content = Fragment.from(this.content);
      if (!openRight) content = content.append(this.match.fillBefore(Fragment.empty, true));
      this.content = null;
      return this.type.create(this.match.attrs, content);
    }

    // : (NodeType, ?Object, ?Node) → ?NodeBuilder
    // Try to find a valid place to add a node with the given type and
    // attributes. When successful, if `node` was given, add it in its
    // entirety and return the builder to which it was added. If not,
    // start a node of the given type and return the builder for it.

  }, {
    key: "findPlace",
    value: function findPlace(type, attrs, node, preserveWhitespace) {
      var route = void 0,
          builder = void 0;
      for (var top = this;; top = top.prev) {
        var found = top.match.findWrapping(type, attrs);
        if (found && (!route || route.length > found.length)) {
          route = found;
          builder = top;
          if (!found.length) break;
        }
        if (top.solid) break;
      }

      if (!route) return null;
      for (var i = 0; i < route.length; i++) {
        builder = builder.start(route[i].type, route[i].attrs, false);
      }return node ? builder.add(node) && builder : builder.start(type, attrs, true, null, preserveWhitespace);
    }
  }, {
    key: "depth",
    get: function get() {
      var d = 0;
      for (var b = this.prev; b; b = b.prev) {
        d++;
      }return d;
    }
  }, {
    key: "openDepth",
    get: function get() {
      var d = 0;
      for (var c = this.openChild; c; c = c.openChild) {
        d++;
      }return d;
    }
  }, {
    key: "posBeforeLastChild",
    get: function get() {
      var pos = this.prev ? this.prev.posBeforeLastChild + 1 : 0;
      for (var i = 0; i < this.content.length; i++) {
        pos += this.content[i].nodeSize;
      }return pos;
    }
  }, {
    key: "currentPos",
    get: function get() {
      this.closeChild();
      return this.posBeforeLastChild;
    }
  }]);

  return NodeBuilder;
}();

// : Object<bool> The block-level tags in HTML5


var blockTags = {
  address: true, article: true, aside: true, blockquote: true, canvas: true,
  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
};

// : Object<bool> The tags that we normally ignore.
var ignoreTags = {
  head: true, noscript: true, object: true, script: true, style: true, title: true
};

// : Object<bool> List tags.
var listTags = { ol: true, ul: true };

// A state object used to track context during a parse.

var DOMParseState = function () {
  // : (Schema, Object, NodeBuilder)
  function DOMParseState(schema, options, top) {
    _classCallCheck(this, DOMParseState);

    // : Object The options passed to this parse.
    this.options = options || {};
    // : Schema The schema that we are parsing into.
    this.schema = schema;
    this.top = top;
    // : [Mark] The current set of marks
    this.marks = Mark.none;
    this.info = schemaInfo(schema);
    this.find = options.findPositions;
  }

  // : (Mark) → [Mark]
  // Add a mark to the current set of marks, return the old set.


  _createClass(DOMParseState, [{
    key: "addMark",
    value: function addMark(mark) {
      var old = this.marks;
      this.marks = mark.addToSet(this.marks);
      return old;
    }

    // : (DOMNode)
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.

  }, {
    key: "addDOM",
    value: function addDOM(dom) {
      if (dom.nodeType == 3) {
        var value = dom.nodeValue;
        var top = this.top;
        if (/\S/.test(value) || top.type.isTextblock) {
          if (!this.top.preserveWhitespace) {
            value = value.replace(/\s+/g, " ");
            // If this starts with whitespace, and there is either no node
            // before it or a node that ends with whitespace, strip the
            // leading space.
            if (/^\s/.test(value)) top.stripTrailingSpace();
          }
          if (value) this.insertNode(this.schema.text(value, this.marks));
          this.findInText(dom);
        } else {
          this.findInside(dom);
        }
      } else if (dom.nodeType == 1 && !dom.hasAttribute("pm-ignore")) {
        var style = dom.getAttribute("style");
        if (style) this.addElementWithStyles(parseStyles(style), dom);else this.addElement(dom);
      }
    }

    // : (DOMNode)
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.

  }, {
    key: "addElement",
    value: function addElement(dom) {
      var name = dom.nodeName.toLowerCase();
      if (listTags.hasOwnProperty(name)) this.normalizeList(dom);
      // Ignore trailing BR nodes, which browsers create during editing
      if (this.options.editableContent && name == "br" && !dom.nextSibling) return;
      if (!this.parseNodeType(dom, name)) {
        if (ignoreTags.hasOwnProperty(name)) {
          this.findInside(dom);
        } else {
          var sync = blockTags.hasOwnProperty(name) && this.top;
          this.addAll(dom);
          if (sync) this.sync(sync);
        }
      }
    }

    // Run any style parser associated with the node's styles. After
    // that, if no style parser suppressed the node's content, pass it
    // through to `addElement`.

  }, {
    key: "addElementWithStyles",
    value: function addElementWithStyles(styles, dom) {
      var oldMarks = this.marks,
          marks = this.marks;
      for (var i = 0; i < styles.length; i += 2) {
        var result = matchStyle(this.info.styles, styles[i], styles[i + 1]);
        if (!result) continue;
        if (result.attrs === false) return;
        marks = result.mark.create(result.attrs).addToSet(marks);
      }
      this.marks = marks;
      this.addElement(dom);
      this.marks = oldMarks;
    }

    // (DOMNode, string) → bool
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.

  }, {
    key: "parseNodeType",
    value: function parseNodeType(dom) {
      var result = matchTag(this.info.selectors, dom);
      if (!result) return false;

      var sync = void 0,
          before = void 0,
          contentNode = dom,
          preserve = this.top.preserveWhitespace;
      if (result.content) {
        if (result.content.content === false) contentNode = null;else if (result.content.content) contentNode = result.content.content;
        if (result.content.preserveWhitespace != null) preserve = result.content.preserveWhitespace;
      } else if (result.node && result.node.isLeaf) {
        contentNode = null;
      }

      if (result.node && result.node.isLeaf) this.insertNode(result.node.create(result.attrs));else if (result.node) sync = this.enter(result.node, result.attrs, preserve);else before = this.addMark(result.mark.create(result.attrs));

      if (contentNode) {
        this.findAround(dom, contentNode, true);
        this.addAll(contentNode, sync);
        if (sync) this.sync(sync.prev);else if (before) this.marks = before;
        this.findAround(dom, contentNode, true);
      } else {
        this.findInside(dom);
      }
      return true;
    }

    // : (DOMNode, ?NodeBuilder, ?number, ?number)
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.

  }, {
    key: "addAll",
    value: function addAll(parent, sync, startIndex, endIndex) {
      var index = startIndex || 0;
      for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
        this.findAtPoint(parent, index);
        this.addDOM(dom);
        if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase())) this.sync(sync);
      }
      this.findAtPoint(parent, index);
    }

    // : (Node) → ?Node
    // Try to insert the given node, adjusting the context when needed.

  }, {
    key: "insertNode",
    value: function insertNode(node) {
      var ok = this.top.findPlace(node.type, node.attrs, node);
      if (ok) {
        this.sync(ok);
        return true;
      }
    }

    // : (NodeType, ?Object) → ?NodeBuilder
    // Try to start a node of the given type, adjusting the context when
    // necessary.

  }, {
    key: "enter",
    value: function enter(type, attrs, preserveWhitespace) {
      var ok = this.top.findPlace(type, attrs, null, preserveWhitespace);
      if (ok) {
        this.sync(ok);
        return ok;
      }
    }

    // : ()
    // Leave the node currently at the top.

  }, {
    key: "leave",
    value: function leave() {
      this.top = this.top.prev;
    }
  }, {
    key: "sync",
    value: function sync(to) {
      for (;;) {
        for (var cur = to; cur; cur = cur.prev) {
          if (cur == this.top) {
            this.top = to;
            return;
          }
        }this.leave();
      }
    }

    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.

  }, {
    key: "normalizeList",
    value: function normalizeList(dom) {
      for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
        var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
        if (name && listTags.hasOwnProperty(name) && prevItem) {
          prevItem.appendChild(child);
          child = prevItem;
        } else if (name == "li") {
          prevItem = child;
        } else if (name) {
          prevItem = null;
        }
      }
    }
  }, {
    key: "findAtPoint",
    value: function findAtPoint(parent, offset) {
      if (this.find) for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].node == parent && this.find[i].offset == offset) this.find[i].pos = this.top.currentPos;
      }
    }
  }, {
    key: "findInside",
    value: function findInside(parent) {
      if (this.find) for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.contains(this.find[i].node)) this.find[i].pos = this.top.currentPos;
      }
    }
  }, {
    key: "findAround",
    value: function findAround(parent, content, before) {
      if (parent != content && this.find) for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.contains(this.find[i].node)) {
          var pos = content.compareDocumentPosition(this.find[i].node);
          if (pos & (before ? 2 : 4)) this.find[i].pos = this.top.currentPos;
        }
      }
    }
  }, {
    key: "findInText",
    value: function findInText(textNode) {
      if (this.find) for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].node == textNode) this.find[i].pos = this.top.currentPos - (textNode.nodeValue.length - this.find[i].offset);
      }
    }
  }]);

  return DOMParseState;
}();

// Apply a CSS selector.


function matches(dom, selector) {
  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
}

// : (string) → [string]
// Tokenize a style attribute into property/value pairs.
function parseStyles(style) {
  var re = /\s*([\w-]+)\s*:\s*([^;]+)/g,
      m = void 0,
      result = [];
  while (m = re.exec(style)) {
    result.push(m[1], m[2].trim());
  }return result;
}

function schemaInfo(schema) {
  return schema.cached.parseDOMInfo || (schema.cached.parseDOMInfo = summarizeSchemaInfo(schema));
}

function summarizeSchemaInfo(schema) {
  var selectors = [],
      styles = [];
  for (var name in schema.nodes) {
    var type = schema.nodes[name],
        match = type.matchDOMTag;
    if (match) for (var selector in match) {
      selectors.push({ selector: selector, node: type, value: match[selector] });
    }
  }
  for (var _name in schema.marks) {
    var _type = schema.marks[_name],
        _match = _type.matchDOMTag,
        props = _type.matchDOMStyle;
    if (_match) for (var _selector in _match) {
      selectors.push({ selector: _selector, mark: _type, value: _match[_selector] });
    }if (props) for (var prop in props) {
      styles.push({ prop: prop, mark: _type, value: props[prop] });
    }
  }
  return { selectors: selectors, styles: styles };
}

function matchTag(selectors, dom) {
  for (var i = 0; i < selectors.length; i++) {
    var cur = selectors[i];
    if (matches(dom, cur.selector)) {
      var value = cur.value,
          content = void 0;
      if (value instanceof Function) {
        value = value(dom);
        if (value === false) continue;
      }
      if (Array.isArray(value)) {
        ;var _value = value;

        var _value2 = _slicedToArray(_value, 2);

        value = _value2[0];
        content = _value2[1];
      }
      return { node: cur.node, mark: cur.mark, attrs: value, content: content };
    }
  }
}

function matchStyle(styles, prop, value) {
  for (var i = 0; i < styles.length; i++) {
    var cur = styles[i];
    if (cur.prop == prop) {
      var attrs = cur.value;
      if (attrs instanceof Function) {
        attrs = attrs(value);
        if (attrs === false) continue;
      }
      return { mark: cur.mark, attrs: attrs };
    }
  }
}
},{"./fragment":198,"./mark":201}],200:[function(require,module,exports){
"use strict";

// !!
// This module defines ProseMirror's document model, the data
// structure used to define and inspect content documents. It
// includes:
//
// * The [node](#Node) type that represents document elements
//
// * The [schema](#Schema) types used to tag and constrain the
//   document structure
//
// This module does not depend on the browser API being available
// (i.e. you can load it into any JavaScript environment).

exports.Node = require("./node").Node;
var _require = require("./resolvedpos");

exports.ResolvedPos = _require.ResolvedPos;
exports.NodeRange = _require.NodeRange;

exports.Fragment = require("./fragment").Fragment;
var _require2 = require("./replace");

exports.Slice = _require2.Slice;
exports.ReplaceError = _require2.ReplaceError;

exports.Mark = require("./mark").Mark;
var _require3 = require("./schema");

exports.SchemaSpec = _require3.SchemaSpec;
exports.Schema = _require3.Schema;
exports.NodeType = _require3.NodeType;
exports.Block = _require3.Block;
exports.Inline = _require3.Inline;
exports.Text = _require3.Text;
exports.MarkType = _require3.MarkType;
exports.Attribute = _require3.Attribute;
exports.NodeKind = _require3.NodeKind;

var _require4 = require("./content");

exports.ContentMatch = _require4.ContentMatch;


exports.parseDOMInContext = require("./from_dom").parseDOMInContext;
},{"./content":196,"./fragment":198,"./from_dom":199,"./mark":201,"./node":202,"./replace":203,"./resolvedpos":204,"./schema":205}],201:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("../util/comparedeep"),
    compareDeep = _require.compareDeep;

// ;; A mark is a piece of information that can be attached to a node,
// such as it being emphasized, in code font, or a link. It has a type
// and optionally a set of attributes that provide further information
// (such as the target of the link). Marks are created through a
// `Schema`, which controls which types exist and which
// attributes they have.


var Mark = function () {
  function Mark(type, attrs) {
    _classCallCheck(this, Mark);

    // :: MarkType
    // The type of this mark.
    this.type = type;
    // :: Object
    // The attributes associated with this mark.
    this.attrs = attrs;
  }

  // :: () → Object
  // Convert this mark to a JSON-serializeable representation.


  _createClass(Mark, [{
    key: "toJSON",
    value: function toJSON() {
      var obj = { type: this.type.name };
      for (var attr in this.attrs) {
        if (!obj.attrs) obj.attrs = Object.create(null);
        obj.attrs[attr] = this.attrs[attr];
      }
      return obj;
    }

    // :: ([Mark]) → [Mark]
    // Given a set of marks, create a new set which contains this one as
    // well, in the right position. If this mark is already in the set,
    // the set itself is returned. If a mark of this type with different
    // attributes is already in the set, a set in which it is replaced
    // by this one is returned.

  }, {
    key: "addToSet",
    value: function addToSet(set) {
      for (var i = 0; i < set.length; i++) {
        var other = set[i];
        if (other.type == this.type) {
          if (this.eq(other)) return set;
          var copy = set.slice();
          copy[i] = this;
          return copy;
        }
        if (other.type.rank > this.type.rank) return set.slice(0, i).concat(this).concat(set.slice(i));
      }
      return set.concat(this);
    }

    // :: ([Mark]) → [Mark]
    // Remove this mark from the given set, returning a new set. If this
    // mark is not in the set, the set itself is returned.

  }, {
    key: "removeFromSet",
    value: function removeFromSet(set) {
      for (var i = 0; i < set.length; i++) {
        if (this.eq(set[i])) return set.slice(0, i).concat(set.slice(i + 1));
      }return set;
    }

    // :: ([Mark]) → bool
    // Test whether this mark is in the given set of marks.

  }, {
    key: "isInSet",
    value: function isInSet(set) {
      for (var i = 0; i < set.length; i++) {
        if (this.eq(set[i])) return true;
      }return false;
    }

    // :: (Mark) → bool
    // Test whether this mark has the same type and attributes as
    // another mark.

  }, {
    key: "eq",
    value: function eq(other) {
      if (this == other) return true;
      if (this.type != other.type) return false;
      if (!compareDeep(other.attrs, this.attrs)) return false;
      return true;
    }

    // :: ([Mark], [Mark]) → bool
    // Test whether two sets of marks are identical.

  }], [{
    key: "sameSet",
    value: function sameSet(a, b) {
      if (a == b) return true;
      if (a.length != b.length) return false;
      for (var i = 0; i < a.length; i++) {
        if (!a[i].eq(b[i])) return false;
      }return true;
    }

    // :: (?union<Mark, [Mark]>) → [Mark]
    // Create a properly sorted mark set from null, a single mark, or an
    // unsorted array of marks.

  }, {
    key: "setFrom",
    value: function setFrom(marks) {
      if (!marks || marks.length == 0) return Mark.none;
      if (marks instanceof Mark) return [marks];
      var copy = marks.slice();
      copy.sort(function (a, b) {
        return a.type.rank - b.type.rank;
      });
      return copy;
    }
  }]);

  return Mark;
}();

exports.Mark = Mark;

// :: [Mark] The empty set of marks.
Mark.none = [];
},{"../util/comparedeep":219}],202:[function(require,module,exports){
"use strict";

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./fragment"),
    Fragment = _require.Fragment;

var _require2 = require("./mark"),
    Mark = _require2.Mark;

var _require3 = require("./replace"),
    Slice = _require3.Slice,
    _replace = _require3.replace;

var _require4 = require("./resolvedpos"),
    ResolvedPos = _require4.ResolvedPos;

var _require5 = require("./to_dom"),
    nodeToDOM = _require5.nodeToDOM;

var _require6 = require("../util/comparedeep"),
    compareDeep = _require6.compareDeep;

var emptyAttrs = Object.create(null);

// ;; This class represents a node in the tree that makes up a
// ProseMirror document. So a document is an instance of `Node`, with
// children that are also instances of `Node`.
//
// Nodes are persistent data structures. Instead of changing them, you
// create new ones with the content you want. Old ones keep pointing
// at the old document shape. This is made cheaper by sharing
// structure between the old and new data as much as possible, which a
// tree shape like this (without back pointers) makes easy.
//
// **Never** directly mutate the properties of a `Node` object. See
// [this guide](guide/doc.html) for more information.

var Node = function () {
  function Node(type, attrs, content, marks) {
    _classCallCheck(this, Node);

    // :: NodeType
    // The type of node that this is.
    this.type = type;

    // :: Object
    // An object mapping attribute names to values. The kind of
    // attributes allowed and required are determined by the node
    // type.
    this.attrs = attrs;

    // :: Fragment
    // A container holding the node's children.
    this.content = content || Fragment.empty;

    // :: [Mark]
    // The marks (things like whether it is emphasized or part of a
    // link) associated with this node.
    this.marks = marks || Mark.none;
  }

  // :: ?string #path=Node.prototype.text
  // For text nodes, this contains the node's text content.

  // :: number
  // The size of this node. For text nodes, this is the amount of
  // characters. For leaf nodes, it is one. And for non-leaf nodes, it
  // is the size of the content plus two (the start and end token).


  _createClass(Node, [{
    key: "child",


    // :: (number) → Node
    // Get the child node at the given index. Raises an error when the
    // index is out of range.
    value: function child(index) {
      return this.content.child(index);
    }

    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.

  }, {
    key: "maybeChild",
    value: function maybeChild(index) {
      return this.content.maybeChild(index);
    }

    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.

  }, {
    key: "forEach",
    value: function forEach(f) {
      this.content.forEach(f);
    }

    // :: string
    // Concatenates all the text nodes found in this fragment and its
    // children.

  }, {
    key: "textBetween",


    // :: (number, number, ?string) → string
    // Get all text between positions `from` and `to`. When `separator`
    // is given, it will be inserted whenever a new block node is
    // started.
    value: function textBetween(from, to, separator) {
      return this.content.textBetween(from, to, separator);
    }

    // :: ?Node
    // Returns this node's first child, or `null` if there are no
    // children.

  }, {
    key: "eq",


    // :: (Node) → bool
    // Test whether two nodes represent the same content.
    value: function eq(other) {
      return this == other || this.sameMarkup(other) && this.content.eq(other.content);
    }

    // :: (Node) → bool
    // Compare the markup (type, attributes, and marks) of this node to
    // those of another. Returns `true` if both have the same markup.

  }, {
    key: "sameMarkup",
    value: function sameMarkup(other) {
      return this.hasMarkup(other.type, other.attrs, other.marks);
    }

    // :: (NodeType, ?Object, ?[Mark]) → bool
    // Check whether this node's markup correspond to the given type,
    // attributes, and marks.

  }, {
    key: "hasMarkup",
    value: function hasMarkup(type, attrs, marks) {
      return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks || Mark.none);
    }

    // :: (?Fragment) → Node
    // Create a new node with the same markup as this node, containing
    // the given content (or empty, if no content is given).

  }, {
    key: "copy",
    value: function copy() {
      var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (content == this.content) return this;
      return new this.constructor(this.type, this.attrs, content, this.marks);
    }

    // :: ([Mark]) → Node
    // Create a copy of this node, with the given set of marks instead
    // of the node's own marks.

  }, {
    key: "mark",
    value: function mark(marks) {
      return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks);
    }

    // :: (number, ?number) → Node
    // Create a copy of this node with only the content between the
    // given offsets. If `to` is not given, it defaults to the end of
    // the node.

  }, {
    key: "cut",
    value: function cut(from, to) {
      if (from == 0 && to == this.content.size) return this;
      return this.copy(this.content.cut(from, to));
    }

    // :: (number, ?number) → Slice
    // Cut out the part of the document between the given positions, and
    // return it as a `Slice` object.

  }, {
    key: "slice",
    value: function slice(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.content.size;

      if (from == to) return Slice.empty;

      var $from = this.resolve(from),
          $to = this.resolve(to);
      var depth = $from.sameDepth($to),
          start = $from.start(depth),
          node = $from.node(depth);
      var content = node.content.cut($from.pos - start, $to.pos - start);
      return new Slice(content, $from.depth - depth, $to.depth - depth, node);
    }

    // :: (number, number, Slice) → Node
    // Replace the part of the document between the given positions with
    // the given slice. The slice must 'fit', meaning its open sides
    // must be able to connect to the surrounding content, and its
    // content nodes must be valid children for the node they are placed
    // into. If any of this is violated, an error of type `ReplaceError`
    // is thrown.

  }, {
    key: "replace",
    value: function replace(from, to, slice) {
      return _replace(this.resolve(from), this.resolve(to), slice);
    }

    // :: (number) → ?Node
    // Find the node after the given position.

  }, {
    key: "nodeAt",
    value: function nodeAt(pos) {
      for (var node = this;;) {
        var _node$content$findInd = node.content.findIndex(pos),
            index = _node$content$findInd.index,
            offset = _node$content$findInd.offset;

        node = node.maybeChild(index);
        if (!node) return null;
        if (offset == pos || node.isText) return node;
        pos -= offset + 1;
      }
    }

    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node after the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.

  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      var _content$findIndex = this.content.findIndex(pos),
          index = _content$findIndex.index,
          offset = _content$findIndex.offset;

      return { node: this.content.maybeChild(index), index: index, offset: offset };
    }

    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node before the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.

  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      if (pos == 0) return { node: null, index: 0, offset: 0 };

      var _content$findIndex2 = this.content.findIndex(pos),
          index = _content$findIndex2.index,
          offset = _content$findIndex2.offset;

      if (offset < pos) return { node: this.content.child(index), index: index, offset: offset };
      var node = this.content.child(index - 1);
      return { node: node, index: index - 1, offset: offset - node.nodeSize };
    }

    // :: (?number, ?number, (node: Node, pos: number, parent: Node, index: number))
    // Iterate over all nodes between the given two positions, calling
    // the callback with the node, its position, its parent
    // node, and its index in that node.

  }, {
    key: "nodesBetween",
    value: function nodesBetween(from, to, f) {
      var pos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      this.content.nodesBetween(from, to, f, pos, this);
    }

    // :: ((node: Node, pos: number, parent: Node))
    // Call the given callback for every descendant node.

  }, {
    key: "descendants",
    value: function descendants(f) {
      this.nodesBetween(0, this.content.size, f);
    }

    // :: (number) → ResolvedPos
    // Resolve the given position in the document, returning an object
    // describing its path through the document.

  }, {
    key: "resolve",
    value: function resolve(pos) {
      return ResolvedPos.resolveCached(this, pos);
    }
  }, {
    key: "resolveNoCache",
    value: function resolveNoCache(pos) {
      return ResolvedPos.resolve(this, pos);
    }

    // :: (number) → [Mark]
    // Get the marks at the given position factoring in the surrounding marks'
    // inclusiveLeft and inclusiveRight properties. If the position is at the
    // start of a non-empty node, the marks of the node after it are returned.

  }, {
    key: "marksAt",
    value: function marksAt(pos) {
      var $pos = this.resolve(pos),
          parent = $pos.parent,
          index = $pos.index();

      // In an empty parent, return the empty array
      if (parent.content.size == 0) return Mark.none;
      // When inside a text node or at the start of the parent node, return the node's marks
      if (index == 0 || !$pos.atNodeBoundary) return parent.child(index).marks;

      var marks = parent.child(index - 1).marks;
      for (var i = 0; i < marks.length; i++) {
        if (!marks[i].type.inclusiveRight) marks = marks[i--].removeFromSet(marks);
      }return marks;
    }

    // :: (?number, ?number, MarkType) → bool
    // Test whether a mark of the given type occurs in this document
    // between the two given positions.

  }, {
    key: "rangeHasMark",
    value: function rangeHasMark(from, to, type) {
      var found = false;
      this.nodesBetween(from, to, function (node) {
        if (type.isInSet(node.marks)) found = true;
        return !found;
      });
      return found;
    }

    // :: bool
    // True when this is a block (non-inline node)

  }, {
    key: "toString",


    // :: () → string
    // Return a string representation of this node for debugging
    // purposes.
    value: function toString() {
      var name = this.type.name;
      if (this.content.size) name += "(" + this.content.toStringInner() + ")";
      return wrapMarks(this.marks, name);
    }

    // :: (number) → ContentMatch
    // Get the content match in this node at the given index.

  }, {
    key: "contentMatchAt",
    value: function contentMatchAt(index) {
      return this.type.contentExpr.getMatchAt(this.attrs, this.content, index);
    }

    // :: (number, number, ?Fragment, ?number, ?number) → bool
    // Test whether replacing the range `from` to `to` (by index) with
    // the given replacement fragment (which defaults to the empty
    // fragment) would leave the node's content valid. You can
    // optionally pass `start` and `end` indices into the replacement
    // fragment.

  }, {
    key: "canReplace",
    value: function canReplace(from, to, replacement, start, end) {
      return this.type.contentExpr.checkReplace(this.attrs, this.content, from, to, replacement, start, end);
    }

    // :: (number, number, NodeType, ?[Mark]) → bool
    // Test whether replacing the range `from` to `to` (by index) with a
    // node of the given type with the given attributes and marks would
    // be valid.

  }, {
    key: "canReplaceWith",
    value: function canReplaceWith(from, to, type, attrs, marks) {
      return this.type.contentExpr.checkReplaceWith(this.attrs, this.content, from, to, type, attrs, marks || Mark.none);
    }

    // :: (Node) → bool
    // Test whether the given node's content could be appended to this
    // node. If that node is empty, this will only return true if there
    // is at least one node type that can appear in both nodes (to avoid
    // merging completely incompatible nodes).

  }, {
    key: "canAppend",
    value: function canAppend(other) {
      if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content);else return this.type.compatibleContent(other.type);
    }
  }, {
    key: "defaultContentType",
    value: function defaultContentType(at) {
      var elt = this.contentMatchAt(at).nextElement;
      return elt && elt.defaultType();
    }

    // :: () → Object
    // Return a JSON-serializeable representation of this node.

  }, {
    key: "toJSON",
    value: function toJSON() {
      var obj = { type: this.type.name };
      for (var _ in this.attrs) {
        obj.attrs = this.attrs;
        break;
      }
      if (this.content.size) obj.content = this.content.toJSON();
      if (this.marks.length) obj.marks = this.marks.map(function (n) {
        return n.toJSON();
      });
      return obj;
    }

    // :: (Schema, Object) → Node
    // Deserialize a node from its JSON representation.

  }, {
    key: "toDOM",


    // :: (?Object) → DOMNode
    // Serialize this node to a DOM node. This can be useful when you
    // need to serialize a part of a document, as opposed to the whole
    // document, but you'll usually want to do
    // `doc.content.`[`toDOM()`](#Fragment.toDOM) instead.
    value: function toDOM() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return nodeToDOM(this, options);
    }
  }, {
    key: "nodeSize",
    get: function get() {
      return this.type.isLeaf ? 1 : 2 + this.content.size;
    }

    // :: number
    // The number of children that the node has.

  }, {
    key: "childCount",
    get: function get() {
      return this.content.childCount;
    }
  }, {
    key: "textContent",
    get: function get() {
      return this.textBetween(0, this.content.size, "");
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.content.firstChild;
    }

    // :: ?Node
    // Returns this node's last child, or `null` if there are no
    // children.

  }, {
    key: "lastChild",
    get: function get() {
      return this.content.lastChild;
    }
  }, {
    key: "isBlock",
    get: function get() {
      return this.type.isBlock;
    }

    // :: bool
    // True when this is a textblock node, a block node with inline
    // content.

  }, {
    key: "isTextblock",
    get: function get() {
      return this.type.isTextblock;
    }

    // :: bool
    // True when this is an inline node (a text node or a node that can
    // appear among text).

  }, {
    key: "isInline",
    get: function get() {
      return this.type.isInline;
    }

    // :: bool
    // True when this is a text node.

  }, {
    key: "isText",
    get: function get() {
      return this.type.isText;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      var type = schema.nodeType(json.type);
      var content = json.text != null ? json.text : Fragment.fromJSON(schema, json.content);
      return type.create(json.attrs, content, json.marks && json.marks.map(schema.markFromJSON));
    }
  }]);

  return Node;
}();

exports.Node = Node;

var TextNode = function (_Node) {
  _inherits(TextNode, _Node);

  function TextNode(type, attrs, content, marks) {
    _classCallCheck(this, TextNode);

    var _this = _possibleConstructorReturn(this, (TextNode.__proto__ || Object.getPrototypeOf(TextNode)).call(this, type, attrs, null, marks));

    if (!content) throw new RangeError("Empty text nodes are not allowed");

    _this.text = content;
    return _this;
  }

  _createClass(TextNode, [{
    key: "toString",
    value: function toString() {
      return wrapMarks(this.marks, JSON.stringify(this.text));
    }
  }, {
    key: "textBetween",
    value: function textBetween(from, to) {
      return this.text.slice(from, to);
    }
  }, {
    key: "mark",
    value: function mark(marks) {
      return new TextNode(this.type, this.attrs, this.text, marks);
    }
  }, {
    key: "withText",
    value: function withText(text) {
      if (text == this.text) return this;
      return new TextNode(this.type, this.attrs, text, this.marks);
    }
  }, {
    key: "cut",
    value: function cut() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.text.length;

      if (from == 0 && to == this.text.length) return this;
      return this.withText(this.text.slice(from, to));
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return this.sameMarkup(other) && this.text == other.text;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var base = _get(TextNode.prototype.__proto__ || Object.getPrototypeOf(TextNode.prototype), "toJSON", this).call(this);
      base.text = this.text;
      return base;
    }
  }, {
    key: "textContent",
    get: function get() {
      return this.text;
    }
  }, {
    key: "nodeSize",
    get: function get() {
      return this.text.length;
    }
  }]);

  return TextNode;
}(Node);

exports.TextNode = TextNode;

function wrapMarks(marks, str) {
  for (var i = marks.length - 1; i >= 0; i--) {
    str = marks[i].type.name + "(" + str + ")";
  }return str;
}
},{"../util/comparedeep":219,"./fragment":198,"./mark":201,"./replace":203,"./resolvedpos":204,"./to_dom":206}],203:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../util/error"),
    ProseMirrorError = _require.ProseMirrorError;

var _require2 = require("./fragment"),
    Fragment = _require2.Fragment;

// ;; Error type raised by `Node.replace` when given an invalid
// replacement.


var ReplaceError = function (_ProseMirrorError) {
  _inherits(ReplaceError, _ProseMirrorError);

  function ReplaceError() {
    _classCallCheck(this, ReplaceError);

    return _possibleConstructorReturn(this, (ReplaceError.__proto__ || Object.getPrototypeOf(ReplaceError)).apply(this, arguments));
  }

  return ReplaceError;
}(ProseMirrorError);

exports.ReplaceError = ReplaceError;

// ;; A slice represents a piece cut out of a larger document. It
// stores not only a fragment, but also the depth up to which nodes on
// both side are 'open' / cut through.

var Slice = function () {
  // :: (Fragment, number, number, ?Node)
  function Slice(content, openLeft, openRight, possibleParent) {
    _classCallCheck(this, Slice);

    // :: Fragment The slice's content nodes.
    this.content = content;
    // :: number The open depth at the start.
    this.openLeft = openLeft;
    // :: number The open depth at the end.
    this.openRight = openRight;
    this.possibleParent = possibleParent;
  }

  // :: number
  // The size this slice would add when inserted into a document.


  _createClass(Slice, [{
    key: "insertAt",
    value: function insertAt(pos, fragment) {
      function insertInto(content, dist, insert, parent) {
        var _content$findIndex = content.findIndex(dist),
            index = _content$findIndex.index,
            offset = _content$findIndex.offset,
            child = content.maybeChild(index);

        if (offset == dist || child.isText) {
          if (parent && !parent.canReplace(index, index, insert)) return null;
          return content.cut(0, dist).append(insert).append(content.cut(dist));
        }
        var inner = insertInto(child.content, dist - offset - 1, insert);
        return inner && content.replaceChild(index, child.copy(inner));
      }
      var content = insertInto(this.content, pos + this.openLeft, fragment, null);
      return content && new Slice(content, this.openLeft, this.openRight);
    }
  }, {
    key: "removeBetween",
    value: function removeBetween(from, to) {
      function removeRange(content, from, to) {
        var _content$findIndex2 = content.findIndex(from),
            index = _content$findIndex2.index,
            offset = _content$findIndex2.offset,
            child = content.maybeChild(index);

        var _content$findIndex3 = content.findIndex(to),
            indexTo = _content$findIndex3.index,
            offsetTo = _content$findIndex3.offset;

        if (offset == from || child.isText) {
          if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError("Removing non-flat range");
          return content.cut(0, from).append(content.cut(to));
        }
        if (index != indexTo) throw new RangeError("Removing non-flat range");
        return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
      }
      return new Slice(removeRange(this.content, from + this.openLeft, to + this.openLeft), this.openLeft, this.openRight);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.content + "(" + this.openLeft + "," + this.openRight + ")";
    }

    // :: () → ?Object
    // Convert a slice to a JSON-serializable representation.

  }, {
    key: "toJSON",
    value: function toJSON() {
      if (!this.content.size) return null;
      return { content: this.content.toJSON(),
        openLeft: this.openLeft,
        openRight: this.openRight };
    }

    // :: (Schema, ?Object) → Slice
    // Deserialize a slice from its JSON representation.

  }, {
    key: "size",
    get: function get() {
      return this.content.size - this.openLeft - this.openRight;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      if (!json) return Slice.empty;
      return new Slice(Fragment.fromJSON(schema, json.content), json.openLeft, json.openRight);
    }
  }]);

  return Slice;
}();

exports.Slice = Slice;

// :: Slice
// The empty slice.
Slice.empty = new Slice(Fragment.empty, 0, 0);

function replace($from, $to, slice) {
  if (slice.openLeft > $from.depth) throw new ReplaceError("Inserted content deeper than insertion position");
  if ($from.depth - slice.openLeft != $to.depth - slice.openRight) throw new ReplaceError("Inconsistent open depths");
  return replaceOuter($from, $to, slice, 0);
}
exports.replace = replace;

function replaceOuter($from, $to, slice, depth) {
  var index = $from.index(depth),
      node = $from.node(depth);
  if (index == $to.index(depth) && depth < $from.depth - slice.openLeft) {
    var inner = replaceOuter($from, $to, slice, depth + 1);
    return node.copy(node.content.replaceChild(index, inner));
  } else if (slice.content.size) {
    var _prepareSliceForRepla = prepareSliceForReplace(slice, $from),
        start = _prepareSliceForRepla.start,
        end = _prepareSliceForRepla.end;

    return close(node, replaceThreeWay($from, start, end, $to, depth));
  } else {
    return close(node, replaceTwoWay($from, $to, depth));
  }
}

function checkJoin(main, sub) {
  if (!sub.type.compatibleContent(main.type)) throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
}

function joinable($before, $after, depth) {
  var node = $before.node(depth);
  checkJoin(node, $after.node(depth));
  return node;
}

function addNode(child, target) {
  var last = target.length - 1;
  if (last >= 0 && child.isText && child.sameMarkup(target[last])) target[last] = child.withText(target[last].text + child.text);else target.push(child);
}

function addRange($start, $end, depth, target) {
  var node = ($end || $start).node(depth);
  var startIndex = 0,
      endIndex = $end ? $end.index(depth) : node.childCount;
  if ($start) {
    startIndex = $start.index(depth);
    if ($start.depth > depth) {
      startIndex++;
    } else if (!$start.atNodeBoundary) {
      addNode($start.nodeAfter, target);
      startIndex++;
    }
  }
  for (var i = startIndex; i < endIndex; i++) {
    addNode(node.child(i), target);
  }if ($end && $end.depth == depth && !$end.atNodeBoundary) addNode($end.nodeBefore, target);
}

function close(node, content) {
  if (!node.type.validContent(content, node.attrs)) throw new ReplaceError("Invalid content for node " + node.type.name);
  return node.copy(content);
}

function replaceThreeWay($from, $start, $end, $to, depth) {
  var openLeft = $from.depth > depth && joinable($from, $start, depth + 1);
  var openRight = $to.depth > depth && joinable($end, $to, depth + 1);

  var content = [];
  addRange(null, $from, depth, content);
  if (openLeft && openRight && $start.index(depth) == $end.index(depth)) {
    checkJoin(openLeft, openRight);
    addNode(close(openLeft, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
  } else {
    if (openLeft) addNode(close(openLeft, replaceTwoWay($from, $start, depth + 1)), content);
    addRange($start, $end, depth, content);
    if (openRight) addNode(close(openRight, replaceTwoWay($end, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}

function replaceTwoWay($from, $to, depth) {
  var content = [];
  addRange(null, $from, depth, content);
  if ($from.depth > depth) {
    var type = joinable($from, $to, depth + 1);
    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}

function prepareSliceForReplace(slice, $along) {
  var extra = $along.depth - slice.openLeft,
      parent = $along.node(extra);
  var node = parent.copy(slice.content);
  for (var i = extra - 1; i >= 0; i--) {
    node = $along.node(i).copy(Fragment.from(node));
  }return { start: node.resolveNoCache(slice.openLeft + extra),
    end: node.resolveNoCache(node.content.size - slice.openRight - extra) };
}
},{"../util/error":221,"./fragment":198}],204:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ;; The usual way to represent positions in a document is with a
// plain integer. Since those tell you very little about the context
// of that position, you'll often have to 'resolve' a position to get
// the context you need. Objects of this class represent such a
// resolved position, providing various pieces of context information
// and helper methods.
//
// Throughout this interface, methods that take an optional `depth`
// parameter will interpret undefined as `this.depth` and negative
// numbers as `this.depth + value`.
var ResolvedPos = function () {
  function ResolvedPos(pos, path, parentOffset) {
    _classCallCheck(this, ResolvedPos);

    // :: number The position that was resolved.
    this.pos = pos;
    this.path = path;
    // :: number
    // The number of levels the parent node is from the root. If this
    // position points directly into the root, it is 0. If it points
    // into a top-level paragraph, 1, and so on.
    this.depth = path.length / 3 - 1;
    // :: number The offset this position has into its parent node.
    this.parentOffset = parentOffset;
  }

  _createClass(ResolvedPos, [{
    key: "resolveDepth",
    value: function resolveDepth(val) {
      if (val == null) return this.depth;
      if (val < 0) return this.depth + val;
      return val;
    }

    // :: Node
    // The parent node that the position points into. Note that even if
    // a position points into a text node, that node is not considered
    // the parent—text nodes are 'flat' in this model.

  }, {
    key: "node",


    // :: (?number) → Node
    // The ancestor node at the given level. `p.node(p.depth)` is the
    // same as `p.parent`.
    value: function node(depth) {
      return this.path[this.resolveDepth(depth) * 3];
    }

    // :: (?number) → number
    // The index into the ancestor at the given level. If this points at
    // the 3rd node in the 2nd paragraph on the top level, for example,
    // `p.index(0)` is 2 and `p.index(1)` is 3.

  }, {
    key: "index",
    value: function index(depth) {
      return this.path[this.resolveDepth(depth) * 3 + 1];
    }

    // :: (?number) → number
    // The index pointing after this position into the ancestor at the
    // given level.

  }, {
    key: "indexAfter",
    value: function indexAfter(depth) {
      depth = this.resolveDepth(depth);
      return this.index(depth) + (depth == this.depth && this.atNodeBoundary ? 0 : 1);
    }

    // :: (?number) → number
    // The (absolute) position at the start of the node at the given
    // level.

  }, {
    key: "start",
    value: function start(depth) {
      depth = this.resolveDepth(depth);
      return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    }

    // :: (?number) → number
    // The (absolute) position at the end of the node at the given
    // level.

  }, {
    key: "end",
    value: function end(depth) {
      depth = this.resolveDepth(depth);
      return this.start(depth) + this.node(depth).content.size;
    }

    // :: (?number) → number
    // The (absolute) position directly before the node at the given
    // level, or, when `level` is `this.level + 1`, the original
    // position.

  }, {
    key: "before",
    value: function before(depth) {
      depth = this.resolveDepth(depth);
      if (!depth) throw new RangeError("There is no position before the top-level node");
      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
    }

    // :: (?number) → number
    // The (absolute) position directly after the node at the given
    // level, or, when `level` is `this.level + 1`, the original
    // position.

  }, {
    key: "after",
    value: function after(depth) {
      depth = this.resolveDepth(depth);
      if (!depth) throw new RangeError("There is no position after the top-level node");
      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
    }

    // :: bool
    // True if this position points at a node boundary, false if it
    // points into a text node.

  }, {
    key: "sameDepth",


    // :: (ResolvedPos) → number
    // The depth up to which this position and the other share the same
    // parent nodes.
    value: function sameDepth(other) {
      var depth = 0,
          max = Math.min(this.depth, other.depth);
      while (depth < max && this.index(depth) == other.index(depth)) {
        ++depth;
      }return depth;
    }

    // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange
    // Returns a range based on the place where this position and the
    // given position diverge around block content. If both point into
    // the same textblock, for example, a range around that textblock
    // will be returned. If they point into different blocks, the range
    // around those blocks or their ancestors in their common ancestor
    // is returned. You can pass in an optional predicate that will be
    // called with a parent node to see if a range into that parent is
    // acceptable.

  }, {
    key: "blockRange",
    value: function blockRange() {
      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
      var pred = arguments[1];

      if (other.pos < this.pos) return other.blockRange(this);
      for (var d = this.depth - (this.parent.isTextblock || this.pos == other.pos ? 1 : 0); d >= 0; d--) {
        if (other.pos <= this.end(d) && (!pred || pred(this.node(d)))) return new NodeRange(this, other, d);
      }
    }

    // :: (ResolvedPos) → bool
    // Query whether the given position shares the same parent node.

  }, {
    key: "sameParent",
    value: function sameParent(other) {
      return this.pos - this.parentOffset == other.pos - other.parentOffset;
    }
  }, {
    key: "toString",
    value: function toString() {
      var str = "";
      for (var i = 1; i <= this.depth; i++) {
        str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
      }return str + ":" + this.parentOffset;
    }
  }, {
    key: "plusOne",
    value: function plusOne() {
      var copy = this.path.slice(),
          skip = this.nodeAfter.nodeSize;
      copy[copy.length - 2] += 1;
      var pos = copy[copy.length - 1] = this.pos + skip;
      return new ResolvedPos(pos, copy, this.parentOffset + skip);
    }
  }, {
    key: "parent",
    get: function get() {
      return this.node(this.depth);
    }
  }, {
    key: "atNodeBoundary",
    get: function get() {
      return this.path[this.path.length - 1] == this.pos;
    }

    // :: ?Node
    // Get the node directly after the position, if any. If the position
    // points into a text node, only the part of that node after the
    // position is returned.

  }, {
    key: "nodeAfter",
    get: function get() {
      var parent = this.parent,
          index = this.index(this.depth);
      if (index == parent.childCount) return null;
      var dOff = this.pos - this.path[this.path.length - 1],
          child = parent.child(index);
      return dOff ? parent.child(index).cut(dOff) : child;
    }

    // :: ?Node
    // Get the node directly before the position, if any. If the
    // position points into a text node, only the part of that node
    // before the position is returned.

  }, {
    key: "nodeBefore",
    get: function get() {
      var index = this.index(this.depth);
      var dOff = this.pos - this.path[this.path.length - 1];
      if (dOff) return this.parent.child(index).cut(0, dOff);
      return index == 0 ? null : this.parent.child(index - 1);
    }
  }], [{
    key: "resolve",
    value: function resolve(doc, pos) {
      if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError("Position " + pos + " out of range");
      var path = [];
      var start = 0,
          parentOffset = pos;
      for (var node = doc;;) {
        var _node$content$findInd = node.content.findIndex(parentOffset),
            index = _node$content$findInd.index,
            offset = _node$content$findInd.offset;

        var rem = parentOffset - offset;
        path.push(node, index, start + offset);
        if (!rem) break;
        node = node.child(index);
        if (node.isText) break;
        parentOffset = rem - 1;
        start += offset + 1;
      }
      return new ResolvedPos(pos, path, parentOffset);
    }
  }, {
    key: "resolveCached",
    value: function resolveCached(doc, pos) {
      for (var i = 0; i < resolveCache.length; i++) {
        var cached = resolveCache[i];
        if (cached.pos == pos && cached.node(0) == doc) return cached;
      }
      var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
      resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
      return result;
    }
  }]);

  return ResolvedPos;
}();

exports.ResolvedPos = ResolvedPos;

var resolveCache = [],
    resolveCachePos = 0,
    resolveCacheSize = 6;

// ;; Represents a flat range of content.

var NodeRange = function () {
  function NodeRange($from, $to, depth) {
    _classCallCheck(this, NodeRange);

    // :: ResolvedPos A resolved position along the start of the
    // content. May have a `depth` greater than this object's `depth`
    // property, since these are the positions that were used to
    // compute the range, not re-resolved positions directly at its
    // boundaries.
    this.$from = $from;
    // :: ResolvedPos A position along the end of the content. See
    // caveat for [`from`](#NodeRange.from).
    this.$to = $to;
    // :: number The depth of the node that this range points into.
    this.depth = depth;
  }

  // :: number The position at the start of the range.


  _createClass(NodeRange, [{
    key: "start",
    get: function get() {
      return this.$from.before(this.depth + 1);
    }
    // :: number The position at the end of the range.

  }, {
    key: "end",
    get: function get() {
      return this.$to.after(this.depth + 1);
    }

    // :: Node The parent node that the range points into.

  }, {
    key: "parent",
    get: function get() {
      return this.$from.node(this.depth);
    }
    // :: number The start index of the range in the parent node.

  }, {
    key: "startIndex",
    get: function get() {
      return this.$from.index(this.depth);
    }
    // :: number The end index of the range in the parent node.

  }, {
    key: "endIndex",
    get: function get() {
      return this.$to.indexAfter(this.depth);
    }
  }]);

  return NodeRange;
}();

exports.NodeRange = NodeRange;
},{}],205:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./node"),
    Node = _require.Node,
    TextNode = _require.TextNode;

var _require2 = require("./fragment"),
    Fragment = _require2.Fragment;

var _require3 = require("./mark"),
    Mark = _require3.Mark;

var _require4 = require("./content"),
    ContentExpr = _require4.ContentExpr;

var _require5 = require("./from_dom"),
    _parseDOM = _require5.parseDOM;

var _require6 = require("../util/obj"),
    copyObj = _require6.copyObj;

var _require7 = require("../util/orderedmap"),
    OrderedMap = _require7.OrderedMap;

// For node types where all attrs have a default value (or which don't
// have any attributes), build up a single reusable default attribute
// object, and use it for all nodes that don't specify specific
// attributes.


function defaultAttrs(attrs) {
  var defaults = Object.create(null);
  for (var attrName in attrs) {
    var attr = attrs[attrName];
    if (attr.default === undefined) return null;
    defaults[attrName] = attr.default;
  }
  return defaults;
}

function _computeAttrs(attrs, value) {
  var built = Object.create(null);
  for (var name in attrs) {
    var given = value && value[name];
    if (given == null) {
      var attr = attrs[name];
      if (attr.default !== undefined) given = attr.default;else if (attr.compute) given = attr.compute();else throw new RangeError("No value supplied for attribute " + name);
    }
    built[name] = given;
  }
  return built;
}

// ;; Node types are objects allocated once per `Schema`
// and used to tag `Node` instances with a type. They are
// instances of sub-types of this class, and contain information about
// the node type (its name, its allowed attributes, methods for
// serializing it to various formats, information to guide
// deserialization, and so on).

var NodeType = function () {
  function NodeType(name, schema) {
    _classCallCheck(this, NodeType);

    // :: string
    // The name the node type has in this schema.
    this.name = name;
    // Freeze the attributes, to avoid calling a potentially expensive
    // getter all the time.
    Object.defineProperty(this, "attrs", { value: copyObj(this.attrs) });
    this.defaultAttrs = defaultAttrs(this.attrs);
    this.contentExpr = null;
    // :: Schema
    // A link back to the `Schema` the node type belongs to.
    this.schema = schema;
  }

  // :: Object<Attribute> #path=NodeType.prototype.attrs
  // The attributes for this node type.

  // :: bool
  // True if this is a block type.


  _createClass(NodeType, [{
    key: "hasRequiredAttrs",
    value: function hasRequiredAttrs(ignore) {
      for (var n in this.attrs) {
        if (this.attrs[n].isRequired && (!ignore || !(n in ignore))) return true;
      }return false;
    }
  }, {
    key: "compatibleContent",
    value: function compatibleContent(other) {
      return this == other || this.contentExpr.compatible(other.contentExpr);
    }
  }, {
    key: "computeAttrs",
    value: function computeAttrs(attrs) {
      if (!attrs && this.defaultAttrs) return this.defaultAttrs;else return _computeAttrs(this.attrs, attrs);
    }

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Create a `Node` of this type. The given attributes are
    // checked and defaulted (you can pass `null` to use the type's
    // defaults entirely, if no required attributes exist). `content`
    // may be a `Fragment`, a node, an array of nodes, or
    // `null`. Similarly `marks` may be `null` to default to the empty
    // set of marks.

  }, {
    key: "create",
    value: function create(attrs, content, marks) {
      return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
    }

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Like [`create`](NodeType.create), but check the given content
    // against the node type's content restrictions, and throw an error
    // if it doesn't match.

  }, {
    key: "createChecked",
    value: function createChecked(attrs, content, marks) {
      attrs = this.computeAttrs(attrs);
      content = Fragment.from(content);
      if (!this.validContent(content, attrs)) throw new RangeError("Invalid content for node " + this.name);
      return new Node(this, attrs, content, Mark.setFrom(marks));
    }

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node
    // Like [`create`](NodeType.create), but see if it is necessary to
    // add nodes to the start or end of the given fragment to make it
    // fit the node. If no fitting wrapping can be found, return null.
    // Note that, due to the fact that required nodes can always be
    // created, this will always succeed if you pass null or
    // `Fragment.empty` as content.

  }, {
    key: "createAndFill",
    value: function createAndFill(attrs, content, marks) {
      attrs = this.computeAttrs(attrs);
      content = Fragment.from(content);
      if (content.size) {
        var before = this.contentExpr.start(attrs).fillBefore(content);
        if (!before) return null;
        content = before.append(content);
      }
      var after = this.contentExpr.getMatchAt(attrs, content).fillBefore(Fragment.empty, true);
      if (!after) return null;
      return new Node(this, attrs, content.append(after), Mark.setFrom(marks));
    }

    // :: (Fragment, ?Object) → bool
    // Returns true if the given fragment is valid content for this node
    // type with the given attributes.

  }, {
    key: "validContent",
    value: function validContent(content, attrs) {
      return this.contentExpr.matches(attrs, content);
    }
  }, {
    key: "toDOM",


    // :: (Node) → DOMOutputSpec
    // Defines the way a node of this type should be serialized to
    // DOM/HTML. Should return an [array structure](#DOMOutputSpec) that
    // describes the resulting DOM structure, with an optional number
    // zero (“hole”) in it to indicate where the node's content should
    // be inserted.
    value: function toDOM(_) {
      throw new Error("Failed to override NodeType.toDOM");
    }

    // :: Object<union<ParseSpec, (DOMNode) → union<bool, ParseSpec>>>
    // Defines the way nodes of this type are parsed. Should, if
    // present, contain an object mapping CSS selectors (such as `"p"`
    // for `<p>` tags, or `"div[data-type=foo]"` for `<div>` tags with a
    // specific attribute) to [parse specs](#ParseSpec) or functions
    // that, when given a DOM node, return either `false` or a parse
    // spec.

  }, {
    key: "isBlock",
    get: function get() {
      return false;
    }

    // :: bool
    // True if this is a textblock type, a block that contains inline
    // content.

  }, {
    key: "isTextblock",
    get: function get() {
      return false;
    }

    // :: bool
    // True if this is an inline type.

  }, {
    key: "isInline",
    get: function get() {
      return false;
    }

    // :: bool
    // True if this is the text node type.

  }, {
    key: "isText",
    get: function get() {
      return false;
    }

    // :: bool
    // True for node types that allow no content.

  }, {
    key: "isLeaf",
    get: function get() {
      return this.contentExpr.isLeaf;
    }

    // :: bool
    // Controls whether nodes of this type can be selected (as a [node
    // selection](#NodeSelection)).

  }, {
    key: "selectable",
    get: function get() {
      return true;
    }

    // :: bool
    // Determines whether nodes of this type can be dragged. Enabling it
    // causes ProseMirror to set a `draggable` attribute on its DOM
    // representation, and to put its HTML serialization into the drag
    // event's [data
    // transfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer)
    // when dragged.

  }, {
    key: "draggable",
    get: function get() {
      return false;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {}
  }], [{
    key: "compile",
    value: function compile(nodes, schema) {
      var result = Object.create(null);
      nodes.forEach(function (name, spec) {
        return result[name] = new spec.type(name, schema);
      });

      if (!result.doc) throw new RangeError("Every schema needs a 'doc' type");
      if (!result.text) throw new RangeError("Every schema needs a 'text' type");

      return result;
    }
  }]);

  return NodeType;
}();

exports.NodeType = NodeType;

// ;; Base type for block nodetypes.

var Block = function (_NodeType) {
  _inherits(Block, _NodeType);

  function Block() {
    _classCallCheck(this, Block);

    return _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).apply(this, arguments));
  }

  _createClass(Block, [{
    key: "isBlock",
    get: function get() {
      return true;
    }
  }, {
    key: "isTextblock",
    get: function get() {
      return this.contentExpr.inlineContent;
    }
  }]);

  return Block;
}(NodeType);

exports.Block = Block;

// ;; Base type for inline node types.

var Inline = function (_NodeType2) {
  _inherits(Inline, _NodeType2);

  function Inline() {
    _classCallCheck(this, Inline);

    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
  }

  _createClass(Inline, [{
    key: "isInline",
    get: function get() {
      return true;
    }
  }]);

  return Inline;
}(NodeType);

exports.Inline = Inline;

// ;; The text node type.

var Text = function (_Inline) {
  _inherits(Text, _Inline);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  _createClass(Text, [{
    key: "create",
    value: function create(attrs, content, marks) {
      return new TextNode(this, this.computeAttrs(attrs), content, marks);
    }
  }, {
    key: "toDOM",
    value: function toDOM(node) {
      return node.text;
    }
  }, {
    key: "selectable",
    get: function get() {
      return false;
    }
  }, {
    key: "isText",
    get: function get() {
      return true;
    }
  }]);

  return Text;
}(Inline);

exports.Text = Text;

// Attribute descriptors

// ;; Attributes are named values associated with nodes and marks.
// Each node type or mark type has a fixed set of attributes, which
// instances of this class are used to control. Attribute values must
// be JSON-serializable.

var Attribute = function () {
  // :: (Object)
  // Create an attribute. `options` is an object containing the
  // settings for the attributes. The following settings are
  // supported:
  //
  // **`default`**`: ?any`
  //   : The default value for this attribute, to choose when no
  //     explicit value is provided.
  //
  // **`compute`**`: ?() → any`
  //   : A function that computes a default value for the attribute.
  //
  // Attributes that have no default or compute property must be
  // provided whenever a node or mark of a type that has them is
  // created.
  function Attribute() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Attribute);

    this.default = options.default;
    this.compute = options.compute;
  }

  _createClass(Attribute, [{
    key: "isRequired",
    get: function get() {
      return this.default === undefined && !this.compute;
    }
  }]);

  return Attribute;
}();

exports.Attribute = Attribute;

// Marks

// ;; Like nodes, marks (which are associated with nodes to signify
// things like emphasis or being part of a link) are tagged with type
// objects, which are instantiated once per `Schema`.

var MarkType = function () {
  function MarkType(name, rank, schema) {
    _classCallCheck(this, MarkType);

    // :: string
    // The name of the mark type.
    this.name = name;
    Object.defineProperty(this, "attrs", { value: copyObj(this.attrs) });
    this.rank = rank;
    // :: Schema
    // The schema that this mark type instance is part of.
    this.schema = schema;
    var defaults = defaultAttrs(this.attrs);
    this.instance = defaults && new Mark(this, defaults);
  }

  // :: bool
  // Whether this mark should be active when the cursor is positioned
  // at the end of the mark.


  _createClass(MarkType, [{
    key: "create",


    // :: (?Object) → Mark
    // Create a mark of this type. `attrs` may be `null` or an object
    // containing only some of the mark's attributes. The others, if
    // they have defaults, will be added.
    value: function create(attrs) {
      if (!attrs && this.instance) return this.instance;
      return new Mark(this, _computeAttrs(this.attrs, attrs));
    }
  }, {
    key: "removeFromSet",


    // :: ([Mark]) → [Mark]
    // When there is a mark of this type in the given set, a new set
    // without it is returned. Otherwise, the input set is returned.
    value: function removeFromSet(set) {
      for (var i = 0; i < set.length; i++) {
        if (set[i].type == this) return set.slice(0, i).concat(set.slice(i + 1));
      }return set;
    }

    // :: ([Mark]) → ?Mark
    // Tests whether there is a mark of this type in the given set.

  }, {
    key: "isInSet",
    value: function isInSet(set) {
      for (var i = 0; i < set.length; i++) {
        if (set[i].type == this) return set[i];
      }
    }

    // :: (mark: Mark) → DOMOutputSpec
    // Defines the way marks of this type should be serialized to DOM/HTML.

  }, {
    key: "toDOM",
    value: function toDOM(_) {
      throw new Error("Failed to override MarkType.toDOM");
    }

    // :: Object<union<ParseSpec, (DOMNode) → union<bool, ParseSpec>>>
    // Defines the way marks of this type are parsed. Works just like
    // `NodeType.matchTag`, but produces marks rather than nodes.

  }, {
    key: "inclusiveRight",
    get: function get() {
      return true;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {}

    // :: Object<union<?Object, (string) → union<bool, ?Object>>>
    // Defines the way DOM styles are mapped to marks of this type. Should
    // contain an object mapping CSS property names, as found in inline
    // styles, to either attributes for this mark (null for default
    // attributes), or a function mapping the style's value to either a
    // set of attributes or `false` to indicate that the style does not
    // match.

  }, {
    key: "matchDOMStyle",
    get: function get() {}
  }], [{
    key: "compile",
    value: function compile(marks, schema) {
      var result = Object.create(null),
          rank = 0;
      marks.forEach(function (name, markType) {
        return result[name] = new markType(name, rank++, schema);
      });
      return result;
    }
  }]);

  return MarkType;
}();

exports.MarkType = MarkType;

// ;; #path=SchemaSpec #kind=interface
// An object describing a schema, as passed to the `Schema`
// constructor.

// :: union<Object<NodeSpec>, OrderedMap<NodeSpec>> #path=SchemaSpec.nodes
// The node types in this schema. Maps names to `NodeSpec` objects
// describing the node to be associated with that name. Their order is significant

// :: ?union<Object<constructor<MarkType>>, OrderedMap<constructor<MarkType>>> #path=SchemaSpec.marks
// The mark types that exist in this schema.

// ;; #path=NodeSpec #kind=interface

// :: constructor<NodeType> #path=NodeSpec.type
// The `NodeType` class to be used for this node.

// :: ?string #path=NodeSpec.content
// The content expression for this node, as described in the [schema
// guide](guide/schema.html). When not given, the node does not allow
// any content.

// :: ?string #path=NodeSpec.group
// The group or space-separated groups to which this node belongs, as
// referred to in the content expressions for the schema.

// ;; Each document is based on a single schema, which provides the
// node and mark types that it is made up of (which, in turn,
// determine the structure it is allowed to have).

var Schema = function () {
  // :: (SchemaSpec, ?any)
  // Construct a schema from a specification.
  function Schema(spec, data) {
    _classCallCheck(this, Schema);

    // :: OrderedMap<NodeSpec> The node specs that the schema is based on.
    this.nodeSpec = OrderedMap.from(spec.nodes);
    // :: OrderedMap<constructor<MarkType>> The mark spec that the schema is based on.
    this.markSpec = OrderedMap.from(spec.marks);

    // :: any A generic field that you can use (by passing a value to
    // the constructor) to store arbitrary data or references in your
    // schema object, for use by node- or mark- methods.
    this.data = data;

    // :: Object<NodeType>
    // An object mapping the schema's node names to node type objects.
    this.nodes = NodeType.compile(this.nodeSpec, this);
    // :: Object<MarkType>
    // A map from mark names to mark type objects.
    this.marks = MarkType.compile(this.markSpec, this);
    for (var prop in this.nodes) {
      if (prop in this.marks) throw new RangeError(prop + " can not be both a node and a mark");
      var type = this.nodes[prop];
      type.contentExpr = ContentExpr.parse(type, this.nodeSpec.get(prop).content || "", this.nodeSpec);
    }

    // :: Object
    // An object for storing whatever values modules may want to
    // compute and cache per schema. (If you want to store something
    // in it, try to use property names unlikely to clash.)
    this.cached = Object.create(null);
    this.cached.wrappings = Object.create(null);

    this.node = this.node.bind(this);
    this.text = this.text.bind(this);
    this.nodeFromJSON = this.nodeFromJSON.bind(this);
    this.markFromJSON = this.markFromJSON.bind(this);
  }

  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
  // Create a node in this schema. The `type` may be a string or a
  // `NodeType` instance. Attributes will be extended
  // with defaults, `content` may be a `Fragment`,
  // `null`, a `Node`, or an array of nodes.
  //
  // When creating a text node, `content` should be a string and is
  // interpreted as the node's text.
  //
  // This method is bound to the Schema, meaning you don't have to
  // call it as a method, but can pass it to higher-order functions
  // and such.


  _createClass(Schema, [{
    key: "node",
    value: function node(type, attrs, content, marks) {
      if (typeof type == "string") type = this.nodeType(type);else if (!(type instanceof NodeType)) throw new RangeError("Invalid node type: " + type);else if (type.schema != this) throw new RangeError("Node type from different schema used (" + type.name + ")");

      return type.createChecked(attrs, content, marks);
    }

    // :: (string, ?[Mark]) → Node
    // Create a text node in the schema. This method is bound to the
    // Schema. Empty text nodes are not allowed.

  }, {
    key: "text",
    value: function text(_text, marks) {
      return this.nodes.text.create(null, _text, Mark.setFrom(marks));
    }

    // :: (string, ?Object) → Mark
    // Create a mark with the named type

  }, {
    key: "mark",
    value: function mark(name, attrs) {
      var spec = this.marks[name];
      if (!spec) throw new RangeError("No mark named " + name);
      return spec.create(attrs);
    }

    // :: (Object) → Node
    // Deserialize a node from its JSON representation. This method is
    // bound.

  }, {
    key: "nodeFromJSON",
    value: function nodeFromJSON(json) {
      return Node.fromJSON(this, json);
    }

    // :: (Object) → Mark
    // Deserialize a mark from its JSON representation. This method is
    // bound.

  }, {
    key: "markFromJSON",
    value: function markFromJSON(json) {
      var type = this.marks[json.type];
      var attrs = null;
      if (json.attrs) {
        for (var prop in json.attrs) {
          if (!attrs) attrs = Object.create(null);
          attrs[prop] = json.attrs[prop];
        }
      }

      return attrs ? type.create(attrs) : type.instance;
    }

    // :: (string) → NodeType
    // Get the `NodeType` associated with the given name in
    // this schema, or raise an error if it does not exist.

  }, {
    key: "nodeType",
    value: function nodeType(name) {
      var found = this.nodes[name];
      if (!found) throw new RangeError("Unknown node type: " + name);
      return found;
    }

    // :: (DOMNode, ?Object) → Node
    // Parse a document from the content of a DOM node. To provide an
    // explicit parent document (for example, when not in a browser
    // window environment, where we simply use the global document),
    // pass it as the `document` property of `options`.

  }, {
    key: "parseDOM",
    value: function parseDOM(dom) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return _parseDOM(this, dom, options);
    }
  }]);

  return Schema;
}();

exports.Schema = Schema;
},{"../util/obj":223,"../util/orderedmap":224,"./content":196,"./fragment":198,"./from_dom":199,"./mark":201,"./node":202}],206:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ;; #path=DOMOutputSpec #kind=interface
// A description of a DOM structure. Can be either a string, which is
// interpreted as a text node, a DOM node, which is interpreted as
// itself, or an array.
//
// An array describes a DOM element. The first element in the array
// should be a string, and is the name of the DOM element. If the
// second element is a non-Array, non-DOM node object, it is
// interpreted as an object providing the DOM element's attributes.
// Any elements after that (including the 2nd if it's not an attribute
// object) are interpreted as children of the DOM elements, and must
// either be valid `DOMOutputSpec` values, or the number zero.
//
// The number zero (pronounced “hole”) is used to indicate the place
// where a ProseMirror node's content should be inserted.

// Object used to to expose relevant values and methods
// to DOM serializer functions.
var DOMSerializer = function () {
  function DOMSerializer(options) {
    _classCallCheck(this, DOMSerializer);

    // : Object The options passed to the serializer.
    this.options = options || {};
    // : DOMDocument The DOM document in which we are working.
    this.doc = this.options.document || window.document;
  }

  _createClass(DOMSerializer, [{
    key: "renderNode",
    value: function renderNode(node, pos, offset) {
      var dom = this.renderStructure(node.type.toDOM(node), node.content, pos + 1);
      if (this.options.onRender) dom = this.options.onRender(node, dom, pos, offset) || dom;
      return dom;
    }
  }, {
    key: "renderStructure",
    value: function renderStructure(structure, content, startPos) {
      if (typeof structure == "string") return this.doc.createTextNode(structure);
      if (structure.nodeType != null) return structure;
      var dom = this.doc.createElement(structure[0]),
          attrs = structure[1],
          start = 1;
      if (attrs && (typeof attrs === "undefined" ? "undefined" : _typeof(attrs)) == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
        start = 2;
        for (var name in attrs) {
          if (name == "style") dom.style.cssText = attrs[name];else if (attrs[name]) dom.setAttribute(name, attrs[name]);
        }
      }
      for (var i = start; i < structure.length; i++) {
        var child = structure[i];
        if (child === 0) {
          if (!content) throw new RangeError("Content hole not allowed in a Mark spec (must produce a single node)");
          if (i < structure.length - 1 || i > start) throw new RangeError("Content hole must be the only child of its parent node");
          if (this.options.onContainer) this.options.onContainer(dom);
          this.renderFragment(content, dom, startPos);
        } else {
          dom.appendChild(this.renderStructure(child, content, startPos));
        }
      }
      return dom;
    }
  }, {
    key: "renderFragment",
    value: function renderFragment(fragment, where, startPos) {
      if (!where) where = this.doc.createDocumentFragment();
      if (fragment.size == 0) return where;

      if (!fragment.firstChild.isInline) this.renderBlocksInto(fragment, where, startPos);else if (this.options.renderInlineFlat) this.renderInlineFlatInto(fragment, where, startPos);else this.renderInlineInto(fragment, where, startPos);
      return where;
    }
  }, {
    key: "renderBlocksInto",
    value: function renderBlocksInto(fragment, where, startPos) {
      var _this = this;

      fragment.forEach(function (node, offset) {
        return where.appendChild(_this.renderNode(node, startPos + offset, offset));
      });
    }
  }, {
    key: "renderInlineInto",
    value: function renderInlineInto(fragment, where, startPos) {
      var _this2 = this;

      var top = where;
      var active = [];
      fragment.forEach(function (node, offset) {
        var keep = 0;
        for (; keep < Math.min(active.length, node.marks.length); ++keep) {
          if (!node.marks[keep].eq(active[keep])) break;
        }while (keep < active.length) {
          active.pop();
          top = top.parentNode;
        }
        while (active.length < node.marks.length) {
          var add = node.marks[active.length];
          active.push(add);
          top = top.appendChild(_this2.renderMark(add));
        }
        top.appendChild(_this2.renderNode(node, startPos + offset, offset));
      });
    }
  }, {
    key: "renderInlineFlatInto",
    value: function renderInlineFlatInto(fragment, where, startPos) {
      var _this3 = this;

      fragment.forEach(function (node, offset) {
        var pos = startPos + offset,
            dom = _this3.renderNode(node, pos, offset);
        dom = _this3.wrapInlineFlat(dom, node.marks);
        dom = _this3.options.renderInlineFlat(node, dom, pos, offset) || dom;
        where.appendChild(dom);
      });
    }
  }, {
    key: "renderMark",
    value: function renderMark(mark) {
      return this.renderStructure(mark.type.toDOM(mark));
    }
  }, {
    key: "wrapInlineFlat",
    value: function wrapInlineFlat(dom, marks) {
      for (var i = marks.length - 1; i >= 0; i--) {
        var wrap = this.renderMark(marks[i]);
        wrap.appendChild(dom);
        dom = wrap;
      }
      return dom;
    }
  }]);

  return DOMSerializer;
}();

function fragmentToDOM(fragment, options) {
  return new DOMSerializer(options).renderFragment(fragment, null, options.pos || 0);
}
exports.fragmentToDOM = fragmentToDOM;

function nodeToDOM(node, options) {
  var serializer = new DOMSerializer(options),
      pos = options.pos || 0;
  var dom = serializer.renderNode(node, pos, options.offset || 0);
  if (node.isInline) {
    dom = serializer.wrapInlineFlat(dom, node.marks);
    if (serializer.options.renderInlineFlat) dom = options.renderInlineFlat(node, dom, pos, options.offset || 0) || dom;
  }
  return dom;
}
exports.nodeToDOM = nodeToDOM;
},{}],207:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../model"),
    Schema = _require.Schema,
    Block = _require.Block,
    Inline = _require.Inline,
    Text = _require.Text,
    Attribute = _require.Attribute,
    MarkType = _require.MarkType;

exports.Text = Text;

// !! This module defines a number of basic node and mark types, and a
// schema that combines them.

// ;; A default top-level document node type.

var Doc = function (_Block) {
  _inherits(Doc, _Block);

  function Doc() {
    _classCallCheck(this, Doc);

    return _possibleConstructorReturn(this, (Doc.__proto__ || Object.getPrototypeOf(Doc)).apply(this, arguments));
  }

  return Doc;
}(Block);

exports.Doc = Doc;

// ;; A blockquote node type.

var BlockQuote = function (_Block2) {
  _inherits(BlockQuote, _Block2);

  function BlockQuote() {
    _classCallCheck(this, BlockQuote);

    return _possibleConstructorReturn(this, (BlockQuote.__proto__ || Object.getPrototypeOf(BlockQuote)).apply(this, arguments));
  }

  _createClass(BlockQuote, [{
    key: "toDOM",
    value: function toDOM() {
      return ["blockquote", 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "blockquote": null };
    }
  }]);

  return BlockQuote;
}(Block);

exports.BlockQuote = BlockQuote;

// ;; An ordered list node type. Has a single attribute, `order`,
// which determines the number at which the list starts counting, and
// defaults to 1.

var OrderedList = function (_Block3) {
  _inherits(OrderedList, _Block3);

  function OrderedList() {
    _classCallCheck(this, OrderedList);

    return _possibleConstructorReturn(this, (OrderedList.__proto__ || Object.getPrototypeOf(OrderedList)).apply(this, arguments));
  }

  _createClass(OrderedList, [{
    key: "toDOM",
    value: function toDOM(node) {
      return ["ol", { start: node.attrs.order == 1 ? null : node.attrs.order }, 0];
    }
  }, {
    key: "attrs",
    get: function get() {
      return { order: new Attribute({ default: 1 }) };
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "ol": function ol(dom) {
          return {
            order: dom.hasAttribute("start") ? +dom.getAttribute("start") : 1
          };
        } };
    }
  }]);

  return OrderedList;
}(Block);

exports.OrderedList = OrderedList;

// ;; A bullet list node type.

var BulletList = function (_Block4) {
  _inherits(BulletList, _Block4);

  function BulletList() {
    _classCallCheck(this, BulletList);

    return _possibleConstructorReturn(this, (BulletList.__proto__ || Object.getPrototypeOf(BulletList)).apply(this, arguments));
  }

  _createClass(BulletList, [{
    key: "toDOM",
    value: function toDOM() {
      return ["ul", 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "ul": null };
    }
  }]);

  return BulletList;
}(Block);

exports.BulletList = BulletList;

// ;; A list item node type.

var ListItem = function (_Block5) {
  _inherits(ListItem, _Block5);

  function ListItem() {
    _classCallCheck(this, ListItem);

    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
  }

  _createClass(ListItem, [{
    key: "toDOM",
    value: function toDOM() {
      return ["li", 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "li": null };
    }
  }]);

  return ListItem;
}(Block);

exports.ListItem = ListItem;

// ;; A node type for horizontal rules.

var HorizontalRule = function (_Block6) {
  _inherits(HorizontalRule, _Block6);

  function HorizontalRule() {
    _classCallCheck(this, HorizontalRule);

    return _possibleConstructorReturn(this, (HorizontalRule.__proto__ || Object.getPrototypeOf(HorizontalRule)).apply(this, arguments));
  }

  _createClass(HorizontalRule, [{
    key: "toDOM",
    value: function toDOM() {
      return ["div", ["hr"]];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "hr": null };
    }
  }]);

  return HorizontalRule;
}(Block);

exports.HorizontalRule = HorizontalRule;

// ;; A heading node type. Has a single attribute `level`, which
// indicates the heading level, and defaults to 1.

var Heading = function (_Block7) {
  _inherits(Heading, _Block7);

  function Heading() {
    _classCallCheck(this, Heading);

    return _possibleConstructorReturn(this, (Heading.__proto__ || Object.getPrototypeOf(Heading)).apply(this, arguments));
  }

  _createClass(Heading, [{
    key: "toDOM",
    value: function toDOM(node) {
      return ["h" + node.attrs.level, 0];
    }
  }, {
    key: "attrs",
    get: function get() {
      return { level: new Attribute({ default: 1 }) };
    }
    // :: number
    // Controls the maximum heading level. Has the value 6 in the
    // `Heading` class, but you can override it in a subclass.

  }, {
    key: "maxLevel",
    get: function get() {
      return 6;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return {
        "h1": { level: 1 },
        "h2": { level: 2 },
        "h3": { level: 3 },
        "h4": { level: 4 },
        "h5": { level: 5 },
        "h6": { level: 6 }
      };
    }
  }]);

  return Heading;
}(Block);

exports.Heading = Heading;

// ;; A code block / listing node type.

var CodeBlock = function (_Block8) {
  _inherits(CodeBlock, _Block8);

  function CodeBlock() {
    _classCallCheck(this, CodeBlock);

    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
  }

  _createClass(CodeBlock, [{
    key: "toDOM",
    value: function toDOM() {
      return ["pre", ["code", 0]];
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "pre": [null, { preserveWhitespace: true }] };
    }
  }]);

  return CodeBlock;
}(Block);

exports.CodeBlock = CodeBlock;

// ;; A paragraph node type.

var Paragraph = function (_Block9) {
  _inherits(Paragraph, _Block9);

  function Paragraph() {
    _classCallCheck(this, Paragraph);

    return _possibleConstructorReturn(this, (Paragraph.__proto__ || Object.getPrototypeOf(Paragraph)).apply(this, arguments));
  }

  _createClass(Paragraph, [{
    key: "toDOM",
    value: function toDOM() {
      return ["p", 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "p": null };
    }
  }]);

  return Paragraph;
}(Block);

exports.Paragraph = Paragraph;

// ;; An inline image node type. Has these attributes:
//
// - **`src`** (required): The URL of the image.
// - **`alt`**: The alt text.
// - **`title`**: The title of the image.

var Image = function (_Inline) {
  _inherits(Image, _Inline);

  function Image() {
    _classCallCheck(this, Image);

    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
  }

  _createClass(Image, [{
    key: "toDOM",
    value: function toDOM(node) {
      return ["img", node.attrs];
    }
  }, {
    key: "attrs",
    get: function get() {
      return {
        src: new Attribute(),
        alt: new Attribute({ default: "" }),
        title: new Attribute({ default: "" })
      };
    }
  }, {
    key: "draggable",
    get: function get() {
      return true;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "img[src]": function imgSrc(dom) {
          return {
            src: dom.getAttribute("src"),
            title: dom.getAttribute("title"),
            alt: dom.getAttribute("alt")
          };
        } };
    }
  }]);

  return Image;
}(Inline);

exports.Image = Image;

// ;; A hard break node type.

var HardBreak = function (_Inline2) {
  _inherits(HardBreak, _Inline2);

  function HardBreak() {
    _classCallCheck(this, HardBreak);

    return _possibleConstructorReturn(this, (HardBreak.__proto__ || Object.getPrototypeOf(HardBreak)).apply(this, arguments));
  }

  _createClass(HardBreak, [{
    key: "toDOM",
    value: function toDOM() {
      return ["br"];
    }
  }, {
    key: "selectable",
    get: function get() {
      return false;
    }
  }, {
    key: "isBR",
    get: function get() {
      return true;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "br": null };
    }
  }]);

  return HardBreak;
}(Inline);

exports.HardBreak = HardBreak;

// ;; An emphasis mark type.

var EmMark = function (_MarkType) {
  _inherits(EmMark, _MarkType);

  function EmMark() {
    _classCallCheck(this, EmMark);

    return _possibleConstructorReturn(this, (EmMark.__proto__ || Object.getPrototypeOf(EmMark)).apply(this, arguments));
  }

  _createClass(EmMark, [{
    key: "toDOM",
    value: function toDOM() {
      return ["em"];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "i": null, "em": null };
    }
  }, {
    key: "matchDOMStyle",
    get: function get() {
      return { "font-style": function fontStyle(value) {
          return value == "italic" && null;
        } };
    }
  }]);

  return EmMark;
}(MarkType);

exports.EmMark = EmMark;

// ;; A strong mark type.

var StrongMark = function (_MarkType2) {
  _inherits(StrongMark, _MarkType2);

  function StrongMark() {
    _classCallCheck(this, StrongMark);

    return _possibleConstructorReturn(this, (StrongMark.__proto__ || Object.getPrototypeOf(StrongMark)).apply(this, arguments));
  }

  _createClass(StrongMark, [{
    key: "toDOM",
    value: function toDOM() {
      return ["strong"];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "b": null, "strong": null };
    }
  }, {
    key: "matchDOMStyle",
    get: function get() {
      return { "font-weight": function fontWeight(value) {
          return (/^(bold(er)?|[5-9]\d{2,})$/.test(value) && null
          );
        } };
    }
  }]);

  return StrongMark;
}(MarkType);

exports.StrongMark = StrongMark;

// ;; A link mark type. Has these attributes:
//
// - **`href`** (required): The link target.
// - **`title`**: The link's title.

var LinkMark = function (_MarkType3) {
  _inherits(LinkMark, _MarkType3);

  function LinkMark() {
    _classCallCheck(this, LinkMark);

    return _possibleConstructorReturn(this, (LinkMark.__proto__ || Object.getPrototypeOf(LinkMark)).apply(this, arguments));
  }

  _createClass(LinkMark, [{
    key: "toDOM",
    value: function toDOM(node) {
      return ["a", node.attrs];
    }
  }, {
    key: "attrs",
    get: function get() {
      return {
        href: new Attribute(),
        title: new Attribute({ default: "" })
      };
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "a[href]": function aHref(dom) {
          return {
            href: dom.getAttribute("href"), title: dom.getAttribute("title")
          };
        } };
    }
  }]);

  return LinkMark;
}(MarkType);

exports.LinkMark = LinkMark;

// ;; A code font mark type.

var CodeMark = function (_MarkType4) {
  _inherits(CodeMark, _MarkType4);

  function CodeMark() {
    _classCallCheck(this, CodeMark);

    return _possibleConstructorReturn(this, (CodeMark.__proto__ || Object.getPrototypeOf(CodeMark)).apply(this, arguments));
  }

  _createClass(CodeMark, [{
    key: "toDOM",
    value: function toDOM() {
      return ["code"];
    }
  }, {
    key: "isCode",
    get: function get() {
      return true;
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "code": null };
    }
  }]);

  return CodeMark;
}(MarkType);

exports.CodeMark = CodeMark;

// :: Schema
// A basic document schema.
var schema = new Schema({
  nodes: {
    doc: { type: Doc, content: "block+" },

    paragraph: { type: Paragraph, content: "inline<_>*", group: "block" },
    blockquote: { type: BlockQuote, content: "block+", group: "block" },
    ordered_list: { type: OrderedList, content: "list_item+", group: "block" },
    bullet_list: { type: BulletList, content: "list_item+", group: "block" },
    horizontal_rule: { type: HorizontalRule, group: "block" },
    heading: { type: Heading, content: "inline<_>*", group: "block" },
    code_block: { type: CodeBlock, content: "text*", group: "block" },

    list_item: { type: ListItem, content: "paragraph block*" },

    text: { type: Text, group: "inline" },
    image: { type: Image, group: "inline" },
    hard_break: { type: HardBreak, group: "inline" }
  },

  marks: {
    em: EmMark,
    strong: StrongMark,
    link: LinkMark,
    code: CodeMark
  }
});
exports.schema = schema;
},{"../model":200}],208:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../model"),
    Block = _require.Block,
    Attribute = _require.Attribute,
    Fragment = _require.Fragment,
    Slice = _require.Slice;

var _require2 = require("../transform"),
    Step = _require2.Step,
    StepResult = _require2.StepResult,
    PosMap = _require2.PosMap,
    ReplaceStep = _require2.ReplaceStep;

var _require3 = require("../util/obj"),
    copyObj = _require3.copyObj;

var _require4 = require("../edit"),
    Selection = _require4.Selection;

// ;; A table node type. Has one attribute, **`columns`**, which holds
// a number indicating the amount of columns in the table.


var Table = function (_Block) {
  _inherits(Table, _Block);

  function Table() {
    _classCallCheck(this, Table);

    return _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).apply(this, arguments));
  }

  _createClass(Table, [{
    key: "toDOM",
    value: function toDOM() {
      return ["table", ["tbody", 0]];
    }
  }, {
    key: "attrs",
    get: function get() {
      return { columns: new Attribute({ default: 1 }) };
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "table": function table(dom) {
          var row = dom.querySelector("tr");
          if (!row || !row.children.length) return false;
          // FIXME using the child count as column width is problematic
          // when parsing document fragments
          return { columns: row.children.length };
        } };
    }
  }]);

  return Table;
}(Block);

exports.Table = Table;

// ;; A table row node type. Has one attribute, **`columns`**, which
// holds a number indicating the amount of columns in the table.

var TableRow = function (_Block2) {
  _inherits(TableRow, _Block2);

  function TableRow() {
    _classCallCheck(this, TableRow);

    return _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).apply(this, arguments));
  }

  _createClass(TableRow, [{
    key: "toDOM",
    value: function toDOM() {
      return ["tr", 0];
    }
  }, {
    key: "attrs",
    get: function get() {
      return { columns: new Attribute({ default: 1 }) };
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "tr": function tr(dom) {
          return dom.children.length ? { columns: dom.children.length } : false;
        } };
    }
  }]);

  return TableRow;
}(Block);

exports.TableRow = TableRow;

// ;; A table cell node type.

var TableCell = function (_Block3) {
  _inherits(TableCell, _Block3);

  function TableCell() {
    _classCallCheck(this, TableCell);

    return _possibleConstructorReturn(this, (TableCell.__proto__ || Object.getPrototypeOf(TableCell)).apply(this, arguments));
  }

  _createClass(TableCell, [{
    key: "toDOM",
    value: function toDOM() {
      return ["td", 0];
    }
  }, {
    key: "matchDOMTag",
    get: function get() {
      return { "td": null };
    }
  }]);

  return TableCell;
}(Block);

exports.TableCell = TableCell;

// :: (OrderedMap, string, ?string) → OrderedMap
// Convenience function for adding table-related node types to a map
// describing the nodes in a schema. Adds `Table` as `"table"`,
// `TableRow` as `"table_row"`, and `TableCell` as `"table_cell"`.
// `cellContent` should be a content expression describing what may
// occur inside cells.
function addTableNodes(nodes, cellContent, tableGroup) {
  return nodes.append({
    table: { type: Table, content: "table_row[columns=.columns]+", group: tableGroup },
    table_row: { type: TableRow, content: "table_cell{.columns}" },
    table_cell: { type: TableCell, content: cellContent }
  });
}
exports.addTableNodes = addTableNodes;

// :: (NodeType, number, number, ?Object) → Node
// Create a table node with the given number of rows and columns.
function createTable(nodeType, rows, columns, attrs) {
  attrs = attrs ? copyObj(attrs) : Object.create(null);
  attrs.columns = columns;
  var rowType = nodeType.contentExpr.elements[0].nodeTypes[0];
  var cellType = rowType.contentExpr.elements[0].nodeTypes[0];
  var cell = cellType.createAndFill(),
      cells = [];
  for (var i = 0; i < columns; i++) {
    cells.push(cell);
  }var row = rowType.create({ columns: columns }, Fragment.from(cells)),
      rowNodes = [];
  for (var _i = 0; _i < rows; _i++) {
    rowNodes.push(row);
  }return nodeType.create(attrs, Fragment.from(rowNodes));
}
exports.createTable = createTable;

// Steps to add and remove a column

function adjustColumns(attrs, diff) {
  var copy = copyObj(attrs);
  copy.columns = attrs.columns + diff;
  return copy;
}

// ;; A `Step` subclass for adding a column to a table in a single
// atomic step.

var AddColumnStep = function (_Step) {
  _inherits(AddColumnStep, _Step);

  function AddColumnStep(positions, cells) {
    _classCallCheck(this, AddColumnStep);

    var _this4 = _possibleConstructorReturn(this, (AddColumnStep.__proto__ || Object.getPrototypeOf(AddColumnStep)).call(this));

    _this4.positions = positions;
    _this4.cells = cells;
    return _this4;
  }

  // :: (Node, number, number, NodeType, ?Object) → AddColumnStep
  // Create a step that inserts a column into the table after
  // `tablePos`, at the index given by `columnIndex`, using cells with
  // the given type and attributes.


  _createClass(AddColumnStep, [{
    key: "apply",
    value: function apply(doc) {
      var index = null,
          table = null,
          tablePos = null;
      for (var i = 0; i < this.positions.length; i++) {
        var $pos = doc.resolve(this.positions[i]);
        if ($pos.depth < 2 || $pos.index(-1) != i) return StepResult.fail("Invalid cell insert position");
        if (table == null) {
          table = $pos.node(-1);
          if (table.childCount != this.positions.length) return StepResult.fail("Mismatch in number of rows");
          tablePos = $pos.before(-1);
          index = $pos.index();
        } else if ($pos.before(-1) != tablePos || $pos.index() != index) {
          return StepResult.fail("Column insert positions not consistent");
        }
      }

      var updatedRows = [];
      for (var _i2 = 0; _i2 < table.childCount; _i2++) {
        var row = table.child(_i2),
            rowCells = index ? [] : [this.cells[_i2]];
        for (var j = 0; j < row.childCount; j++) {
          rowCells.push(row.child(j));
          if (j + 1 == index) rowCells.push(this.cells[_i2]);
        }
        updatedRows.push(row.type.create(adjustColumns(row.attrs, 1), Fragment.from(rowCells)));
      }
      var updatedTable = table.type.create(adjustColumns(table.attrs, 1), Fragment.from(updatedRows));
      return StepResult.fromReplace(doc, tablePos, tablePos + table.nodeSize, new Slice(Fragment.from(updatedTable), 0, 0));
    }
  }, {
    key: "posMap",
    value: function posMap() {
      var ranges = [];
      for (var i = 0; i < this.positions.length; i++) {
        ranges.push(this.positions[i], 0, this.cells[i].nodeSize);
      }return new PosMap(ranges);
    }
  }, {
    key: "invert",
    value: function invert(doc) {
      var $first = doc.resolve(this.positions[0]);
      var table = $first.node(-1);
      var from = [],
          to = [],
          dPos = 0;
      for (var i = 0; i < table.childCount; i++) {
        var pos = this.positions[i] + dPos,
            size = this.cells[i].nodeSize;
        from.push(pos);
        to.push(pos + size);
        dPos += size;
      }
      return new RemoveColumnStep(from, to);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      return new AddColumnStep(this.positions.map(function (p) {
        return mapping.map(p);
      }), this.cells);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return { stepType: this.jsonID,
        positions: this.positions,
        cells: this.cells.map(function (c) {
          return c.toJSON();
        }) };
    }
  }], [{
    key: "create",
    value: function create(doc, tablePos, columnIndex, cellType, cellAttrs) {
      var cell = cellType.createAndFill(cellAttrs);
      var positions = [],
          cells = [];
      var table = doc.nodeAt(tablePos);
      table.forEach(function (row, rowOff) {
        var cellPos = tablePos + 2 + rowOff;
        for (var i = 0; i < columnIndex; i++) {
          cellPos += row.child(i).nodeSize;
        }positions.push(cellPos);
        cells.push(cell);
      });
      return new AddColumnStep(positions, cells);
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return new AddColumnStep(json.positions, json.cells.map(schema.nodeFromJSON));
    }
  }]);

  return AddColumnStep;
}(Step);

exports.AddColumnStep = AddColumnStep;

Step.jsonID("addTableColumn", AddColumnStep);

// ;; A subclass of `Step` that removes a column from a table.

var RemoveColumnStep = function (_Step2) {
  _inherits(RemoveColumnStep, _Step2);

  function RemoveColumnStep(from, to) {
    _classCallCheck(this, RemoveColumnStep);

    var _this5 = _possibleConstructorReturn(this, (RemoveColumnStep.__proto__ || Object.getPrototypeOf(RemoveColumnStep)).call(this));

    _this5.from = from;
    _this5.to = to;
    return _this5;
  }

  // :: (Node, number, number) → RemoveColumnStep
  // Create a step that deletes the column at `columnIndex` in the
  // table after `tablePos`.


  _createClass(RemoveColumnStep, [{
    key: "apply",
    value: function apply(doc) {
      var index = null,
          table = null,
          tablePos = null;
      for (var i = 0; i < this.from.length; i++) {
        var $from = doc.resolve(this.from[i]),
            after = $from.nodeAfter;
        if ($from.depth < 2 || $from.index(-1) != i || !after || this.from[i] + after.nodeSize != this.to[i]) return StepResult.fail("Invalid cell delete positions");
        if (table == null) {
          table = $from.node(-1);
          if (table.childCount != this.from.length) return StepResult.fail("Mismatch in number of rows");
          tablePos = $from.before(-1);
          index = $from.index();
        } else if ($from.before(-1) != tablePos || $from.index() != index) {
          return StepResult.fail("Column delete positions not consistent");
        }
      }

      var updatedRows = [];
      for (var _i3 = 0; _i3 < table.childCount; _i3++) {
        var row = table.child(_i3),
            rowCells = [];
        for (var j = 0; j < row.childCount; j++) {
          if (j != index) rowCells.push(row.child(j));
        }updatedRows.push(row.type.create(adjustColumns(row.attrs, -1), Fragment.from(rowCells)));
      }
      var updatedTable = table.type.create(adjustColumns(table.attrs, -1), Fragment.from(updatedRows));
      return StepResult.fromReplace(doc, tablePos, tablePos + table.nodeSize, new Slice(Fragment.from(updatedTable), 0, 0));
    }
  }, {
    key: "posMap",
    value: function posMap() {
      var ranges = [];
      for (var i = 0; i < this.from.length; i++) {
        ranges.push(this.from[i], this.to[i] - this.from[i], 0);
      }return new PosMap(ranges);
    }
  }, {
    key: "invert",
    value: function invert(doc) {
      var $first = doc.resolve(this.from[0]);
      var table = $first.node(-1),
          index = $first.index();
      var positions = [],
          cells = [],
          dPos = 0;
      for (var i = 0; i < table.childCount; i++) {
        positions.push(this.from[i] - dPos);
        var cell = table.child(i).child(index);
        dPos += cell.nodeSize;
        cells.push(cell);
      }
      return new AddColumnStep(positions, cells);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var from = [],
          to = [];
      for (var i = 0; i < this.from.length; i++) {
        var start = mapping.map(this.from[i], 1),
            end = mapping.map(this.to[i], -1);
        if (end <= start) return null;
        from.push(start);
        to.push(end);
      }
      return new RemoveColumnStep(from, to);
    }
  }], [{
    key: "create",
    value: function create(doc, tablePos, columnIndex) {
      var from = [],
          to = [];
      var table = doc.nodeAt(tablePos);
      table.forEach(function (row, rowOff) {
        var cellPos = tablePos + 2 + rowOff;
        for (var i = 0; i < columnIndex; i++) {
          cellPos += row.child(i).nodeSize;
        }from.push(cellPos);
        to.push(cellPos + row.child(columnIndex).nodeSize);
      });
      return new RemoveColumnStep(from, to);
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(_schema, json) {
      return new RemoveColumnStep(json.from, json.to);
    }
  }]);

  return RemoveColumnStep;
}(Step);

exports.RemoveColumnStep = RemoveColumnStep;

Step.jsonID("removeTableColumn", RemoveColumnStep);

// Table-related command functions

function findRow($pos, pred) {
  for (var d = $pos.depth; d > 0; d--) {
    if ($pos.node(d).type instanceof TableRow && (!pred || pred(d))) return d;
  }return -1;
}

// :: (ProseMirror, ?bool) → bool
// Command function that adds a column before the column with the
// selection.
function addColumnBefore(pm, apply) {
  var $from = pm.selection.$from,
      cellFrom = void 0;
  var rowDepth = findRow($from, function (d) {
    return cellFrom = d == $from.depth ? $from.nodeBefore : $from.node(d + 1);
  });
  if (rowDepth == -1) return false;
  if (apply !== false) pm.tr.step(AddColumnStep.create(pm.doc, $from.before(rowDepth - 1), $from.index(rowDepth), cellFrom.type, cellFrom.attrs)).apply();
  return true;
}
exports.addColumnBefore = addColumnBefore;

// :: (ProseMirror, ?bool) → bool
// Command function that adds a column after the column with the
// selection.
function addColumnAfter(pm, apply) {
  var $from = pm.selection.$from,
      cellFrom = void 0;
  var rowDepth = findRow($from, function (d) {
    return cellFrom = d == $from.depth ? $from.nodeAfter : $from.node(d + 1);
  });
  if (rowDepth == -1) return false;
  if (apply !== false) pm.tr.step(AddColumnStep.create(pm.doc, $from.before(rowDepth - 1), $from.indexAfter(rowDepth) + (rowDepth == $from.depth ? 1 : 0), cellFrom.type, cellFrom.attrs)).apply();
  return true;
}
exports.addColumnAfter = addColumnAfter;

// :: (ProseMirror, ?bool) → bool
// Command function that removes the column with the selection.
function removeColumn(pm, apply) {
  var $from = pm.selection.$from;
  var rowDepth = findRow($from, function (d) {
    return $from.node(d).childCount > 1;
  });
  if (rowDepth == -1) return false;
  if (apply !== false) pm.tr.step(RemoveColumnStep.create(pm.doc, $from.before(rowDepth - 1), $from.index(rowDepth))).apply();
  return true;
}
exports.removeColumn = removeColumn;

function addRow(pm, apply, side) {
  var $from = pm.selection.$from;
  var rowDepth = findRow($from);
  if (rowDepth == -1) return false;
  if (apply !== false) {
    (function () {
      var exampleRow = $from.node(rowDepth);
      var cells = [],
          pos = side < 0 ? $from.before(rowDepth) : $from.after(rowDepth);
      exampleRow.forEach(function (cell) {
        return cells.push(cell.type.createAndFill(cell.attrs));
      });
      var row = exampleRow.copy(Fragment.from(cells));
      pm.tr.step(new ReplaceStep(pos, pos, new Slice(Fragment.from(row), 0, 0))).apply();
    })();
  }
  return true;
}

// :: (ProseMirror, ?bool) → bool
// Command function that adds a row after the row with the
// selection.
function addRowBefore(pm, apply) {
  return addRow(pm, apply, -1);
}
exports.addRowBefore = addRowBefore;

// :: (ProseMirror, ?bool) → bool
// Command function that adds a row before the row with the
// selection.
function addRowAfter(pm, apply) {
  return addRow(pm, apply, 1);
}
exports.addRowAfter = addRowAfter;

// :: (ProseMirror, ?bool) → bool
// Command function that removes the row with the selection.
function removeRow(pm, apply) {
  var $from = pm.selection.$from;
  var rowDepth = findRow($from, function (d) {
    return $from.node(d - 1).childCount > 1;
  });
  if (rowDepth == -1) return false;
  if (apply !== false) pm.tr.step(new ReplaceStep($from.before(rowDepth), $from.after(rowDepth), Slice.empty)).apply();
  return true;
}
exports.removeRow = removeRow;

function moveCell(pm, dir, apply) {
  var $from = pm.selection.$from;

  var rowDepth = findRow($from);
  if (rowDepth == -1) return false;
  var row = $from.node(rowDepth),
      newIndex = $from.index(rowDepth) + dir;
  if (newIndex >= 0 && newIndex < row.childCount) {
    var $cellStart = pm.doc.resolve(row.content.offsetAt(newIndex) + $from.start(rowDepth));
    var sel = Selection.findFrom($cellStart, 1);
    if (!sel || sel.from >= $cellStart.end()) return false;
    if (apply !== false) pm.setSelection(sel);
    return true;
  } else {
    var rowIndex = $from.index(rowDepth - 1) + dir,
        table = $from.node(rowDepth - 1);
    if (rowIndex < 0 || rowIndex >= table.childCount) return false;
    var cellStart = dir > 0 ? $from.after(rowDepth) + 2 : $from.before(rowDepth) - 2 - table.child(rowIndex).lastChild.content.size;
    var _$cellStart = pm.doc.resolve(cellStart),
        _sel = Selection.findFrom(_$cellStart, 1);
    if (!_sel || _sel.from >= _$cellStart.end()) return false;
    if (apply !== false) pm.setSelection(_sel);
    return true;
  }
}

// :: (ProseMirror, ?bool) → bool
// Move to the next cell in the current table, if there is one.
function selectNextCell(pm, apply) {
  return moveCell(pm, 1, apply);
}
exports.selectNextCell = selectNextCell;

// :: (ProseMirror, ?bool) → bool
// Move to the previous cell in the current table, if there is one.
function selectPreviousCell(pm, apply) {
  return moveCell(pm, -1, apply);
}
exports.selectPreviousCell = selectPreviousCell;
},{"../edit":186,"../model":200,"../transform":209,"../util/obj":223}],209:[function(require,module,exports){
"use strict";

;
var _require = require("./transform");

exports.Transform = _require.Transform;
exports.TransformError = _require.TransformError;

var _require2 = require("./step");

exports.Step = _require2.Step;
exports.StepResult = _require2.StepResult;

var _require3 = require("./structure");

exports.joinPoint = _require3.joinPoint;
exports.joinable = _require3.joinable;
exports.canSplit = _require3.canSplit;
exports.insertPoint = _require3.insertPoint;
exports.liftTarget = _require3.liftTarget;
exports.findWrapping = _require3.findWrapping;

var _require4 = require("./map");

exports.PosMap = _require4.PosMap;
exports.MapResult = _require4.MapResult;
exports.Remapping = _require4.Remapping;
exports.mapThrough = _require4.mapThrough;
exports.mapThroughResult = _require4.mapThroughResult;

var _require5 = require("./mark_step");

exports.AddMarkStep = _require5.AddMarkStep;
exports.RemoveMarkStep = _require5.RemoveMarkStep;

var _require6 = require("./replace_step");

exports.ReplaceStep = _require6.ReplaceStep;
exports.ReplaceAroundStep = _require6.ReplaceAroundStep;

require("./mark");
require("./replace");

// !! This module defines a way to transform documents. Transforming
// happens in `Step`s, which are atomic, well-defined modifications to
// a document. [Applying](`Step.apply`) a step produces a new
// document.
//
// Each step provides a [position map](#PosMap) that maps positions in
// the old document to position in the new document. Steps can be
// [inverted](#Step.invert) to create a step that undoes their effect,
// and chained together in a convenience object called a `Transform`.
//
// This module does not depend on the browser API being available
// (i.e. you can load it into any JavaScript environment).
//
// You can read more about transformations in [this
// guide](guide/transform.md).
},{"./map":210,"./mark":211,"./mark_step":212,"./replace":213,"./replace_step":214,"./step":215,"./structure":216,"./transform":217}],210:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ;; #path=Mappable #kind=interface
// There are various things that positions can be mapped through.
// We'll denote those as 'mappable'. This is not an actual class in
// the codebase, only an agreed-on interface.

// :: (pos: number, bias: ?number) → number #path=Mappable.map
// Map a position through this object. When given, `bias` (should be
// -1 or 1) determines in which direction to move when a chunk of
// content is inserted at or around the mapped position.

// :: (pos: number, bias: ?number) → MapResult #path=Mappable.mapResult
// Map a position, and return an object containing additional
// information about the mapping. The result's `deleted` field tells
// you whether the position was deleted (completely enclosed in a
// replaced range) during the mapping.

// Recovery values encode a range index and an offset. They are
// represented as numbers, because tons of them will be created when
// mapping, for example, a large number of marked ranges. The number's
// lower 16 bits provide the index, the remaining bits the offset.
//
// Note: We intentionally don't use bit shift operators to en- and
// decode these, since those clip to 32 bits, which we might in rare
// cases want to overflow. A 64-bit float can represent 48-bit
// integers precisely.

var lower16 = 0xffff;
var factor16 = Math.pow(2, 16);

function makeRecover(index, offset) {
  return index + offset * factor16;
}
function recoverIndex(value) {
  return value & lower16;
}
function recoverOffset(value) {
  return (value - (value & lower16)) / factor16;
}

// ;; An object representing a mapped position with some extra
// information.

var MapResult = function MapResult(pos) {
  var deleted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var recover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  _classCallCheck(this, MapResult);

  // :: number The mapped version of the position.
  this.pos = pos;
  // :: bool Tells you whether the position was deleted, that is,
  // whether the step removed its surroundings from the document.
  this.deleted = deleted;
  this.recover = recover;
};

exports.MapResult = MapResult;

// ;; A position map, holding information about the way positions in
// the pre-step version of a document correspond to positions in the
// post-step version. This class implements `Mappable`.

var PosMap = function () {
  // :: ([number])
  // Create a position map. The modifications to the document are
  // represented as an array of numbers, in which each group of three
  // represents a modified chunk as `[start, oldSize, newSize]`.
  function PosMap(ranges) {
    var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, PosMap);

    this.ranges = ranges;
    this.inverted = inverted;
  }

  _createClass(PosMap, [{
    key: "recover",
    value: function recover(value) {
      var diff = 0,
          index = recoverIndex(value);
      if (!this.inverted) for (var i = 0; i < index; i++) {
        diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
      }return this.ranges[index * 3] + diff + recoverOffset(value);
    }

    // :: (number, ?number) → MapResult
    // Map the given position through this map. The `bias` parameter can
    // be used to control what happens when the transform inserted
    // content at (or around) this position—if `bias` is negative, the a
    // position before the inserted content will be returned, if it is
    // positive, a position after the insertion is returned.

  }, {
    key: "mapResult",
    value: function mapResult(pos, bias) {
      return this._map(pos, bias, false);
    }

    // :: (number, ?number) → number
    // Map the given position through this map, returning only the
    // mapped position.

  }, {
    key: "map",
    value: function map(pos, bias) {
      return this._map(pos, bias, true);
    }
  }, {
    key: "_map",
    value: function _map(pos, bias, simple) {
      var diff = 0,
          oldIndex = this.inverted ? 2 : 1,
          newIndex = this.inverted ? 1 : 2;
      for (var i = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) break;
        var oldSize = this.ranges[i + oldIndex],
            newSize = this.ranges[i + newIndex],
            end = start + oldSize;
        if (pos <= end) {
          var side = !oldSize ? bias : pos == start ? -1 : pos == end ? 1 : bias;
          var result = start + diff + (side < 0 ? 0 : newSize);
          if (simple) return result;
          var recover = makeRecover(i / 3, pos - start);
          return new MapResult(result, pos != start && pos != end, recover);
        }
        diff += newSize - oldSize;
      }
      return simple ? pos + diff : new MapResult(pos + diff);
    }
  }, {
    key: "touches",
    value: function touches(pos, recover) {
      var diff = 0,
          index = recoverIndex(recover);
      var oldIndex = this.inverted ? 2 : 1,
          newIndex = this.inverted ? 1 : 2;
      for (var i = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) break;
        var oldSize = this.ranges[i + oldIndex],
            end = start + oldSize;
        if (pos <= end && i == index * 3) return true;
        diff += this.ranges[i + newIndex] - oldSize;
      }
      return false;
    }

    // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))
    // Calls the given function on each of the changed ranges denoted by
    // this map.

  }, {
    key: "forEach",
    value: function forEach(f) {
      var oldIndex = this.inverted ? 2 : 1,
          newIndex = this.inverted ? 1 : 2;
      for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i],
            oldStart = start - (this.inverted ? diff : 0),
            newStart = start + (this.inverted ? 0 : diff);
        var oldSize = this.ranges[i + oldIndex],
            newSize = this.ranges[i + newIndex];
        f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
        diff += newSize - oldSize;
      }
    }

    // :: () → PosMap
    // Create an inverted version of this map. The result can be used to
    // map positions in the post-step document to the pre-step document.

  }, {
    key: "invert",
    value: function invert() {
      return new PosMap(this.ranges, !this.inverted);
    }
  }, {
    key: "toString",
    value: function toString() {
      return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
    }
  }]);

  return PosMap;
}();

exports.PosMap = PosMap;

PosMap.empty = new PosMap([]);

// ;; A remapping represents a pipeline of zero or more mappings. It
// is a specialized data structured used to manage mapping through a
// series of steps, typically including inverted and non-inverted
// versions of the same step. (This comes up when ‘rebasing’ steps for
// collaboration or history management.) This class implements
// `Mappable`.

var Remapping = function () {
  // :: (?[PosMap], ?[PosMap])
  function Remapping() {
    var head = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var tail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, Remapping);

    // :: [PosMap]
    // The maps in the head of the mapping are applied to input
    // positions first, back-to-front. So the map at the end of this
    // array (if any) is the very first one applied.
    this.head = head;
    // :: [PosMap]
    // The maps in the tail are applied last, front-to-back.
    this.tail = tail;
    this.mirror = Object.create(null);
  }

  // :: (PosMap, ?number) → number
  // Add a map to the mapping's front. If this map is the mirror image
  // (produced by an inverted step) of another map in this mapping,
  // that map's id (as returned by this method or
  // [`addToBack`](#Remapping.addToBack)) should be passed as a second
  // parameter to register the correspondence.


  _createClass(Remapping, [{
    key: "addToFront",
    value: function addToFront(map, corr) {
      this.head.push(map);
      var id = -this.head.length;
      if (corr != null) this.mirror[id] = corr;
      return id;
    }

    // :: (PosMap, ?number) → number
    // Add a map to the mapping's back. If the map is the mirror image
    // of another mapping in this object, the id of that map should be
    // passed to register the correspondence.

  }, {
    key: "addToBack",
    value: function addToBack(map, corr) {
      this.tail.push(map);
      var id = this.tail.length - 1;
      if (corr != null) this.mirror[corr] = id;
      return id;
    }
  }, {
    key: "get",
    value: function get(id) {
      return id < 0 ? this.head[-id - 1] : this.tail[id];
    }

    // :: (number, ?number) → MapResult
    // Map a position through this remapping, returning a mapping
    // result.

  }, {
    key: "mapResult",
    value: function mapResult(pos, bias) {
      return this._map(pos, bias, false);
    }

    // :: (number, ?number) → number
    // Map a position through this remapping.

  }, {
    key: "map",
    value: function map(pos, bias) {
      return this._map(pos, bias, true);
    }
  }, {
    key: "_map",
    value: function _map(pos, bias, simple) {
      var deleted = false,
          recoverables = null;

      for (var i = -this.head.length; i < this.tail.length; i++) {
        var map = this.get(i),
            rec = void 0;

        if ((rec = recoverables && recoverables[i]) != null && map.touches(pos, rec)) {
          pos = map.recover(rec);
          continue;
        }

        var result = map.mapResult(pos, bias);
        if (result.recover != null) {
          var corr = this.mirror[i];
          if (corr != null) {
            if (result.deleted) {
              i = corr;
              pos = this.get(corr).recover(result.recover);
              continue;
            } else {
              ;(recoverables || (recoverables = Object.create(null)))[corr] = result.recover;
            }
          }
        }

        if (result.deleted) deleted = true;
        pos = result.pos;
      }

      return simple ? pos : new MapResult(pos, deleted);
    }
  }, {
    key: "toString",
    value: function toString() {
      var maps = [];
      for (var i = -this.head.length; i < this.tail.length; i++) {
        maps.push(i + ":" + this.get(i) + (this.mirror[i] != null ? "->" + this.mirror[i] : ""));
      }return maps.join("\n");
    }
  }]);

  return Remapping;
}();

exports.Remapping = Remapping;

// :: ([Mappable], number, ?number, ?number) → number
// Map the given position through an array of mappables. When `start`
// is given, the mapping is started at that array position.
function mapThrough(mappables, pos, bias, start) {
  for (var i = start || 0; i < mappables.length; i++) {
    pos = mappables[i].map(pos, bias);
  }return pos;
}
exports.mapThrough = mapThrough;

// :: ([Mappable], number, ?number, ?number) → MapResult
// Map the given position through an array of mappables, returning a
// `MapResult` object.
function mapThroughResult(mappables, pos, bias, start) {
  var deleted = false;
  for (var i = start || 0; i < mappables.length; i++) {
    var result = mappables[i].mapResult(pos, bias);
    pos = result.pos;
    if (result.deleted) deleted = true;
  }
  return new MapResult(pos, deleted);
}
exports.mapThroughResult = mapThroughResult;
},{}],211:[function(require,module,exports){
"use strict";

var _require = require("../model"),
    MarkType = _require.MarkType,
    Slice = _require.Slice;

var _require2 = require("./transform"),
    Transform = _require2.Transform;

var _require3 = require("./mark_step"),
    AddMarkStep = _require3.AddMarkStep,
    RemoveMarkStep = _require3.RemoveMarkStep;

var _require4 = require("./replace_step"),
    ReplaceStep = _require4.ReplaceStep;

// :: (number, number, Mark) → Transform
// Add the given mark to the inline content between `from` and `to`.


Transform.prototype.addMark = function (from, to, mark) {
  var _this = this;

  var removed = [],
      added = [],
      removing = null,
      adding = null;
  this.doc.nodesBetween(from, to, function (node, pos, parent, index) {
    if (!node.isInline) return;
    var marks = node.marks;
    if (mark.isInSet(marks) || !parent.contentMatchAt(index + 1).allowsMark(mark.type)) {
      adding = removing = null;
    } else {
      var start = Math.max(pos, from),
          end = Math.min(pos + node.nodeSize, to);
      var rm = mark.type.isInSet(marks);

      if (!rm) removing = null;else if (removing && removing.mark.eq(rm)) removing.to = end;else removed.push(removing = new RemoveMarkStep(start, end, rm));

      if (adding) adding.to = end;else added.push(adding = new AddMarkStep(start, end, mark));
    }
  });

  removed.forEach(function (s) {
    return _this.step(s);
  });
  added.forEach(function (s) {
    return _this.step(s);
  });
  return this;
};

// :: (number, number, ?union<Mark, MarkType>) → Transform
// Remove the given mark, or all marks of the given type, from inline
// nodes between `from` and `to`.
Transform.prototype.removeMark = function (from, to) {
  var _this2 = this;

  var mark = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var matched = [],
      step = 0;
  this.doc.nodesBetween(from, to, function (node, pos) {
    if (!node.isInline) return;
    step++;
    var toRemove = null;
    if (mark instanceof MarkType) {
      var found = mark.isInSet(node.marks);
      if (found) toRemove = [found];
    } else if (mark) {
      if (mark.isInSet(node.marks)) toRemove = [mark];
    } else {
      toRemove = node.marks;
    }
    if (toRemove && toRemove.length) {
      var end = Math.min(pos + node.nodeSize, to);
      for (var i = 0; i < toRemove.length; i++) {
        var style = toRemove[i],
            _found = void 0;
        for (var j = 0; j < matched.length; j++) {
          var m = matched[j];
          if (m.step == step - 1 && style.eq(matched[j].style)) _found = m;
        }
        if (_found) {
          _found.to = end;
          _found.step = step;
        } else {
          matched.push({ style: style, from: Math.max(pos, from), to: end, step: step });
        }
      }
    }
  });
  matched.forEach(function (m) {
    return _this2.step(new RemoveMarkStep(m.from, m.to, m.style));
  });
  return this;
};

// :: (number, number) → Transform
// Remove all marks and non-text inline nodes from the given range.
Transform.prototype.clearMarkup = function (from, to) {
  var _this3 = this;

  var delSteps = []; // Must be accumulated and applied in inverse order
  this.doc.nodesBetween(from, to, function (node, pos) {
    if (!node.isInline) return;
    if (!node.type.isText) {
      delSteps.push(new ReplaceStep(pos, pos + node.nodeSize, Slice.empty));
      return;
    }
    for (var i = 0; i < node.marks.length; i++) {
      _this3.step(new RemoveMarkStep(Math.max(pos, from), Math.min(pos + node.nodeSize, to), node.marks[i]));
    }
  });
  for (var i = delSteps.length - 1; i >= 0; i--) {
    this.step(delSteps[i]);
  }return this;
};

Transform.prototype.clearMarkupFor = function (pos, newType, newAttrs) {
  var node = this.doc.nodeAt(pos),
      match = newType.contentExpr.start(newAttrs);
  var delSteps = [];
  for (var i = 0, cur = pos + 1; i < node.childCount; i++) {
    var child = node.child(i),
        end = cur + child.nodeSize;
    var allowed = match.matchType(child.type, child.attrs);
    if (!allowed) {
      delSteps.push(new ReplaceStep(cur, end, Slice.empty));
    } else {
      match = allowed;
      for (var j = 0; j < child.marks.length; j++) {
        if (!match.allowsMark(child.marks[j])) this.step(new RemoveMarkStep(cur, end, child.marks[j]));
      }
    }
    cur = end;
  }
  for (var _i = delSteps.length - 1; _i >= 0; _i--) {
    this.step(delSteps[_i]);
  }return this;
};
},{"../model":200,"./mark_step":212,"./replace_step":214,"./transform":217}],212:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../model"),
    Fragment = _require.Fragment,
    Slice = _require.Slice;

var _require2 = require("./step"),
    Step = _require2.Step,
    StepResult = _require2.StepResult;

function mapFragment(fragment, f, parent) {
  var mapped = [];
  for (var i = 0; i < fragment.childCount; i++) {
    var child = fragment.child(i);
    if (child.content.size) child = child.copy(mapFragment(child.content, f, child));
    if (child.isInline) child = f(child, parent, i);
    mapped.push(child);
  }
  return Fragment.fromArray(mapped);
}

// ;; Add a mark to all inline content between two positions.

var AddMarkStep = function (_Step) {
  _inherits(AddMarkStep, _Step);

  // :: (number, number, Mark)
  function AddMarkStep(from, to, mark) {
    _classCallCheck(this, AddMarkStep);

    var _this = _possibleConstructorReturn(this, (AddMarkStep.__proto__ || Object.getPrototypeOf(AddMarkStep)).call(this));

    _this.from = from;
    _this.to = to;
    _this.mark = mark;
    return _this;
  }

  _createClass(AddMarkStep, [{
    key: "apply",
    value: function apply(doc) {
      var _this2 = this;

      var oldSlice = doc.slice(this.from, this.to);
      var slice = new Slice(mapFragment(oldSlice.content, function (node, parent, index) {
        if (!parent.contentMatchAt(index + 1).allowsMark(_this2.mark.type)) return node;
        return node.mark(_this2.mark.addToSet(node.marks));
      }, oldSlice.possibleParent), oldSlice.openLeft, oldSlice.openRight);
      return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
  }, {
    key: "invert",
    value: function invert() {
      return new RemoveMarkStep(this.from, this.to, this.mark);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var from = mapping.mapResult(this.from, 1),
          to = mapping.mapResult(this.to, -1);
      if (from.deleted && to.deleted || from.pos >= to.pos) return null;
      return new AddMarkStep(from.pos, to.pos, this.mark);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
  }]);

  return AddMarkStep;
}(Step);

exports.AddMarkStep = AddMarkStep;

Step.jsonID("addMark", AddMarkStep);

// ;; Remove a mark from all inline content between two positions.

var RemoveMarkStep = function (_Step2) {
  _inherits(RemoveMarkStep, _Step2);

  // :: (number, number, Mark)
  function RemoveMarkStep(from, to, mark) {
    _classCallCheck(this, RemoveMarkStep);

    var _this3 = _possibleConstructorReturn(this, (RemoveMarkStep.__proto__ || Object.getPrototypeOf(RemoveMarkStep)).call(this));

    _this3.from = from;
    _this3.to = to;
    _this3.mark = mark;
    return _this3;
  }

  _createClass(RemoveMarkStep, [{
    key: "apply",
    value: function apply(doc) {
      var _this4 = this;

      var oldSlice = doc.slice(this.from, this.to);
      var slice = new Slice(mapFragment(oldSlice.content, function (node) {
        return node.mark(_this4.mark.removeFromSet(node.marks));
      }), oldSlice.openLeft, oldSlice.openRight);
      return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
  }, {
    key: "invert",
    value: function invert() {
      return new AddMarkStep(this.from, this.to, this.mark);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var from = mapping.mapResult(this.from, 1),
          to = mapping.mapResult(this.to, -1);
      if (from.deleted && to.deleted || from.pos >= to.pos) return null;
      return new RemoveMarkStep(from.pos, to.pos, this.mark);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
  }]);

  return RemoveMarkStep;
}(Step);

exports.RemoveMarkStep = RemoveMarkStep;

Step.jsonID("removeMark", RemoveMarkStep);
},{"../model":200,"./step":215}],213:[function(require,module,exports){
"use strict";

var _require = require("../model"),
    Fragment = _require.Fragment,
    Slice = _require.Slice;

var _require2 = require("./replace_step"),
    ReplaceStep = _require2.ReplaceStep,
    ReplaceAroundStep = _require2.ReplaceAroundStep;

var _require3 = require("./transform"),
    Transform = _require3.Transform;

// :: (number, number) → Transform
// Delete the content between the given positions.


Transform.prototype.delete = function (from, to) {
  return this.replace(from, to, Slice.empty);
};

// :: (number, ?number, ?Slice) → Transform
// Replace the part of the document between `from` and `to` with the
// part of the `source` between `start` and `end`.
Transform.prototype.replace = function (from) {
  var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
  var slice = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Slice.empty;

  if (from == to && !slice.size) return this;

  var $from = this.doc.resolve(from),
      $to = this.doc.resolve(to);
  var placed = placeSlice($from, slice);

  var fittedLeft = fitLeft($from, placed);
  var fitted = fitRight($from, $to, fittedLeft);
  if (!fitted) return this;
  if (fittedLeft.size != fitted.size && canMoveText($from, $to, fittedLeft)) {
    var d = $to.depth,
        after = $to.after(d);
    while (d > 1 && after == $to.end(--d)) {
      ++after;
    }var fittedAfter = fitRight($from, this.doc.resolve(after), fittedLeft);
    if (fittedAfter) return this.step(new ReplaceAroundStep(from, after, to, $to.end(), fittedAfter, fittedLeft.size));
  }
  return this.step(new ReplaceStep(from, to, fitted));
};

// :: (number, number, union<Fragment, Node, [Node]>) → Transform
// Replace the given range with the given content, which may be a
// fragment, node, or array of nodes.
Transform.prototype.replaceWith = function (from, to, content) {
  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
};

// :: (number, union<Fragment, Node, [Node]>) → Transform
// Insert the given content at the given position.
Transform.prototype.insert = function (pos, content) {
  return this.replaceWith(pos, pos, content);
};

// :: (number, string) → Transform
// Insert the given text at `pos`, inheriting the marks of the
// existing content at that position.
Transform.prototype.insertText = function (pos, text) {
  return this.insert(pos, this.doc.type.schema.text(text, this.doc.marksAt(pos)));
};

// :: (number, Node) → Transform
// Insert the given node at `pos`, inheriting the marks of the
// existing content at that position.
Transform.prototype.insertInline = function (pos, node) {
  return this.insert(pos, node.mark(this.doc.marksAt(pos)));
};

function fitLeftInner($from, depth, placed, placedBelow) {
  var content = Fragment.empty,
      openRight = 0,
      placedHere = placed[depth];
  if ($from.depth > depth) {
    var inner = fitLeftInner($from, depth + 1, placed, placedBelow || placedHere);
    openRight = inner.openRight + 1;
    content = Fragment.from($from.node(depth + 1).copy(inner.content));
  }

  if (placedHere) {
    content = content.append(placedHere.content);
    openRight = placedHere.openRight;
  }
  if (placedBelow) {
    content = content.append($from.node(depth).contentMatchAt($from.indexAfter(depth)).fillBefore(Fragment.empty, true));
    openRight = 0;
  }

  return { content: content, openRight: openRight };
}

function fitLeft($from, placed) {
  var _fitLeftInner = fitLeftInner($from, 0, placed, false),
      content = _fitLeftInner.content,
      openRight = _fitLeftInner.openRight;

  return new Slice(content, $from.depth, openRight || 0);
}

function fitRightJoin(content, parent, $from, $to, depth, openLeft, openRight) {
  var match = void 0,
      count = content.childCount,
      matchCount = count - (openRight > 0 ? 1 : 0);
  if (openLeft < 0) match = parent.contentMatchAt(matchCount);else if (count == 1 && openRight > 0) match = $from.node(depth).contentMatchAt(openLeft ? $from.index(depth) : $from.indexAfter(depth));else match = $from.node(depth).contentMatchAt($from.indexAfter(depth)).matchFragment(content, count > 0 && openLeft ? 1 : 0, matchCount);

  var toNode = $to.node(depth);
  if (openRight > 0 && depth < $to.depth) {
    // FIXME find a less allocaty approach
    var after = toNode.content.cutByIndex($to.indexAfter(depth)).addToStart(content.lastChild);
    var _joinable = match.fillBefore(after, true);
    // Can't insert content if there's a single node stretched across this gap
    if (_joinable && _joinable.size && openLeft > 0 && count == 1) _joinable = null;

    if (_joinable) {
      var inner = fitRightJoin(content.lastChild.content, content.lastChild, $from, $to, depth + 1, count == 1 ? openLeft - 1 : -1, openRight - 1);
      if (inner) {
        var last = content.lastChild.copy(inner);
        if (_joinable.size) return content.cutByIndex(0, count - 1).append(_joinable).addToEnd(last);else return content.replaceChild(count - 1, last);
      }
    }
  }
  if (openRight > 0) match = match.matchNode(count == 1 && openLeft > 0 ? $from.node(depth + 1) : content.lastChild);

  // If we're here, the next level can't be joined, so we see what
  // happens if we leave it open.
  var toIndex = $to.index(depth);
  if (toIndex == toNode.childCount && !toNode.type.compatibleContent(parent.type)) return null;
  var joinable = match.fillBefore(toNode.content, true, toIndex);
  if (!joinable) return null;

  if (openRight > 0) {
    var closed = fitRightClosed(content.lastChild, openRight - 1, $from, depth + 1, count == 1 ? openLeft - 1 : -1);
    content = content.replaceChild(count - 1, closed);
  }
  content = content.append(joinable);
  if ($to.depth > depth) content = content.addToEnd(fitRightSeparate($to, depth + 1));
  return content;
}

function fitRightClosed(node, openRight, $from, depth, openLeft) {
  var match = void 0,
      content = node.content,
      count = content.childCount;
  if (openLeft >= 0) match = $from.node(depth).contentMatchAt($from.indexAfter(depth)).matchFragment(content, openLeft > 0 ? 1 : 0, count);else match = node.contentMatchAt(count);

  if (openRight > 0) {
    var closed = fitRightClosed(content.lastChild, openRight - 1, $from, depth + 1, count == 1 ? openLeft - 1 : -1);
    content = content.replaceChild(count - 1, closed);
  }

  return node.copy(content.append(match.fillBefore(Fragment.empty, true)));
}

function fitRightSeparate($to, depth) {
  var node = $to.node(depth);
  var fill = node.contentMatchAt(0).fillBefore(node.content, true, $to.index(depth));
  if ($to.depth > depth) fill = fill.addToEnd(fitRightSeparate($to, depth + 1));
  return node.copy(fill);
}

function normalizeSlice(content, openLeft, openRight) {
  while (openLeft > 0 && openRight > 0 && content.childCount == 1) {
    content = content.firstChild.content;
    openLeft--;
    openRight--;
  }
  return new Slice(content, openLeft, openRight);
}

// : (ResolvedPos, ResolvedPos, number, Slice) → Slice
function fitRight($from, $to, slice) {
  var fitted = fitRightJoin(slice.content, $from.node(0), $from, $to, 0, slice.openLeft, slice.openRight);
  // FIXME we might want to be clever about selectively dropping nodes here?
  if (!fitted) return null;
  return normalizeSlice(fitted, slice.openLeft, $to.depth);
}

function canMoveText($from, $to, slice) {
  if (!$to.parent.isTextblock) return false;

  var match = void 0;
  if (!slice.openRight) {
    var parent = $from.node($from.depth - (slice.openLeft - slice.openRight));
    if (!parent.isTextblock) return false;
    match = parent.contentMatchAt(parent.childCount);
    if (slice.size) match = match.matchFragment(slice.content, slice.openLeft ? 1 : 0);
  } else {
    var _parent = nodeRight(slice.content, slice.openRight);
    if (!_parent.isTextblock) return false;
    match = _parent.contentMatchAt(_parent.childCount);
  }
  match = match.matchFragment($to.parent.content, $to.index());
  return match && match.validEnd();
}

// Algorithm for 'placing' the elements of a slice into a gap:
//
// We consider the content of each node that is open to the left to be
// independently placeable. I.e. in <p("foo"), p("bar")>, when the
// paragraph on the left is open, "foo" can be placed (somewhere on
// the left side of the replacement gap) independently from p("bar").
//
// So placeSlice splits up a slice into a number of sub-slices,
// along with information on where they can be placed on the given
// left-side edge. It works by walking the open side of the slice,
// from the inside out, and trying to find a landing spot for each
// element, by simultaneously scanning over the gap side. When no
// place is found for an open node's content, it is left in that node.
//
// If the outer content can't be placed, a set of wrapper nodes is
// made up for it (by rooting it in the document node type using
// findWrapping), and the algorithm continues to iterate over those.
// This is guaranteed to find a fit, since both stacks now start with
// the same node type (doc).

function nodeLeft(content, depth) {
  for (var i = 1; i < depth; i++) {
    content = content.firstChild.content;
  }return content.firstChild;
}

function nodeRight(content, depth) {
  for (var i = 1; i < depth; i++) {
    content = content.lastChild.content;
  }return content.lastChild;
}

function placeSlice($from, slice) {
  var dFrom = $from.depth,
      unplaced = null;
  var placed = [],
      parents = null;

  for (var dSlice = slice.openLeft;; --dSlice) {
    var curType = void 0,
        curAttrs = void 0,
        curFragment = void 0;
    if (dSlice >= 0) {
      if (dSlice > 0) {
        // Inside slice
        ;
        var _nodeLeft = nodeLeft(slice.content, dSlice);

        curType = _nodeLeft.type;
        curAttrs = _nodeLeft.attrs;
        curFragment = _nodeLeft.content;
      } else if (dSlice == 0) {
        // Top of slice
        curFragment = slice.content;
      }
      if (dSlice < slice.openLeft) curFragment = curFragment.cut(curFragment.firstChild.nodeSize);
    } else {
      // Outside slice
      curFragment = Fragment.empty;
      var parent = parents[parents.length + dSlice - 1];
      curType = parent.type;
      curAttrs = parent.attrs;
    }
    if (unplaced) curFragment = curFragment.addToStart(unplaced);

    if (curFragment.size == 0 && dSlice <= 0) break;

    // FIXME cut/remove marks when it helps find a placement
    var found = findPlacement(curFragment, $from, dFrom);
    if (found) {
      if (found.fragment.size > 0) placed[found.depth] = {
        content: found.fill.append(found.fragment),
        openRight: dSlice > 0 ? 0 : slice.openRight - dSlice,
        depth: found.depth
      };
      if (dSlice <= 0) break;
      unplaced = null;
      dFrom = Math.max(0, found.depth - 1);
    } else {
      if (dSlice == 0) {
        var top = $from.node(0);
        parents = top.contentMatchAt($from.index(0)).findWrapping(curFragment.firstChild.type, curFragment.firstChild.attrs);
        if (!parents) break;
        var last = parents[parents.length - 1];
        if (last ? !last.type.contentExpr.matches(last.attrs, curFragment) : !top.canReplace($from.indexAfter(0), $from.depth ? $from.index(0) : $from.indexAfter(0), curFragment)) break;
        parents = [{ type: top.type, attrs: top.attrs }].concat(parents);
        curType = parents[parents.length - 1].type;
        curAttrs = parents[parents.length - 1].type;
      }
      curFragment = curType.contentExpr.start(curAttrs).fillBefore(curFragment, true).append(curFragment);
      unplaced = curType.create(curAttrs, curFragment);
    }
  }

  return placed;
}

function findPlacement(fragment, $from, start) {
  var hasMarks = false;
  for (var i = 0; i < fragment.childCount; i++) {
    if (fragment.child(i).marks.length) hasMarks = true;
  }for (var d = start; d >= 0; d--) {
    var startMatch = $from.node(d).contentMatchAt($from.indexAfter(d));
    var match = startMatch.fillBefore(fragment);
    if (match) return { depth: d, fill: match, fragment: fragment };
    if (hasMarks) {
      var stripped = matchStrippingMarks(startMatch, fragment);
      if (stripped) return { depth: d, fill: Fragment.empty, fragment: stripped };
    }
  }
}

function matchStrippingMarks(match, fragment) {
  var newNodes = [];
  for (var i = 0; i < fragment.childCount; i++) {
    var node = fragment.child(i),
        stripped = node.mark(node.marks.filter(function (m) {
      return match.allowsMark(m.type);
    }));
    match = match.matchNode(stripped);
    if (!match) return null;
    newNodes.push(stripped);
  }
  return Fragment.from(newNodes);
}
},{"../model":200,"./replace_step":214,"./transform":217}],214:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../model"),
    Slice = _require.Slice;

var _require2 = require("./step"),
    Step = _require2.Step,
    StepResult = _require2.StepResult;

var _require3 = require("./map"),
    PosMap = _require3.PosMap;

// ;; Replace a part of the document with a slice of new content.


var ReplaceStep = function (_Step) {
  _inherits(ReplaceStep, _Step);

  // :: (number, number, Slice, bool)
  // The given `slice` should fit the 'gap' between `from` and
  // `to`—the depths must line up, and the surrounding nodes must be
  // able to be joined with the open sides of the slice. When
  // `structure` is true, the step will fail if the content between
  // from and to is not just a sequence of closing and then opening
  // tokens (this is to guard against rebased replace steps
  // overwriting something they weren't supposed to).
  function ReplaceStep(from, to, slice, structure) {
    _classCallCheck(this, ReplaceStep);

    var _this = _possibleConstructorReturn(this, (ReplaceStep.__proto__ || Object.getPrototypeOf(ReplaceStep)).call(this));

    _this.from = from;
    _this.to = to;
    _this.slice = slice;
    _this.structure = !!structure;
    return _this;
  }

  _createClass(ReplaceStep, [{
    key: "apply",
    value: function apply(doc) {
      if (this.structure && contentBetween(doc, this.from, this.to)) return StepResult.fail("Structure replace would overwrite content");
      return StepResult.fromReplace(doc, this.from, this.to, this.slice);
    }
  }, {
    key: "posMap",
    value: function posMap() {
      return new PosMap([this.from, this.to - this.from, this.slice.size]);
    }
  }, {
    key: "invert",
    value: function invert(doc) {
      return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var from = mapping.mapResult(this.from, 1),
          to = mapping.mapResult(this.to, -1);
      if (from.deleted && to.deleted) return null;
      return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice));
    }
  }]);

  return ReplaceStep;
}(Step);

exports.ReplaceStep = ReplaceStep;

Step.jsonID("replace", ReplaceStep);

// ;; Replace a part of the document with a slice of content, but
// preserve a range of the replaced content by moving it into the
// slice.

var ReplaceAroundStep = function (_Step2) {
  _inherits(ReplaceAroundStep, _Step2);

  // :: (number, number, number, number, Slice, number, bool)
  // Create a replace-wrap step with the given range and gap. `insert`
  // should be the point in the slice into which the gap should be
  // moved. `structure` has the same meaning as it has in the
  // `ReplaceStep` class.
  function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {
    _classCallCheck(this, ReplaceAroundStep);

    var _this2 = _possibleConstructorReturn(this, (ReplaceAroundStep.__proto__ || Object.getPrototypeOf(ReplaceAroundStep)).call(this));

    _this2.from = from;
    _this2.to = to;
    _this2.gapFrom = gapFrom;
    _this2.gapTo = gapTo;
    _this2.slice = slice;
    _this2.insert = insert;
    _this2.structure = !!structure;
    return _this2;
  }

  _createClass(ReplaceAroundStep, [{
    key: "apply",
    value: function apply(doc) {
      if (this.structure && (contentBetween(doc, this.from, this.gapFrom) || contentBetween(doc, this.gapTo, this.to))) return StepResult.fail("Structure gap-replace would overwrite content");

      var gap = doc.slice(this.gapFrom, this.gapTo);
      if (gap.openLeft || gap.openRight) return StepResult.fail("Gap is not a flat range");
      var inserted = this.slice.insertAt(this.insert, gap.content);
      if (!inserted) return StepResult.fail("Content does not fit in gap");
      return StepResult.fromReplace(doc, this.from, this.to, inserted);
    }
  }, {
    key: "posMap",
    value: function posMap() {
      return new PosMap([this.from, this.gapFrom - this.from, this.insert, this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
    }
  }, {
    key: "invert",
    value: function invert(doc) {
      var gap = this.gapTo - this.gapFrom;
      return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var from = mapping.mapResult(this.from, 1),
          to = mapping.mapResult(this.to, -1);
      var gapFrom = mapping.map(this.gapFrom, -1),
          gapTo = mapping.map(this.gapTo, 1);
      if (from.deleted && to.deleted || gapFrom < from.pos || gapTo > to.pos) return null;
      return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, json.structure);
    }
  }]);

  return ReplaceAroundStep;
}(Step);

exports.ReplaceAroundStep = ReplaceAroundStep;

Step.jsonID("replaceAround", ReplaceAroundStep);

function contentBetween(doc, from, to) {
  var $from = doc.resolve(from),
      dist = to - from,
      depth = $from.depth;
  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
    depth--;
    dist--;
  }
  if (dist > 0) {
    var next = $from.node(depth).maybeChild($from.indexAfter(depth));
    while (dist > 0) {
      if (!next || next.type.isLeaf) return true;
      next = next.firstChild;
      dist--;
    }
  }
  return false;
}
},{"../model":200,"./map":210,"./step":215}],215:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("../model"),
    ReplaceError = _require.ReplaceError;

var _require2 = require("./map"),
    PosMap = _require2.PosMap;

function mustOverride() {
  throw new Error("Override me");
}

var stepsByID = Object.create(null);

// ;; A step object wraps an atomic operation. It generally applies
// only to the document it was created for, since the positions
// associated with it will only make sense for that document.
//
// New steps are defined by creating classes that extend `Step`,
// overriding the `apply`, `invert`, `map`, `posMap` and `fromJSON`
// methods, and registering your class with a unique
// JSON-serialization identifier using `Step.jsonID`.

var Step = function () {
  function Step() {
    _classCallCheck(this, Step);
  }

  _createClass(Step, [{
    key: "apply",

    // :: (doc: Node) → StepResult
    // Applies this step to the given document, returning a result
    // object that either indicates failure, if the step can not be
    // applied to this document, or indicates success by containing a
    // transformed document.
    value: function apply(_doc) {
      return mustOverride();
    }

    // :: () → PosMap
    // Get the position map that represents the changes made by this
    // step.

  }, {
    key: "posMap",
    value: function posMap() {
      return PosMap.empty;
    }

    // :: (doc: Node) → Step
    // Create an inverted version of this step. Needs the document as it
    // was before the step as input.

  }, {
    key: "invert",
    value: function invert(_doc) {
      return mustOverride();
    }

    // :: (mapping: Mappable) → ?Step
    // Map this step through a mappable thing, returning either a
    // version of that step with its positions adjusted, or `null` if
    // the step was entirely deleted by the mapping.

  }, {
    key: "map",
    value: function map(_mapping) {
      return mustOverride();
    }

    // :: () → Object
    // Create a JSON-serializeable representation of this step. By
    // default, it'll create an object with the step's [JSON
    // id](#Step.jsonID), and each of the steps's own properties,
    // automatically calling `toJSON` on the property values that have
    // such a method.

  }, {
    key: "toJSON",
    value: function toJSON() {
      var obj = { stepType: this.jsonID };
      for (var prop in this) {
        if (this.hasOwnProperty(prop)) {
          var val = this[prop];
          obj[prop] = val && val.toJSON ? val.toJSON() : val;
        }
      }return obj;
    }

    // :: (Schema, Object) → Step
    // Deserialize a step from its JSON representation. Will call
    // through to the step class' own implementation of this method.

  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      return stepsByID[json.stepType].fromJSON(schema, json);
    }

    // :: (string, constructor<Step>)
    // To be able to serialize steps to JSON, each step needs a string
    // ID to attach to its JSON representation. Use this method to
    // register an ID for your step classes. Try to pick something
    // that's unlikely to clash with steps from other modules.

  }, {
    key: "jsonID",
    value: function jsonID(id, stepClass) {
      if (id in stepsByID) throw new RangeError("Duplicate use of step JSON ID " + id);
      stepsByID[id] = stepClass;
      stepClass.prototype.jsonID = id;
      return stepClass;
    }
  }]);

  return Step;
}();

exports.Step = Step;

// ;; The result of [applying](#Step.apply) a step. Contains either a
// new document or a failure value.

var StepResult = function () {
  // : (?Node, ?string)
  function StepResult(doc, failed) {
    _classCallCheck(this, StepResult);

    // :: ?Node The transformed document.
    this.doc = doc;
    // :: ?string Text providing information about a failed step.
    this.failed = failed;
  }

  // :: (Node) → StepResult
  // Create a successful step result.


  _createClass(StepResult, null, [{
    key: "ok",
    value: function ok(doc) {
      return new StepResult(doc, null);
    }

    // :: (string) → StepResult
    // Create a failed step result.

  }, {
    key: "fail",
    value: function fail(message) {
      return new StepResult(null, message);
    }

    // :: (Node, number, number, Slice) → StepResult
    // Call `Node.replace` with the given arguments. Create a successful
    // result if it succeeds, and a failed one if it throws a
    // `ReplaceError`.

  }, {
    key: "fromReplace",
    value: function fromReplace(doc, from, to, slice) {
      try {
        return StepResult.ok(doc.replace(from, to, slice));
      } catch (e) {
        if (e instanceof ReplaceError) return StepResult.fail(e.message);
        throw e;
      }
    }
  }]);

  return StepResult;
}();

exports.StepResult = StepResult;
},{"../model":200,"./map":210}],216:[function(require,module,exports){
"use strict";

var _require = require("../model"),
    Slice = _require.Slice,
    Fragment = _require.Fragment;

var _require2 = require("./transform"),
    Transform = _require2.Transform;

var _require3 = require("./replace_step"),
    ReplaceStep = _require3.ReplaceStep,
    ReplaceAroundStep = _require3.ReplaceAroundStep;

function canCut(node, start, end) {
  return (start == 0 || node.canReplace(start, node.childCount)) && (end == node.childCount || node.canReplace(0, end));
}

// :: (NodeRange) → ?number
// Try to find a target depth to which the content in the given range
// can be lifted.
function liftTarget(range) {
  var parent = range.parent;
  var content = parent.content.cutByIndex(range.startIndex, range.endIndex);
  for (var depth = range.depth;; --depth) {
    var node = range.$from.node(depth),
        index = range.$from.index(depth),
        endIndex = range.$to.indexAfter(depth);
    if (depth < range.depth && node.canReplace(index, endIndex, content)) return depth;
    if (depth == 0 || !canCut(node, index, endIndex)) break;
  }
}
exports.liftTarget = liftTarget;

// :: (NodeRange, number) → Transform
// Split the content in the given range off from its parent, if there
// is subling content before or after it, and move it up the tree to
// the depth specified by `target`. You'll probably want to use
// `liftTarget` to compute `target`, in order to be sure the lift is
// valid.
Transform.prototype.lift = function (range, target) {
  var $from = range.$from,
      $to = range.$to,
      depth = range.depth;


  var gapStart = $from.before(depth + 1),
      gapEnd = $to.after(depth + 1);
  var start = gapStart,
      end = gapEnd;

  var before = Fragment.empty,
      openLeft = 0;
  for (var d = depth, splitting = false; d > target; d--) {
    if (splitting || $from.index(d) > 0) {
      splitting = true;
      before = Fragment.from($from.node(d).copy(before));
      openLeft++;
    } else {
      start--;
    }
  }var after = Fragment.empty,
      openRight = 0;
  for (var _d = depth, _splitting = false; _d > target; _d--) {
    if (_splitting || $to.after(_d + 1) < $to.end(_d)) {
      _splitting = true;
      after = Fragment.from($to.node(_d).copy(after));
      openRight++;
    } else {
      end++;
    }
  }return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openLeft, openRight), before.size - openLeft, true));
};

// :: (NodeRange, NodeType, ?Object) → ?[{type: NodeType, attrs: ?Object}]
// Try to find a valid way to wrap the content in the given range in a
// node of the given type. May introduce extra nodes around and inside
// the wrapper node, if necessary.
function findWrapping(range, nodeType, attrs) {
  var innerRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : range;

  var wrap = { type: nodeType, attrs: attrs };
  var around = findWrappingOutside(range, wrap);
  var inner = around && findWrappingInside(innerRange, wrap);
  if (!inner) return null;
  return around.concat(wrap).concat(inner);
}
exports.findWrapping = findWrapping;

function findWrappingOutside(range, wrap) {
  var parent = range.parent,
      startIndex = range.startIndex,
      endIndex = range.endIndex;

  var around = parent.contentMatchAt(startIndex).findWrapping(wrap.type, wrap.attrs);
  if (!around) return null;
  var outer = around.length ? around[0] : wrap;
  if (!parent.canReplaceWith(startIndex, endIndex, outer.type, outer.attrs)) return null;
  return around;
}

function findWrappingInside(range, wrap) {
  var parent = range.parent,
      startIndex = range.startIndex,
      endIndex = range.endIndex;

  var inner = parent.child(startIndex);
  var inside = wrap.type.contentExpr.start(wrap.attrs).findWrapping(inner.type, inner.attrs);
  if (!inside) return null;
  var last = inside.length ? inside[inside.length - 1] : wrap;
  var innerMatch = last.type.contentExpr.start(last.attrs);
  for (var i = startIndex; i < endIndex; i++) {
    innerMatch = innerMatch && innerMatch.matchNode(parent.child(i));
  }if (!innerMatch || !innerMatch.validEnd()) return null;
  return inside;
}

// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → Transform
// Wrap the given [range](#NodeRange) in the given set of wrappers.
// The wrappers are assumed to be valid in this position, and should
// probably be computed with `findWrapping`.
Transform.prototype.wrap = function (range, wrappers) {
  var content = Fragment.empty;
  for (var i = wrappers.length - 1; i >= 0; i--) {
    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
  }var start = range.start,
      end = range.end;
  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
};

// :: (number, ?number, NodeType, ?Object) → Transform
// Set the type of all textblocks (partly) between `from` and `to` to
// the given node type with the given attributes.
Transform.prototype.setBlockType = function (from) {
  var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;

  var _this = this;

  var type = arguments[2];
  var attrs = arguments[3];

  if (!type.isTextblock) throw new RangeError("Type given to setBlockType should be a textblock");
  var mapFrom = this.steps.length;
  this.doc.nodesBetween(from, to, function (node, pos) {
    if (node.isTextblock && !node.hasMarkup(type, attrs)) {
      // Ensure all markup that isn't allowed in the new node type is cleared
      _this.clearMarkupFor(_this.map(pos, 1, mapFrom), type, attrs);
      var startM = _this.map(pos, 1, mapFrom),
          endM = _this.map(pos + node.nodeSize, 1, mapFrom);
      _this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs)), 0, 0), 1, true));
      return false;
    }
  });
  return this;
};

// :: (number, ?NodeType, ?Object) → Transform
// Change the type and attributes of the node after `pos`.
Transform.prototype.setNodeType = function (pos, type, attrs) {
  var node = this.doc.nodeAt(pos);
  if (!node) throw new RangeError("No node at given position");
  if (!type) type = node.type;
  if (node.type.isLeaf) return this.replaceWith(pos, pos + node.nodeSize, type.create(attrs, null, node.marks));

  if (!type.validContent(node.content, attrs)) throw new RangeError("Invalid content for node type " + type.name);

  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(type.create(attrs)), 0, 0), 1, true));
};

// :: (Node, number, ?NodeType, ?Object) → bool
// Check whether splitting at the given position is allowed.
function canSplit(doc, pos) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var typeAfter = arguments[3];
  var attrsAfter = arguments[4];

  var $pos = doc.resolve(pos),
      base = $pos.depth - depth;
  if (base < 0 || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !$pos.parent.canReplace(0, $pos.indexAfter())) return false;
  for (var d = $pos.depth - 1; d > base; d--) {
    var node = $pos.node(d),
        _index = $pos.index(d);
    if (!node.canReplace(0, _index) || !node.canReplaceWith(_index, node.childCount, typeAfter || $pos.node(d + 1).type, typeAfter ? attrsAfter : $pos.node(d + 1).attrs)) return false;
    typeAfter = null;
  }
  var index = $pos.indexAfter(base);
  return $pos.node(base).canReplaceWith(index, index, typeAfter || $pos.node(base + 1).type, typeAfter ? attrsAfter : $pos.node(base + 1).attrs);
}
exports.canSplit = canSplit;

// :: (number, ?number, ?NodeType, ?Object) → Transform
// Split the node at the given position, and optionally, if `depth` is
// greater than one, any number of nodes above that. By default, the part
// split off will inherit the node type of the original node. This can
// be changed by passing `typeAfter` and `attrsAfter`.
Transform.prototype.split = function (pos) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var typeAfter = arguments[2];
  var attrsAfter = arguments[3];

  var $pos = this.doc.resolve(pos),
      before = Fragment.empty,
      after = Fragment.empty;
  for (var d = $pos.depth, e = $pos.depth - depth; d > e; d--) {
    before = Fragment.from($pos.node(d).copy(before));
    after = Fragment.from(typeAfter ? typeAfter.create(attrsAfter, after) : $pos.node(d).copy(after));
    typeAfter = null;
  }
  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth, true)));
};

// :: (Node, number) → bool
// Test whether the blocks before and after a given position can be
// joined.
function joinable(doc, pos) {
  var $pos = doc.resolve(pos),
      index = $pos.index();
  return canJoin($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index, index + 1);
}
exports.joinable = joinable;

function canJoin(a, b) {
  return a && b && !a.isLeaf && a.canAppend(b);
}

// :: (Node, number, ?number) → ?number
// Find an ancestor of the given position that can be joined to the
// block before (or after if `dir` is positive). Returns the joinable
// point, if any.
function joinPoint(doc, pos) {
  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

  var $pos = doc.resolve(pos);
  for (var d = $pos.depth;; d--) {
    var before = void 0,
        after = void 0;
    if (d == $pos.depth) {
      before = $pos.nodeBefore;
      after = $pos.nodeAfter;
    } else if (dir > 0) {
      before = $pos.node(d + 1);
      after = $pos.node(d).maybeChild($pos.index(d) + 1);
    } else {
      before = $pos.node(d).maybeChild($pos.index(d) - 1);
      after = $pos.node(d + 1);
    }
    if (before && !before.isTextblock && canJoin(before, after)) return pos;
    if (d == 0) break;
    pos = dir < 0 ? $pos.before(d) : $pos.after(d);
  }
}
exports.joinPoint = joinPoint;

// :: (number, ?number, ?bool) → Transform
// Join the blocks around the given position. When `silent` is true,
// the method will return without raising an error if the position
// isn't a valid place to join.
Transform.prototype.join = function (pos) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (silent && (pos < depth || pos + depth > this.doc.content.size)) return this;
  var step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
  if (silent) this.maybeStep(step);else this.step(step);
  return this;
};

// :: (Node, number, NodeType, ?Object) → ?number
// Try to find a point where a node of the given type can be inserted
// near `pos`, by searching up the node hierarchy when `pos` itself
// isn't a valid place but is at the start or end of a node. Return
// null if no position was found.
function insertPoint(doc, pos, nodeType, attrs) {
  var $pos = doc.resolve(pos);
  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType, attrs)) return pos;

  if ($pos.parentOffset == 0) for (var d = $pos.depth - 1; d >= 0; d--) {
    var index = $pos.index(d);
    if ($pos.node(d).canReplaceWith(index, index, nodeType, attrs)) return $pos.before(d + 1);
    if (index > 0) return null;
  }
  if ($pos.parentOffset == $pos.parent.content.size) for (var _d2 = $pos.depth - 1; _d2 >= 0; _d2--) {
    var _index2 = $pos.indexAfter(_d2);
    if ($pos.node(_d2).canReplaceWith(_index2, _index2, nodeType, attrs)) return $pos.after(_d2 + 1);
    if (_index2 < $pos.node(_d2).childCount) return null;
  }
}
exports.insertPoint = insertPoint;
},{"../model":200,"./replace_step":214,"./transform":217}],217:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require("../util/error"),
    ProseMirrorError = _require.ProseMirrorError;

var _require2 = require("./map"),
    mapThrough = _require2.mapThrough,
    mapThroughResult = _require2.mapThroughResult;

var TransformError = function (_ProseMirrorError) {
  _inherits(TransformError, _ProseMirrorError);

  function TransformError() {
    _classCallCheck(this, TransformError);

    return _possibleConstructorReturn(this, (TransformError.__proto__ || Object.getPrototypeOf(TransformError)).apply(this, arguments));
  }

  return TransformError;
}(ProseMirrorError);

exports.TransformError = TransformError;

// ;; A change to a document often consists of a series of
// [steps](#Step). This class provides a convenience abstraction to
// build up and track such an array of steps. A `Transform` object
// implements `Mappable`.
//
// The high-level transforming methods return the `Transform` object
// itself, so that they can be chained.

var Transform = function () {
  // :: (Node)
  // Create a transformation that starts with the given document.
  function Transform(doc) {
    _classCallCheck(this, Transform);

    // :: Node
    // The current document (the result of applying the steps in the
    // transform).
    this.doc = doc;
    // :: [Step]
    // The steps in this transform.
    this.steps = [];
    // :: [Node]
    // The documents before each of the steps.
    this.docs = [];
    // :: [PosMap]
    // The position maps for each of the steps in this transform.
    this.maps = [];
  }

  // :: Node The document at the start of the transformation.


  _createClass(Transform, [{
    key: "step",


    // :: (Step) → Transform
    // Apply a new step in this transformation, saving the result.
    // Throws an error when the step fails.
    value: function step(_step) {
      var result = this.maybeStep(_step);
      if (result.failed) throw new TransformError(result.failed);
      return this;
    }

    // :: (Step) → StepResult
    // Try to apply a step in this transformation, ignoring it if it
    // fails. Returns the step result.

  }, {
    key: "maybeStep",
    value: function maybeStep(step) {
      var result = step.apply(this.doc);
      if (!result.failed) {
        this.docs.push(this.doc);
        this.steps.push(step);
        this.maps.push(step.posMap());
        this.doc = result.doc;
      }
      return result;
    }

    // :: (number, ?number) → MapResult
    // Map a position through the whole transformation (all the position
    // maps in [`maps`](#Transform.maps)), and return the result.

  }, {
    key: "mapResult",
    value: function mapResult(pos, bias, start) {
      return mapThroughResult(this.maps, pos, bias, start);
    }

    // :: (number, ?number) → number
    // Map a position through the whole transformation, and return the
    // mapped position.

  }, {
    key: "map",
    value: function map(pos, bias, start) {
      return mapThrough(this.maps, pos, bias, start);
    }
  }, {
    key: "before",
    get: function get() {
      return this.docs.length ? this.docs[0] : this.doc;
    }
  }]);

  return Transform;
}();

exports.Transform = Transform;
},{"../util/error":221,"./map":210}],218:[function(require,module,exports){
"use strict";

var ie_upto10 = /MSIE \d/.test(navigator.userAgent);
var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

module.exports = {
  mac: /Mac/.test(navigator.platform),
  ie: ie_upto10 || !!ie_11up,
  ie_version: ie_upto10 ? document.documentMode || 6 : ie_11up && +ie_11up[1],
  gecko: /gecko\/\d/i.test(navigator.userAgent),
  ios: /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent)
};
},{}],219:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function compareDeep(a, b) {
  if (a === b) return true;
  if (!(a && (typeof a === "undefined" ? "undefined" : _typeof(a)) == "object") || !(b && (typeof b === "undefined" ? "undefined" : _typeof(b)) == "object")) return false;
  var array = Array.isArray(a);
  if (Array.isArray(b) != array) return false;
  if (array) {
    if (a.length != b.length) return false;
    for (var i = 0; i < a.length; i++) {
      if (!compareDeep(a[i], b[i])) return false;
    }
  } else {
    for (var p in a) {
      if (!(p in b) || !compareDeep(a[p], b[p])) return false;
    }for (var _p in b) {
      if (!(_p in a)) return false;
    }
  }
  return true;
}
exports.compareDeep = compareDeep;
},{}],220:[function(require,module,exports){
"use strict";

function elt(tag, attrs) {
  var result = document.createElement(tag);
  if (attrs) for (var name in attrs) {
    if (name == "style") result.style.cssText = attrs[name];else if (attrs[name] != null) result.setAttribute(name, attrs[name]);
  }

  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  for (var i = 0; i < args.length; i++) {
    add(args[i], result);
  }return result;
}
exports.elt = elt;

function add(value, target) {
  if (typeof value == "string") value = document.createTextNode(value);

  if (Array.isArray(value)) {
    for (var i = 0; i < value.length; i++) {
      add(value[i], target);
    }
  } else {
    target.appendChild(value);
  }
}

var reqFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
var cancelFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;

function requestAnimationFrame(f) {
  if (reqFrame) return reqFrame.call(window, f);else return setTimeout(f, 10);
}
exports.requestAnimationFrame = requestAnimationFrame;

function cancelAnimationFrame(handle) {
  if (reqFrame) return cancelFrame.call(window, handle);else clearTimeout(handle);
}
exports.cancelAnimationFrame = cancelAnimationFrame;

// : (DOMNode, DOMNode) → bool
// Check whether a DOM node is an ancestor of another DOM node.
function contains(parent, child) {
  // Android browser and IE will return false if child is a text node.
  if (child.nodeType != 1) child = child.parentNode;
  return child && parent.contains(child);
}
exports.contains = contains;

var accumulatedCSS = "",
    cssNode = null;

function insertCSS(css) {
  if (cssNode) cssNode.textContent += css;else accumulatedCSS += css;
}
exports.insertCSS = insertCSS;

// This is called when a ProseMirror instance is created, to ensure
// the CSS is in the DOM.
function ensureCSSAdded() {
  if (!cssNode) {
    cssNode = document.createElement("style");
    cssNode.textContent = "/* ProseMirror CSS */\n" + accumulatedCSS;
    document.head.insertBefore(cssNode, document.head.firstChild);
  }
}
exports.ensureCSSAdded = ensureCSSAdded;
},{}],221:[function(require,module,exports){
"use strict";

// ;; Superclass for ProseMirror-related errors. Does some magic to
// make it safely subclassable even on ES5 runtimes.
function ProseMirrorError(message) {
  Error.call(this, message);
  if (this.message != message) {
    this.message = message;
    if (Error.captureStackTrace) Error.captureStackTrace(this, this.name);else this.stack = new Error(message).stack;
  }
}
exports.ProseMirrorError = ProseMirrorError;

ProseMirrorError.prototype = Object.create(Error.prototype);

ProseMirrorError.prototype.constructor = ProseMirrorError;

Object.defineProperty(ProseMirrorError.prototype, "name", {
  get: function get() {
    return this.constructor.name || functionName(this.constructor) || "ProseMirrorError";
  }
});

function functionName(f) {
  var match = /^function (\w+)/.exec(f.toString());
  return match && match[1];
}
},{}],222:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Map = window.Map || function () {
  function _class() {
    _classCallCheck(this, _class);

    this.content = [];
  }

  _createClass(_class, [{
    key: "set",
    value: function set(key, value) {
      var found = this.find(key);
      if (found > -1) this.content[found + 1] = value;else this.content.push(key, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      var found = this.find(key);
      return found == -1 ? undefined : this.content[found + 1];
    }
  }, {
    key: "has",
    value: function has(key) {
      return this.find(key) > -1;
    }
  }, {
    key: "find",
    value: function find(key) {
      for (var i = 0; i < this.content.length; i += 2) {
        if (this.content[i] === key) return i;
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this.content.length = 0;
    }
  }, {
    key: "size",
    get: function get() {
      return this.content.length / 2;
    }
  }]);

  return _class;
}();
exports.Map = Map;
},{}],223:[function(require,module,exports){
"use strict";

function copyObj(obj, base) {
  var copy = base || Object.create(null);
  for (var prop in obj) {
    copy[prop] = obj[prop];
  }return copy;
}
exports.copyObj = copyObj;
},{}],224:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ;; Persistent data structure representing an ordered mapping from
// strings to values, with some convenient update methods.
var OrderedMap = function () {
  function OrderedMap(content) {
    _classCallCheck(this, OrderedMap);

    this.content = content;
  }

  _createClass(OrderedMap, [{
    key: "find",
    value: function find(key) {
      for (var i = 0; i < this.content.length; i += 2) {
        if (this.content[i] == key) return i;
      }return -1;
    }

    // :: (string) → ?any
    // Retrieve the value stored under `key`, or return undefined when
    // no such key exists.

  }, {
    key: "get",
    value: function get(key) {
      var found = this.find(key);
      return found == -1 ? undefined : this.content[found + 1];
    }

    // :: (string, any, ?string) → OrderedMap
    // Create a new map by replacing the value of `key` with a new
    // value, or adding a binding to the end of the map. If `newKey` is
    // given, the key of the binding will be replaced with that key.

  }, {
    key: "update",
    value: function update(key, value, newKey) {
      var self = newKey && newKey != key ? this.remove(newKey) : this;
      var found = self.find(key),
          content = self.content.slice();
      if (found == -1) {
        content.push(newKey || key, value);
      } else {
        content[found + 1] = value;
        if (newKey) content[found] = newKey;
      }
      return new OrderedMap(content);
    }

    // :: (string) → OrderedMap
    // Return a map with the given key removed, if it existed.

  }, {
    key: "remove",
    value: function remove(key) {
      var found = this.find(key);
      if (found == -1) return this;
      var content = this.content.slice();
      content.splice(found, 2);
      return new OrderedMap(content);
    }

    // :: (string, any) → OrderedMap
    // Add a new key to the start of the map.

  }, {
    key: "addToStart",
    value: function addToStart(key, value) {
      return new OrderedMap([key, value].concat(this.remove(key).content));
    }

    // :: (string, any) → OrderedMap
    // Add a new key to the end of the map.

  }, {
    key: "addToEnd",
    value: function addToEnd(key, value) {
      var content = this.remove(key).content.slice();
      content.push(key, value);
      return new OrderedMap(content);
    }

    // :: (string, string, any) → OrderedMap
    // Add a key after the given key. If `place` is not found, the new
    // key is added to the end.

  }, {
    key: "addBefore",
    value: function addBefore(place, key, value) {
      var without = this.remove(key),
          content = without.content.slice();
      var found = without.find(place);
      content.splice(found == -1 ? content.length : found, 0, key, value);
      return new OrderedMap(content);
    }

    // :: ((key: string, value: any))
    // Call the given function for each key/value pair in the map, in
    // order.

  }, {
    key: "forEach",
    value: function forEach(f) {
      for (var i = 0; i < this.content.length; i += 2) {
        f(this.content[i], this.content[i + 1]);
      }
    }

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by prepending the keys in this map that don't
    // appear in `map` before the keys in `map`.

  }, {
    key: "prepend",
    value: function prepend(map) {
      map = OrderedMap.from(map);
      if (!map.size) return this;
      return new OrderedMap(map.content.concat(this.subtract(map).content));
    }

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by appending the keys in this map that don't
    // appear in `map` after the keys in `map`.

  }, {
    key: "append",
    value: function append(map) {
      map = OrderedMap.from(map);
      if (!map.size) return this;
      return new OrderedMap(this.subtract(map).content.concat(map.content));
    }

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a map containing all the keys in this map that don't
    // appear in `map`.

  }, {
    key: "subtract",
    value: function subtract(map) {
      var result = this;
      OrderedMap.from(map).forEach(function (key) {
        return result = result.remove(key);
      });
      return result;
    }

    // :: number
    // The amount of keys in this map.

  }, {
    key: "size",
    get: function get() {
      return this.content.length >> 1;
    }

    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.

  }], [{
    key: "from",
    value: function from(value) {
      if (value instanceof OrderedMap) return value;
      var content = [];
      if (value) for (var prop in value) {
        content.push(prop, value[prop]);
      }return new OrderedMap(content);
    }
  }]);

  return OrderedMap;
}();

exports.OrderedMap = OrderedMap;
},{}],225:[function(require,module,exports){
function Handler(f, once, priority) {
  this.f = f
  this.once = once
  this.priority = priority
}

function Subscription() {
  this.handlers = []
}
exports.Subscription = Subscription

function insert(s, handler) {
  var pos = 0
  for (; pos < s.handlers.length; pos++)
    if (s.handlers[pos].priority < handler.priority) break
  s.handlers = s.handlers.slice(0, pos).concat(handler).concat(s.handlers.slice(pos))
}

Subscription.prototype.handlersForDispatch = function() {
  var handlers = this.handlers, updated = null
  for (var i = handlers.length - 1; i >= 0; i--) if (handlers[i].once) {
    if (!updated) updated = handlers.slice()
    updated.splice(i, 1)
  }
  if (updated) this.handlers = updated
  return handlers
}

Subscription.prototype.add = function(f, priority) {
  insert(this, new Handler(f, false, priority || 0))
}

Subscription.prototype.addOnce = function(f, priority) {
  insert(this, new Handler(f, true, priority || 0))
}

Subscription.prototype.remove = function(f) {
  for (var i = 0; i < this.handlers.length; i++) if (this.handlers[i].f == f) {
    this.handlers = this.handlers.slice(0, i).concat(this.handlers.slice(i + 1))
    return
  }
}

Subscription.prototype.hasHandler = function() {
  return this.handlers.length > 0
}

Subscription.prototype.dispatch = function() {
  var handlers = this.handlersForDispatch()
  for (var i = 0; i < handlers.length; i++)
    handlers[i].f.apply(null, arguments)
}

function PipelineSubscription() {
  Subscription.call(this)
}
exports.PipelineSubscription = PipelineSubscription

PipelineSubscription.prototype = new Subscription

PipelineSubscription.prototype.dispatch = function(value) {
  var handlers = this.handlersForDispatch()
  for (var i = 0; i < handlers.length; i++)
    value = handlers[i].f(value)
  return value
}

function StoppableSubscription() {
  Subscription.call(this)
}
exports.StoppableSubscription = StoppableSubscription

StoppableSubscription.prototype = new Subscription

StoppableSubscription.prototype.dispatch = function() {
  var handlers = this.handlersForDispatch()
  for (var i = 0; i < handlers.length; i++) {
    var result = handlers[i].f.apply(null, arguments)
    if (result) return result
  }
}

function DOMSubscription() {
  Subscription.call(this)
}
exports.DOMSubscription = DOMSubscription

DOMSubscription.prototype = new Subscription

DOMSubscription.prototype.dispatch = function(event) {
  var handlers = this.handlersForDispatch()
  for (var i = 0; i < handlers.length; i++)
    if (handlers[i].f(event) || event.defaultPrevented) return true
  return false
}

},{}]},{},[15]);
