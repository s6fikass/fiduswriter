{"modules":{"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/templates.js":{"file":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/templates.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/** A template to confirm the deletion of a user avatar. */\nvar confirmDeleteAvatarTemplate = exports.confirmDeleteAvatarTemplate = '<div id=\"confirmdeletion\" title=\"' + gettext('Confirm deletion') + '\"><p>' + gettext('Delete the avatar') + '?</p></div>';\n\n/** A template to change the user avatar. */\nvar changeAvatarDialogTemplate = exports.changeAvatarDialogTemplate = '<div id=\"change-avatar-dialog\" title=\"' + gettext('Upload your profile picture') + '\">\\\n        <form id=\"avatar-uploader-form\" method=\"post\" enctype=\"multipart/form-data\" class=\"ajax-upload\">\\\n            <input type=\"file\" id=\"avatar-uploader\" name=\"avatar\" required />\\\n            <span id=\"upload-avatar-btn\" class=\"fw-button fw-white fw-large\">' + gettext('Select a file') + '</span>\\\n            <label id=\"uploaded-avatar-name\" class=\"ajax-upload-label\"></label>\\\n        </form>\\\n    </div>';\n\n/** A template for the confirmation dialog to delete a user account. */\nvar deleteUserDialogTemplate = exports.deleteUserDialogTemplate = '<div id=\"confirmaccountdeletion\" title=\"' + gettext('Confirm deletion') + '\"><p>' + gettext('Really delete your account? Type in your username below to confirm deletion.') + '</p><input type=\"text\" id=\"username-confirmation\"></div>';\n\n/** A template for the change email dialog of the user account. */\nvar changeEmailDialogTemplate = exports.changeEmailDialogTemplate = '<div id=\"fw-add-email-dialog\" title=\"' + gettext('Add Email') + '\">\\\n        <table class=\"ui-dialog-content-table\"><tbody>\\\n            <tr><td>\\\n                <form id=\"fw-add-email-form\" action=\"\" method=\"post\" onsubmit=\"return false;\">\\\n                    <input type=\"text\" name=\"email\" id=\"new-profile-email\" class=\"fw-profile-dialog-input\" placeholder=\"' + gettext('Enter the new E-mail address') + '\" />\\\n                </form>\\\n            </td></tr>\\\n            <tr><td><span id=\"fw-add-email-error\" class=\"warning\"></span></td></tr>\\\n        </tbody></table>\\\n    </div>';\n/** A template for the delete email dialog of the user account. */\nvar deleteEmailDialogTemplate = exports.deleteEmailDialogTemplate = _.template('<div id=\"fw-confirm-email-dialog\" title=\"<%= title %>\">\\\n        <p><%- text %></p>\\\n    </div>');\n/** A template for the change password dialog of the user account. */\nvar changePwdDialogTemplate = exports.changePwdDialogTemplate = '<div id=\"fw-change-pwd-dialog\" title=\"' + gettext('Change Password') + '\">\\\n        <table class=\"ui-dialog-content-table\"><tbody>\\\n            <tr><td><form id=\"fw-password-change-form\" action=\"\" method=\"post\" onsubmit=\"return false;\">\\\n                <input type=\"password\" id=\"old-password-input\" name=\"old_password\" class=\"fw-profile-dialog-input\" placeholder=\"' + gettext('Old password') + '\" /><br />\\\n                <input type=\"password\" id=\"new-password-input1\" name=\"new_password1\" class=\"fw-profile-dialog-input\" placeholder=\"' + gettext('New password') + '\" /><br />\\\n                <input type=\"password\" id=\"new-password-input2\" name=\"new_password2\" class=\"fw-profile-dialog-input\" placeholder=\"' + gettext('Confirm the new password') + '\" />\\\n            </form></td></tr>\\\n            <tr><td><span id=\"fw-password-change-error\" class=\"warning\"></span></td></tr>\\\n        </tbody></table>\\\n    </div>';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBsYXRlcy5qcyJdLCJuYW1lcyI6WyJjb25maXJtRGVsZXRlQXZhdGFyVGVtcGxhdGUiLCJnZXR0ZXh0IiwiY2hhbmdlQXZhdGFyRGlhbG9nVGVtcGxhdGUiLCJkZWxldGVVc2VyRGlhbG9nVGVtcGxhdGUiLCJjaGFuZ2VFbWFpbERpYWxvZ1RlbXBsYXRlIiwiZGVsZXRlRW1haWxEaWFsb2dUZW1wbGF0ZSIsIl8iLCJ0ZW1wbGF0ZSIsImNoYW5nZVB3ZERpYWxvZ1RlbXBsYXRlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLEFBQ0E7QUFBTyxJQUFJLG9FQUE4QixzQ0FDckMsUUFEcUMsQUFDckMsQUFBUSxzQkFENkIsQUFDUCxVQUM5QixRQUZxQyxBQUVyQyxBQUFRLHVCQUZMLEFBRTRCOztBQUVuQyxBQUNBO0FBQU8sSUFBSSxrRUFBNkIsMkNBQTJDLFFBQTNDLEFBQTJDLEFBQVEsaUNBQW5ELEFBQW9GOzs7aUZBSTVHLFFBSndCLEFBSXhCLEFBQVEsbUJBSmpCLEFBS0s7Ozs7O0FBS1osQUFDQTtBQUFPLElBQUksOERBQTJCLDZDQUNsQyxRQURrQyxBQUNsQyxBQUFRLHNCQUQwQixBQUNKLFVBQzlCLFFBRmtDLEFBRWxDLEFBQVEsa0ZBRkwsQUFHSDs7QUFFSixBQUNBO0FBQU8sSUFBSSxnRUFBNEIsMENBQTBDLFFBQTFDLEFBQTBDLEFBQVEsZUFBbEQsQUFBaUU7Ozs7NEhBS2hGLFFBTGUsQUFLZixBQUFRLGtDQUx6QixBQUsyRDs7Ozs7O0FBTWxFLEFBQ0E7QUFBTyxJQUFJLGtFQUE0QixBQUFFLFNBQWxDLEFBQWdDLEFBQVc7O1dBQVg7QUFHdkMsQUFDQTtBQUFPLElBQUksNERBQTBCLDJDQUEyQyxRQUEzQyxBQUEyQyxBQUFRLHFCQUFuRCxBQUF3RTs7O29JQUd1QixRQUgvRixBQUcrRixBQUFRLGtCQUh2RyxBQUd5SDtzSUFDeEIsUUFKakcsQUFJaUcsQUFBUSxrQkFKekcsQUFJMkg7c0lBQzFCLFFBTGpHLEFBS2lHLEFBQVEsOEJBTHZJLEFBS3FLIiwiZmlsZSI6InRlbXBsYXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBBIHRlbXBsYXRlIHRvIGNvbmZpcm0gdGhlIGRlbGV0aW9uIG9mIGEgdXNlciBhdmF0YXIuICovXG5leHBvcnQgbGV0IGNvbmZpcm1EZWxldGVBdmF0YXJUZW1wbGF0ZSA9ICc8ZGl2IGlkPVwiY29uZmlybWRlbGV0aW9uXCIgdGl0bGU9XCInICtcbiAgICBnZXR0ZXh0KCdDb25maXJtIGRlbGV0aW9uJykgKyAnXCI+PHA+JyArXG4gICAgZ2V0dGV4dCgnRGVsZXRlIHRoZSBhdmF0YXInKSArICc/PC9wPjwvZGl2PidcblxuLyoqIEEgdGVtcGxhdGUgdG8gY2hhbmdlIHRoZSB1c2VyIGF2YXRhci4gKi9cbmV4cG9ydCBsZXQgY2hhbmdlQXZhdGFyRGlhbG9nVGVtcGxhdGUgPSAnPGRpdiBpZD1cImNoYW5nZS1hdmF0YXItZGlhbG9nXCIgdGl0bGU9XCInICsgZ2V0dGV4dCgnVXBsb2FkIHlvdXIgcHJvZmlsZSBwaWN0dXJlJykgKyAnXCI+XFxcbiAgICAgICAgPGZvcm0gaWQ9XCJhdmF0YXItdXBsb2FkZXItZm9ybVwiIG1ldGhvZD1cInBvc3RcIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIGNsYXNzPVwiYWpheC11cGxvYWRcIj5cXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJhdmF0YXItdXBsb2FkZXJcIiBuYW1lPVwiYXZhdGFyXCIgcmVxdWlyZWQgLz5cXFxuICAgICAgICAgICAgPHNwYW4gaWQ9XCJ1cGxvYWQtYXZhdGFyLWJ0blwiIGNsYXNzPVwiZnctYnV0dG9uIGZ3LXdoaXRlIGZ3LWxhcmdlXCI+JyArXG4gICAgICAgICAgICAgICAgZ2V0dGV4dCgnU2VsZWN0IGEgZmlsZScpICtcbiAgICAgICAgICAgICc8L3NwYW4+XFxcbiAgICAgICAgICAgIDxsYWJlbCBpZD1cInVwbG9hZGVkLWF2YXRhci1uYW1lXCIgY2xhc3M9XCJhamF4LXVwbG9hZC1sYWJlbFwiPjwvbGFiZWw+XFxcbiAgICAgICAgPC9mb3JtPlxcXG4gICAgPC9kaXY+J1xuXG4vKiogQSB0ZW1wbGF0ZSBmb3IgdGhlIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gZGVsZXRlIGEgdXNlciBhY2NvdW50LiAqL1xuZXhwb3J0IGxldCBkZWxldGVVc2VyRGlhbG9nVGVtcGxhdGUgPSAnPGRpdiBpZD1cImNvbmZpcm1hY2NvdW50ZGVsZXRpb25cIiB0aXRsZT1cIicgK1xuICAgIGdldHRleHQoJ0NvbmZpcm0gZGVsZXRpb24nKSArICdcIj48cD4nICtcbiAgICBnZXR0ZXh0KCdSZWFsbHkgZGVsZXRlIHlvdXIgYWNjb3VudD8gVHlwZSBpbiB5b3VyIHVzZXJuYW1lIGJlbG93IHRvIGNvbmZpcm0gZGVsZXRpb24uJykgK1xuICAgICc8L3A+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJ1c2VybmFtZS1jb25maXJtYXRpb25cIj48L2Rpdj4nXG5cbi8qKiBBIHRlbXBsYXRlIGZvciB0aGUgY2hhbmdlIGVtYWlsIGRpYWxvZyBvZiB0aGUgdXNlciBhY2NvdW50LiAqL1xuZXhwb3J0IGxldCBjaGFuZ2VFbWFpbERpYWxvZ1RlbXBsYXRlID0gJzxkaXYgaWQ9XCJmdy1hZGQtZW1haWwtZGlhbG9nXCIgdGl0bGU9XCInICsgZ2V0dGV4dCgnQWRkIEVtYWlsJykgKyAnXCI+XFxcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidWktZGlhbG9nLWNvbnRlbnQtdGFibGVcIj48dGJvZHk+XFxcbiAgICAgICAgICAgIDx0cj48dGQ+XFxcbiAgICAgICAgICAgICAgICA8Zm9ybSBpZD1cImZ3LWFkZC1lbWFpbC1mb3JtXCIgYWN0aW9uPVwiXCIgbWV0aG9kPVwicG9zdFwiIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbFwiIGlkPVwibmV3LXByb2ZpbGUtZW1haWxcIiBjbGFzcz1cImZ3LXByb2ZpbGUtZGlhbG9nLWlucHV0XCIgcGxhY2Vob2xkZXI9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldHRleHQoJ0VudGVyIHRoZSBuZXcgRS1tYWlsIGFkZHJlc3MnKSArICdcIiAvPlxcXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxcXG4gICAgICAgICAgICA8L3RkPjwvdHI+XFxcbiAgICAgICAgICAgIDx0cj48dGQ+PHNwYW4gaWQ9XCJmdy1hZGQtZW1haWwtZXJyb3JcIiBjbGFzcz1cIndhcm5pbmdcIj48L3NwYW4+PC90ZD48L3RyPlxcXG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cXFxuICAgIDwvZGl2Pidcbi8qKiBBIHRlbXBsYXRlIGZvciB0aGUgZGVsZXRlIGVtYWlsIGRpYWxvZyBvZiB0aGUgdXNlciBhY2NvdW50LiAqL1xuZXhwb3J0IGxldCBkZWxldGVFbWFpbERpYWxvZ1RlbXBsYXRlID0gXy50ZW1wbGF0ZSgnPGRpdiBpZD1cImZ3LWNvbmZpcm0tZW1haWwtZGlhbG9nXCIgdGl0bGU9XCI8JT0gdGl0bGUgJT5cIj5cXFxuICAgICAgICA8cD48JS0gdGV4dCAlPjwvcD5cXFxuICAgIDwvZGl2PicpXG4vKiogQSB0ZW1wbGF0ZSBmb3IgdGhlIGNoYW5nZSBwYXNzd29yZCBkaWFsb2cgb2YgdGhlIHVzZXIgYWNjb3VudC4gKi9cbmV4cG9ydCBsZXQgY2hhbmdlUHdkRGlhbG9nVGVtcGxhdGUgPSAnPGRpdiBpZD1cImZ3LWNoYW5nZS1wd2QtZGlhbG9nXCIgdGl0bGU9XCInICsgZ2V0dGV4dCgnQ2hhbmdlIFBhc3N3b3JkJykgKyAnXCI+XFxcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidWktZGlhbG9nLWNvbnRlbnQtdGFibGVcIj48dGJvZHk+XFxcbiAgICAgICAgICAgIDx0cj48dGQ+PGZvcm0gaWQ9XCJmdy1wYXNzd29yZC1jaGFuZ2UtZm9ybVwiIGFjdGlvbj1cIlwiIG1ldGhvZD1cInBvc3RcIiBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj5cXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cIm9sZC1wYXNzd29yZC1pbnB1dFwiIG5hbWU9XCJvbGRfcGFzc3dvcmRcIiBjbGFzcz1cImZ3LXByb2ZpbGUtZGlhbG9nLWlucHV0XCIgcGxhY2Vob2xkZXI9XCInICsgZ2V0dGV4dCgnT2xkIHBhc3N3b3JkJykgKyAnXCIgLz48YnIgLz5cXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cIm5ldy1wYXNzd29yZC1pbnB1dDFcIiBuYW1lPVwibmV3X3Bhc3N3b3JkMVwiIGNsYXNzPVwiZnctcHJvZmlsZS1kaWFsb2ctaW5wdXRcIiBwbGFjZWhvbGRlcj1cIicgKyBnZXR0ZXh0KCdOZXcgcGFzc3dvcmQnKSArICdcIiAvPjxiciAvPlxcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwibmV3LXBhc3N3b3JkLWlucHV0MlwiIG5hbWU9XCJuZXdfcGFzc3dvcmQyXCIgY2xhc3M9XCJmdy1wcm9maWxlLWRpYWxvZy1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiJyArIGdldHRleHQoJ0NvbmZpcm0gdGhlIG5ldyBwYXNzd29yZCcpICsgJ1wiIC8+XFxcbiAgICAgICAgICAgIDwvZm9ybT48L3RkPjwvdHI+XFxcbiAgICAgICAgICAgIDx0cj48dGQ+PHNwYW4gaWQ9XCJmdy1wYXNzd29yZC1jaGFuZ2UtZXJyb3JcIiBjbGFzcz1cIndhcm5pbmdcIj48L3NwYW4+PC90ZD48L3RyPlxcXG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cXFxuICAgIDwvZGl2PidcbiJdfQ==","deps":{}},"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/common/index.js":{"file":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/common/index.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/** Creates a dropdown box.\n * @param btn The button to open and close the dropdown box.\n * @param box The node containing the contents of the dropdown box.\n */\n\nvar addDropdownBox = exports.addDropdownBox = function addDropdownBox(btn, box) {\n    btn.bind('mousedown', function (event) {\n        event.preventDefault();\n        if (btn.hasClass('disabled')) {\n            return;\n        }\n        if ('none' == box.css('display')) {\n            openDropdownBox(box);\n        }\n    });\n};\n\n/** Opens a dropdown box.\n * @param box The node containing the contents of the dropdown box.\n */\n\nvar openDropdownBox = function openDropdownBox(box) {\n    // Show this box\n    box.show();\n    // Give that the dropdown menu was opened through a mousedown event, there\n    // will be a first click event following it. We will wait for the second\n    // click event.\n    jQuery(document).one('click', function () {\n        jQuery(document).one('click', function (event) {\n            event.preventDefault();\n            box.hide();\n        });\n    });\n};\n\n/** Checkes or uncheckes a checkable label. This is used for example for bibliography categories when editing bibliography items.\n * @param label The node who's parent has to be checked or unchecked.\n */\nvar setCheckableLabel = exports.setCheckableLabel = function setCheckableLabel(label) {\n    var checkbox = label.parent().find('input[type=checkbox]');\n    if (label.hasClass('checked')) {\n        label.removeClass('checked');\n    } else {\n        label.addClass('checked');\n    }\n};\n\n/** Cover the page signaling to the user to wait.\n */\nvar activateWait = exports.activateWait = function activateWait() {\n    jQuery('#wait').addClass('active');\n};\n\n/** Remove the wait cover.\n */\nvar deactivateWait = exports.deactivateWait = function deactivateWait() {\n    jQuery('#wait').removeClass('active');\n};\n\n/** Show a message to the user.\n * @param alertType The type of message that is shown (error, warning, info or success).\n * @param alertMsg The message text.\n */\nvar addAlert = exports.addAlert = function addAlert(alertType, alertMsg) {\n    var fadeSpeed = 300;\n    var iconNames = {\n        'error': 'icon-attention-circle',\n        'warning': 'icon-attention-circle',\n        'info': 'icon-info-circle',\n        'success': 'icon-ok'\n    };\n    var alertBox = jQuery('<li class=\"alerts-' + alertType + ' ' + iconNames[alertType] + '\">' + alertMsg + '</li>');\n    if (0 === jQuery('#alerts-outer-wrapper').length) jQuery('body').append('<div id=\"alerts-outer-wrapper\"><ul id=\"alerts-wrapper\"></ul></div>');\n    jQuery('#alerts-wrapper').append(alertBox);\n    alertBox.fadeTo(fadeSpeed, 1, function () {\n        jQuery(this).delay('2000').fadeOut(fadeSpeed, function () {\n            jQuery(this).remove();\n        });\n    });\n};\n\n/** Turn milliseconds since epoch (UTC) into a local date string.\n * @param {number} milliseconds Number of milliseconds since epoch (1/1/1970 midnight, UTC).\n * @param {boolean} sortable Whether the result should appear in a date only list.\n */\nvar localizeDate = exports.localizeDate = function localizeDate(milliseconds, sortable) {\n    milliseconds = parseInt(milliseconds);\n    if (milliseconds > 0) {\n        var theDate = new Date(milliseconds);\n        if (true === sortable) {\n            var yyyy = theDate.getFullYear(),\n                mm = theDate.getMonth() + 1,\n                dd = theDate.getDate();\n\n            if (10 > mm) {\n                mm = '0' + mm;\n            }\n\n            return yyyy + '/' + mm + '/' + dd;\n        } else {\n            return theDate.toLocaleString();\n        }\n    } else {\n        return '';\n    }\n};\n\n/** Get cookie to set as part of the request header of all AJAX requests to the server.\n * @param name The name of the token to look for in the cookie.\n */\nvar getCookie = exports.getCookie = function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == name + '=') {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\n/**\n * The Cross Site Request Forgery (CSRF) token\n */\nvar csrfToken = exports.csrfToken = getCookie('csrftoken');\n\n/**\n * Turn string literals into single line, removing spaces at start of line\n */\n\nvar noSpaceTmp = exports.noSpaceTmp = function noSpaceTmp(strings) {\n    var values = [].slice.call(arguments);\n    var tmpStrings = [].slice.call(values.shift());\n\n    var combined = \"\";\n    while (tmpStrings.length > 0 || values.length > 0) {\n        if (tmpStrings.length > 0) {\n            combined += tmpStrings.shift();\n        }\n        if (values.length > 0) {\n            combined += values.shift();\n        }\n    }\n\n    var out = \"\";\n    combined.split('\\n').forEach(function (line) {\n        out += line.replace(/^\\s*/g, '');\n    });\n    return out;\n};\n\n/**\n * Return a cancel promise if you need to cancel a promise chain. Import as\n * ES6 promises are not (yet) cancelable.\n */\n\nvar cancelPromise = exports.cancelPromise = function cancelPromise() {\n    return new Promise(function () {});\n};\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/menu/index.js":{"file":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/menu/index.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Menu = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _common = require('../common');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Bindings for the menu\n\nvar Menu = exports.Menu = function () {\n    function Menu(activeItem) {\n        _classCallCheck(this, Menu);\n\n        this.activeItem = activeItem;\n        this.bind();\n    }\n\n    _createClass(Menu, [{\n        key: 'bind',\n        value: function bind() {\n            var _this = this;\n\n            jQuery(document).ready(function () {\n                _this.markCurrentlyActive();\n                _this.bindPreferencePullDown();\n            });\n        }\n    }, {\n        key: 'markCurrentlyActive',\n        value: function markCurrentlyActive() {\n            // Mark currently active menu item\n            var active = jQuery('body > header a[data-item=\"' + this.activeItem + '\"]');\n            active.addClass('active');\n            active.parent().addClass('active-menu-wrapper');\n        }\n    }, {\n        key: 'bindPreferencePullDown',\n        value: function bindPreferencePullDown() {\n            var box = jQuery('#user-preferences-pulldown');\n            var button = jQuery('#preferences-btn');\n            (0, _common.addDropdownBox)(button, box);\n\n            // In addition to adding the dropdown, we also need to add some css\n            // values so that the dropdown is placed close to #preferences-btn\n            jQuery('#preferences-btn').bind('mousedown', function () {\n                var btnOffset = button.offset();\n                box.css({\n                    'left': btnOffset.left - 52,\n                    'top': btnOffset.top + 27\n                });\n            });\n            // As a click will close the pulldown, we need to activate the link by means of a mousedown already.\n            jQuery(document).on('mousedown', '#user-preferences-pulldown a', function (event) {\n                event.preventDefault();\n                window.location = jQuery(this).attr('href');\n            });\n            // Same for form button\n            jQuery(document).on('mousedown', '#user-preferences-pulldown button[type=\"submit\"]', function (event) {\n                event.preventDefault();\n                jQuery(this).closest('form').submit();\n            });\n        }\n    }]);\n\n    return Menu;\n}();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFkZERyb3Bkb3duQm94IiwiTWVudSIsImNvbnN0cnVjdG9yIiwiYWN0aXZlSXRlbSIsImJpbmQiLCJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5IiwibWFya0N1cnJlbnRseUFjdGl2ZSIsImJpbmRQcmVmZXJlbmNlUHVsbERvd24iLCJhY3RpdmUiLCJhZGRDbGFzcyIsInBhcmVudCIsImJveCIsImJ1dHRvbiIsImJ0bk9mZnNldCIsIm9mZnNldCIsImNzcyIsImxlZnQiLCJ0b3AiLCJvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImF0dHIiLCJjbG9zZXN0Iiwic3VibWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxBQUFRLEFBQXFCOzs7O0FBRTdCLEFBRUEsQUFBTzs7SUFBQSxBQUFNLEFBQUssQUFDZDtrQkFBQSxBQUFZO0FBQVksQUFDcEI7O2FBQUEsQUFBSyxhQUFMLEFBQWtCLEFBQ2xCO2FBQUEsQUFBSyxBQUNSO0FBRUQ7Ozs7O0FBQU8sQUFDSDs7bUJBQUEsQUFBTyxVQUFQLEFBQWlCLE1BQU0sWUFBTSxBQUN6QjtzQkFBQSxBQUFLLEFBQ0w7c0JBQUEsQUFBSyxBQUNSO0FBSEQsQUFJSDtBQUVEOzs7OENBQXNCLEFBQ2xCO0FBQ0E7Z0JBQUksU0FBUyxBQUFRLHVDQUE2QixLQUFsRCxBQUFhLEFBQTBDLEFBQVcsQUFDbEU7bUJBQUEsQUFBTyxTQUFQLEFBQWdCLEFBQ2hCO21CQUFBLEFBQU8sU0FBUCxBQUFnQixTQUFoQixBQUF5QixBQUM1QjtBQUVEOzs7aURBQXlCLEFBQ3JCO2dCQUFJLE1BQU0sT0FBVixBQUFVLEFBQU8sQUFDakI7Z0JBQUksU0FBUyxPQUFiLEFBQWEsQUFBTyxBQUNwQjt3Q0FBQSxBQUFlLFFBQWYsQUFBdUIsQUFFdkI7O0FBQ0E7QUFDQTttQkFBQSxBQUFPLG9CQUFQLEFBQTJCLEtBQTNCLEFBQWdDLGFBQWEsWUFBTSxBQUMvQztvQkFBSSxZQUFZLE9BQWhCLEFBQWdCLEFBQU8sQUFDdkI7b0JBQUEsQUFBSTs0QkFDUSxVQUFBLEFBQVUsT0FEZCxBQUNxQixBQUN6QjsyQkFBTyxVQUFBLEFBQVUsTUFGckIsQUFBUSxBQUVtQixBQUU5QjtBQUpXLEFBQ0o7QUFIUixBQU9BO0FBQ0E7bUJBQUEsQUFBTyxVQUFQLEFBQWlCLEdBQWpCLEFBQW9CLGFBQXBCLEFBQWlDLGdDQUFnQyxVQUFBLEFBQVMsT0FBTyxBQUM3RTtzQkFBQSxBQUFNLEFBQ047dUJBQUEsQUFBTyxXQUFXLE9BQUEsQUFBTyxNQUFQLEFBQWEsS0FBL0IsQUFBa0IsQUFBa0IsQUFDdkM7QUFIRCxBQUlBO0FBQ0E7bUJBQUEsQUFBTyxVQUFQLEFBQWlCLEdBQWpCLEFBQW9CLGFBQXBCLEFBQWlDLG9EQUFvRCxVQUFBLEFBQVMsT0FBTyxBQUNqRztzQkFBQSxBQUFNLEFBQ047dUJBQUEsQUFBTyxNQUFQLEFBQWEsUUFBYixBQUFxQixRQUFyQixBQUE2QixBQUNoQztBQUhELEFBSUg7QUE1Q2EiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FkZERyb3Bkb3duQm94fSBmcm9tIFwiLi4vY29tbW9uXCJcblxuLy8gQmluZGluZ3MgZm9yIHRoZSBtZW51XG5cbmV4cG9ydCBjbGFzcyBNZW51IHtcbiAgICBjb25zdHJ1Y3RvcihhY3RpdmVJdGVtKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlSXRlbSA9IGFjdGl2ZUl0ZW1cbiAgICAgICAgdGhpcy5iaW5kKClcbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWFya0N1cnJlbnRseUFjdGl2ZSgpXG4gICAgICAgICAgICB0aGlzLmJpbmRQcmVmZXJlbmNlUHVsbERvd24oKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIG1hcmtDdXJyZW50bHlBY3RpdmUoKSB7XG4gICAgICAgIC8vIE1hcmsgY3VycmVudGx5IGFjdGl2ZSBtZW51IGl0ZW1cbiAgICAgICAgbGV0IGFjdGl2ZSA9IGpRdWVyeShgYm9keSA+IGhlYWRlciBhW2RhdGEtaXRlbT1cIiR7dGhpcy5hY3RpdmVJdGVtfVwiXWApXG4gICAgICAgIGFjdGl2ZS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgYWN0aXZlLnBhcmVudCgpLmFkZENsYXNzKCdhY3RpdmUtbWVudS13cmFwcGVyJylcbiAgICB9XG5cbiAgICBiaW5kUHJlZmVyZW5jZVB1bGxEb3duKCkge1xuICAgICAgICBsZXQgYm94ID0galF1ZXJ5KCcjdXNlci1wcmVmZXJlbmNlcy1wdWxsZG93bicpXG4gICAgICAgIGxldCBidXR0b24gPSBqUXVlcnkoJyNwcmVmZXJlbmNlcy1idG4nKVxuICAgICAgICBhZGREcm9wZG93bkJveChidXR0b24sIGJveClcblxuICAgICAgICAvLyBJbiBhZGRpdGlvbiB0byBhZGRpbmcgdGhlIGRyb3Bkb3duLCB3ZSBhbHNvIG5lZWQgdG8gYWRkIHNvbWUgY3NzXG4gICAgICAgIC8vIHZhbHVlcyBzbyB0aGF0IHRoZSBkcm9wZG93biBpcyBwbGFjZWQgY2xvc2UgdG8gI3ByZWZlcmVuY2VzLWJ0blxuICAgICAgICBqUXVlcnkoJyNwcmVmZXJlbmNlcy1idG4nKS5iaW5kKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgYnRuT2Zmc2V0ID0gYnV0dG9uLm9mZnNldCgpXG4gICAgICAgICAgICBib3guY3NzKHtcbiAgICAgICAgICAgICAgICAnbGVmdCc6IGJ0bk9mZnNldC5sZWZ0IC0gNTIsXG4gICAgICAgICAgICAgICAgJ3RvcCc6IGJ0bk9mZnNldC50b3AgKyAyN1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgLy8gQXMgYSBjbGljayB3aWxsIGNsb3NlIHRoZSBwdWxsZG93biwgd2UgbmVlZCB0byBhY3RpdmF0ZSB0aGUgbGluayBieSBtZWFucyBvZiBhIG1vdXNlZG93biBhbHJlYWR5LlxuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKCdtb3VzZWRvd24nLCAnI3VzZXItcHJlZmVyZW5jZXMtcHVsbGRvd24gYScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBqUXVlcnkodGhpcykuYXR0cignaHJlZicpXG4gICAgICAgIH0pXG4gICAgICAgIC8vIFNhbWUgZm9yIGZvcm0gYnV0dG9uXG4gICAgICAgIGpRdWVyeShkb2N1bWVudCkub24oJ21vdXNlZG93bicsICcjdXNlci1wcmVmZXJlbmNlcy1wdWxsZG93biBidXR0b25bdHlwZT1cInN1Ym1pdFwiXScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBqUXVlcnkodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpXG4gICAgICAgIH0pXG4gICAgfVxufVxuIl19","deps":{"../common":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/common/index.js"}},"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/index.js":{"file":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/index.js","source":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bind = undefined;\n\nvar _templates = require(\"./templates\");\n\nvar _common = require(\"../common\");\n\nvar _menu = require(\"../menu\");\n\nvar changeAvatarDialog = function changeAvatarDialog() {\n    jQuery('body').append(_templates.changeAvatarDialogTemplate);\n    var diaButtons = {};\n    diaButtons[gettext('Upload')] = function () {\n        var $form = void 0,\n            fData = void 0;\n        (0, _common.activateWait)();\n        $form = jQuery('#avatar-uploader-form');\n        fData = new window.FormData($form[0]);\n        jQuery.ajax({\n            url: '/account/avatar/upload/',\n            data: fData,\n            type: 'POST',\n            crossDomain: false, // obviates need for sameOrigin test\n            beforeSend: function beforeSend(xhr, settings) {\n                xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n            },\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            success: function success(response, textStatus, jqXHR) {\n                jQuery('#profile-avatar > img').attr('src', response.avatar);\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n                console.log(jqXHR.responseText);\n            },\n            complete: function complete() {\n                (0, _common.deactivateWait)();\n            }\n        });\n        jQuery(this).dialog('close');\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n    jQuery(\"#change-avatar-dialog\").dialog({\n        resizable: false,\n        height: 180,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n            jQuery('#avatar-uploader').bind('change', function () {\n                jQuery('#uploaded-avatar-name').html(jQuery(this).val().replace(/C:\\\\fakepath\\\\/i, ''));\n            });\n            jQuery('#upload-avatar-btn').bind('click', function () {\n                jQuery('#avatar-uploader').trigger('click');\n            });\n        },\n        close: function close() {\n            jQuery(\"#change-avatar-dialog\").dialog('destroy').remove();\n        }\n    });\n};\n\nvar deleteCurrentUser = function deleteCurrentUser() {\n    (0, _common.activateWait)();\n    jQuery.ajax({\n        url: '/account/delete/',\n        data: {},\n        type: 'POST',\n        dataType: 'json',\n        crossDomain: false, // obviates need for sameOrigin test\n        beforeSend: function beforeSend(xhr, settings) {\n            xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n        },\n        success: function success(response, textStatus, jqXHR) {\n            window.location = '/logout/';\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n            console.log(jqXHR.responseText);\n        },\n        complete: function complete() {\n            return (0, _common.deactivateWait)();\n        }\n    });\n};\n\nvar deleteAvatar = function deleteAvatar() {\n    (0, _common.activateWait)();\n    jQuery.ajax({\n        url: '/account/avatar/delete/',\n        data: {},\n        type: 'POST',\n        dataType: 'json',\n        crossDomain: false, // obviates need for sameOrigin test\n        beforeSend: function beforeSend(xhr, settings) {\n            return xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n        },\n        success: function success(response, textStatus, jqXHR) {\n            return jQuery('#profile-avatar > img').attr('src', response.avatar);\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n            return console.error(jqXHR.responseText);\n        },\n        complete: function complete() {\n            return (0, _common.deactivateWait)();\n        }\n    });\n};\n\nvar deleteAvatarDialog = function deleteAvatarDialog() {\n    jQuery('body').append(_templates.confirmDeleteAvatarTemplate);\n    var diaButtons = {};\n    diaButtons[gettext('Delete')] = function () {\n        deleteAvatar();\n        jQuery(this).dialog('close');\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n    jQuery(\"#confirmdeletion\").dialog({\n        resizable: false,\n        height: 180,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            return jQuery(\"#confirmdeletion\").dialog('destroy').remove();\n        }\n    });\n};\n\nvar saveProfile = function saveProfile() {\n    (0, _common.activateWait)();\n    var postData = {\n        'user': {\n            'username': jQuery('#username').val(),\n            'first_name': jQuery('#first_name').val(),\n            'last_name': jQuery('#last_name').val()\n        }\n    };\n    jQuery.ajax({\n        url: '/account/save/',\n        data: { 'form_data': JSON.stringify(postData) },\n        type: 'POST',\n        crossDomain: false, // obviates need for sameOrigin test\n        beforeSend: function beforeSend(xhr, settings) {\n            xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n        },\n        error: function error(jqXHR, textStatus, errorThrown) {\n            if (422 === jqXHR.status) {\n                jQuery('#edit_user').removeAttr(\"disabled\");\n                var response = jQuery.parseJSON(jqXHR.responseText);\n                jQuery.each(response.errors, function (fieldname, errmsg) {\n                    var firstError = '<span class=\"form-error-msg\">' + errmsg[0] + '</span>';\n                    jQuery('#' + fieldname).after(firstError);\n                });\n                var eMsg = gettext(\"Please check the above errors\");\n                jQuery('#emsg').text(eMsg).fadeIn('slow');\n            } else {\n                console.log(jqXHR.responseText);\n            }\n        },\n        complete: function complete() {\n            return (0, _common.deactivateWait)();\n        }\n    });\n};\n\nvar deleteUserDialog = function deleteUserDialog() {\n    var username = jQuery(this).attr('data-username');\n    jQuery('body').append(_templates.deleteUserDialogTemplate);\n    var diaButtons = {};\n    diaButtons[gettext('Delete')] = function () {\n        var usernamefieldValue = jQuery('#username-confirmation').val();\n        if (usernamefieldValue === username) {\n            deleteCurrentUser();\n            jQuery(this).dialog('close');\n        }\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n    jQuery(\"#confirmaccountdeletion\").dialog({\n        resizable: false,\n        height: 250,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            jQuery(this).dialog('destroy').remove();\n        }\n    });\n};\n\nvar changePwdDialog = function changePwdDialog() {\n    jQuery('body').append(_templates.changePwdDialogTemplate);\n    var diaButtons = {};\n    diaButtons[gettext('Submit')] = function () {\n        var oldPwd = jQuery('#old-password-input').val(),\n            newPwd1 = jQuery('#new-password-input1').val(),\n            newPwd2 = jQuery('#new-password-input2').val();\n\n        jQuery('#fw-password-change-error').html('');\n\n        if ('' === oldPwd || '' === newPwd1 || '' === newPwd2) {\n            jQuery('#fw-password-change-error').html(gettext('All fields are required!'));\n            return;\n        }\n\n        if (newPwd1 !== newPwd2) {\n            jQuery('#fw-password-change-error').html(gettext('Please confirm the new password!'));\n            return;\n        }\n\n        var formData = new window.FormData(document.getElementById('fw-password-change-form'));\n\n        (0, _common.activateWait)();\n        jQuery.ajax({\n            url: '/account/passwordchange/',\n            data: formData,\n            type: 'POST',\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            crossDomain: false, // obviates need for sameOrigin test\n            beforeSend: function beforeSend(xhr, settings) {\n                xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n            },\n            success: function success(response, textStatus, jqXHR) {\n                if (200 === jqXHR.status) {\n                    jQuery(\"#fw-change-pwd-dialog\").dialog('close');\n                    window.alert(gettext('The password has been changed.'));\n                } else {\n                    var eMsg = void 0;\n                    if (response.msg.hasOwnProperty('old_password')) {\n                        eMsg = response.msg['old_password'][0];\n                    } else if (response.msg.hasOwnProperty('new_password1')) {\n                        eMsg = response.msg['new_password1'][0];\n                    } else if (response.msg.hasOwnProperty('new_password2')) {\n                        eMsg = response.msg['new_password2'][0];\n                    } else {\n                        eMsg = gettext('The password could not be changed!');\n                    }\n                    jQuery('#fw-password-change-error').html(eMsg);\n                }\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n                jQuery('#fw-password-change-error').html(gettext('The password could not be changed!'));\n            },\n            complete: function complete() {\n                return (0, _common.deactivateWait)();\n            }\n        });\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n\n    jQuery(\"#fw-change-pwd-dialog\").dialog({\n        resizable: false,\n        height: 300,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            jQuery(this).dialog('destroy').remove();\n        }\n    });\n};\n\nvar addEmailDialog = function addEmailDialog() {\n    jQuery('body').append(_templates.changeEmailDialogTemplate);\n    var diaButtons = {};\n    diaButtons[gettext('Submit')] = function () {\n        var newEmail = jQuery('#new-profile-email').val();\n        newEmail = newEmail.replace(/(^\\s+)|(\\s+$)/g, \"\");\n\n        jQuery('#fw-add-email-error').html('');\n\n        if ('' === newEmail) {\n            jQuery('#fw-add-email-error').html(gettext('New email address is required!'));\n            return;\n        }\n\n        jQuery('#new-profile-email').val(newEmail);\n\n        var formData = new window.FormData(document.getElementById('fw-add-email-form'));\n        (0, _common.activateWait)();\n        jQuery.ajax({\n            url: '/account/emailadd/',\n            data: formData,\n            type: 'POST',\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            crossDomain: false, // obviates need for sameOrigin test\n            beforeSend: function beforeSend(xhr, settings) {\n                return xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n            },\n            success: function success(response, textStatus, jqXHR) {\n                if (200 == jqXHR.status) {\n                    jQuery('#fw-add-email-dialog').dialog('close');\n                    window.alert(gettext('Confirmation e-mail sent to ' + newEmail));\n                } else {\n                    var eMsg = response.msg['email'][0];\n                    jQuery('#fw-add-email-error').html(eMsg);\n                }\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n                jQuery('#fw-add-email-error').html(gettext('The email could not be added!'));\n            },\n            complete: function complete() {\n                return (0, _common.deactivateWait)();\n            }\n        });\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n\n    jQuery(\"#fw-add-email-dialog\").dialog({\n        resizable: false,\n        height: 230,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            jQuery(this).dialog('destroy').remove();\n        }\n    });\n};\n\nvar deleteEmailDialog = function deleteEmailDialog() {\n    var thisTr = jQuery(this).parent().parent(),\n        email = jQuery(this).data('email'),\n        diaButtons = {};\n\n    jQuery('body').append((0, _templates.deleteEmailDialogTemplate)({\n        'title': gettext('Confirm remove'),\n        'text': gettext('Remove the email address') + ': ' + email + '?'\n    }));\n\n    diaButtons[gettext('Remove')] = function () {\n        var formData = new window.FormData();\n        formData.append('email', email);\n\n        (0, _common.activateWait)();\n        jQuery.ajax({\n            url: '/account/emaildelete/',\n            data: formData,\n            type: 'POST',\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            crossDomain: false, // obviates need for sameOrigin test\n            beforeSend: function beforeSend(xhr, settings) {\n                xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n            },\n            success: function success(response, textStatus, jqXHR) {\n                if (200 == jqXHR.status) {\n                    thisTr.remove();\n                }\n                jQuery('#fw-confirm-email-dialog').dialog('close');\n                window.alert(gettext(response.msg));\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n                jQuery('#fw-confirm-email-dialog').dialog('close');\n                window.alert(gettext('The email could not be removed!'));\n            },\n            complete: function complete() {\n                return (0, _common.deactivateWait)();\n            }\n        });\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery(this).dialog('close');\n    };\n\n    jQuery(\"#fw-confirm-email-dialog\").dialog({\n        resizable: false,\n        height: 200,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            jQuery(this).dialog('destroy').remove();\n        }\n    });\n};\n\nvar changePrimaryEmailDialog = function changePrimaryEmailDialog() {\n    var primEmailRadio = jQuery('.primary-email-radio:checked'),\n        primEmailErapper = primEmailRadio.parent().parent(),\n        primEmail = primEmailRadio.val(),\n        diaButtons = {};\n\n    jQuery('body').append((0, _templates.deleteEmailDialogTemplate)({\n        'title': gettext('Confirm set primary'),\n        'text': gettext('Set the email address primary') + ': ' + primEmail + '?'\n    }));\n\n    diaButtons[gettext('Submit')] = function () {\n        var formData = new window.FormData();\n        formData.append('email', primEmail);\n\n        (0, _common.activateWait)();\n        jQuery.ajax({\n            url: '/account/emailprimary/',\n            data: formData,\n            type: 'POST',\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            crossDomain: false, // obviates need for sameOrigin test\n            beforeSend: function beforeSend(xhr, settings) {\n                return xhr.setRequestHeader(\"X-CSRFToken\", _common.csrfToken);\n            },\n            success: function success(response, textStatus, jqXHR) {\n                if (200 == jqXHR.status) {\n                    jQuery('tr.primary-email-tr span.disabled').attr('class', 'delete-email fw-link-text');\n                    primEmailErapper.find('span.delete-email.fw-link-text').attr('class', 'disabled');\n                } else {\n                    jQuery('tr.primary-email-tr .primary-email-radio').prop(\"checked\", true);\n                }\n                window.alert(gettext(response.msg));\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n                window.alert(gettext('The email could not be set primary!'));\n            },\n            complete: function complete() {\n                jQuery('#fw-confirm-email-dialog').dialog('close');\n                (0, _common.deactivateWait)();\n            }\n        });\n    };\n    diaButtons[gettext('Cancel')] = function () {\n        jQuery('tr.primary-email-tr .primary-email-radio').prop(\"checked\", true);\n        jQuery(this).dialog('close');\n    };\n\n    jQuery(\"#fw-confirm-email-dialog\").dialog({\n        resizable: false,\n        height: 180,\n        modal: true,\n        buttons: diaButtons,\n        create: function create() {\n            var theDialog = jQuery(this).closest(\".ui-dialog\");\n            theDialog.find(\".ui-button:first-child\").addClass(\"fw-button fw-dark\");\n            theDialog.find(\".ui-button:last\").addClass(\"fw-button fw-orange\");\n        },\n        close: function close() {\n            jQuery(this).dialog('destroy').remove();\n        }\n    });\n};\n\nvar bind = exports.bind = function bind() {\n    jQuery(document).ready(function () {\n        new _menu.Menu(\"\"); // Nothing highlighted\n        (0, _common.addDropdownBox)(jQuery('#edit-avatar-btn'), jQuery('#edit-avatar-pulldown'));\n        jQuery('.change-avatar').bind('mousedown', changeAvatarDialog);\n        jQuery('.delete-avatar').bind('mousedown', deleteAvatarDialog);\n        jQuery('#submit-profile').bind('click', saveProfile);\n        jQuery('#delete-account').bind('click', deleteUserDialog);\n        jQuery('#fw-edit-profile-pwd').bind('click', changePwdDialog);\n        jQuery('#add-profile-email').bind('click', addEmailDialog);\n        jQuery(document).on('click', '.delete-email', deleteEmailDialog);\n        jQuery('.primary-email-radio').bind('change', changePrimaryEmailDialog);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","deps":{"./templates":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/templates.js","../common":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/common/index.js","../menu":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/menu/index.js"}},"/home/kassawat/fiduswriter-develop/es6-cache/profile.es6.js":{"file":"/home/kassawat/fiduswriter-develop/es6-cache/profile.es6.js","source":"\"use strict\";\n\nvar _profile = require(\"./es6_modules/profile\");\n\n(0, _profile.bind)();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2ZpbGUuZXM2LmpzIl0sIm5hbWVzIjpbImJpbmQiXSwibWFwcGluZ3MiOiI7O0FBQUEsQUFBUSxBQUFSLEFBQW1CLEFBQW5COztBQUVBIiwiZmlsZSI6InByb2ZpbGUuZXM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtiaW5kfSBmcm9tIFwiLi9lczZfbW9kdWxlcy9wcm9maWxlXCJcblxuYmluZCgpXG4iXX0=","deps":{"./es6_modules/profile":"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/index.js"}}},"mtimes":{"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/templates.js":1485131707916,"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/common/index.js":1485131707908,"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/menu/index.js":1485131707904,"/home/kassawat/fiduswriter-develop/es6-cache/es6_modules/profile/index.js":1485131707916,"/home/kassawat/fiduswriter-develop/es6-cache/profile.es6.js":1485131707916},"dependentFiles":{}}