"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LayoutApplier = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _matchesSelector = require("./matches-selector");

var _cutContent = require("./cut-content");

var _pageCounters = require("./page-counters");

var _createToc = require("./create-toc");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LayoutApplier = exports.LayoutApplier = function () {
    function LayoutApplier(config) {
        _classCallCheck(this, LayoutApplier);

        this.config = config;
        this.bodyFlowObjects = [];
        //this.currentChapter = false
        //this.currentSection = false
        this.currentFragment = -1;

        /* pageCounters contains all the page counters we use in a book --
         * typically these are two -- roman for the frontmatter and arab for the main
         * body contents.
         */
        this.pageCounters = {
            arab: new _pageCounters.PageCounterArab(),
            roman: new _pageCounters.PageCounterRoman()
        };

        this.cutter = new _cutContent.ContentCutter(this.config);
    }

    _createClass(LayoutApplier, [{
        key: "initiate",
        value: function initiate() {
            // Create div for layout
            var layoutDiv = document.createElement('div'),
                flowedElement = this.config['flowFromElement'] ? this.config['flowFromElement'] : document.body,
                chapterStartSelector = this.config['chapterStartSelector'],
                sectionStartSelector = this.config['sectionStartSelector'],
                dividerSelector = chapterStartSelector + ',' + sectionStartSelector,
                dividers = flowedElement.querySelectorAll(dividerSelector),
                range = document.createRange(),
                nextChapter = false,
                nextSection = false,
                flowTo = this.config['flowToElement'] ? this.config['flowToElement'] : document.body;

            layoutDiv.id = 'pagination-layout';
            for (var i = 0; i < dividers.length; i++) {
                var _flowObject = {
                    chapter: false,
                    section: false
                };
                if (nextChapter) {
                    _flowObject.chapter = nextChapter;
                    nextChapter = false;
                }
                if (nextSection) {
                    _flowObject.section = nextSection;
                    nextSection = false;
                }
                range.setStart(flowedElement.firstChild, 0);
                range.setEnd(dividers[i], 0);
                _flowObject.fragment = range.extractContents();
                this.bodyFlowObjects.push(_flowObject);

                var extraElement = _flowObject.fragment.querySelectorAll(dividerSelector)[1];
                if (extraElement && extraElement.parentElement) {
                    extraElement.parentElement.removeChild(extraElement);
                }
                if ((0, _matchesSelector.matchesSelector)(dividers[i], chapterStartSelector)) {
                    var tempNode = flowedElement.querySelector(this.config['chapterTitleSelector']);
                    if (!tempNode) {
                        tempNode = document.createElement('div');
                    }
                    tempNode = tempNode.cloneNode(true);
                    nextChapter = document.createDocumentFragment();
                    while (tempNode.firstChild) {
                        nextChapter.appendChild(tempNode.firstChild);
                    }
                } else {
                    var _tempNode = flowedElement.querySelector(this.config['sectionTitleSelector']).cloneNode(true);
                    nextSection = document.createDocumentFragment();
                    while (_tempNode.firstChild) {
                        nextSection.appendChild(_tempNode.firstChild);
                    }
                }

                if (i === 0) {
                    if (_flowObject.fragment.textContent.trim().length === 0 && _flowObject.fragment.querySelectorAll('img,svg,canvas,hr').length === 0) {
                        this.bodyFlowObjects.pop();
                    }
                }
            }

            var flowObject = {
                chapter: false,
                section: false
            };
            if (nextChapter) {
                flowObject.chapter = nextChapter;
            }
            if (nextSection) {
                flowObject.section = nextSection;
            }

            flowObject.fragment = document.createDocumentFragment();

            while (flowedElement.firstChild) {
                flowObject.fragment.appendChild(flowedElement.firstChild);
            }

            this.bodyFlowObjects.push(flowObject);

            flowTo.appendChild(layoutDiv);

            this.paginateDivision(layoutDiv, 'arab');
        }
    }, {
        key: "paginateDivision",
        value: function paginateDivision(layoutDiv, pageCounterStyle) {
            if (++this.currentFragment < this.bodyFlowObjects.length) {
                var newContainer = document.createElement('div');
                layoutDiv.appendChild(newContainer);
                newContainer.classList.add('pagination-body');
                newContainer.classList.add('pagination-body-' + this.currentFragment);
                if (this.bodyFlowObjects[this.currentFragment].section) {
                    this.currentSection = this.bodyFlowObjects[this.currentFragment].section;
                    newContainer.classList.add('pagination-section');
                }
                if (this.bodyFlowObjects[this.currentFragment].chapter) {
                    this.currentChapter = this.bodyFlowObjects[this.currentFragment].chapter;
                    newContainer.classList.add('pagination-chapter');
                }
                this.flowElement(this.bodyFlowObjects[this.currentFragment].fragment, newContainer, pageCounterStyle, this.bodyFlowObjects[this.currentFragment].section, this.bodyFlowObjects[this.currentFragment].chapter);
            } else {
                this.currentChapter = false;
                this.currentSection = false;
                this.pageCounters[pageCounterStyle].numberPages();
                if (this.config['enableFrontmatter']) {
                    layoutDiv.insertBefore(document.createElement('div'), layoutDiv.firstChild);
                    layoutDiv.firstChild.classList.add('pagination-frontmatter');
                    var flowObject = {
                        fragment: document.createDocumentFragment()
                    };
                    if (this.config['frontmatterFlowFromElement']) {
                        var fmNode = this.config['frontmatterFlowFromElement'];
                        while (fmNode.firstChild) {
                            flowObject.fragment.appendChild(fmNode.firstChild);
                        }
                    }
                    if (this.config['numberPages']) {
                        flowObject.fragment.appendChild((0, _createToc.createToc)());
                    }
                    this.flowElement(flowObject.fragment, layoutDiv.firstChild, 'roman');
                }
            }
        }
    }, {
        key: "fillPage",
        value: function fillPage(node, container, pageCounterStyle) {

            var lastPage = this.createPage(container, pageCounterStyle),
                clonedNode = node.cloneNode(true),
                footnoteSelector = this.config['footnoteSelector'],
                topfloatSelector = this.config['topfloatSelector'],
                that = this;

            lastPage.appendChild(node);

            var overflow = this.cutter.cutToFit(lastPage);

            var topfloatsLength = lastPage.querySelectorAll(topfloatSelector).length;

            if (topfloatsLength > 0) {
                var topfloats = clonedNode.querySelectorAll(topfloatSelector);

                for (var i = 0; i < topfloatsLength; i++) {
                    while (topfloats[i].firstChild) {
                        lastPage.previousSibling.appendChild(topfloats[i].firstChild);
                    }
                }
                while (lastPage.firstChild) {
                    lastPage.removeChild(lastPage.firstChild);
                }
                node = clonedNode.cloneNode(true);
                lastPage.appendChild(node);
                overflow = this.cutter.cutToFit(lastPage);
            }

            var footnotes = lastPage.querySelectorAll(footnoteSelector);
            var footnotesLength = footnotes.length;
            if (footnotesLength > 0) {

                while (lastPage.nextSibling.firstChild) {
                    lastPage.nextSibling.removeChild(lastPage.nextSibling.firstChild);
                }

                for (var _i = 0; _i < footnotesLength; _i++) {
                    var clonedFootnote = footnotes[_i].cloneNode(true);
                    lastPage.nextSibling.appendChild(clonedFootnote);
                }

                while (lastPage.firstChild) {
                    lastPage.removeChild(lastPage.firstChild);
                }

                lastPage.appendChild(clonedNode);

                overflow = this.cutter.cutToFit(lastPage);
                for (var _i2 = lastPage.querySelectorAll(footnoteSelector).length; _i2 < footnotesLength; _i2++) {
                    var oldFn = lastPage.nextSibling.children[_i2];

                    while (oldFn.firstChild) {
                        oldFn.removeChild(oldFn.firstChild);
                    }
                }
            }

            if (overflow.firstChild && overflow.firstChild.textContent.trim().length === 0 && ['P', 'DIV'].indexOf(overflow.firstChild.nodeName) !== -1) {
                overflow.removeChild(overflow.firstChild);
            }

            if (lastPage.firstChild && lastPage.firstChild.nodeType != 3 && lastPage.firstChild.textContent.trim().length === 0 && lastPage.firstChild.querySelectorAll('img,svg,canvas').length === 0) {
                lastPage.removeChild(lastPage.firstChild);
            } else if (overflow.firstChild && lastPage.firstChild) {
                setTimeout(function () {
                    that.fillPage(overflow, container, pageCounterStyle);
                }, 1);
            } else {
                this.finish(container, pageCounterStyle);
            }
        }
    }, {
        key: "createPage",
        value: function createPage(container, pageCounterClass) {
            var page = document.createElement('div'),
                contentsContainer = document.createElement('div'),
                mainContentsContainer = document.createElement('div'),
                topfloats = document.createElement('div'),
                contents = document.createElement('div'),
                footnotes = document.createElement('div');

            page.classList.add('pagination-page');
            contentsContainer.classList.add('pagination-contents-container');
            mainContentsContainer.classList.add('pagination-main-contents-container');

            if (this.currentChapter || this.currentSection) {

                var header = document.createElement('div');

                header.classList.add('pagination-header');

                if (this.currentChapter) {

                    var chapterHeader = document.createElement('span');

                    chapterHeader.classList.add('pagination-header-chapter');
                    chapterHeader.appendChild(this.currentChapter.cloneNode(true));
                    header.appendChild(chapterHeader);
                }

                if (this.currentSection) {

                    var sectionHeader = document.createElement('span');
                    sectionHeader.classList.add('pagination-header-section');
                    sectionHeader.appendChild(this.currentSection.cloneNode(true));
                    header.appendChild(sectionHeader);
                }
                page.appendChild(header);
            }

            topfloats.classList.add('pagination-topfloats');
            //topfloats.appendChild(document.createElement('p'))

            contents.classList.add('pagination-contents');

            footnotes.classList.add('pagination-footnotes');
            footnotes.appendChild(document.createElement('p'));

            mainContentsContainer.appendChild(topfloats);
            mainContentsContainer.appendChild(contents);
            mainContentsContainer.appendChild(footnotes);

            page.appendChild(mainContentsContainer);

            if (this.config['numberPages']) {

                var pagenumberField = document.createElement('div');
                pagenumberField.classList.add('pagination-pagenumber');
                pagenumberField.classList.add('pagination-' + pageCounterClass);

                page.appendChild(pagenumberField);
            }

            container.appendChild(page);
            return contents;
        }
    }, {
        key: "flowElement",
        value: function flowElement(overflow, container, pageCounterStyle) {
            var that = this;
            setTimeout(function () {
                that.fillPage(overflow, container, pageCounterStyle);
            }, 1);
        }
    }, {
        key: "finish",
        value: function finish(container, pageCounterStyle) {
            var layoutDiv = container.parentElement;
            if (this.config['alwaysEven'] && container.querySelectorAll('.pagination-page').length % 2 === 1) {
                this.createPage(container, pageCounterStyle);
            }
            if (container.classList.contains('pagination-body')) {
                this.paginateDivision(layoutDiv, pageCounterStyle);
                if (this.bodyFlowObjects.length === this.currentFragment && this.config['enableFrontmatter'] === false) {
                    this.config['callback']();
                }
            } else {
                this.pageCounters[pageCounterStyle].numberPages();
                this.config['callback']();
            }
        }
    }]);

    return LayoutApplier;
}();