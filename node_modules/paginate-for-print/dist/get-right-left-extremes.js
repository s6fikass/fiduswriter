"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRightLeftExtremes = getRightLeftExtremes;
// Chrome/Firefox (+ possibly others) currently have issues when trying to find the real coordinates of elements when in multicol.
// This is a workaround that uses a range over the elements contents and combines all client rects around it.

function getRightLeftExtremes(node) {
    var extremes = arguments.length <= 1 || arguments[1] === undefined ? { left: 10000, right: 0 } : arguments[1];

    if (node.nodeType === 1) {
        // element node
        var rect = node.getBoundingClientRect();
        if (rect.bottom !== rect.top) {
            // node that occupies screen space
            extremes.left = Math.min(extremes.left, rect.left);
            extremes.right = Math.max(extremes.right, rect.right);
        }
        for (var i = 0; i < node.childNodes.length; i++) {
            extremes = getRightLeftExtremes(node.childNodes[i], extremes);
        }
    } else if (node.nodeType === 3) {
        // text node
        var r = document.createRange();
        r.setStart(node, 0);
        r.setEnd(node, node.length);
        var _rect = r.getBoundingClientRect();
        if (_rect.bottom !== _rect.top) {
            // node that occupies screen space
            extremes.left = Math.min(extremes.left, _rect.left);
            extremes.right = Math.max(extremes.right, _rect.right);
        }
    }

    return extremes;
}