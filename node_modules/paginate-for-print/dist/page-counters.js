'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageCounterArab = exports.PageCounterArab = function () {
    // arab is the page counter used by the main body contents.

    /* Create a pagecounter. cssClass is the CSS class employed by this page
     * counter to mark all page numbers associated with it.
     */
    function PageCounterArab() {
        _classCallCheck(this, PageCounterArab);

        this.cssClass = 'arab';
        this.counterValue = 0;
    }

    _createClass(PageCounterArab, [{
        key: 'show',
        value: function show() {
            /* Standard show function for page counter is to show the value itself
             * using arabic numbers.
             */
            return this.counterValue;
        }
    }, {
        key: 'incrementAndShow',
        value: function incrementAndShow() {
            /* Increment the page count by one and return the reuslt page count
             * using the show function.
             */
            this.counterValue++;
            return this.show();
        }
    }, {
        key: 'numberPages',
        value: function numberPages() {
            /* If the pages associated with this page counter need to be updated,
             * go through all of them from the start of the book and number them,
             * thereby potentially removing old page numbers.
             */
            this.counterValue = 0;

            var pagenumbersToNumber = document.querySelectorAll('.pagination-page .pagination-pagenumber.pagination-' + this.cssClass);
            for (var i = 0; i < pagenumbersToNumber.length; i++) {
                pagenumbersToNumber[i].innerHTML = this.incrementAndShow();
            }
        }
    }]);

    return PageCounterArab;
}();

var PageCounterRoman = exports.PageCounterRoman = function (_PageCounterArab) {
    _inherits(PageCounterRoman, _PageCounterArab);

    // roman is the page counter used by the frontmatter.
    function PageCounterRoman() {
        _classCallCheck(this, PageCounterRoman);

        var _this = _possibleConstructorReturn(this, (PageCounterRoman.__proto__ || Object.getPrototypeOf(PageCounterRoman)).call(this));

        _this.cssClass = 'roman';
        return _this;
    }

    _createClass(PageCounterRoman, [{
        key: 'show',
        value: function show() {
            // Create roman numeral representations of numbers.
            var digits = String(+this.counterValue).split(""),
                key = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"],
                roman = "",
                i = 3;
            while (i--) {
                roman = (key[+digits.pop() + i * 10] || "") + roman;
            }
            return new Array(+digits.join("") + 1).join("M") + roman;
        }
    }]);

    return PageCounterRoman;
}(PageCounterArab);