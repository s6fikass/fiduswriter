'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BibLatexNameParser = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _literalParser = require('./literal-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BibLatexNameParser = exports.BibLatexNameParser = function () {
    function BibLatexNameParser(nameString) {
        (0, _classCallCheck3.default)(this, BibLatexNameParser);

        this.nameString = nameString;
        this.nameDict = {};
        this._particle = [];
        this._suffix = [];
    }

    (0, _createClass3.default)(BibLatexNameParser, [{
        key: 'parseName',
        value: function parseName() {
            var parts = this.splitTexString(this.nameString, ',');
            if (parts.length > 1 && this.nameString.includes('=')) {
                // extended name detected.
                this.parseExtendedName(parts);
            } else if (parts.length === 3) {
                // von Last, Jr, First
                this.processVonLast(this.splitTexString(parts[0]), this.splitTexString(parts[1]));
                this.processFirstMiddle(this.splitTexString(parts[2]));
            } else if (parts.length === 2) {
                // von Last, First
                this.processVonLast(this.splitTexString(parts[0]));
                this.processFirstMiddle(this.splitTexString(parts[1]));
            } else if (parts.length === 1) {
                // First von Last
                var spacedParts = this.splitTexString(this.nameString);
                if (spacedParts.length === 1) {
                    this.nameDict['literal'] = this._reformLiteral(spacedParts[0].trim());
                } else {
                    var split = this.splitAt(spacedParts);
                    var firstMiddle = split[0];
                    var vonLast = split[1];
                    if (vonLast.length === 0 && firstMiddle.length > 1) {
                        var last = firstMiddle.pop();
                        vonLast.push(last);
                    }
                    this.processFirstMiddle(firstMiddle);
                    this.processVonLast(vonLast);
                }
            } else {
                this.nameDict['literal'] = this._reformLiteral(this.nameString.trim());
            }
        }
    }, {
        key: 'parseExtendedName',
        value: function parseExtendedName(parts) {
            var _this = this;

            var that = this;
            parts.forEach(function (part) {
                var attrParts = part.trim().replace(/^\"|\"$/g, '').split('=');
                var attrName = attrParts.shift().trim().toLowerCase();
                if (['family', 'given', 'prefix', 'suffix'].includes(attrName)) {
                    _this.nameDict[attrName] = that._reformLiteral(attrParts.join('=').trim());
                } else if (attrName === 'useprefix') {
                    if (attrParts.join('').trim().toLowerCase() === 'true') {
                        _this.nameDict['useprefix'] = true;
                    } else {
                        _this.nameDict['useprefix'] = false;
                    }
                }
            });
        }
    }, {
        key: 'splitTexString',
        value: function splitTexString(string) {
            var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '[\\s~]+';

            var braceLevel = 0;
            var inQuotes = false;
            var nameStart = 0;
            var result = [];
            var stringLen = string.length;
            var pos = 0;
            while (pos < stringLen) {
                var char = string.charAt(pos);
                switch (char) {
                    case '{':
                        braceLevel += 1;
                        break;
                    case '}':
                        braceLevel -= 1;
                        break;
                    case '"':
                        inQuotes = !inQuotes;
                        break;
                    case '\\':
                        // skip next
                        pos++;
                        break;
                    default:
                        if (braceLevel === 0 && inQuotes === false && pos > 0) {
                            var match = string.slice(pos).match(RegExp('^' + sep));
                            if (match) {
                                var sepLen = match[0].length;
                                if (pos + sepLen < stringLen) {
                                    result.push(string.slice(nameStart, pos));
                                    nameStart = pos + sepLen;
                                }
                            }
                        }
                }

                pos++;
            }
            if (nameStart < stringLen) {
                result.push(string.slice(nameStart));
            }
            return result;
        }
    }, {
        key: 'processFirstMiddle',
        value: function processFirstMiddle(parts) {
            this.nameDict['given'] = this._reformLiteral(parts.join(' ').trim());
        }
    }, {
        key: 'processVonLast',
        value: function processVonLast(parts) {
            var lineage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var rSplit = this.rsplitAt(parts);
            var von = rSplit[0];
            var last = rSplit[1];
            if (von && !last) {
                last.push(von.pop());
            }
            if (von.length) {
                this.nameDict['prefix'] = this._reformLiteral(von.join(' ').trim());
                this.nameDict['useprefix'] = true; // The info at hand is not clear, so we guess.
            }
            if (lineage.length) {
                this.nameDict['suffix'] = this._reformLiteral(lineage.join(' ').trim());
            }
            this.nameDict['family'] = this._reformLiteral(last.join(' ').trim());
        }
    }, {
        key: 'findFirstLowerCaseWord',
        value: function findFirstLowerCaseWord(lst) {
            // return index of first lowercase word in lst. Else return length of lst.
            for (var i = 0; i < lst.length; i++) {
                var word = lst[i];
                if (word === word.toLowerCase()) {
                    return i;
                }
            }
            return lst.length;
        }
    }, {
        key: 'splitAt',
        value: function splitAt(lst) {
            // Split the given list into two parts.
            // The second part starts with the first lowercase word.
            var pos = this.findFirstLowerCaseWord(lst);
            return [lst.slice(0, pos), lst.slice(pos)];
        }
    }, {
        key: 'rsplitAt',
        value: function rsplitAt(lst) {
            var rpos = this.findFirstLowerCaseWord(lst.slice().reverse());
            var pos = lst.length - rpos;
            return [lst.slice(0, pos), lst.slice(pos)];
        }
    }, {
        key: '_reformLiteral',
        value: function _reformLiteral(litString) {
            var parser = new _literalParser.BibLatexLiteralParser(litString);
            return parser.output;
        }
    }, {
        key: 'output',
        get: function get() {
            this.parseName();
            return this.nameDict;
        }
    }]);
    return BibLatexNameParser;
}();