'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _iterator = require('babel-runtime/core-js/symbol/iterator');

var _iterator2 = _interopRequireDefault(_iterator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require('assert');
var ExtDate = require('./date');
var ExtDateTime = require('./interface');

var V = new _weakMap2.default();

var Interval = function (_ExtDateTime) {
  (0, _inherits3.default)(Interval, _ExtDateTime);

  function Interval() {
    (0, _classCallCheck3.default)(this, Interval);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Interval.__proto__ || (0, _getPrototypeOf2.default)(Interval)).call(this));

    V.set(_this, [null, null]);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    switch (args.length) {
      case 2:
        _this.lower = args[0];
        _this.upper = args[1];

        break;

      case 1:
        switch ((0, _typeof3.default)(args[0])) {
          case 'string':
            args[0] = Interval.parse(args[0]);
          // eslint-disable-line no-fallthrough

          case 'object':
            if (Array.isArray(args[0])) args[0] = { values: args[0] };

            {
              var obj = args[0];


              assert(obj !== null);
              if (obj.type) assert.equal('Interval', obj.type);

              assert(obj.values);
              assert(obj.values.length < 3);
              var _obj$values = (0, _slicedToArray3.default)(obj.values, 2);

              _this.lower = _obj$values[0];
              _this.upper = _obj$values[1];


              _this.earlier = obj.earlier;
              _this.later = obj.later;
            }
            break;

          default:
            _this.lower = args[0];
        }
        break;

      case 0:
        break;

      default:
        throw new RangeError('invalid interval value: ' + args);
    }
    return _this;
  }

  (0, _createClass3.default)(Interval, [{
    key: _iterator2.default,
    value: _regenerator2.default.mark(function value() {
      return _regenerator2.default.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (this.finite) {
                _context.next = 2;
                break;
              }

              throw Error('cannot iterate infinite interval');

            case 2:
              return _context.delegateYield(this.lower.through(this.upper), 't0', 3);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, value, this);
    })
  }, {
    key: 'toEDTF',
    value: function toEDTF() {
      return this.values.map(function (v) {
        if (!v) return '';
        if (v === Infinity) return '*';
        return v.edtf;
      }).join('/');
    }
  }, {
    key: 'lower',
    get: function get() {
      return this.values[0];
    },
    set: function set(value) {
      if (value == null) return this.values[1] = null;

      if (value === Infinity || value === -Infinity) return this.values[1] = Infinity;

      value = ExtDate.from(value);

      if (value >= this.upper && this.upper != null) throw new RangeError('invalid lower bound: ' + value);

      this.values[0] = value;
    }
  }, {
    key: 'upper',
    get: function get() {
      return this.values[1];
    },
    set: function set(value) {
      if (value == null) return this.values[1] = null;

      if (value === Infinity) return this.values[1] = Infinity;

      value = ExtDate.from(value);

      if (value <= this.lower) throw new RangeError('invalid upper bound: ' + value);

      this.values[1] = value;
    }
  }, {
    key: 'finite',
    get: function get() {
      return this.lower != null && this.lower !== Infinity && this.upper != null && this.upper !== Infinity;
    }
  }, {
    key: 'values',
    get: function get() {
      return V.get(this);
    }
  }, {
    key: 'min',
    get: function get() {
      var v = this.lower;
      return !v ? null : v === Infinity ? -Infinity : v.min;
    }
  }, {
    key: 'max',
    get: function get() {
      var v = this.upper;
      return !v ? null : v === Infinity ? Infinity : v.max;
    }
  }]);
  return Interval;
}(ExtDateTime);

module.exports = Interval;