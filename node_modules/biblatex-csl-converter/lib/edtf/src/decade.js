'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require('assert');
var ExtDate = require('./date');
var ExtDateTime = require('./interface');
var abs = Math.abs,
    floor = Math.floor;


var V = new _weakMap2.default();

var Decade = function (_ExtDateTime) {
  (0, _inherits3.default)(Decade, _ExtDateTime);

  function Decade(input) {
    (0, _classCallCheck3.default)(this, Decade);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Decade.__proto__ || (0, _getPrototypeOf2.default)(Decade)).call(this));

    V.set(_this, []);

    _this.uncertain = false;
    _this.approximate = false;

    switch (typeof input === 'undefined' ? 'undefined' : (0, _typeof3.default)(input)) {
      case 'number':
        _this.decade = input;
        break;

      case 'string':
        input = Decade.parse(input);
      // eslint-disable-line no-fallthrough

      case 'object':
        if (Array.isArray(input)) input = { values: input };

        {
          assert(input !== null);
          if (input.type) assert.equal('Decade', input.type);

          assert(input.values);
          assert(input.values.length === 1);

          _this.decade = input.values[0];
          _this.uncertain = !!input.uncertain;
          _this.approximate = !!input.approximate;
        }
        break;

      case 'undefined':
        _this.year = new Date().getUTCFullYear();
        break;

      default:
        throw new RangeError('Invalid decade value');
    }
    return _this;
  }

  (0, _createClass3.default)(Decade, [{
    key: 'toEDTF',
    value: function toEDTF() {
      var decade = Decade.pad(this.decade);

      if (this.uncertain) decade = decade + '?';

      if (this.approximate) decade = (decade + '~').replace(/\?~/, '%');

      return decade;
    }
  }, {
    key: 'decade',
    get: function get() {
      return this.values[0];
    },
    set: function set(decade) {
      decade = floor(Number(decade));
      assert(abs(decade) < 1000, 'invalid decade: ' + decade);
      return this.values[0] = decade;
    }
  }, {
    key: 'year',
    get: function get() {
      return this.values[0] * 10;
    },
    set: function set(year) {
      return this.decade = year / 10;
    }
  }, {
    key: 'values',
    get: function get() {
      return V.get(this);
    }
  }, {
    key: 'min',
    get: function get() {
      return ExtDate.UTC(this.year, 0);
    }
  }, {
    key: 'max',
    get: function get() {
      return ExtDate.UTC(this.year + 10, 0) - 1;
    }
  }], [{
    key: 'pad',
    value: function pad(number) {
      var k = abs(number);
      var sign = k === number ? '' : '-';

      if (k < 10) return sign + '00' + k;
      if (k < 100) return sign + '0' + k;

      return '' + number;
    }
  }]);
  return Decade;
}(ExtDateTime);

module.exports = Decade;