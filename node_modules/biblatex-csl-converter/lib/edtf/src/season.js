'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require('assert');
var ExtDateTime = require('./interface');

var _require = require('./date'),
    pad = _require.pad;

var V = new _weakMap2.default();

var Season = function (_ExtDateTime) {
  (0, _inherits3.default)(Season, _ExtDateTime);

  function Season(input) {
    (0, _classCallCheck3.default)(this, Season);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Season.__proto__ || (0, _getPrototypeOf2.default)(Season)).call(this));

    V.set(_this, []);

    switch (typeof input === 'undefined' ? 'undefined' : (0, _typeof3.default)(input)) {
      case 'number':
        _this.year = input;
        _this.season = arguments[1] || 21;
        break;

      case 'string':
        input = Season.parse(input);
      // eslint-disable-line no-fallthrough

      case 'object':
        if (Array.isArray(input)) input = { values: input };

        {
          assert(input !== null);
          if (input.type) assert.equal('Season', input.type);

          assert(input.values);
          assert.equal(2, input.values.length);

          _this.year = input.values[0];
          _this.season = input.values[1];
        }
        break;

      case 'undefined':
        _this.year = new Date().getUTCFullYear();
        _this.season = 21;
        break;

      default:
        throw new RangeError('Invalid season value');
    }
    return _this;
  }

  (0, _createClass3.default)(Season, [{
    key: 'toEDTF',
    value: function toEDTF() {
      return pad(this.year) + '-' + this.season;
    }
  }, {
    key: 'year',
    get: function get() {
      return this.values[0];
    },
    set: function set(year) {
      return this.values[0] = Number(year);
    }
  }, {
    key: 'season',
    get: function get() {
      return this.values[1];
    },
    set: function set(season) {
      return this.values[1] = Number(season);
    }
  }, {
    key: 'values',
    get: function get() {
      return V.get(this);
    }

    // TODO next/prev

  }, {
    key: 'min',
    get: function get() {
      // eslint-disable-line complexity
      switch (this.season) {
        case 21:
        case 25:
        case 32:
        case 33:
        case 40:
        case 37:
          return ExtDateTime.UTC(this.year, 0);

        case 22:
        case 26:
        case 31:
        case 34:
          return ExtDateTime.UTC(this.year, 3);

        case 23:
        case 27:
        case 30:
        case 35:
        case 41:
          return ExtDateTime.UTC(this.year, 6);

        case 24:
        case 28:
        case 29:
        case 36:
          return ExtDateTime.UTC(this.year, 9);

        case 38:
          return ExtDateTime.UTC(this.year, 4);

        case 39:
          return ExtDateTime.UTC(this.year, 8);

        default:
          return ExtDateTime.UTC(this.year, 0);
      }
    }
  }, {
    key: 'max',
    get: function get() {
      // eslint-disable-line complexity
      switch (this.season) {
        case 21:
        case 25:
        case 32:
        case 33:
          return ExtDateTime.UTC(this.year, 3) - 1;

        case 22:
        case 26:
        case 31:
        case 34:
        case 40:
          return ExtDateTime.UTC(this.year, 6) - 1;

        case 23:
        case 27:
        case 30:
        case 35:
          return ExtDateTime.UTC(this.year, 9) - 1;

        case 24:
        case 28:
        case 29:
        case 36:
        case 41:
        case 39:
          return ExtDateTime.UTC(this.year + 1, 0) - 1;

        case 37:
          return ExtDateTime.UTC(this.year, 5) - 1;

        case 38:
          return ExtDateTime.UTC(this.year, 9) - 1;

        default:
          return ExtDateTime.UTC(this.year + 1, 0) - 1;
      }
    }
  }]);
  return Season;
}(ExtDateTime);

module.exports = Season;