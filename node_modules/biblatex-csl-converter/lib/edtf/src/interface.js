'use strict';

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _iterator2 = require('babel-runtime/core-js/symbol/iterator');

var _iterator3 = _interopRequireDefault(_iterator2);

var _toPrimitive = require('babel-runtime/core-js/symbol/to-primitive');

var _toPrimitive2 = _interopRequireDefault(_toPrimitive);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('./parser'),
    _parse = _require.parse;

var ExtDateTime = function () {
  function ExtDateTime() {
    (0, _classCallCheck3.default)(this, ExtDateTime);
  }

  (0, _createClass3.default)(ExtDateTime, [{
    key: 'toJSON',
    value: function toJSON() {
      return this.toEDTF();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.toEDTF();
    }
  }, {
    key: 'toLocaleString',
    value: function toLocaleString() {
      return this.localize.apply(this, arguments);
    }
  }, {
    key: 'inspect',
    value: function inspect() {
      return this.toEDTF();
    }
  }, {
    key: 'valueOf',
    value: function valueOf() {
      return this.min;
    }
  }, {
    key: _toPrimitive2.default,
    value: function value(hint) {
      return hint === 'number' ? this.valueOf() : this.toEDTF();
    }
  }, {
    key: 'covers',
    value: function covers(other) {
      return this.min <= other.min && this.max >= other.max;
    }
  }, {
    key: 'compare',
    value: function compare(other) {
      if (other.min == null || other.max == null) return null;

      var _ref = [this.min, this.max, other.min, other.max],
          a = _ref[0],
          x = _ref[1],
          b = _ref[2],
          y = _ref[3];


      if (a !== b) return a < b ? -1 : 1;

      if (x !== y) return x < y ? -1 : 1;

      return 0;
    }
  }, {
    key: 'includes',
    value: function includes(other) {
      var covered = this.covers(other);
      if (!covered || !this[_iterator3.default]) return covered;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(this), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cur = _step.value;

          if (cur.edtf === other.edtf) return true;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }, {
    key: 'type',
    get: function get() {
      return this.constructor.type;
    }
  }, {
    key: 'edtf',
    get: function get() {
      return this.toEDTF();
    }
  }], [{
    key: 'parse',
    value: function parse(input) {
      return _parse(input, { types: [this.type] });
    }
  }, {
    key: 'from',
    value: function from(input) {
      return input instanceof this ? input : new this(input);
    }
  }, {
    key: 'UTC',
    value: function UTC() {
      var time = Date.UTC.apply(Date, arguments);

      // ECMA Date constructor converts 0-99 to 1900-1999!
      if ((arguments.length <= 0 ? undefined : arguments[0]) >= 0 && (arguments.length <= 0 ? undefined : arguments[0]) < 100) time = adj(new Date(time));

      return time;
    }
  }, {
    key: 'type',
    get: function get() {
      return this.name;
    }
  }]);
  return ExtDateTime;
}();

function adj(date) {
  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1900;

  date.setUTCFullYear(date.getUTCFullYear() - by);
  return date.getTime();
}

module.exports = ExtDateTime;