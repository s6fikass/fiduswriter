'use strict';

var nearley = require('nearley');
var grammar = require('./grammar');

function byLevel(a, b) {
  return a.level < b.level ? -1 : a.level > b.level ? 1 : 0;
}

function limit(results, _ref) {
  var level = _ref.level,
      types = _ref.types;

  if (!results.length) return results;
  if (typeof level !== 'number') level = 2;

  return results.filter(function (res) {
    return level >= res.level && (!types || types.includes(res.type));
  });
}

function best(results) {
  if (results.length < 2) return results[0];

  // If there are multiple results, pick the first
  // one on the lowest level!
  return results.sort(byLevel)[0];
}

module.exports = {
  parse: function parse(input) {
    var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    try {
      var nep = module.exports.parser();
      var res = best(limit(nep.feed(input).results, constraints));

      if (!res) throw new Error('edtf: No possible parsings (@EOS)');

      return res;
    } catch (error) {
      error.message += ' for "' + input + '"';
      throw error;
    }
  },
  parser: function parser() {
    return new nearley.Parser(grammar.ParserRules, grammar.ParserStart);
  }
};