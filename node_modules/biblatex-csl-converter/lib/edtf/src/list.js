'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _iterator3 = require('babel-runtime/core-js/symbol/iterator');

var _iterator4 = _interopRequireDefault(_iterator3);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require('assert');
var Date = require('./date');
var ExtDateTime = require('./interface');
var isArray = Array.isArray;


var V = new _weakMap2.default();

var List = function (_ExtDateTime) {
  (0, _inherits3.default)(List, _ExtDateTime);

  function List() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    (0, _classCallCheck3.default)(this, List);

    var _this = (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).call(this));

    V.set(_this, []);

    if (args.length > 1) args = [args];

    if (args.length) {
      switch ((0, _typeof3.default)(args[0])) {
        case 'string':
          args[0] = new.target.parse(args[0]);
        // eslint-disable-line no-fallthrough

        case 'object':
          if (isArray(args[0])) args[0] = { values: args[0] };

          {
            var _args = args,
                _args2 = (0, _slicedToArray3.default)(_args, 1),
                obj = _args2[0];

            assert(obj !== null);
            if (obj.type) assert.equal(_this.type, obj.type);

            assert(obj.values);
            _this.concat.apply(_this, (0, _toConsumableArray3.default)(obj.values));
          }
          break;

        default:
          throw new RangeError('invalid ' + _this.type + ' value: ' + args);
      }
    }
    return _this;
  }

  (0, _createClass3.default)(List, [{
    key: 'clear',
    value: function clear() {
      return this.values.length = 0, this;
    }
  }, {
    key: 'concat',
    value: function concat() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(args), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var value = _step.value;
          this.push(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'push',
    value: function push(value) {
      if (isArray(value)) {
        assert.equal(2, value.length);
        return this.values.push(value.map(function (v) {
          return Date.from(v);
        }));
      }

      return this.values.push(Date.from(value));
    }
  }, {
    key: _iterator4.default,
    value: _regenerator2.default.mark(function value() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, value;

      return _regenerator2.default.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 3;
              _iterator2 = (0, _getIterator3.default)(this.values);

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 16;
                break;
              }

              value = _step2.value;

              if (!isArray(value)) {
                _context.next = 11;
                break;
              }

              return _context.delegateYield(value[0].through(value[1]), 't0', 9);

            case 9:
              _context.next = 13;
              break;

            case 11:
              _context.next = 13;
              return value;

            case 13:
              _iteratorNormalCompletion2 = true;
              _context.next = 5;
              break;

            case 16:
              _context.next = 22;
              break;

            case 18:
              _context.prev = 18;
              _context.t1 = _context['catch'](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t1;

            case 22:
              _context.prev = 22;
              _context.prev = 23;

              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }

            case 25:
              _context.prev = 25;

              if (!_didIteratorError2) {
                _context.next = 28;
                break;
              }

              throw _iteratorError2;

            case 28:
              return _context.finish(25);

            case 29:
              return _context.finish(22);

            case 30:
            case 'end':
              return _context.stop();
          }
        }
      }, value, this, [[3, 18, 22, 30], [23,, 25, 29]]);
    })
  }, {
    key: 'content',
    value: function content() {
      return this.values.map(function (v) {
        return isArray(v) ? v.map(function (d) {
          return d.edtf;
        }).join('..') : v.edtf;
      }).join(',');
    }
  }, {
    key: 'toEDTF',
    value: function toEDTF() {
      return '{' + this.content() + '}';
    }
  }, {
    key: 'values',
    get: function get() {
      return V.get(this);
    }
  }, {
    key: 'length',
    get: function get() {
      return this.values.length;
    }
  }, {
    key: 'empty',
    get: function get() {
      return this.length === 0;
    }
  }, {
    key: 'first',
    get: function get() {
      var value = this.values[0];
      return isArray(value) ? value[0] : value;
    }
  }, {
    key: 'last',
    get: function get() {
      var value = this.values[this.length - 1];
      return isArray(value) ? value[0] : value;
    }
  }, {
    key: 'min',
    get: function get() {
      return this.empty ? 0 : this.first.min;
    }
  }, {
    key: 'max',
    get: function get() {
      return this.empty ? 0 : this.last.max;
    }
  }]);
  return List;
}(ExtDateTime);

module.exports = List;