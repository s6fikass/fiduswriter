'use strict';

var _require = require('..'),
    Year = _require.Year;

describe('Year', function () {

  it('type', function () {
    expect(Year.type).to.eql('Year');
    expect(new Year().type).to.eql('Year');
  });

  it('.from()', function () {
    expect(Year.from('Y22016')).to.be.instanceof(Year);
  });

  describe('bounds', function () {
    it('min', function () {
      expect(new Year(-1).min).to.eql(Date.UTC(-1, 0, 1, 0, 0, 0, 0));
    });

    it('max', function () {
      expect(new Year(-1).max).to.eql(Date.UTC(-1, 11, 31, 23, 59, 59, 999));
    });
  });

  describe('.edtf', function () {
    it('default', function () {
      return expect(new Year().edtf).to.match(/^\d\d\d\d$/);
    });

    it('YYYY', function () {
      expect(new Year(2015).edtf).to.eql('2015');
      expect(new Year(-1).edtf).to.eql('-0001');
    });

    it('YYYYYY', function () {
      expect(new Year(12015).edtf).to.eql('Y12015');
      expect(new Year(-10001).edtf).to.eql('Y-10001');
    });

    it('YYYYS2', function () {
      expect(new Year({ values: [2015], significant: 2 }).edtf).to.eql('2015S2');
      expect(new Year({ values: [-24], significant: 2 }).edtf).to.eql('-0024S2');
    });

    it('YYYYYYSD', function () {
      expect(new Year({ values: [12345], significant: 1 }).edtf).to.eql('Y12345S1');
    });
  });
});