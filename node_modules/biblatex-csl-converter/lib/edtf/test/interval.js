'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('..'),
    Interval = _require.Interval,
    Date = _require.Date;

describe('Interval', function () {

  it('.type', function () {
    expect(Interval.type).to.eql('Interval');
    expect(new Interval().type).to.eql('Interval');
  });

  it('.from()', function () {
    expect(Interval.from('2016/2017')).to.be.instanceof(Interval);
  });

  describe('bounds', function () {
    it('min', function () {
      expect(new Interval([2001], [2003]).min).to.eql(Date.UTC(2001, 0, 1, 0, 0, 0, 0));
    });

    it('max', function () {
      expect(new Interval([2001], [2003]).max).to.eql(Date.UTC(2003, 11, 31, 23, 59, 59, 999));
    });
  });

  describe('invalid', function () {
    it('bounds', function () {
      expect(function () {
        return new Interval([2001], [2000]);
      }).to.throw(RangeError);
    });
  });

  describe('iteration', function () {
    var Q1_94 = new Interval([1994, 0], [1994, 2]);
    var FEB_94 = new Date(1994, 1);
    var FEB1_94 = new Date(1994, 1, 1);
    var YEAR_94 = new Date([1994]);

    it('@@iterator', function () {
      expect([].concat((0, _toConsumableArray3.default)(new Interval([2001], [2003]))).map(function (v) {
        return v.edtf;
      })).to.eql(['2001', '2002', '2003']);

      expect([].concat((0, _toConsumableArray3.default)(Q1_94)).map(function (v) {
        return v.edtf;
      })).to.eql(['1994-01', '1994-02', '1994-03']);
    });

    it('covers', function () {
      expect(Q1_94.covers(FEB_94)).to.be.true;
      expect(Q1_94.covers(FEB1_94)).to.be.true;
      expect(Q1_94.covers(YEAR_94)).not.to.be.true;
    });

    it('includes', function () {
      expect(Q1_94.includes(FEB_94)).to.be.true;
      expect(Q1_94.includes(FEB1_94)).not.to.be.true;
      expect(Q1_94.includes(YEAR_94)).not.to.be.true;
    });
  });

  describe('.edtf', function () {
    it('default', function () {
      return expect(new Interval().edtf).to.eql('/');
    });
  });
});