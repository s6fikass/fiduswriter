'use strict';

var _require = require('..'),
    Century = _require.Century,
    Date = _require.Date;

describe('Century', function () {

  describe('.edtf', function () {
    it('default', function () {
      return expect(new Century().edtf).to.match(/^\d\d$/);
    });

    it('CC', function () {
      expect(new Century([20]).edtf).to.eql('20');
      expect(new Century(1).edtf).to.eql('01');
      expect(new Century(0).edtf).to.eql('00');
    });

    it('-CC', function () {
      expect(new Century(-9).edtf).to.eql('-09');
      expect(new Century(-19).edtf).to.eql('-19');
    });

    it('CC~', function () {
      expect(new Century({ values: [19], approximate: true }).edtf).to.eql('19~');
    });
  });

  describe('bounds', function () {
    it('min', function () {
      expect(new Century(20).min).to.eql(Date.UTC(2000, 0, 1, 0, 0, 0, 0));

      expect(new Century(0).min).to.eql(Date.UTC(0, 0, 1, 0, 0, 0, 0));
    });

    it('max', function () {
      expect(new Century(20).max).to.eql(Date.UTC(2099, 11, 31, 23, 59, 59, 999));

      expect(new Century(0).max).to.eql(Date.UTC(99, 11, 31, 23, 59, 59, 999));
    });
  });
});