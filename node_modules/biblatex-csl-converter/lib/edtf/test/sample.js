'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('..'),
    sample = _require.sample,
    p = _require.parse;

describe('sample', function () {

  it('iterator', function () {
    expect([].concat((0, _toConsumableArray3.default)(sample({ count: 5 })))).to.have.length(5);
  });

  describe('constraints', function () {
    it('level 0', function () {
      return expect((0, _from2.default)(sample({ count: 10, level: 0 }))).to.satisfy(function (dates) {
        return dates.every(function (d) {
          return p(d).level === 0;
        });
      });
    });

    it('level 1', function () {
      return expect((0, _from2.default)(sample({ count: 10, level: 1 }))).to.satisfy(function (dates) {
        return dates.every(function (d) {
          return p(d).level <= 1;
        });
      });
    });

    it('level 2', function () {
      return expect((0, _from2.default)(sample({ count: 10, level: 2 }))).to.satisfy(function (dates) {
        return dates.every(function (d) {
          return p(d).level <= 2;
        });
      });
    });

    it('impossible combinations', function () {
      expect(function () {
        return sample({ level: 0, type: 'Season' }).next();
      }).to.throw('impossible');

      expect(function () {
        return sample({ level: 1, type: 'Set' }).next();
      }).to.throw('impossible');
    });
  });
});